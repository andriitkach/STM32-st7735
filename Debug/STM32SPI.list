
STM32SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d04  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08006e94  08006e94  00016e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006f80  08006f80  00016f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006f88  08006f88  00016f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006f8c  08006f8c  00016f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00008010  20000000  08006f90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00028010  2**0
                  CONTENTS
  8 .bss          0000eb6c  20008010  20008010  00028010  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20016b7c  20016b7c  00028010  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00028010  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001abbc  00000000  00000000  00028040  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000031dd  00000000  00000000  00042bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000015b0  00000000  00000000  00045de0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001448  00000000  00000000  00047390  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000abc8  00000000  00000000  000487d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000742c  00000000  00000000  000533a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0005a7cc  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005b78  00000000  00000000  0005a848  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20008010 	.word	0x20008010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006e7c 	.word	0x08006e7c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20008014 	.word	0x20008014
 80001cc:	08006e7c 	.word	0x08006e7c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b97a 	b.w	80004dc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	468c      	mov	ip, r1
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	9e08      	ldr	r6, [sp, #32]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d151      	bne.n	80002b4 <__udivmoddi4+0xb4>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d96d      	bls.n	80002f2 <__udivmoddi4+0xf2>
 8000216:	fab2 fe82 	clz	lr, r2
 800021a:	f1be 0f00 	cmp.w	lr, #0
 800021e:	d00b      	beq.n	8000238 <__udivmoddi4+0x38>
 8000220:	f1ce 0c20 	rsb	ip, lr, #32
 8000224:	fa01 f50e 	lsl.w	r5, r1, lr
 8000228:	fa20 fc0c 	lsr.w	ip, r0, ip
 800022c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000230:	ea4c 0c05 	orr.w	ip, ip, r5
 8000234:	fa00 f40e 	lsl.w	r4, r0, lr
 8000238:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800023c:	0c25      	lsrs	r5, r4, #16
 800023e:	fbbc f8fa 	udiv	r8, ip, sl
 8000242:	fa1f f987 	uxth.w	r9, r7
 8000246:	fb0a cc18 	mls	ip, sl, r8, ip
 800024a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800024e:	fb08 f309 	mul.w	r3, r8, r9
 8000252:	42ab      	cmp	r3, r5
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x6c>
 8000256:	19ed      	adds	r5, r5, r7
 8000258:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800025c:	f080 8123 	bcs.w	80004a6 <__udivmoddi4+0x2a6>
 8000260:	42ab      	cmp	r3, r5
 8000262:	f240 8120 	bls.w	80004a6 <__udivmoddi4+0x2a6>
 8000266:	f1a8 0802 	sub.w	r8, r8, #2
 800026a:	443d      	add	r5, r7
 800026c:	1aed      	subs	r5, r5, r3
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb5 f0fa 	udiv	r0, r5, sl
 8000274:	fb0a 5510 	mls	r5, sl, r0, r5
 8000278:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800027c:	fb00 f909 	mul.w	r9, r0, r9
 8000280:	45a1      	cmp	r9, r4
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x98>
 8000284:	19e4      	adds	r4, r4, r7
 8000286:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028a:	f080 810a 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800028e:	45a1      	cmp	r9, r4
 8000290:	f240 8107 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 8000294:	3802      	subs	r0, #2
 8000296:	443c      	add	r4, r7
 8000298:	eba4 0409 	sub.w	r4, r4, r9
 800029c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a0:	2100      	movs	r1, #0
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	d061      	beq.n	800036a <__udivmoddi4+0x16a>
 80002a6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002aa:	2300      	movs	r3, #0
 80002ac:	6034      	str	r4, [r6, #0]
 80002ae:	6073      	str	r3, [r6, #4]
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d907      	bls.n	80002c8 <__udivmoddi4+0xc8>
 80002b8:	2e00      	cmp	r6, #0
 80002ba:	d054      	beq.n	8000366 <__udivmoddi4+0x166>
 80002bc:	2100      	movs	r1, #0
 80002be:	e886 0021 	stmia.w	r6, {r0, r5}
 80002c2:	4608      	mov	r0, r1
 80002c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c8:	fab3 f183 	clz	r1, r3
 80002cc:	2900      	cmp	r1, #0
 80002ce:	f040 808e 	bne.w	80003ee <__udivmoddi4+0x1ee>
 80002d2:	42ab      	cmp	r3, r5
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xdc>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80fa 	bhi.w	80004d0 <__udivmoddi4+0x2d0>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb65 0503 	sbc.w	r5, r5, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	46ac      	mov	ip, r5
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d03f      	beq.n	800036a <__udivmoddi4+0x16a>
 80002ea:	e886 1010 	stmia.w	r6, {r4, ip}
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	b912      	cbnz	r2, 80002fa <__udivmoddi4+0xfa>
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb7 f7f2 	udiv	r7, r7, r2
 80002fa:	fab7 fe87 	clz	lr, r7
 80002fe:	f1be 0f00 	cmp.w	lr, #0
 8000302:	d134      	bne.n	800036e <__udivmoddi4+0x16e>
 8000304:	1beb      	subs	r3, r5, r7
 8000306:	0c3a      	lsrs	r2, r7, #16
 8000308:	fa1f fc87 	uxth.w	ip, r7
 800030c:	2101      	movs	r1, #1
 800030e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000312:	0c25      	lsrs	r5, r4, #16
 8000314:	fb02 3318 	mls	r3, r2, r8, r3
 8000318:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800031c:	fb0c f308 	mul.w	r3, ip, r8
 8000320:	42ab      	cmp	r3, r5
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x134>
 8000324:	19ed      	adds	r5, r5, r7
 8000326:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x132>
 800032c:	42ab      	cmp	r3, r5
 800032e:	f200 80d1 	bhi.w	80004d4 <__udivmoddi4+0x2d4>
 8000332:	4680      	mov	r8, r0
 8000334:	1aed      	subs	r5, r5, r3
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb5 f0f2 	udiv	r0, r5, r2
 800033c:	fb02 5510 	mls	r5, r2, r0, r5
 8000340:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000344:	fb0c fc00 	mul.w	ip, ip, r0
 8000348:	45a4      	cmp	ip, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x15c>
 800034c:	19e4      	adds	r4, r4, r7
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x15a>
 8000354:	45a4      	cmp	ip, r4
 8000356:	f200 80b8 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 040c 	sub.w	r4, r4, ip
 8000360:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000364:	e79d      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000366:	4631      	mov	r1, r6
 8000368:	4630      	mov	r0, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	f1ce 0420 	rsb	r4, lr, #32
 8000372:	fa05 f30e 	lsl.w	r3, r5, lr
 8000376:	fa07 f70e 	lsl.w	r7, r7, lr
 800037a:	fa20 f804 	lsr.w	r8, r0, r4
 800037e:	0c3a      	lsrs	r2, r7, #16
 8000380:	fa25 f404 	lsr.w	r4, r5, r4
 8000384:	ea48 0803 	orr.w	r8, r8, r3
 8000388:	fbb4 f1f2 	udiv	r1, r4, r2
 800038c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000390:	fb02 4411 	mls	r4, r2, r1, r4
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800039c:	fb01 f30c 	mul.w	r3, r1, ip
 80003a0:	42ab      	cmp	r3, r5
 80003a2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1bc>
 80003a8:	19ed      	adds	r5, r5, r7
 80003aa:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003ae:	f080 808a 	bcs.w	80004c6 <__udivmoddi4+0x2c6>
 80003b2:	42ab      	cmp	r3, r5
 80003b4:	f240 8087 	bls.w	80004c6 <__udivmoddi4+0x2c6>
 80003b8:	3902      	subs	r1, #2
 80003ba:	443d      	add	r5, r7
 80003bc:	1aeb      	subs	r3, r5, r3
 80003be:	fa1f f588 	uxth.w	r5, r8
 80003c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003c6:	fb02 3310 	mls	r3, r2, r0, r3
 80003ca:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ce:	fb00 f30c 	mul.w	r3, r0, ip
 80003d2:	42ab      	cmp	r3, r5
 80003d4:	d907      	bls.n	80003e6 <__udivmoddi4+0x1e6>
 80003d6:	19ed      	adds	r5, r5, r7
 80003d8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80003dc:	d26f      	bcs.n	80004be <__udivmoddi4+0x2be>
 80003de:	42ab      	cmp	r3, r5
 80003e0:	d96d      	bls.n	80004be <__udivmoddi4+0x2be>
 80003e2:	3802      	subs	r0, #2
 80003e4:	443d      	add	r5, r7
 80003e6:	1aeb      	subs	r3, r5, r3
 80003e8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ec:	e78f      	b.n	800030e <__udivmoddi4+0x10e>
 80003ee:	f1c1 0720 	rsb	r7, r1, #32
 80003f2:	fa22 f807 	lsr.w	r8, r2, r7
 80003f6:	408b      	lsls	r3, r1
 80003f8:	fa05 f401 	lsl.w	r4, r5, r1
 80003fc:	ea48 0303 	orr.w	r3, r8, r3
 8000400:	fa20 fe07 	lsr.w	lr, r0, r7
 8000404:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000408:	40fd      	lsrs	r5, r7
 800040a:	ea4e 0e04 	orr.w	lr, lr, r4
 800040e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000412:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000416:	fb0c 5519 	mls	r5, ip, r9, r5
 800041a:	fa1f f883 	uxth.w	r8, r3
 800041e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000422:	fb09 f408 	mul.w	r4, r9, r8
 8000426:	42ac      	cmp	r4, r5
 8000428:	fa02 f201 	lsl.w	r2, r2, r1
 800042c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x244>
 8000432:	18ed      	adds	r5, r5, r3
 8000434:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000438:	d243      	bcs.n	80004c2 <__udivmoddi4+0x2c2>
 800043a:	42ac      	cmp	r4, r5
 800043c:	d941      	bls.n	80004c2 <__udivmoddi4+0x2c2>
 800043e:	f1a9 0902 	sub.w	r9, r9, #2
 8000442:	441d      	add	r5, r3
 8000444:	1b2d      	subs	r5, r5, r4
 8000446:	fa1f fe8e 	uxth.w	lr, lr
 800044a:	fbb5 f0fc 	udiv	r0, r5, ip
 800044e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000452:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000456:	fb00 f808 	mul.w	r8, r0, r8
 800045a:	45a0      	cmp	r8, r4
 800045c:	d907      	bls.n	800046e <__udivmoddi4+0x26e>
 800045e:	18e4      	adds	r4, r4, r3
 8000460:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000464:	d229      	bcs.n	80004ba <__udivmoddi4+0x2ba>
 8000466:	45a0      	cmp	r8, r4
 8000468:	d927      	bls.n	80004ba <__udivmoddi4+0x2ba>
 800046a:	3802      	subs	r0, #2
 800046c:	441c      	add	r4, r3
 800046e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000472:	eba4 0408 	sub.w	r4, r4, r8
 8000476:	fba0 8902 	umull	r8, r9, r0, r2
 800047a:	454c      	cmp	r4, r9
 800047c:	46c6      	mov	lr, r8
 800047e:	464d      	mov	r5, r9
 8000480:	d315      	bcc.n	80004ae <__udivmoddi4+0x2ae>
 8000482:	d012      	beq.n	80004aa <__udivmoddi4+0x2aa>
 8000484:	b156      	cbz	r6, 800049c <__udivmoddi4+0x29c>
 8000486:	ebba 030e 	subs.w	r3, sl, lr
 800048a:	eb64 0405 	sbc.w	r4, r4, r5
 800048e:	fa04 f707 	lsl.w	r7, r4, r7
 8000492:	40cb      	lsrs	r3, r1
 8000494:	431f      	orrs	r7, r3
 8000496:	40cc      	lsrs	r4, r1
 8000498:	6037      	str	r7, [r6, #0]
 800049a:	6074      	str	r4, [r6, #4]
 800049c:	2100      	movs	r1, #0
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	4618      	mov	r0, r3
 80004a4:	e6f8      	b.n	8000298 <__udivmoddi4+0x98>
 80004a6:	4690      	mov	r8, r2
 80004a8:	e6e0      	b.n	800026c <__udivmoddi4+0x6c>
 80004aa:	45c2      	cmp	sl, r8
 80004ac:	d2ea      	bcs.n	8000484 <__udivmoddi4+0x284>
 80004ae:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b2:	eb69 0503 	sbc.w	r5, r9, r3
 80004b6:	3801      	subs	r0, #1
 80004b8:	e7e4      	b.n	8000484 <__udivmoddi4+0x284>
 80004ba:	4628      	mov	r0, r5
 80004bc:	e7d7      	b.n	800046e <__udivmoddi4+0x26e>
 80004be:	4640      	mov	r0, r8
 80004c0:	e791      	b.n	80003e6 <__udivmoddi4+0x1e6>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e7be      	b.n	8000444 <__udivmoddi4+0x244>
 80004c6:	4601      	mov	r1, r0
 80004c8:	e778      	b.n	80003bc <__udivmoddi4+0x1bc>
 80004ca:	3802      	subs	r0, #2
 80004cc:	443c      	add	r4, r7
 80004ce:	e745      	b.n	800035c <__udivmoddi4+0x15c>
 80004d0:	4608      	mov	r0, r1
 80004d2:	e708      	b.n	80002e6 <__udivmoddi4+0xe6>
 80004d4:	f1a8 0802 	sub.w	r8, r8, #2
 80004d8:	443d      	add	r5, r7
 80004da:	e72b      	b.n	8000334 <__udivmoddi4+0x134>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004e4:	4a0e      	ldr	r2, [pc, #56]	; (8000520 <HAL_Init+0x40>)
 80004e6:	4b0e      	ldr	r3, [pc, #56]	; (8000520 <HAL_Init+0x40>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004f0:	4a0b      	ldr	r2, [pc, #44]	; (8000520 <HAL_Init+0x40>)
 80004f2:	4b0b      	ldr	r3, [pc, #44]	; (8000520 <HAL_Init+0x40>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004fc:	4a08      	ldr	r2, [pc, #32]	; (8000520 <HAL_Init+0x40>)
 80004fe:	4b08      	ldr	r3, [pc, #32]	; (8000520 <HAL_Init+0x40>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000506:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000508:	2003      	movs	r0, #3
 800050a:	f000 f8f8 	bl	80006fe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800050e:	2000      	movs	r0, #0
 8000510:	f006 fba0 	bl	8006c54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000514:	f006 fa42 	bl	800699c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000518:	2300      	movs	r3, #0
}
 800051a:	4618      	mov	r0, r3
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	40023c00 	.word	0x40023c00

08000524 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000528:	4b06      	ldr	r3, [pc, #24]	; (8000544 <HAL_IncTick+0x20>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	461a      	mov	r2, r3
 800052e:	4b06      	ldr	r3, [pc, #24]	; (8000548 <HAL_IncTick+0x24>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4413      	add	r3, r2
 8000534:	4a04      	ldr	r2, [pc, #16]	; (8000548 <HAL_IncTick+0x24>)
 8000536:	6013      	str	r3, [r2, #0]
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	20000004 	.word	0x20000004
 8000548:	20016938 	.word	0x20016938

0800054c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  return uwTick;
 8000550:	4b03      	ldr	r3, [pc, #12]	; (8000560 <HAL_GetTick+0x14>)
 8000552:	681b      	ldr	r3, [r3, #0]
}
 8000554:	4618      	mov	r0, r3
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	20016938 	.word	0x20016938

08000564 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800056c:	f7ff ffee 	bl	800054c <HAL_GetTick>
 8000570:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800057c:	d005      	beq.n	800058a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800057e:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <HAL_Delay+0x40>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	461a      	mov	r2, r3
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	4413      	add	r3, r2
 8000588:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800058a:	bf00      	nop
 800058c:	f7ff ffde 	bl	800054c <HAL_GetTick>
 8000590:	4602      	mov	r2, r0
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	1ad2      	subs	r2, r2, r3
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	429a      	cmp	r2, r3
 800059a:	d3f7      	bcc.n	800058c <HAL_Delay+0x28>
  {
  }
}
 800059c:	bf00      	nop
 800059e:	3710      	adds	r7, #16
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20000004 	.word	0x20000004

080005a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b085      	sub	sp, #20
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	f003 0307 	and.w	r3, r3, #7
 80005b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005b8:	4b0c      	ldr	r3, [pc, #48]	; (80005ec <__NVIC_SetPriorityGrouping+0x44>)
 80005ba:	68db      	ldr	r3, [r3, #12]
 80005bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005be:	68ba      	ldr	r2, [r7, #8]
 80005c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005c4:	4013      	ands	r3, r2
 80005c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005cc:	68bb      	ldr	r3, [r7, #8]
 80005ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005da:	4a04      	ldr	r2, [pc, #16]	; (80005ec <__NVIC_SetPriorityGrouping+0x44>)
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	60d3      	str	r3, [r2, #12]
}
 80005e0:	bf00      	nop
 80005e2:	3714      	adds	r7, #20
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr
 80005ec:	e000ed00 	.word	0xe000ed00

080005f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005f4:	4b04      	ldr	r3, [pc, #16]	; (8000608 <__NVIC_GetPriorityGrouping+0x18>)
 80005f6:	68db      	ldr	r3, [r3, #12]
 80005f8:	0a1b      	lsrs	r3, r3, #8
 80005fa:	f003 0307 	and.w	r3, r3, #7
}
 80005fe:	4618      	mov	r0, r3
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr
 8000608:	e000ed00 	.word	0xe000ed00

0800060c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800061a:	2b00      	cmp	r3, #0
 800061c:	db0b      	blt.n	8000636 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800061e:	4909      	ldr	r1, [pc, #36]	; (8000644 <__NVIC_EnableIRQ+0x38>)
 8000620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000624:	095b      	lsrs	r3, r3, #5
 8000626:	79fa      	ldrb	r2, [r7, #7]
 8000628:	f002 021f 	and.w	r2, r2, #31
 800062c:	2001      	movs	r0, #1
 800062e:	fa00 f202 	lsl.w	r2, r0, r2
 8000632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000636:	bf00      	nop
 8000638:	370c      	adds	r7, #12
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	e000e100 	.word	0xe000e100

08000648 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	6039      	str	r1, [r7, #0]
 8000652:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000658:	2b00      	cmp	r3, #0
 800065a:	db0a      	blt.n	8000672 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800065c:	490d      	ldr	r1, [pc, #52]	; (8000694 <__NVIC_SetPriority+0x4c>)
 800065e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000662:	683a      	ldr	r2, [r7, #0]
 8000664:	b2d2      	uxtb	r2, r2
 8000666:	0112      	lsls	r2, r2, #4
 8000668:	b2d2      	uxtb	r2, r2
 800066a:	440b      	add	r3, r1
 800066c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000670:	e00a      	b.n	8000688 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000672:	4909      	ldr	r1, [pc, #36]	; (8000698 <__NVIC_SetPriority+0x50>)
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	f003 030f 	and.w	r3, r3, #15
 800067a:	3b04      	subs	r3, #4
 800067c:	683a      	ldr	r2, [r7, #0]
 800067e:	b2d2      	uxtb	r2, r2
 8000680:	0112      	lsls	r2, r2, #4
 8000682:	b2d2      	uxtb	r2, r2
 8000684:	440b      	add	r3, r1
 8000686:	761a      	strb	r2, [r3, #24]
}
 8000688:	bf00      	nop
 800068a:	370c      	adds	r7, #12
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr
 8000694:	e000e100 	.word	0xe000e100
 8000698:	e000ed00 	.word	0xe000ed00

0800069c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800069c:	b480      	push	{r7}
 800069e:	b089      	sub	sp, #36	; 0x24
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	60f8      	str	r0, [r7, #12]
 80006a4:	60b9      	str	r1, [r7, #8]
 80006a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	f003 0307 	and.w	r3, r3, #7
 80006ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006b0:	69fb      	ldr	r3, [r7, #28]
 80006b2:	f1c3 0307 	rsb	r3, r3, #7
 80006b6:	2b04      	cmp	r3, #4
 80006b8:	bf28      	it	cs
 80006ba:	2304      	movcs	r3, #4
 80006bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006be:	69fb      	ldr	r3, [r7, #28]
 80006c0:	3304      	adds	r3, #4
 80006c2:	2b06      	cmp	r3, #6
 80006c4:	d902      	bls.n	80006cc <NVIC_EncodePriority+0x30>
 80006c6:	69fb      	ldr	r3, [r7, #28]
 80006c8:	3b03      	subs	r3, #3
 80006ca:	e000      	b.n	80006ce <NVIC_EncodePriority+0x32>
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d0:	2201      	movs	r2, #1
 80006d2:	69bb      	ldr	r3, [r7, #24]
 80006d4:	fa02 f303 	lsl.w	r3, r2, r3
 80006d8:	1e5a      	subs	r2, r3, #1
 80006da:	68bb      	ldr	r3, [r7, #8]
 80006dc:	401a      	ands	r2, r3
 80006de:	697b      	ldr	r3, [r7, #20]
 80006e0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006e2:	2101      	movs	r1, #1
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	fa01 f303 	lsl.w	r3, r1, r3
 80006ea:	1e59      	subs	r1, r3, #1
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f0:	4313      	orrs	r3, r2
         );
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	3724      	adds	r7, #36	; 0x24
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr

080006fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006fe:	b580      	push	{r7, lr}
 8000700:	b082      	sub	sp, #8
 8000702:	af00      	add	r7, sp, #0
 8000704:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000706:	6878      	ldr	r0, [r7, #4]
 8000708:	f7ff ff4e 	bl	80005a8 <__NVIC_SetPriorityGrouping>
}
 800070c:	bf00      	nop
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000714:	b580      	push	{r7, lr}
 8000716:	b086      	sub	sp, #24
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	60b9      	str	r1, [r7, #8]
 800071e:	607a      	str	r2, [r7, #4]
 8000720:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000722:	2300      	movs	r3, #0
 8000724:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000726:	f7ff ff63 	bl	80005f0 <__NVIC_GetPriorityGrouping>
 800072a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800072c:	687a      	ldr	r2, [r7, #4]
 800072e:	68b9      	ldr	r1, [r7, #8]
 8000730:	6978      	ldr	r0, [r7, #20]
 8000732:	f7ff ffb3 	bl	800069c <NVIC_EncodePriority>
 8000736:	4602      	mov	r2, r0
 8000738:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800073c:	4611      	mov	r1, r2
 800073e:	4618      	mov	r0, r3
 8000740:	f7ff ff82 	bl	8000648 <__NVIC_SetPriority>
}
 8000744:	bf00      	nop
 8000746:	3718      	adds	r7, #24
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}

0800074c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ff56 	bl	800060c <__NVIC_EnableIRQ>
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b086      	sub	sp, #24
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000774:	f7ff feea 	bl	800054c <HAL_GetTick>
 8000778:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d101      	bne.n	8000784 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000780:	2301      	movs	r3, #1
 8000782:	e099      	b.n	80008b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2200      	movs	r2, #0
 8000788:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2202      	movs	r2, #2
 8000790:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	687a      	ldr	r2, [r7, #4]
 800079a:	6812      	ldr	r2, [r2, #0]
 800079c:	6812      	ldr	r2, [r2, #0]
 800079e:	f022 0201 	bic.w	r2, r2, #1
 80007a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80007a4:	e00f      	b.n	80007c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80007a6:	f7ff fed1 	bl	800054c <HAL_GetTick>
 80007aa:	4602      	mov	r2, r0
 80007ac:	693b      	ldr	r3, [r7, #16]
 80007ae:	1ad3      	subs	r3, r2, r3
 80007b0:	2b05      	cmp	r3, #5
 80007b2:	d908      	bls.n	80007c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2220      	movs	r2, #32
 80007b8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	2203      	movs	r2, #3
 80007be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80007c2:	2303      	movs	r3, #3
 80007c4:	e078      	b.n	80008b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f003 0301 	and.w	r3, r3, #1
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d1e8      	bne.n	80007a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80007dc:	697a      	ldr	r2, [r7, #20]
 80007de:	4b38      	ldr	r3, [pc, #224]	; (80008c0 <HAL_DMA_Init+0x158>)
 80007e0:	4013      	ands	r3, r2
 80007e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	685a      	ldr	r2, [r3, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	689b      	ldr	r3, [r3, #8]
 80007ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80007f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	691b      	ldr	r3, [r3, #16]
 80007f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80007fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	699b      	ldr	r3, [r3, #24]
 8000804:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800080a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	6a1b      	ldr	r3, [r3, #32]
 8000810:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000812:	697a      	ldr	r2, [r7, #20]
 8000814:	4313      	orrs	r3, r2
 8000816:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800081c:	2b04      	cmp	r3, #4
 800081e:	d107      	bne.n	8000830 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000828:	4313      	orrs	r3, r2
 800082a:	697a      	ldr	r2, [r7, #20]
 800082c:	4313      	orrs	r3, r2
 800082e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	697a      	ldr	r2, [r7, #20]
 8000836:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	695b      	ldr	r3, [r3, #20]
 800083e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	f023 0307 	bic.w	r3, r3, #7
 8000846:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800084c:	697a      	ldr	r2, [r7, #20]
 800084e:	4313      	orrs	r3, r2
 8000850:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000856:	2b04      	cmp	r3, #4
 8000858:	d117      	bne.n	800088a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800085e:	697a      	ldr	r2, [r7, #20]
 8000860:	4313      	orrs	r3, r2
 8000862:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000868:	2b00      	cmp	r3, #0
 800086a:	d00e      	beq.n	800088a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800086c:	6878      	ldr	r0, [r7, #4]
 800086e:	f000 fa91 	bl	8000d94 <DMA_CheckFifoParam>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d008      	beq.n	800088a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2240      	movs	r2, #64	; 0x40
 800087c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2201      	movs	r2, #1
 8000882:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000886:	2301      	movs	r3, #1
 8000888:	e016      	b.n	80008b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	697a      	ldr	r2, [r7, #20]
 8000890:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000892:	6878      	ldr	r0, [r7, #4]
 8000894:	f000 fa48 	bl	8000d28 <DMA_CalcBaseAndBitshift>
 8000898:	4603      	mov	r3, r0
 800089a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80008a0:	223f      	movs	r2, #63	; 0x3f
 80008a2:	409a      	lsls	r2, r3
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2200      	movs	r2, #0
 80008ac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	2201      	movs	r2, #1
 80008b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80008b6:	2300      	movs	r3, #0
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3718      	adds	r7, #24
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	f010803f 	.word	0xf010803f

080008c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b086      	sub	sp, #24
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	60f8      	str	r0, [r7, #12]
 80008cc:	60b9      	str	r1, [r7, #8]
 80008ce:	607a      	str	r2, [r7, #4]
 80008d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80008d2:	2300      	movs	r3, #0
 80008d4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008da:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d101      	bne.n	80008ea <HAL_DMA_Start_IT+0x26>
 80008e6:	2302      	movs	r3, #2
 80008e8:	e040      	b.n	800096c <HAL_DMA_Start_IT+0xa8>
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	2201      	movs	r2, #1
 80008ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d12f      	bne.n	800095e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	2202      	movs	r2, #2
 8000902:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	2200      	movs	r2, #0
 800090a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	687a      	ldr	r2, [r7, #4]
 8000910:	68b9      	ldr	r1, [r7, #8]
 8000912:	68f8      	ldr	r0, [r7, #12]
 8000914:	f000 f9da 	bl	8000ccc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800091c:	223f      	movs	r2, #63	; 0x3f
 800091e:	409a      	lsls	r2, r3
 8000920:	693b      	ldr	r3, [r7, #16]
 8000922:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	68fa      	ldr	r2, [r7, #12]
 800092a:	6812      	ldr	r2, [r2, #0]
 800092c:	6812      	ldr	r2, [r2, #0]
 800092e:	f042 0216 	orr.w	r2, r2, #22
 8000932:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000938:	2b00      	cmp	r3, #0
 800093a:	d007      	beq.n	800094c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	68fa      	ldr	r2, [r7, #12]
 8000942:	6812      	ldr	r2, [r2, #0]
 8000944:	6812      	ldr	r2, [r2, #0]
 8000946:	f042 0208 	orr.w	r2, r2, #8
 800094a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	68fa      	ldr	r2, [r7, #12]
 8000952:	6812      	ldr	r2, [r2, #0]
 8000954:	6812      	ldr	r2, [r2, #0]
 8000956:	f042 0201 	orr.w	r2, r2, #1
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	e005      	b.n	800096a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	2200      	movs	r2, #0
 8000962:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000966:	2302      	movs	r3, #2
 8000968:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800096a:	7dfb      	ldrb	r3, [r7, #23]
}
 800096c:	4618      	mov	r0, r3
 800096e:	3718      	adds	r7, #24
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}

08000974 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000982:	b2db      	uxtb	r3, r3
 8000984:	2b02      	cmp	r3, #2
 8000986:	d004      	beq.n	8000992 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	2280      	movs	r2, #128	; 0x80
 800098c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800098e:	2301      	movs	r3, #1
 8000990:	e00c      	b.n	80009ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2205      	movs	r2, #5
 8000996:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	687a      	ldr	r2, [r7, #4]
 80009a0:	6812      	ldr	r2, [r2, #0]
 80009a2:	6812      	ldr	r2, [r2, #0]
 80009a4:	f022 0201 	bic.w	r2, r2, #1
 80009a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80009aa:	2300      	movs	r3, #0
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b086      	sub	sp, #24
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80009c0:	2300      	movs	r3, #0
 80009c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80009c4:	4b92      	ldr	r3, [pc, #584]	; (8000c10 <HAL_DMA_IRQHandler+0x258>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a92      	ldr	r2, [pc, #584]	; (8000c14 <HAL_DMA_IRQHandler+0x25c>)
 80009ca:	fba2 2303 	umull	r2, r3, r2, r3
 80009ce:	0a9b      	lsrs	r3, r3, #10
 80009d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80009d8:	693b      	ldr	r3, [r7, #16]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009e2:	2208      	movs	r2, #8
 80009e4:	409a      	lsls	r2, r3
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	4013      	ands	r3, r2
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d01a      	beq.n	8000a24 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f003 0304 	and.w	r3, r3, #4
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d013      	beq.n	8000a24 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	687a      	ldr	r2, [r7, #4]
 8000a02:	6812      	ldr	r2, [r2, #0]
 8000a04:	6812      	ldr	r2, [r2, #0]
 8000a06:	f022 0204 	bic.w	r2, r2, #4
 8000a0a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a10:	2208      	movs	r2, #8
 8000a12:	409a      	lsls	r2, r3
 8000a14:	693b      	ldr	r3, [r7, #16]
 8000a16:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a1c:	f043 0201 	orr.w	r2, r3, #1
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a28:	2201      	movs	r2, #1
 8000a2a:	409a      	lsls	r2, r3
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	4013      	ands	r3, r2
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d012      	beq.n	8000a5a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	695b      	ldr	r3, [r3, #20]
 8000a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d00b      	beq.n	8000a5a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a46:	2201      	movs	r2, #1
 8000a48:	409a      	lsls	r2, r3
 8000a4a:	693b      	ldr	r3, [r7, #16]
 8000a4c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a52:	f043 0202 	orr.w	r2, r3, #2
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a5e:	2204      	movs	r2, #4
 8000a60:	409a      	lsls	r2, r3
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	4013      	ands	r3, r2
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d012      	beq.n	8000a90 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f003 0302 	and.w	r3, r3, #2
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d00b      	beq.n	8000a90 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a7c:	2204      	movs	r2, #4
 8000a7e:	409a      	lsls	r2, r3
 8000a80:	693b      	ldr	r3, [r7, #16]
 8000a82:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a88:	f043 0204 	orr.w	r2, r3, #4
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a94:	2210      	movs	r2, #16
 8000a96:	409a      	lsls	r2, r3
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d043      	beq.n	8000b28 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f003 0308 	and.w	r3, r3, #8
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d03c      	beq.n	8000b28 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ab2:	2210      	movs	r2, #16
 8000ab4:	409a      	lsls	r2, r3
 8000ab6:	693b      	ldr	r3, [r7, #16]
 8000ab8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d018      	beq.n	8000afa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d108      	bne.n	8000ae8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d024      	beq.n	8000b28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	4798      	blx	r3
 8000ae6:	e01f      	b.n	8000b28 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d01b      	beq.n	8000b28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	4798      	blx	r3
 8000af8:	e016      	b.n	8000b28 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d107      	bne.n	8000b18 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	687a      	ldr	r2, [r7, #4]
 8000b0e:	6812      	ldr	r2, [r2, #0]
 8000b10:	6812      	ldr	r2, [r2, #0]
 8000b12:	f022 0208 	bic.w	r2, r2, #8
 8000b16:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d003      	beq.n	8000b28 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b2c:	2220      	movs	r2, #32
 8000b2e:	409a      	lsls	r2, r3
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	4013      	ands	r3, r2
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	f000 808e 	beq.w	8000c56 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f003 0310 	and.w	r3, r3, #16
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	f000 8086 	beq.w	8000c56 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b4e:	2220      	movs	r2, #32
 8000b50:	409a      	lsls	r2, r3
 8000b52:	693b      	ldr	r3, [r7, #16]
 8000b54:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	2b05      	cmp	r3, #5
 8000b60:	d136      	bne.n	8000bd0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	6812      	ldr	r2, [r2, #0]
 8000b6a:	6812      	ldr	r2, [r2, #0]
 8000b6c:	f022 0216 	bic.w	r2, r2, #22
 8000b70:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	6812      	ldr	r2, [r2, #0]
 8000b7a:	6952      	ldr	r2, [r2, #20]
 8000b7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000b80:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d103      	bne.n	8000b92 <HAL_DMA_IRQHandler+0x1da>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d007      	beq.n	8000ba2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	687a      	ldr	r2, [r7, #4]
 8000b98:	6812      	ldr	r2, [r2, #0]
 8000b9a:	6812      	ldr	r2, [r2, #0]
 8000b9c:	f022 0208 	bic.w	r2, r2, #8
 8000ba0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ba6:	223f      	movs	r2, #63	; 0x3f
 8000ba8:	409a      	lsls	r2, r3
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2201      	movs	r2, #1
 8000bba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d07d      	beq.n	8000cc2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000bca:	6878      	ldr	r0, [r7, #4]
 8000bcc:	4798      	blx	r3
        }
        return;
 8000bce:	e078      	b.n	8000cc2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d01c      	beq.n	8000c18 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d108      	bne.n	8000bfe <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d030      	beq.n	8000c56 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	4798      	blx	r3
 8000bfc:	e02b      	b.n	8000c56 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d027      	beq.n	8000c56 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c0a:	6878      	ldr	r0, [r7, #4]
 8000c0c:	4798      	blx	r3
 8000c0e:	e022      	b.n	8000c56 <HAL_DMA_IRQHandler+0x29e>
 8000c10:	2000800c 	.word	0x2000800c
 8000c14:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d10f      	bne.n	8000c46 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	6812      	ldr	r2, [r2, #0]
 8000c2e:	6812      	ldr	r2, [r2, #0]
 8000c30:	f022 0210 	bic.w	r2, r2, #16
 8000c34:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2200      	movs	r2, #0
 8000c3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2201      	movs	r2, #1
 8000c42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d003      	beq.n	8000c56 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d032      	beq.n	8000cc4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d022      	beq.n	8000cb0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2205      	movs	r2, #5
 8000c6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	6812      	ldr	r2, [r2, #0]
 8000c7a:	6812      	ldr	r2, [r2, #0]
 8000c7c:	f022 0201 	bic.w	r2, r2, #1
 8000c80:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	3301      	adds	r3, #1
 8000c86:	60bb      	str	r3, [r7, #8]
 8000c88:	697a      	ldr	r2, [r7, #20]
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d807      	bhi.n	8000c9e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f003 0301 	and.w	r3, r3, #1
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d1f2      	bne.n	8000c82 <HAL_DMA_IRQHandler+0x2ca>
 8000c9c:	e000      	b.n	8000ca0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8000c9e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2201      	movs	r2, #1
 8000cac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d005      	beq.n	8000cc4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	4798      	blx	r3
 8000cc0:	e000      	b.n	8000cc4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8000cc2:	bf00      	nop
    }
  }
}
 8000cc4:	3718      	adds	r7, #24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop

08000ccc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	607a      	str	r2, [r7, #4]
 8000cd8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	68fa      	ldr	r2, [r7, #12]
 8000ce0:	6812      	ldr	r2, [r2, #0]
 8000ce2:	6812      	ldr	r2, [r2, #0]
 8000ce4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000ce8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	683a      	ldr	r2, [r7, #0]
 8000cf0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	689b      	ldr	r3, [r3, #8]
 8000cf6:	2b40      	cmp	r3, #64	; 0x40
 8000cf8:	d108      	bne.n	8000d0c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	68ba      	ldr	r2, [r7, #8]
 8000d08:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8000d0a:	e007      	b.n	8000d1c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	68ba      	ldr	r2, [r7, #8]
 8000d12:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	60da      	str	r2, [r3, #12]
}
 8000d1c:	bf00      	nop
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b085      	sub	sp, #20
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	3b10      	subs	r3, #16
 8000d38:	4a14      	ldr	r2, [pc, #80]	; (8000d8c <DMA_CalcBaseAndBitshift+0x64>)
 8000d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d3e:	091b      	lsrs	r3, r3, #4
 8000d40:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000d42:	4a13      	ldr	r2, [pc, #76]	; (8000d90 <DMA_CalcBaseAndBitshift+0x68>)
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	4413      	add	r3, r2
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	2b03      	cmp	r3, #3
 8000d54:	d909      	bls.n	8000d6a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000d5e:	f023 0303 	bic.w	r3, r3, #3
 8000d62:	1d1a      	adds	r2, r3, #4
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	659a      	str	r2, [r3, #88]	; 0x58
 8000d68:	e007      	b.n	8000d7a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000d72:	f023 0303 	bic.w	r3, r3, #3
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3714      	adds	r7, #20
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	aaaaaaab 	.word	0xaaaaaaab
 8000d90:	08006ec4 	.word	0x08006ec4

08000d94 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000da4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	699b      	ldr	r3, [r3, #24]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d11f      	bne.n	8000dee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	2b03      	cmp	r3, #3
 8000db2:	d855      	bhi.n	8000e60 <DMA_CheckFifoParam+0xcc>
 8000db4:	a201      	add	r2, pc, #4	; (adr r2, 8000dbc <DMA_CheckFifoParam+0x28>)
 8000db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dba:	bf00      	nop
 8000dbc:	08000dcd 	.word	0x08000dcd
 8000dc0:	08000ddf 	.word	0x08000ddf
 8000dc4:	08000dcd 	.word	0x08000dcd
 8000dc8:	08000e61 	.word	0x08000e61
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d045      	beq.n	8000e64 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000ddc:	e042      	b.n	8000e64 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000de2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000de6:	d13f      	bne.n	8000e68 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8000de8:	2301      	movs	r3, #1
 8000dea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000dec:	e03c      	b.n	8000e68 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	699b      	ldr	r3, [r3, #24]
 8000df2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000df6:	d121      	bne.n	8000e3c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	2b03      	cmp	r3, #3
 8000dfc:	d836      	bhi.n	8000e6c <DMA_CheckFifoParam+0xd8>
 8000dfe:	a201      	add	r2, pc, #4	; (adr r2, 8000e04 <DMA_CheckFifoParam+0x70>)
 8000e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e04:	08000e15 	.word	0x08000e15
 8000e08:	08000e1b 	.word	0x08000e1b
 8000e0c:	08000e15 	.word	0x08000e15
 8000e10:	08000e2d 	.word	0x08000e2d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000e14:	2301      	movs	r3, #1
 8000e16:	73fb      	strb	r3, [r7, #15]
      break;
 8000e18:	e02f      	b.n	8000e7a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d024      	beq.n	8000e70 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
 8000e28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000e2a:	e021      	b.n	8000e70 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e30:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000e34:	d11e      	bne.n	8000e74 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000e3a:	e01b      	b.n	8000e74 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	2b02      	cmp	r3, #2
 8000e40:	d902      	bls.n	8000e48 <DMA_CheckFifoParam+0xb4>
 8000e42:	2b03      	cmp	r3, #3
 8000e44:	d003      	beq.n	8000e4e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8000e46:	e018      	b.n	8000e7a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	73fb      	strb	r3, [r7, #15]
      break;
 8000e4c:	e015      	b.n	8000e7a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d00e      	beq.n	8000e78 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	73fb      	strb	r3, [r7, #15]
      break;
 8000e5e:	e00b      	b.n	8000e78 <DMA_CheckFifoParam+0xe4>
      break;
 8000e60:	bf00      	nop
 8000e62:	e00a      	b.n	8000e7a <DMA_CheckFifoParam+0xe6>
      break;
 8000e64:	bf00      	nop
 8000e66:	e008      	b.n	8000e7a <DMA_CheckFifoParam+0xe6>
      break;
 8000e68:	bf00      	nop
 8000e6a:	e006      	b.n	8000e7a <DMA_CheckFifoParam+0xe6>
      break;
 8000e6c:	bf00      	nop
 8000e6e:	e004      	b.n	8000e7a <DMA_CheckFifoParam+0xe6>
      break;
 8000e70:	bf00      	nop
 8000e72:	e002      	b.n	8000e7a <DMA_CheckFifoParam+0xe6>
      break;   
 8000e74:	bf00      	nop
 8000e76:	e000      	b.n	8000e7a <DMA_CheckFifoParam+0xe6>
      break;
 8000e78:	bf00      	nop
    }
  } 
  
  return status; 
 8000e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3714      	adds	r7, #20
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b089      	sub	sp, #36	; 0x24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e96:	2300      	movs	r3, #0
 8000e98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61fb      	str	r3, [r7, #28]
 8000ea2:	e16b      	b.n	800117c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	f040 815a 	bne.w	8001176 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d00b      	beq.n	8000ee2 <HAL_GPIO_Init+0x5a>
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	2b02      	cmp	r3, #2
 8000ed0:	d007      	beq.n	8000ee2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ed6:	2b11      	cmp	r3, #17
 8000ed8:	d003      	beq.n	8000ee2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	2b12      	cmp	r3, #18
 8000ee0:	d130      	bne.n	8000f44 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	2203      	movs	r2, #3
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	68da      	ldr	r2, [r3, #12]
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f18:	2201      	movs	r2, #1
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	43db      	mvns	r3, r3
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	4013      	ands	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	091b      	lsrs	r3, r3, #4
 8000f2e:	f003 0201 	and.w	r2, r3, #1
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	2203      	movs	r2, #3
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	689a      	ldr	r2, [r3, #8]
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d003      	beq.n	8000f84 <HAL_GPIO_Init+0xfc>
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	2b12      	cmp	r3, #18
 8000f82:	d123      	bne.n	8000fcc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	08da      	lsrs	r2, r3, #3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3208      	adds	r2, #8
 8000f8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	f003 0307 	and.w	r3, r3, #7
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	220f      	movs	r2, #15
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	691a      	ldr	r2, [r3, #16]
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	f003 0307 	and.w	r3, r3, #7
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	08da      	lsrs	r2, r3, #3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	3208      	adds	r2, #8
 8000fc6:	69b9      	ldr	r1, [r7, #24]
 8000fc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	2203      	movs	r2, #3
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f003 0203 	and.w	r2, r3, #3
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001008:	2b00      	cmp	r3, #0
 800100a:	f000 80b4 	beq.w	8001176 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	4a5f      	ldr	r2, [pc, #380]	; (8001190 <HAL_GPIO_Init+0x308>)
 8001014:	4b5e      	ldr	r3, [pc, #376]	; (8001190 <HAL_GPIO_Init+0x308>)
 8001016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001018:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800101c:	6453      	str	r3, [r2, #68]	; 0x44
 800101e:	4b5c      	ldr	r3, [pc, #368]	; (8001190 <HAL_GPIO_Init+0x308>)
 8001020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001022:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800102a:	4a5a      	ldr	r2, [pc, #360]	; (8001194 <HAL_GPIO_Init+0x30c>)
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	089b      	lsrs	r3, r3, #2
 8001030:	3302      	adds	r3, #2
 8001032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001036:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	f003 0303 	and.w	r3, r3, #3
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	220f      	movs	r2, #15
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43db      	mvns	r3, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4013      	ands	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a51      	ldr	r2, [pc, #324]	; (8001198 <HAL_GPIO_Init+0x310>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d02b      	beq.n	80010ae <HAL_GPIO_Init+0x226>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a50      	ldr	r2, [pc, #320]	; (800119c <HAL_GPIO_Init+0x314>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d025      	beq.n	80010aa <HAL_GPIO_Init+0x222>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a4f      	ldr	r2, [pc, #316]	; (80011a0 <HAL_GPIO_Init+0x318>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d01f      	beq.n	80010a6 <HAL_GPIO_Init+0x21e>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a4e      	ldr	r2, [pc, #312]	; (80011a4 <HAL_GPIO_Init+0x31c>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d019      	beq.n	80010a2 <HAL_GPIO_Init+0x21a>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a4d      	ldr	r2, [pc, #308]	; (80011a8 <HAL_GPIO_Init+0x320>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d013      	beq.n	800109e <HAL_GPIO_Init+0x216>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a4c      	ldr	r2, [pc, #304]	; (80011ac <HAL_GPIO_Init+0x324>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d00d      	beq.n	800109a <HAL_GPIO_Init+0x212>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a4b      	ldr	r2, [pc, #300]	; (80011b0 <HAL_GPIO_Init+0x328>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d007      	beq.n	8001096 <HAL_GPIO_Init+0x20e>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a4a      	ldr	r2, [pc, #296]	; (80011b4 <HAL_GPIO_Init+0x32c>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d101      	bne.n	8001092 <HAL_GPIO_Init+0x20a>
 800108e:	2307      	movs	r3, #7
 8001090:	e00e      	b.n	80010b0 <HAL_GPIO_Init+0x228>
 8001092:	2308      	movs	r3, #8
 8001094:	e00c      	b.n	80010b0 <HAL_GPIO_Init+0x228>
 8001096:	2306      	movs	r3, #6
 8001098:	e00a      	b.n	80010b0 <HAL_GPIO_Init+0x228>
 800109a:	2305      	movs	r3, #5
 800109c:	e008      	b.n	80010b0 <HAL_GPIO_Init+0x228>
 800109e:	2304      	movs	r3, #4
 80010a0:	e006      	b.n	80010b0 <HAL_GPIO_Init+0x228>
 80010a2:	2303      	movs	r3, #3
 80010a4:	e004      	b.n	80010b0 <HAL_GPIO_Init+0x228>
 80010a6:	2302      	movs	r3, #2
 80010a8:	e002      	b.n	80010b0 <HAL_GPIO_Init+0x228>
 80010aa:	2301      	movs	r3, #1
 80010ac:	e000      	b.n	80010b0 <HAL_GPIO_Init+0x228>
 80010ae:	2300      	movs	r3, #0
 80010b0:	69fa      	ldr	r2, [r7, #28]
 80010b2:	f002 0203 	and.w	r2, r2, #3
 80010b6:	0092      	lsls	r2, r2, #2
 80010b8:	4093      	lsls	r3, r2
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4313      	orrs	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010c0:	4934      	ldr	r1, [pc, #208]	; (8001194 <HAL_GPIO_Init+0x30c>)
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	089b      	lsrs	r3, r3, #2
 80010c6:	3302      	adds	r3, #2
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010ce:	4b3a      	ldr	r3, [pc, #232]	; (80011b8 <HAL_GPIO_Init+0x330>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	43db      	mvns	r3, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4013      	ands	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d003      	beq.n	80010f2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010f2:	4a31      	ldr	r2, [pc, #196]	; (80011b8 <HAL_GPIO_Init+0x330>)
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010f8:	4b2f      	ldr	r3, [pc, #188]	; (80011b8 <HAL_GPIO_Init+0x330>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	43db      	mvns	r3, r3
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4013      	ands	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d003      	beq.n	800111c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	4313      	orrs	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800111c:	4a26      	ldr	r2, [pc, #152]	; (80011b8 <HAL_GPIO_Init+0x330>)
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001122:	4b25      	ldr	r3, [pc, #148]	; (80011b8 <HAL_GPIO_Init+0x330>)
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	43db      	mvns	r3, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4013      	ands	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d003      	beq.n	8001146 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	4313      	orrs	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001146:	4a1c      	ldr	r2, [pc, #112]	; (80011b8 <HAL_GPIO_Init+0x330>)
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800114c:	4b1a      	ldr	r3, [pc, #104]	; (80011b8 <HAL_GPIO_Init+0x330>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	43db      	mvns	r3, r3
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4013      	ands	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	4313      	orrs	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001170:	4a11      	ldr	r2, [pc, #68]	; (80011b8 <HAL_GPIO_Init+0x330>)
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	3301      	adds	r3, #1
 800117a:	61fb      	str	r3, [r7, #28]
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	2b0f      	cmp	r3, #15
 8001180:	f67f ae90 	bls.w	8000ea4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001184:	bf00      	nop
 8001186:	3724      	adds	r7, #36	; 0x24
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	40023800 	.word	0x40023800
 8001194:	40013800 	.word	0x40013800
 8001198:	40020000 	.word	0x40020000
 800119c:	40020400 	.word	0x40020400
 80011a0:	40020800 	.word	0x40020800
 80011a4:	40020c00 	.word	0x40020c00
 80011a8:	40021000 	.word	0x40021000
 80011ac:	40021400 	.word	0x40021400
 80011b0:	40021800 	.word	0x40021800
 80011b4:	40021c00 	.word	0x40021c00
 80011b8:	40013c00 	.word	0x40013c00

080011bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	460b      	mov	r3, r1
 80011c6:	807b      	strh	r3, [r7, #2]
 80011c8:	4613      	mov	r3, r2
 80011ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011cc:	787b      	ldrb	r3, [r7, #1]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d003      	beq.n	80011da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011d2:	887a      	ldrh	r2, [r7, #2]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011d8:	e003      	b.n	80011e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011da:	887b      	ldrh	r3, [r7, #2]
 80011dc:	041a      	lsls	r2, r3, #16
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	619a      	str	r2, [r3, #24]
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d101      	bne.n	8001202 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e25b      	b.n	80016ba <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	2b00      	cmp	r3, #0
 800120c:	d075      	beq.n	80012fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800120e:	4ba3      	ldr	r3, [pc, #652]	; (800149c <HAL_RCC_OscConfig+0x2ac>)
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	f003 030c 	and.w	r3, r3, #12
 8001216:	2b04      	cmp	r3, #4
 8001218:	d00c      	beq.n	8001234 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800121a:	4ba0      	ldr	r3, [pc, #640]	; (800149c <HAL_RCC_OscConfig+0x2ac>)
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001222:	2b08      	cmp	r3, #8
 8001224:	d112      	bne.n	800124c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001226:	4b9d      	ldr	r3, [pc, #628]	; (800149c <HAL_RCC_OscConfig+0x2ac>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800122e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001232:	d10b      	bne.n	800124c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001234:	4b99      	ldr	r3, [pc, #612]	; (800149c <HAL_RCC_OscConfig+0x2ac>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d05b      	beq.n	80012f8 <HAL_RCC_OscConfig+0x108>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d157      	bne.n	80012f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	e236      	b.n	80016ba <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001254:	d106      	bne.n	8001264 <HAL_RCC_OscConfig+0x74>
 8001256:	4a91      	ldr	r2, [pc, #580]	; (800149c <HAL_RCC_OscConfig+0x2ac>)
 8001258:	4b90      	ldr	r3, [pc, #576]	; (800149c <HAL_RCC_OscConfig+0x2ac>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001260:	6013      	str	r3, [r2, #0]
 8001262:	e01d      	b.n	80012a0 <HAL_RCC_OscConfig+0xb0>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800126c:	d10c      	bne.n	8001288 <HAL_RCC_OscConfig+0x98>
 800126e:	4a8b      	ldr	r2, [pc, #556]	; (800149c <HAL_RCC_OscConfig+0x2ac>)
 8001270:	4b8a      	ldr	r3, [pc, #552]	; (800149c <HAL_RCC_OscConfig+0x2ac>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001278:	6013      	str	r3, [r2, #0]
 800127a:	4a88      	ldr	r2, [pc, #544]	; (800149c <HAL_RCC_OscConfig+0x2ac>)
 800127c:	4b87      	ldr	r3, [pc, #540]	; (800149c <HAL_RCC_OscConfig+0x2ac>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001284:	6013      	str	r3, [r2, #0]
 8001286:	e00b      	b.n	80012a0 <HAL_RCC_OscConfig+0xb0>
 8001288:	4a84      	ldr	r2, [pc, #528]	; (800149c <HAL_RCC_OscConfig+0x2ac>)
 800128a:	4b84      	ldr	r3, [pc, #528]	; (800149c <HAL_RCC_OscConfig+0x2ac>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001292:	6013      	str	r3, [r2, #0]
 8001294:	4a81      	ldr	r2, [pc, #516]	; (800149c <HAL_RCC_OscConfig+0x2ac>)
 8001296:	4b81      	ldr	r3, [pc, #516]	; (800149c <HAL_RCC_OscConfig+0x2ac>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800129e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d013      	beq.n	80012d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a8:	f7ff f950 	bl	800054c <HAL_GetTick>
 80012ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ae:	e008      	b.n	80012c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012b0:	f7ff f94c 	bl	800054c <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b64      	cmp	r3, #100	; 0x64
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e1fb      	b.n	80016ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012c2:	4b76      	ldr	r3, [pc, #472]	; (800149c <HAL_RCC_OscConfig+0x2ac>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d0f0      	beq.n	80012b0 <HAL_RCC_OscConfig+0xc0>
 80012ce:	e014      	b.n	80012fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d0:	f7ff f93c 	bl	800054c <HAL_GetTick>
 80012d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012d6:	e008      	b.n	80012ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012d8:	f7ff f938 	bl	800054c <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b64      	cmp	r3, #100	; 0x64
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e1e7      	b.n	80016ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ea:	4b6c      	ldr	r3, [pc, #432]	; (800149c <HAL_RCC_OscConfig+0x2ac>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d1f0      	bne.n	80012d8 <HAL_RCC_OscConfig+0xe8>
 80012f6:	e000      	b.n	80012fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	2b00      	cmp	r3, #0
 8001304:	d063      	beq.n	80013ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001306:	4b65      	ldr	r3, [pc, #404]	; (800149c <HAL_RCC_OscConfig+0x2ac>)
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f003 030c 	and.w	r3, r3, #12
 800130e:	2b00      	cmp	r3, #0
 8001310:	d00b      	beq.n	800132a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001312:	4b62      	ldr	r3, [pc, #392]	; (800149c <HAL_RCC_OscConfig+0x2ac>)
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800131a:	2b08      	cmp	r3, #8
 800131c:	d11c      	bne.n	8001358 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800131e:	4b5f      	ldr	r3, [pc, #380]	; (800149c <HAL_RCC_OscConfig+0x2ac>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d116      	bne.n	8001358 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800132a:	4b5c      	ldr	r3, [pc, #368]	; (800149c <HAL_RCC_OscConfig+0x2ac>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d005      	beq.n	8001342 <HAL_RCC_OscConfig+0x152>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d001      	beq.n	8001342 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e1bb      	b.n	80016ba <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001342:	4956      	ldr	r1, [pc, #344]	; (800149c <HAL_RCC_OscConfig+0x2ac>)
 8001344:	4b55      	ldr	r3, [pc, #340]	; (800149c <HAL_RCC_OscConfig+0x2ac>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	691b      	ldr	r3, [r3, #16]
 8001350:	00db      	lsls	r3, r3, #3
 8001352:	4313      	orrs	r3, r2
 8001354:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001356:	e03a      	b.n	80013ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d020      	beq.n	80013a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001360:	4b4f      	ldr	r3, [pc, #316]	; (80014a0 <HAL_RCC_OscConfig+0x2b0>)
 8001362:	2201      	movs	r2, #1
 8001364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001366:	f7ff f8f1 	bl	800054c <HAL_GetTick>
 800136a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800136c:	e008      	b.n	8001380 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800136e:	f7ff f8ed 	bl	800054c <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e19c      	b.n	80016ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001380:	4b46      	ldr	r3, [pc, #280]	; (800149c <HAL_RCC_OscConfig+0x2ac>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 0302 	and.w	r3, r3, #2
 8001388:	2b00      	cmp	r3, #0
 800138a:	d0f0      	beq.n	800136e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800138c:	4943      	ldr	r1, [pc, #268]	; (800149c <HAL_RCC_OscConfig+0x2ac>)
 800138e:	4b43      	ldr	r3, [pc, #268]	; (800149c <HAL_RCC_OscConfig+0x2ac>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	691b      	ldr	r3, [r3, #16]
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	4313      	orrs	r3, r2
 800139e:	600b      	str	r3, [r1, #0]
 80013a0:	e015      	b.n	80013ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013a2:	4b3f      	ldr	r3, [pc, #252]	; (80014a0 <HAL_RCC_OscConfig+0x2b0>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a8:	f7ff f8d0 	bl	800054c <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013b0:	f7ff f8cc 	bl	800054c <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e17b      	b.n	80016ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013c2:	4b36      	ldr	r3, [pc, #216]	; (800149c <HAL_RCC_OscConfig+0x2ac>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1f0      	bne.n	80013b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0308 	and.w	r3, r3, #8
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d030      	beq.n	800143c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	695b      	ldr	r3, [r3, #20]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d016      	beq.n	8001410 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013e2:	4b30      	ldr	r3, [pc, #192]	; (80014a4 <HAL_RCC_OscConfig+0x2b4>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013e8:	f7ff f8b0 	bl	800054c <HAL_GetTick>
 80013ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013f0:	f7ff f8ac 	bl	800054c <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e15b      	b.n	80016ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001402:	4b26      	ldr	r3, [pc, #152]	; (800149c <HAL_RCC_OscConfig+0x2ac>)
 8001404:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d0f0      	beq.n	80013f0 <HAL_RCC_OscConfig+0x200>
 800140e:	e015      	b.n	800143c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001410:	4b24      	ldr	r3, [pc, #144]	; (80014a4 <HAL_RCC_OscConfig+0x2b4>)
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001416:	f7ff f899 	bl	800054c <HAL_GetTick>
 800141a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800141c:	e008      	b.n	8001430 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800141e:	f7ff f895 	bl	800054c <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d901      	bls.n	8001430 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e144      	b.n	80016ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001430:	4b1a      	ldr	r3, [pc, #104]	; (800149c <HAL_RCC_OscConfig+0x2ac>)
 8001432:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001434:	f003 0302 	and.w	r3, r3, #2
 8001438:	2b00      	cmp	r3, #0
 800143a:	d1f0      	bne.n	800141e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0304 	and.w	r3, r3, #4
 8001444:	2b00      	cmp	r3, #0
 8001446:	f000 80a0 	beq.w	800158a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800144a:	2300      	movs	r3, #0
 800144c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800144e:	4b13      	ldr	r3, [pc, #76]	; (800149c <HAL_RCC_OscConfig+0x2ac>)
 8001450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d10f      	bne.n	800147a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	60bb      	str	r3, [r7, #8]
 800145e:	4a0f      	ldr	r2, [pc, #60]	; (800149c <HAL_RCC_OscConfig+0x2ac>)
 8001460:	4b0e      	ldr	r3, [pc, #56]	; (800149c <HAL_RCC_OscConfig+0x2ac>)
 8001462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001468:	6413      	str	r3, [r2, #64]	; 0x40
 800146a:	4b0c      	ldr	r3, [pc, #48]	; (800149c <HAL_RCC_OscConfig+0x2ac>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001472:	60bb      	str	r3, [r7, #8]
 8001474:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001476:	2301      	movs	r3, #1
 8001478:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800147a:	4b0b      	ldr	r3, [pc, #44]	; (80014a8 <HAL_RCC_OscConfig+0x2b8>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001482:	2b00      	cmp	r3, #0
 8001484:	d121      	bne.n	80014ca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001486:	4a08      	ldr	r2, [pc, #32]	; (80014a8 <HAL_RCC_OscConfig+0x2b8>)
 8001488:	4b07      	ldr	r3, [pc, #28]	; (80014a8 <HAL_RCC_OscConfig+0x2b8>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001490:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001492:	f7ff f85b 	bl	800054c <HAL_GetTick>
 8001496:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001498:	e011      	b.n	80014be <HAL_RCC_OscConfig+0x2ce>
 800149a:	bf00      	nop
 800149c:	40023800 	.word	0x40023800
 80014a0:	42470000 	.word	0x42470000
 80014a4:	42470e80 	.word	0x42470e80
 80014a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ac:	f7ff f84e 	bl	800054c <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e0fd      	b.n	80016ba <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014be:	4b81      	ldr	r3, [pc, #516]	; (80016c4 <HAL_RCC_OscConfig+0x4d4>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d0f0      	beq.n	80014ac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d106      	bne.n	80014e0 <HAL_RCC_OscConfig+0x2f0>
 80014d2:	4a7d      	ldr	r2, [pc, #500]	; (80016c8 <HAL_RCC_OscConfig+0x4d8>)
 80014d4:	4b7c      	ldr	r3, [pc, #496]	; (80016c8 <HAL_RCC_OscConfig+0x4d8>)
 80014d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	6713      	str	r3, [r2, #112]	; 0x70
 80014de:	e01c      	b.n	800151a <HAL_RCC_OscConfig+0x32a>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	2b05      	cmp	r3, #5
 80014e6:	d10c      	bne.n	8001502 <HAL_RCC_OscConfig+0x312>
 80014e8:	4a77      	ldr	r2, [pc, #476]	; (80016c8 <HAL_RCC_OscConfig+0x4d8>)
 80014ea:	4b77      	ldr	r3, [pc, #476]	; (80016c8 <HAL_RCC_OscConfig+0x4d8>)
 80014ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ee:	f043 0304 	orr.w	r3, r3, #4
 80014f2:	6713      	str	r3, [r2, #112]	; 0x70
 80014f4:	4a74      	ldr	r2, [pc, #464]	; (80016c8 <HAL_RCC_OscConfig+0x4d8>)
 80014f6:	4b74      	ldr	r3, [pc, #464]	; (80016c8 <HAL_RCC_OscConfig+0x4d8>)
 80014f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014fa:	f043 0301 	orr.w	r3, r3, #1
 80014fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001500:	e00b      	b.n	800151a <HAL_RCC_OscConfig+0x32a>
 8001502:	4a71      	ldr	r2, [pc, #452]	; (80016c8 <HAL_RCC_OscConfig+0x4d8>)
 8001504:	4b70      	ldr	r3, [pc, #448]	; (80016c8 <HAL_RCC_OscConfig+0x4d8>)
 8001506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001508:	f023 0301 	bic.w	r3, r3, #1
 800150c:	6713      	str	r3, [r2, #112]	; 0x70
 800150e:	4a6e      	ldr	r2, [pc, #440]	; (80016c8 <HAL_RCC_OscConfig+0x4d8>)
 8001510:	4b6d      	ldr	r3, [pc, #436]	; (80016c8 <HAL_RCC_OscConfig+0x4d8>)
 8001512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001514:	f023 0304 	bic.w	r3, r3, #4
 8001518:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d015      	beq.n	800154e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001522:	f7ff f813 	bl	800054c <HAL_GetTick>
 8001526:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001528:	e00a      	b.n	8001540 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800152a:	f7ff f80f 	bl	800054c <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	f241 3288 	movw	r2, #5000	; 0x1388
 8001538:	4293      	cmp	r3, r2
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e0bc      	b.n	80016ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001540:	4b61      	ldr	r3, [pc, #388]	; (80016c8 <HAL_RCC_OscConfig+0x4d8>)
 8001542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001544:	f003 0302 	and.w	r3, r3, #2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d0ee      	beq.n	800152a <HAL_RCC_OscConfig+0x33a>
 800154c:	e014      	b.n	8001578 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800154e:	f7fe fffd 	bl	800054c <HAL_GetTick>
 8001552:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001554:	e00a      	b.n	800156c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001556:	f7fe fff9 	bl	800054c <HAL_GetTick>
 800155a:	4602      	mov	r2, r0
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	f241 3288 	movw	r2, #5000	; 0x1388
 8001564:	4293      	cmp	r3, r2
 8001566:	d901      	bls.n	800156c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e0a6      	b.n	80016ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800156c:	4b56      	ldr	r3, [pc, #344]	; (80016c8 <HAL_RCC_OscConfig+0x4d8>)
 800156e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001570:	f003 0302 	and.w	r3, r3, #2
 8001574:	2b00      	cmp	r3, #0
 8001576:	d1ee      	bne.n	8001556 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001578:	7dfb      	ldrb	r3, [r7, #23]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d105      	bne.n	800158a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800157e:	4a52      	ldr	r2, [pc, #328]	; (80016c8 <HAL_RCC_OscConfig+0x4d8>)
 8001580:	4b51      	ldr	r3, [pc, #324]	; (80016c8 <HAL_RCC_OscConfig+0x4d8>)
 8001582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001584:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001588:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	2b00      	cmp	r3, #0
 8001590:	f000 8092 	beq.w	80016b8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001594:	4b4c      	ldr	r3, [pc, #304]	; (80016c8 <HAL_RCC_OscConfig+0x4d8>)
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	f003 030c 	and.w	r3, r3, #12
 800159c:	2b08      	cmp	r3, #8
 800159e:	d05c      	beq.n	800165a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d141      	bne.n	800162c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015a8:	4b48      	ldr	r3, [pc, #288]	; (80016cc <HAL_RCC_OscConfig+0x4dc>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ae:	f7fe ffcd 	bl	800054c <HAL_GetTick>
 80015b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015b4:	e008      	b.n	80015c8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015b6:	f7fe ffc9 	bl	800054c <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d901      	bls.n	80015c8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e078      	b.n	80016ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015c8:	4b3f      	ldr	r3, [pc, #252]	; (80016c8 <HAL_RCC_OscConfig+0x4d8>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d1f0      	bne.n	80015b6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015d4:	493c      	ldr	r1, [pc, #240]	; (80016c8 <HAL_RCC_OscConfig+0x4d8>)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	69da      	ldr	r2, [r3, #28]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a1b      	ldr	r3, [r3, #32]
 80015de:	431a      	orrs	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e4:	019b      	lsls	r3, r3, #6
 80015e6:	431a      	orrs	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ec:	085b      	lsrs	r3, r3, #1
 80015ee:	3b01      	subs	r3, #1
 80015f0:	041b      	lsls	r3, r3, #16
 80015f2:	431a      	orrs	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f8:	061b      	lsls	r3, r3, #24
 80015fa:	4313      	orrs	r3, r2
 80015fc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015fe:	4b33      	ldr	r3, [pc, #204]	; (80016cc <HAL_RCC_OscConfig+0x4dc>)
 8001600:	2201      	movs	r2, #1
 8001602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001604:	f7fe ffa2 	bl	800054c <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800160c:	f7fe ff9e 	bl	800054c <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e04d      	b.n	80016ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800161e:	4b2a      	ldr	r3, [pc, #168]	; (80016c8 <HAL_RCC_OscConfig+0x4d8>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d0f0      	beq.n	800160c <HAL_RCC_OscConfig+0x41c>
 800162a:	e045      	b.n	80016b8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800162c:	4b27      	ldr	r3, [pc, #156]	; (80016cc <HAL_RCC_OscConfig+0x4dc>)
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001632:	f7fe ff8b 	bl	800054c <HAL_GetTick>
 8001636:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001638:	e008      	b.n	800164c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800163a:	f7fe ff87 	bl	800054c <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d901      	bls.n	800164c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e036      	b.n	80016ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800164c:	4b1e      	ldr	r3, [pc, #120]	; (80016c8 <HAL_RCC_OscConfig+0x4d8>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d1f0      	bne.n	800163a <HAL_RCC_OscConfig+0x44a>
 8001658:	e02e      	b.n	80016b8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	699b      	ldr	r3, [r3, #24]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d101      	bne.n	8001666 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e029      	b.n	80016ba <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001666:	4b18      	ldr	r3, [pc, #96]	; (80016c8 <HAL_RCC_OscConfig+0x4d8>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	69db      	ldr	r3, [r3, #28]
 8001676:	429a      	cmp	r2, r3
 8001678:	d11c      	bne.n	80016b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001684:	429a      	cmp	r2, r3
 8001686:	d115      	bne.n	80016b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001688:	68fa      	ldr	r2, [r7, #12]
 800168a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800168e:	4013      	ands	r3, r2
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001694:	4293      	cmp	r3, r2
 8001696:	d10d      	bne.n	80016b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d106      	bne.n	80016b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d001      	beq.n	80016b8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e000      	b.n	80016ba <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3718      	adds	r7, #24
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40007000 	.word	0x40007000
 80016c8:	40023800 	.word	0x40023800
 80016cc:	42470060 	.word	0x42470060

080016d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d101      	bne.n	80016e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e0cc      	b.n	800187e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016e4:	4b68      	ldr	r3, [pc, #416]	; (8001888 <HAL_RCC_ClockConfig+0x1b8>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 020f 	and.w	r2, r3, #15
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d20c      	bcs.n	800170c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016f2:	4b65      	ldr	r3, [pc, #404]	; (8001888 <HAL_RCC_ClockConfig+0x1b8>)
 80016f4:	683a      	ldr	r2, [r7, #0]
 80016f6:	b2d2      	uxtb	r2, r2
 80016f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016fa:	4b63      	ldr	r3, [pc, #396]	; (8001888 <HAL_RCC_ClockConfig+0x1b8>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 020f 	and.w	r2, r3, #15
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	429a      	cmp	r2, r3
 8001706:	d001      	beq.n	800170c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e0b8      	b.n	800187e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0302 	and.w	r3, r3, #2
 8001714:	2b00      	cmp	r3, #0
 8001716:	d020      	beq.n	800175a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0304 	and.w	r3, r3, #4
 8001720:	2b00      	cmp	r3, #0
 8001722:	d005      	beq.n	8001730 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001724:	4a59      	ldr	r2, [pc, #356]	; (800188c <HAL_RCC_ClockConfig+0x1bc>)
 8001726:	4b59      	ldr	r3, [pc, #356]	; (800188c <HAL_RCC_ClockConfig+0x1bc>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800172e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0308 	and.w	r3, r3, #8
 8001738:	2b00      	cmp	r3, #0
 800173a:	d005      	beq.n	8001748 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800173c:	4a53      	ldr	r2, [pc, #332]	; (800188c <HAL_RCC_ClockConfig+0x1bc>)
 800173e:	4b53      	ldr	r3, [pc, #332]	; (800188c <HAL_RCC_ClockConfig+0x1bc>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001746:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001748:	4950      	ldr	r1, [pc, #320]	; (800188c <HAL_RCC_ClockConfig+0x1bc>)
 800174a:	4b50      	ldr	r3, [pc, #320]	; (800188c <HAL_RCC_ClockConfig+0x1bc>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	4313      	orrs	r3, r2
 8001758:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	2b00      	cmp	r3, #0
 8001764:	d044      	beq.n	80017f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d107      	bne.n	800177e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800176e:	4b47      	ldr	r3, [pc, #284]	; (800188c <HAL_RCC_ClockConfig+0x1bc>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d119      	bne.n	80017ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e07f      	b.n	800187e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	2b02      	cmp	r3, #2
 8001784:	d003      	beq.n	800178e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800178a:	2b03      	cmp	r3, #3
 800178c:	d107      	bne.n	800179e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800178e:	4b3f      	ldr	r3, [pc, #252]	; (800188c <HAL_RCC_ClockConfig+0x1bc>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d109      	bne.n	80017ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e06f      	b.n	800187e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800179e:	4b3b      	ldr	r3, [pc, #236]	; (800188c <HAL_RCC_ClockConfig+0x1bc>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d101      	bne.n	80017ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e067      	b.n	800187e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017ae:	4937      	ldr	r1, [pc, #220]	; (800188c <HAL_RCC_ClockConfig+0x1bc>)
 80017b0:	4b36      	ldr	r3, [pc, #216]	; (800188c <HAL_RCC_ClockConfig+0x1bc>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f023 0203 	bic.w	r2, r3, #3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	4313      	orrs	r3, r2
 80017be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017c0:	f7fe fec4 	bl	800054c <HAL_GetTick>
 80017c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017c6:	e00a      	b.n	80017de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017c8:	f7fe fec0 	bl	800054c <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e04f      	b.n	800187e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017de:	4b2b      	ldr	r3, [pc, #172]	; (800188c <HAL_RCC_ClockConfig+0x1bc>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f003 020c 	and.w	r2, r3, #12
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d1eb      	bne.n	80017c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017f0:	4b25      	ldr	r3, [pc, #148]	; (8001888 <HAL_RCC_ClockConfig+0x1b8>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 020f 	and.w	r2, r3, #15
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d90c      	bls.n	8001818 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017fe:	4b22      	ldr	r3, [pc, #136]	; (8001888 <HAL_RCC_ClockConfig+0x1b8>)
 8001800:	683a      	ldr	r2, [r7, #0]
 8001802:	b2d2      	uxtb	r2, r2
 8001804:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001806:	4b20      	ldr	r3, [pc, #128]	; (8001888 <HAL_RCC_ClockConfig+0x1b8>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 020f 	and.w	r2, r3, #15
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	429a      	cmp	r2, r3
 8001812:	d001      	beq.n	8001818 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e032      	b.n	800187e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0304 	and.w	r3, r3, #4
 8001820:	2b00      	cmp	r3, #0
 8001822:	d008      	beq.n	8001836 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001824:	4919      	ldr	r1, [pc, #100]	; (800188c <HAL_RCC_ClockConfig+0x1bc>)
 8001826:	4b19      	ldr	r3, [pc, #100]	; (800188c <HAL_RCC_ClockConfig+0x1bc>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	4313      	orrs	r3, r2
 8001834:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0308 	and.w	r3, r3, #8
 800183e:	2b00      	cmp	r3, #0
 8001840:	d009      	beq.n	8001856 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001842:	4912      	ldr	r1, [pc, #72]	; (800188c <HAL_RCC_ClockConfig+0x1bc>)
 8001844:	4b11      	ldr	r3, [pc, #68]	; (800188c <HAL_RCC_ClockConfig+0x1bc>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	691b      	ldr	r3, [r3, #16]
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	4313      	orrs	r3, r2
 8001854:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001856:	f000 f821 	bl	800189c <HAL_RCC_GetSysClockFreq>
 800185a:	4601      	mov	r1, r0
 800185c:	4b0b      	ldr	r3, [pc, #44]	; (800188c <HAL_RCC_ClockConfig+0x1bc>)
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	091b      	lsrs	r3, r3, #4
 8001862:	f003 030f 	and.w	r3, r3, #15
 8001866:	4a0a      	ldr	r2, [pc, #40]	; (8001890 <HAL_RCC_ClockConfig+0x1c0>)
 8001868:	5cd3      	ldrb	r3, [r2, r3]
 800186a:	fa21 f303 	lsr.w	r3, r1, r3
 800186e:	4a09      	ldr	r2, [pc, #36]	; (8001894 <HAL_RCC_ClockConfig+0x1c4>)
 8001870:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001872:	4b09      	ldr	r3, [pc, #36]	; (8001898 <HAL_RCC_ClockConfig+0x1c8>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4618      	mov	r0, r3
 8001878:	f005 f9ec 	bl	8006c54 <HAL_InitTick>

  return HAL_OK;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40023c00 	.word	0x40023c00
 800188c:	40023800 	.word	0x40023800
 8001890:	08006f68 	.word	0x08006f68
 8001894:	2000800c 	.word	0x2000800c
 8001898:	20000000 	.word	0x20000000

0800189c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800189c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018a0:	b087      	sub	sp, #28
 80018a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018a4:	2200      	movs	r2, #0
 80018a6:	60fa      	str	r2, [r7, #12]
 80018a8:	2200      	movs	r2, #0
 80018aa:	617a      	str	r2, [r7, #20]
 80018ac:	2200      	movs	r2, #0
 80018ae:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0U;
 80018b0:	2200      	movs	r2, #0
 80018b2:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018b4:	4a51      	ldr	r2, [pc, #324]	; (80019fc <HAL_RCC_GetSysClockFreq+0x160>)
 80018b6:	6892      	ldr	r2, [r2, #8]
 80018b8:	f002 020c 	and.w	r2, r2, #12
 80018bc:	2a04      	cmp	r2, #4
 80018be:	d007      	beq.n	80018d0 <HAL_RCC_GetSysClockFreq+0x34>
 80018c0:	2a08      	cmp	r2, #8
 80018c2:	d008      	beq.n	80018d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80018c4:	2a00      	cmp	r2, #0
 80018c6:	f040 8090 	bne.w	80019ea <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018ca:	4b4d      	ldr	r3, [pc, #308]	; (8001a00 <HAL_RCC_GetSysClockFreq+0x164>)
 80018cc:	613b      	str	r3, [r7, #16]
       break;
 80018ce:	e08f      	b.n	80019f0 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018d0:	4b4c      	ldr	r3, [pc, #304]	; (8001a04 <HAL_RCC_GetSysClockFreq+0x168>)
 80018d2:	613b      	str	r3, [r7, #16]
      break;
 80018d4:	e08c      	b.n	80019f0 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018d6:	4a49      	ldr	r2, [pc, #292]	; (80019fc <HAL_RCC_GetSysClockFreq+0x160>)
 80018d8:	6852      	ldr	r2, [r2, #4]
 80018da:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80018de:	60fa      	str	r2, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018e0:	4a46      	ldr	r2, [pc, #280]	; (80019fc <HAL_RCC_GetSysClockFreq+0x160>)
 80018e2:	6852      	ldr	r2, [r2, #4]
 80018e4:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80018e8:	2a00      	cmp	r2, #0
 80018ea:	d023      	beq.n	8001934 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018ec:	4b43      	ldr	r3, [pc, #268]	; (80019fc <HAL_RCC_GetSysClockFreq+0x160>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	099b      	lsrs	r3, r3, #6
 80018f2:	f04f 0400 	mov.w	r4, #0
 80018f6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80018fa:	f04f 0200 	mov.w	r2, #0
 80018fe:	ea03 0301 	and.w	r3, r3, r1
 8001902:	ea04 0402 	and.w	r4, r4, r2
 8001906:	4a3f      	ldr	r2, [pc, #252]	; (8001a04 <HAL_RCC_GetSysClockFreq+0x168>)
 8001908:	fb02 f104 	mul.w	r1, r2, r4
 800190c:	2200      	movs	r2, #0
 800190e:	fb02 f203 	mul.w	r2, r2, r3
 8001912:	440a      	add	r2, r1
 8001914:	493b      	ldr	r1, [pc, #236]	; (8001a04 <HAL_RCC_GetSysClockFreq+0x168>)
 8001916:	fba3 0101 	umull	r0, r1, r3, r1
 800191a:	1853      	adds	r3, r2, r1
 800191c:	4619      	mov	r1, r3
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f04f 0400 	mov.w	r4, #0
 8001924:	461a      	mov	r2, r3
 8001926:	4623      	mov	r3, r4
 8001928:	f7fe fc52 	bl	80001d0 <__aeabi_uldivmod>
 800192c:	4603      	mov	r3, r0
 800192e:	460c      	mov	r4, r1
 8001930:	617b      	str	r3, [r7, #20]
 8001932:	e04c      	b.n	80019ce <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001934:	4a31      	ldr	r2, [pc, #196]	; (80019fc <HAL_RCC_GetSysClockFreq+0x160>)
 8001936:	6852      	ldr	r2, [r2, #4]
 8001938:	0992      	lsrs	r2, r2, #6
 800193a:	4611      	mov	r1, r2
 800193c:	f04f 0200 	mov.w	r2, #0
 8001940:	f240 15ff 	movw	r5, #511	; 0x1ff
 8001944:	f04f 0600 	mov.w	r6, #0
 8001948:	ea05 0501 	and.w	r5, r5, r1
 800194c:	ea06 0602 	and.w	r6, r6, r2
 8001950:	4629      	mov	r1, r5
 8001952:	4632      	mov	r2, r6
 8001954:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8001958:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 800195c:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 8001960:	4651      	mov	r1, sl
 8001962:	465a      	mov	r2, fp
 8001964:	46aa      	mov	sl, r5
 8001966:	46b3      	mov	fp, r6
 8001968:	4655      	mov	r5, sl
 800196a:	465e      	mov	r6, fp
 800196c:	1b4d      	subs	r5, r1, r5
 800196e:	eb62 0606 	sbc.w	r6, r2, r6
 8001972:	4629      	mov	r1, r5
 8001974:	4632      	mov	r2, r6
 8001976:	0194      	lsls	r4, r2, #6
 8001978:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800197c:	018b      	lsls	r3, r1, #6
 800197e:	1a5b      	subs	r3, r3, r1
 8001980:	eb64 0402 	sbc.w	r4, r4, r2
 8001984:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8001988:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 800198c:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8001990:	4643      	mov	r3, r8
 8001992:	464c      	mov	r4, r9
 8001994:	4655      	mov	r5, sl
 8001996:	465e      	mov	r6, fp
 8001998:	18ed      	adds	r5, r5, r3
 800199a:	eb46 0604 	adc.w	r6, r6, r4
 800199e:	462b      	mov	r3, r5
 80019a0:	4634      	mov	r4, r6
 80019a2:	02a2      	lsls	r2, r4, #10
 80019a4:	607a      	str	r2, [r7, #4]
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80019ac:	607a      	str	r2, [r7, #4]
 80019ae:	029b      	lsls	r3, r3, #10
 80019b0:	603b      	str	r3, [r7, #0]
 80019b2:	e897 0018 	ldmia.w	r7, {r3, r4}
 80019b6:	4618      	mov	r0, r3
 80019b8:	4621      	mov	r1, r4
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f04f 0400 	mov.w	r4, #0
 80019c0:	461a      	mov	r2, r3
 80019c2:	4623      	mov	r3, r4
 80019c4:	f7fe fc04 	bl	80001d0 <__aeabi_uldivmod>
 80019c8:	4603      	mov	r3, r0
 80019ca:	460c      	mov	r4, r1
 80019cc:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019ce:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <HAL_RCC_GetSysClockFreq+0x160>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	0c1b      	lsrs	r3, r3, #16
 80019d4:	f003 0303 	and.w	r3, r3, #3
 80019d8:	3301      	adds	r3, #1
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80019de:	697a      	ldr	r2, [r7, #20]
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e6:	613b      	str	r3, [r7, #16]
      break;
 80019e8:	e002      	b.n	80019f0 <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019ea:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <HAL_RCC_GetSysClockFreq+0x164>)
 80019ec:	613b      	str	r3, [r7, #16]
      break;
 80019ee:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019f0:	693b      	ldr	r3, [r7, #16]
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	371c      	adds	r7, #28
 80019f6:	46bd      	mov	sp, r7
 80019f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019fc:	40023800 	.word	0x40023800
 8001a00:	00f42400 	.word	0x00f42400
 8001a04:	017d7840 	.word	0x017d7840

08001a08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a0c:	4b03      	ldr	r3, [pc, #12]	; (8001a1c <HAL_RCC_GetHCLKFreq+0x14>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	2000800c 	.word	0x2000800c

08001a20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a24:	f7ff fff0 	bl	8001a08 <HAL_RCC_GetHCLKFreq>
 8001a28:	4601      	mov	r1, r0
 8001a2a:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	0a9b      	lsrs	r3, r3, #10
 8001a30:	f003 0307 	and.w	r3, r3, #7
 8001a34:	4a03      	ldr	r2, [pc, #12]	; (8001a44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a36:	5cd3      	ldrb	r3, [r2, r3]
 8001a38:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40023800 	.word	0x40023800
 8001a44:	08006f78 	.word	0x08006f78

08001a48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a4c:	f7ff ffdc 	bl	8001a08 <HAL_RCC_GetHCLKFreq>
 8001a50:	4601      	mov	r1, r0
 8001a52:	4b05      	ldr	r3, [pc, #20]	; (8001a68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	0b5b      	lsrs	r3, r3, #13
 8001a58:	f003 0307 	and.w	r3, r3, #7
 8001a5c:	4a03      	ldr	r2, [pc, #12]	; (8001a6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a5e:	5cd3      	ldrb	r3, [r2, r3]
 8001a60:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	08006f78 	.word	0x08006f78

08001a70 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	220f      	movs	r2, #15
 8001a7e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a80:	4b12      	ldr	r3, [pc, #72]	; (8001acc <HAL_RCC_GetClockConfig+0x5c>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f003 0203 	and.w	r2, r3, #3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a8c:	4b0f      	ldr	r3, [pc, #60]	; (8001acc <HAL_RCC_GetClockConfig+0x5c>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a98:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <HAL_RCC_GetClockConfig+0x5c>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001aa4:	4b09      	ldr	r3, [pc, #36]	; (8001acc <HAL_RCC_GetClockConfig+0x5c>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	08db      	lsrs	r3, r3, #3
 8001aaa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ab2:	4b07      	ldr	r3, [pc, #28]	; (8001ad0 <HAL_RCC_GetClockConfig+0x60>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 020f 	and.w	r2, r3, #15
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	601a      	str	r2, [r3, #0]
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	40023c00 	.word	0x40023c00

08001ad4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e055      	b.n	8001b92 <HAL_SPI_Init+0xbe>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d106      	bne.n	8001b06 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f004 ff77 	bl	80069f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2202      	movs	r2, #2
 8001b0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	6812      	ldr	r2, [r2, #0]
 8001b16:	6812      	ldr	r2, [r2, #0]
 8001b18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b1c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	6851      	ldr	r1, [r2, #4]
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	6892      	ldr	r2, [r2, #8]
 8001b2a:	4311      	orrs	r1, r2
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	68d2      	ldr	r2, [r2, #12]
 8001b30:	4311      	orrs	r1, r2
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	6912      	ldr	r2, [r2, #16]
 8001b36:	4311      	orrs	r1, r2
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	6952      	ldr	r2, [r2, #20]
 8001b3c:	4311      	orrs	r1, r2
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	6992      	ldr	r2, [r2, #24]
 8001b42:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001b46:	4311      	orrs	r1, r2
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	69d2      	ldr	r2, [r2, #28]
 8001b4c:	4311      	orrs	r1, r2
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	6a12      	ldr	r2, [r2, #32]
 8001b52:	4311      	orrs	r1, r2
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	6992      	ldr	r2, [r2, #24]
 8001b64:	0c12      	lsrs	r2, r2, #16
 8001b66:	f002 0104 	and.w	r1, r2, #4
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	6812      	ldr	r2, [r2, #0]
 8001b7a:	69d2      	ldr	r2, [r2, #28]
 8001b7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b80:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
	...

08001b9c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001baa:	2300      	movs	r3, #0
 8001bac:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d101      	bne.n	8001bbc <HAL_SPI_Transmit_DMA+0x20>
 8001bb8:	2302      	movs	r3, #2
 8001bba:	e093      	b.n	8001ce4 <HAL_SPI_Transmit_DMA+0x148>
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d002      	beq.n	8001bd6 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001bd4:	e081      	b.n	8001cda <HAL_SPI_Transmit_DMA+0x13e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d002      	beq.n	8001be2 <HAL_SPI_Transmit_DMA+0x46>
 8001bdc:	88fb      	ldrh	r3, [r7, #6]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d102      	bne.n	8001be8 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001be6:	e078      	b.n	8001cda <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2203      	movs	r2, #3
 8001bec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	68ba      	ldr	r2, [r7, #8]
 8001bfa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	88fa      	ldrh	r2, [r7, #6]
 8001c00:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	88fa      	ldrh	r2, [r7, #6]
 8001c06:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2200      	movs	r2, #0
 8001c12:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2200      	movs	r2, #0
 8001c18:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2200      	movs	r2, #0
 8001c24:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c2e:	d107      	bne.n	8001c40 <HAL_SPI_Transmit_DMA+0xa4>
  {
    SPI_1LINE_TX(hspi);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	68fa      	ldr	r2, [r7, #12]
 8001c36:	6812      	ldr	r2, [r2, #0]
 8001c38:	6812      	ldr	r2, [r2, #0]
 8001c3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c3e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c44:	4a29      	ldr	r2, [pc, #164]	; (8001cec <HAL_SPI_Transmit_DMA+0x150>)
 8001c46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c4c:	4a28      	ldr	r2, [pc, #160]	; (8001cf0 <HAL_SPI_Transmit_DMA+0x154>)
 8001c4e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c54:	4a27      	ldr	r2, [pc, #156]	; (8001cf4 <HAL_SPI_Transmit_DMA+0x158>)
 8001c56:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c68:	4619      	mov	r1, r3
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	330c      	adds	r3, #12
 8001c70:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c76:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8001c78:	f7fe fe24 	bl	80008c4 <HAL_DMA_Start_IT>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d00c      	beq.n	8001c9c <HAL_SPI_Transmit_DMA+0x100>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c86:	f043 0210 	orr.w	r2, r3, #16
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2201      	movs	r2, #1
 8001c96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8001c9a:	e01e      	b.n	8001cda <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ca6:	2b40      	cmp	r3, #64	; 0x40
 8001ca8:	d007      	beq.n	8001cba <HAL_SPI_Transmit_DMA+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	68fa      	ldr	r2, [r7, #12]
 8001cb0:	6812      	ldr	r2, [r2, #0]
 8001cb2:	6812      	ldr	r2, [r2, #0]
 8001cb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cb8:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	6812      	ldr	r2, [r2, #0]
 8001cc2:	6852      	ldr	r2, [r2, #4]
 8001cc4:	f042 0220 	orr.w	r2, r2, #32
 8001cc8:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	68fa      	ldr	r2, [r7, #12]
 8001cd0:	6812      	ldr	r2, [r2, #0]
 8001cd2:	6852      	ldr	r2, [r2, #4]
 8001cd4:	f042 0202 	orr.w	r2, r2, #2
 8001cd8:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001ce2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3718      	adds	r7, #24
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	08001fb5 	.word	0x08001fb5
 8001cf0:	08001f0d 	.word	0x08001f0d
 8001cf4:	08001fd1 	.word	0x08001fd1

08001cf8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b088      	sub	sp, #32
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d10e      	bne.n	8001d38 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d009      	beq.n	8001d38 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d004      	beq.n	8001d38 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	4798      	blx	r3
    return;
 8001d36:	e0cf      	b.n	8001ed8 <HAL_SPI_IRQHandler+0x1e0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d009      	beq.n	8001d56 <HAL_SPI_IRQHandler+0x5e>
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d004      	beq.n	8001d56 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	4798      	blx	r3
    return;
 8001d54:	e0c0      	b.n	8001ed8 <HAL_SPI_IRQHandler+0x1e0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	f003 0320 	and.w	r3, r3, #32
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d10a      	bne.n	8001d76 <HAL_SPI_IRQHandler+0x7e>
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d105      	bne.n	8001d76 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f000 80b1 	beq.w	8001ed8 <HAL_SPI_IRQHandler+0x1e0>
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	f003 0320 	and.w	r3, r3, #32
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f000 80ab 	beq.w	8001ed8 <HAL_SPI_IRQHandler+0x1e0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d023      	beq.n	8001dd4 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	2b03      	cmp	r3, #3
 8001d96:	d011      	beq.n	8001dbc <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d9c:	f043 0204 	orr.w	r2, r3, #4
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001da4:	2300      	movs	r3, #0
 8001da6:	617b      	str	r3, [r7, #20]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	617b      	str	r3, [r7, #20]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	617b      	str	r3, [r7, #20]
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	e00b      	b.n	8001dd4 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	613b      	str	r3, [r7, #16]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	613b      	str	r3, [r7, #16]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	613b      	str	r3, [r7, #16]
 8001dd0:	693b      	ldr	r3, [r7, #16]
        return;
 8001dd2:	e081      	b.n	8001ed8 <HAL_SPI_IRQHandler+0x1e0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	f003 0320 	and.w	r3, r3, #32
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d014      	beq.n	8001e08 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001de2:	f043 0201 	orr.w	r2, r3, #1
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8001dea:	2300      	movs	r3, #0
 8001dec:	60fb      	str	r3, [r7, #12]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	6812      	ldr	r2, [r2, #0]
 8001dfe:	6812      	ldr	r2, [r2, #0]
 8001e00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d00c      	beq.n	8001e2c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e16:	f043 0208 	orr.w	r2, r3, #8
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60bb      	str	r3, [r7, #8]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d050      	beq.n	8001ed6 <HAL_SPI_IRQHandler+0x1de>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	6812      	ldr	r2, [r2, #0]
 8001e3c:	6852      	ldr	r2, [r2, #4]
 8001e3e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001e42:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d104      	bne.n	8001e60 <HAL_SPI_IRQHandler+0x168>
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	f003 0301 	and.w	r3, r3, #1
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d034      	beq.n	8001eca <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	6812      	ldr	r2, [r2, #0]
 8001e68:	6852      	ldr	r2, [r2, #4]
 8001e6a:	f022 0203 	bic.w	r2, r2, #3
 8001e6e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d011      	beq.n	8001e9c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e7c:	4a18      	ldr	r2, [pc, #96]	; (8001ee0 <HAL_SPI_IRQHandler+0x1e8>)
 8001e7e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7fe fd75 	bl	8000974 <HAL_DMA_Abort_IT>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d005      	beq.n	8001e9c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e94:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d016      	beq.n	8001ed2 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ea8:	4a0d      	ldr	r2, [pc, #52]	; (8001ee0 <HAL_SPI_IRQHandler+0x1e8>)
 8001eaa:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7fe fd5f 	bl	8000974 <HAL_DMA_Abort_IT>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d00a      	beq.n	8001ed2 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8001ec8:	e003      	b.n	8001ed2 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 f814 	bl	8001ef8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8001ed0:	e000      	b.n	8001ed4 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8001ed2:	bf00      	nop
    return;
 8001ed4:	bf00      	nop
 8001ed6:	bf00      	nop
  }
}
 8001ed8:	3720      	adds	r7, #32
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	08002011 	.word	0x08002011

08001ee4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f18:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f1a:	f7fe fb17 	bl	800054c <HAL_GetTick>
 8001f1e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f2e:	d03b      	beq.n	8001fa8 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	697a      	ldr	r2, [r7, #20]
 8001f36:	6812      	ldr	r2, [r2, #0]
 8001f38:	6852      	ldr	r2, [r2, #4]
 8001f3a:	f022 0220 	bic.w	r2, r2, #32
 8001f3e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	697a      	ldr	r2, [r7, #20]
 8001f46:	6812      	ldr	r2, [r2, #0]
 8001f48:	6852      	ldr	r2, [r2, #4]
 8001f4a:	f022 0202 	bic.w	r2, r2, #2
 8001f4e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	2164      	movs	r1, #100	; 0x64
 8001f54:	6978      	ldr	r0, [r7, #20]
 8001f56:	f000 f8d9 	bl	800210c <SPI_EndRxTxTransaction>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d005      	beq.n	8001f6c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f64:	f043 0220 	orr.w	r2, r3, #32
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d10a      	bne.n	8001f8a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f74:	2300      	movs	r3, #0
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d003      	beq.n	8001fa8 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8001fa0:	6978      	ldr	r0, [r7, #20]
 8001fa2:	f7ff ffa9 	bl	8001ef8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8001fa6:	e002      	b.n	8001fae <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8001fa8:	6978      	ldr	r0, [r7, #20]
 8001faa:	f004 fcc3 	bl	8006934 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8001fae:	3718      	adds	r7, #24
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc0:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8001fc2:	68f8      	ldr	r0, [r7, #12]
 8001fc4:	f7ff ff8e 	bl	8001ee4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8001fc8:	bf00      	nop
 8001fca:	3710      	adds	r7, #16
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fdc:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	6812      	ldr	r2, [r2, #0]
 8001fe6:	6852      	ldr	r2, [r2, #4]
 8001fe8:	f022 0203 	bic.w	r2, r2, #3
 8001fec:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff2:	f043 0210 	orr.w	r2, r3, #16
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002002:	68f8      	ldr	r0, [r7, #12]
 8002004:	f7ff ff78 	bl	8001ef8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002008:	bf00      	nop
 800200a:	3710      	adds	r7, #16
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800201c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2200      	movs	r2, #0
 8002028:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800202a:	68f8      	ldr	r0, [r7, #12]
 800202c:	f7ff ff64 	bl	8001ef8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002030:	bf00      	nop
 8002032:	3710      	adds	r7, #16
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	603b      	str	r3, [r7, #0]
 8002044:	4613      	mov	r3, r2
 8002046:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002048:	e04c      	b.n	80020e4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002050:	d048      	beq.n	80020e4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002052:	f7fe fa7b 	bl	800054c <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	1ad2      	subs	r2, r2, r3
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	429a      	cmp	r2, r3
 8002060:	d202      	bcs.n	8002068 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d13d      	bne.n	80020e4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68fa      	ldr	r2, [r7, #12]
 800206e:	6812      	ldr	r2, [r2, #0]
 8002070:	6852      	ldr	r2, [r2, #4]
 8002072:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002076:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002080:	d111      	bne.n	80020a6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800208a:	d004      	beq.n	8002096 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002094:	d107      	bne.n	80020a6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	6812      	ldr	r2, [r2, #0]
 800209e:	6812      	ldr	r2, [r2, #0]
 80020a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020a4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020ae:	d10f      	bne.n	80020d0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68fa      	ldr	r2, [r7, #12]
 80020b6:	6812      	ldr	r2, [r2, #0]
 80020b8:	6812      	ldr	r2, [r2, #0]
 80020ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	6812      	ldr	r2, [r2, #0]
 80020c8:	6812      	ldr	r2, [r2, #0]
 80020ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020ce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e00f      	b.n	8002104 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	689a      	ldr	r2, [r3, #8]
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	401a      	ands	r2, r3
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	bf0c      	ite	eq
 80020f4:	2301      	moveq	r3, #1
 80020f6:	2300      	movne	r3, #0
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	461a      	mov	r2, r3
 80020fc:	79fb      	ldrb	r3, [r7, #7]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d1a3      	bne.n	800204a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	3710      	adds	r7, #16
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b088      	sub	sp, #32
 8002110:	af02      	add	r7, sp, #8
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002118:	4b1b      	ldr	r3, [pc, #108]	; (8002188 <SPI_EndRxTxTransaction+0x7c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a1b      	ldr	r2, [pc, #108]	; (800218c <SPI_EndRxTxTransaction+0x80>)
 800211e:	fba2 2303 	umull	r2, r3, r2, r3
 8002122:	0d5b      	lsrs	r3, r3, #21
 8002124:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002128:	fb02 f303 	mul.w	r3, r2, r3
 800212c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002136:	d112      	bne.n	800215e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	9300      	str	r3, [sp, #0]
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	2200      	movs	r2, #0
 8002140:	2180      	movs	r1, #128	; 0x80
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f7ff ff78 	bl	8002038 <SPI_WaitFlagStateUntilTimeout>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d016      	beq.n	800217c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002152:	f043 0220 	orr.w	r2, r3, #32
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e00f      	b.n	800217e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d00a      	beq.n	800217a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	3b01      	subs	r3, #1
 8002168:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002174:	2b80      	cmp	r3, #128	; 0x80
 8002176:	d0f2      	beq.n	800215e <SPI_EndRxTxTransaction+0x52>
 8002178:	e000      	b.n	800217c <SPI_EndRxTxTransaction+0x70>
        break;
 800217a:	bf00      	nop
  }

  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3718      	adds	r7, #24
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	2000800c 	.word	0x2000800c
 800218c:	165e9f81 	.word	0x165e9f81

08002190 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e01d      	b.n	80021de <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d106      	bne.n	80021bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f815 	bl	80021e6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2202      	movs	r2, #2
 80021c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3304      	adds	r3, #4
 80021cc:	4619      	mov	r1, r3
 80021ce:	4610      	mov	r0, r2
 80021d0:	f000 f968 	bl	80024a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80021e6:	b480      	push	{r7}
 80021e8:	b083      	sub	sp, #12
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80021ee:	bf00      	nop
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr

080021fa <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021fa:	b480      	push	{r7}
 80021fc:	b085      	sub	sp, #20
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	6812      	ldr	r2, [r2, #0]
 800220a:	68d2      	ldr	r2, [r2, #12]
 800220c:	f042 0201 	orr.w	r2, r2, #1
 8002210:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f003 0307 	and.w	r3, r3, #7
 800221c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2b06      	cmp	r3, #6
 8002222:	d007      	beq.n	8002234 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	6812      	ldr	r2, [r2, #0]
 800222c:	6812      	ldr	r2, [r2, #0]
 800222e:	f042 0201 	orr.w	r2, r2, #1
 8002232:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3714      	adds	r7, #20
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b082      	sub	sp, #8
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	691b      	ldr	r3, [r3, #16]
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b02      	cmp	r3, #2
 8002256:	d122      	bne.n	800229e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b02      	cmp	r3, #2
 8002264:	d11b      	bne.n	800229e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f06f 0202 	mvn.w	r2, #2
 800226e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	f003 0303 	and.w	r3, r3, #3
 8002280:	2b00      	cmp	r3, #0
 8002282:	d003      	beq.n	800228c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f000 f8ee 	bl	8002466 <HAL_TIM_IC_CaptureCallback>
 800228a:	e005      	b.n	8002298 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f000 f8e0 	bl	8002452 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 f8f1 	bl	800247a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	691b      	ldr	r3, [r3, #16]
 80022a4:	f003 0304 	and.w	r3, r3, #4
 80022a8:	2b04      	cmp	r3, #4
 80022aa:	d122      	bne.n	80022f2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	f003 0304 	and.w	r3, r3, #4
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	d11b      	bne.n	80022f2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f06f 0204 	mvn.w	r2, #4
 80022c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2202      	movs	r2, #2
 80022c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d003      	beq.n	80022e0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f000 f8c4 	bl	8002466 <HAL_TIM_IC_CaptureCallback>
 80022de:	e005      	b.n	80022ec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f000 f8b6 	bl	8002452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 f8c7 	bl	800247a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	f003 0308 	and.w	r3, r3, #8
 80022fc:	2b08      	cmp	r3, #8
 80022fe:	d122      	bne.n	8002346 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	f003 0308 	and.w	r3, r3, #8
 800230a:	2b08      	cmp	r3, #8
 800230c:	d11b      	bne.n	8002346 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f06f 0208 	mvn.w	r2, #8
 8002316:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2204      	movs	r2, #4
 800231c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	69db      	ldr	r3, [r3, #28]
 8002324:	f003 0303 	and.w	r3, r3, #3
 8002328:	2b00      	cmp	r3, #0
 800232a:	d003      	beq.n	8002334 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f000 f89a 	bl	8002466 <HAL_TIM_IC_CaptureCallback>
 8002332:	e005      	b.n	8002340 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f000 f88c 	bl	8002452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f000 f89d 	bl	800247a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	f003 0310 	and.w	r3, r3, #16
 8002350:	2b10      	cmp	r3, #16
 8002352:	d122      	bne.n	800239a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	f003 0310 	and.w	r3, r3, #16
 800235e:	2b10      	cmp	r3, #16
 8002360:	d11b      	bne.n	800239a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f06f 0210 	mvn.w	r2, #16
 800236a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2208      	movs	r2, #8
 8002370:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	69db      	ldr	r3, [r3, #28]
 8002378:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800237c:	2b00      	cmp	r3, #0
 800237e:	d003      	beq.n	8002388 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f000 f870 	bl	8002466 <HAL_TIM_IC_CaptureCallback>
 8002386:	e005      	b.n	8002394 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f000 f862 	bl	8002452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 f873 	bl	800247a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d10e      	bne.n	80023c6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d107      	bne.n	80023c6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f06f 0201 	mvn.w	r2, #1
 80023be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f004 fad1 	bl	8006968 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023d0:	2b80      	cmp	r3, #128	; 0x80
 80023d2:	d10e      	bne.n	80023f2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023de:	2b80      	cmp	r3, #128	; 0x80
 80023e0:	d107      	bne.n	80023f2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80023ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 f903 	bl	80025f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023fc:	2b40      	cmp	r3, #64	; 0x40
 80023fe:	d10e      	bne.n	800241e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800240a:	2b40      	cmp	r3, #64	; 0x40
 800240c:	d107      	bne.n	800241e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002416:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f000 f838 	bl	800248e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	f003 0320 	and.w	r3, r3, #32
 8002428:	2b20      	cmp	r3, #32
 800242a:	d10e      	bne.n	800244a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	f003 0320 	and.w	r3, r3, #32
 8002436:	2b20      	cmp	r3, #32
 8002438:	d107      	bne.n	800244a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f06f 0220 	mvn.w	r2, #32
 8002442:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f000 f8cd 	bl	80025e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800244a:	bf00      	nop
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002452:	b480      	push	{r7}
 8002454:	b083      	sub	sp, #12
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800245a:	bf00      	nop
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr

08002466 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002466:	b480      	push	{r7}
 8002468:	b083      	sub	sp, #12
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800246e:	bf00      	nop
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800247a:	b480      	push	{r7}
 800247c:	b083      	sub	sp, #12
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002482:	bf00      	nop
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr

0800248e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800248e:	b480      	push	{r7}
 8002490:	b083      	sub	sp, #12
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002496:	bf00      	nop
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
	...

080024a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a40      	ldr	r2, [pc, #256]	; (80025b8 <TIM_Base_SetConfig+0x114>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d013      	beq.n	80024e4 <TIM_Base_SetConfig+0x40>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024c2:	d00f      	beq.n	80024e4 <TIM_Base_SetConfig+0x40>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a3d      	ldr	r2, [pc, #244]	; (80025bc <TIM_Base_SetConfig+0x118>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d00b      	beq.n	80024e4 <TIM_Base_SetConfig+0x40>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a3c      	ldr	r2, [pc, #240]	; (80025c0 <TIM_Base_SetConfig+0x11c>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d007      	beq.n	80024e4 <TIM_Base_SetConfig+0x40>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a3b      	ldr	r2, [pc, #236]	; (80025c4 <TIM_Base_SetConfig+0x120>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d003      	beq.n	80024e4 <TIM_Base_SetConfig+0x40>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a3a      	ldr	r2, [pc, #232]	; (80025c8 <TIM_Base_SetConfig+0x124>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d108      	bne.n	80024f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a2f      	ldr	r2, [pc, #188]	; (80025b8 <TIM_Base_SetConfig+0x114>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d02b      	beq.n	8002556 <TIM_Base_SetConfig+0xb2>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002504:	d027      	beq.n	8002556 <TIM_Base_SetConfig+0xb2>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a2c      	ldr	r2, [pc, #176]	; (80025bc <TIM_Base_SetConfig+0x118>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d023      	beq.n	8002556 <TIM_Base_SetConfig+0xb2>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a2b      	ldr	r2, [pc, #172]	; (80025c0 <TIM_Base_SetConfig+0x11c>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d01f      	beq.n	8002556 <TIM_Base_SetConfig+0xb2>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a2a      	ldr	r2, [pc, #168]	; (80025c4 <TIM_Base_SetConfig+0x120>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d01b      	beq.n	8002556 <TIM_Base_SetConfig+0xb2>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a29      	ldr	r2, [pc, #164]	; (80025c8 <TIM_Base_SetConfig+0x124>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d017      	beq.n	8002556 <TIM_Base_SetConfig+0xb2>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a28      	ldr	r2, [pc, #160]	; (80025cc <TIM_Base_SetConfig+0x128>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d013      	beq.n	8002556 <TIM_Base_SetConfig+0xb2>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a27      	ldr	r2, [pc, #156]	; (80025d0 <TIM_Base_SetConfig+0x12c>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d00f      	beq.n	8002556 <TIM_Base_SetConfig+0xb2>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a26      	ldr	r2, [pc, #152]	; (80025d4 <TIM_Base_SetConfig+0x130>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d00b      	beq.n	8002556 <TIM_Base_SetConfig+0xb2>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a25      	ldr	r2, [pc, #148]	; (80025d8 <TIM_Base_SetConfig+0x134>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d007      	beq.n	8002556 <TIM_Base_SetConfig+0xb2>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a24      	ldr	r2, [pc, #144]	; (80025dc <TIM_Base_SetConfig+0x138>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d003      	beq.n	8002556 <TIM_Base_SetConfig+0xb2>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a23      	ldr	r2, [pc, #140]	; (80025e0 <TIM_Base_SetConfig+0x13c>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d108      	bne.n	8002568 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800255c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	4313      	orrs	r3, r2
 8002566:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	4313      	orrs	r3, r2
 8002574:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4a0a      	ldr	r2, [pc, #40]	; (80025b8 <TIM_Base_SetConfig+0x114>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d003      	beq.n	800259c <TIM_Base_SetConfig+0xf8>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4a0c      	ldr	r2, [pc, #48]	; (80025c8 <TIM_Base_SetConfig+0x124>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d103      	bne.n	80025a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	691a      	ldr	r2, [r3, #16]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	615a      	str	r2, [r3, #20]
}
 80025aa:	bf00      	nop
 80025ac:	3714      	adds	r7, #20
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	40010000 	.word	0x40010000
 80025bc:	40000400 	.word	0x40000400
 80025c0:	40000800 	.word	0x40000800
 80025c4:	40000c00 	.word	0x40000c00
 80025c8:	40010400 	.word	0x40010400
 80025cc:	40014000 	.word	0x40014000
 80025d0:	40014400 	.word	0x40014400
 80025d4:	40014800 	.word	0x40014800
 80025d8:	40001800 	.word	0x40001800
 80025dc:	40001c00 	.word	0x40001c00
 80025e0:	40002000 	.word	0x40002000

080025e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e03f      	b.n	800269e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d106      	bne.n	8002638 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f004 fa58 	bl	8006ae8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2224      	movs	r2, #36	; 0x24
 800263c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	6812      	ldr	r2, [r2, #0]
 8002648:	68d2      	ldr	r2, [r2, #12]
 800264a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800264e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f000 fa67 	bl	8002b24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	6812      	ldr	r2, [r2, #0]
 800265e:	6912      	ldr	r2, [r2, #16]
 8002660:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002664:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	6812      	ldr	r2, [r2, #0]
 800266e:	6952      	ldr	r2, [r2, #20]
 8002670:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002674:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	6812      	ldr	r2, [r2, #0]
 800267e:	68d2      	ldr	r2, [r2, #12]
 8002680:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002684:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2220      	movs	r2, #32
 8002690:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2220      	movs	r2, #32
 8002698:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
	...

080026a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b088      	sub	sp, #32
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80026c8:	2300      	movs	r3, #0
 80026ca:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80026cc:	2300      	movs	r3, #0
 80026ce:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	f003 030f 	and.w	r3, r3, #15
 80026d6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10d      	bne.n	80026fa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	f003 0320 	and.w	r3, r3, #32
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d008      	beq.n	80026fa <HAL_UART_IRQHandler+0x52>
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	f003 0320 	and.w	r3, r3, #32
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d003      	beq.n	80026fa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 f995 	bl	8002a22 <UART_Receive_IT>
      return;
 80026f8:	e0d1      	b.n	800289e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f000 80b0 	beq.w	8002862 <HAL_UART_IRQHandler+0x1ba>
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	2b00      	cmp	r3, #0
 800270a:	d105      	bne.n	8002718 <HAL_UART_IRQHandler+0x70>
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002712:	2b00      	cmp	r3, #0
 8002714:	f000 80a5 	beq.w	8002862 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00a      	beq.n	8002738 <HAL_UART_IRQHandler+0x90>
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002728:	2b00      	cmp	r3, #0
 800272a:	d005      	beq.n	8002738 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002730:	f043 0201 	orr.w	r2, r3, #1
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	f003 0304 	and.w	r3, r3, #4
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00a      	beq.n	8002758 <HAL_UART_IRQHandler+0xb0>
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	2b00      	cmp	r3, #0
 800274a:	d005      	beq.n	8002758 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002750:	f043 0202 	orr.w	r2, r3, #2
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00a      	beq.n	8002778 <HAL_UART_IRQHandler+0xd0>
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	f003 0301 	and.w	r3, r3, #1
 8002768:	2b00      	cmp	r3, #0
 800276a:	d005      	beq.n	8002778 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002770:	f043 0204 	orr.w	r2, r3, #4
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	f003 0308 	and.w	r3, r3, #8
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00f      	beq.n	80027a2 <HAL_UART_IRQHandler+0xfa>
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	f003 0320 	and.w	r3, r3, #32
 8002788:	2b00      	cmp	r3, #0
 800278a:	d104      	bne.n	8002796 <HAL_UART_IRQHandler+0xee>
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b00      	cmp	r3, #0
 8002794:	d005      	beq.n	80027a2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800279a:	f043 0208 	orr.w	r2, r3, #8
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d078      	beq.n	800289c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	f003 0320 	and.w	r3, r3, #32
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d007      	beq.n	80027c4 <HAL_UART_IRQHandler+0x11c>
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	f003 0320 	and.w	r3, r3, #32
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d002      	beq.n	80027c4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 f92f 	bl	8002a22 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ce:	2b40      	cmp	r3, #64	; 0x40
 80027d0:	bf0c      	ite	eq
 80027d2:	2301      	moveq	r3, #1
 80027d4:	2300      	movne	r3, #0
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027de:	f003 0308 	and.w	r3, r3, #8
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d102      	bne.n	80027ec <HAL_UART_IRQHandler+0x144>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d031      	beq.n	8002850 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f000 f879 	bl	80028e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	695b      	ldr	r3, [r3, #20]
 80027f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027fc:	2b40      	cmp	r3, #64	; 0x40
 80027fe:	d123      	bne.n	8002848 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	6812      	ldr	r2, [r2, #0]
 8002808:	6952      	ldr	r2, [r2, #20]
 800280a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800280e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002814:	2b00      	cmp	r3, #0
 8002816:	d013      	beq.n	8002840 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800281c:	4a21      	ldr	r2, [pc, #132]	; (80028a4 <HAL_UART_IRQHandler+0x1fc>)
 800281e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002824:	4618      	mov	r0, r3
 8002826:	f7fe f8a5 	bl	8000974 <HAL_DMA_Abort_IT>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d016      	beq.n	800285e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800283a:	4610      	mov	r0, r2
 800283c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800283e:	e00e      	b.n	800285e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f000 f845 	bl	80028d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002846:	e00a      	b.n	800285e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f000 f841 	bl	80028d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800284e:	e006      	b.n	800285e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f000 f83d 	bl	80028d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800285c:	e01e      	b.n	800289c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800285e:	bf00      	nop
    return;
 8002860:	e01c      	b.n	800289c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002868:	2b00      	cmp	r3, #0
 800286a:	d008      	beq.n	800287e <HAL_UART_IRQHandler+0x1d6>
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f000 f866 	bl	8002948 <UART_Transmit_IT>
    return;
 800287c:	e00f      	b.n	800289e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00a      	beq.n	800289e <HAL_UART_IRQHandler+0x1f6>
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800288e:	2b00      	cmp	r3, #0
 8002890:	d005      	beq.n	800289e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 f8ad 	bl	80029f2 <UART_EndTransmit_IT>
    return;
 8002898:	bf00      	nop
 800289a:	e000      	b.n	800289e <HAL_UART_IRQHandler+0x1f6>
    return;
 800289c:	bf00      	nop
  }
}
 800289e:	3720      	adds	r7, #32
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	08002921 	.word	0x08002921

080028a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80028b0:	bf00      	nop
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6812      	ldr	r2, [r2, #0]
 80028f4:	68d2      	ldr	r2, [r2, #12]
 80028f6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80028fa:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	6812      	ldr	r2, [r2, #0]
 8002904:	6952      	ldr	r2, [r2, #20]
 8002906:	f022 0201 	bic.w	r2, r2, #1
 800290a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2220      	movs	r2, #32
 8002910:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800292c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2200      	movs	r2, #0
 8002932:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f7ff ffc8 	bl	80028d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002940:	bf00      	nop
 8002942:	3710      	adds	r7, #16
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002956:	b2db      	uxtb	r3, r3
 8002958:	2b21      	cmp	r3, #33	; 0x21
 800295a:	d143      	bne.n	80029e4 <UART_Transmit_IT+0x9c>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002964:	d119      	bne.n	800299a <UART_Transmit_IT+0x52>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68fa      	ldr	r2, [r7, #12]
 8002972:	8812      	ldrh	r2, [r2, #0]
 8002974:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002978:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d105      	bne.n	800298e <UART_Transmit_IT+0x46>
      {
        huart->pTxBuffPtr += 2U;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a1b      	ldr	r3, [r3, #32]
 8002986:	1c9a      	adds	r2, r3, #2
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	621a      	str	r2, [r3, #32]
 800298c:	e00e      	b.n	80029ac <UART_Transmit_IT+0x64>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	1c5a      	adds	r2, r3, #1
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	621a      	str	r2, [r3, #32]
 8002998:	e008      	b.n	80029ac <UART_Transmit_IT+0x64>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a1b      	ldr	r3, [r3, #32]
 80029a2:	1c58      	adds	r0, r3, #1
 80029a4:	6879      	ldr	r1, [r7, #4]
 80029a6:	6208      	str	r0, [r1, #32]
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	6053      	str	r3, [r2, #4]
    }

    if (--huart->TxXferCount == 0U)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	3b01      	subs	r3, #1
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	4619      	mov	r1, r3
 80029ba:	84d1      	strh	r1, [r2, #38]	; 0x26
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d10f      	bne.n	80029e0 <UART_Transmit_IT+0x98>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	6812      	ldr	r2, [r2, #0]
 80029c8:	68d2      	ldr	r2, [r2, #12]
 80029ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	6812      	ldr	r2, [r2, #0]
 80029d8:	68d2      	ldr	r2, [r2, #12]
 80029da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80029e0:	2300      	movs	r3, #0
 80029e2:	e000      	b.n	80029e6 <UART_Transmit_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80029e4:	2302      	movs	r3, #2
  }
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3714      	adds	r7, #20
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b082      	sub	sp, #8
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	6812      	ldr	r2, [r2, #0]
 8002a02:	68d2      	ldr	r2, [r2, #12]
 8002a04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a08:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2220      	movs	r2, #32
 8002a0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f7ff ff48 	bl	80028a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b084      	sub	sp, #16
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b22      	cmp	r3, #34	; 0x22
 8002a34:	d171      	bne.n	8002b1a <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a3e:	d123      	bne.n	8002a88 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a44:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d10e      	bne.n	8002a6c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a64:	1c9a      	adds	r2, r3, #2
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	629a      	str	r2, [r3, #40]	; 0x28
 8002a6a:	e029      	b.n	8002ac0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a80:	1c5a      	adds	r2, r3, #1
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	629a      	str	r2, [r3, #40]	; 0x28
 8002a86:	e01b      	b.n	8002ac0 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d10a      	bne.n	8002aa6 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a94:	1c59      	adds	r1, r3, #1
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	6291      	str	r1, [r2, #40]	; 0x28
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	6812      	ldr	r2, [r2, #0]
 8002a9e:	6852      	ldr	r2, [r2, #4]
 8002aa0:	b2d2      	uxtb	r2, r2
 8002aa2:	701a      	strb	r2, [r3, #0]
 8002aa4:	e00c      	b.n	8002ac0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aaa:	1c59      	adds	r1, r3, #1
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	6291      	str	r1, [r2, #40]	; 0x28
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	6812      	ldr	r2, [r2, #0]
 8002ab4:	6852      	ldr	r2, [r2, #4]
 8002ab6:	b2d2      	uxtb	r2, r2
 8002ab8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002abc:	b2d2      	uxtb	r2, r2
 8002abe:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	4619      	mov	r1, r3
 8002ace:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d120      	bne.n	8002b16 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	6812      	ldr	r2, [r2, #0]
 8002adc:	68d2      	ldr	r2, [r2, #12]
 8002ade:	f022 0220 	bic.w	r2, r2, #32
 8002ae2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	6812      	ldr	r2, [r2, #0]
 8002aec:	68d2      	ldr	r2, [r2, #12]
 8002aee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002af2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6812      	ldr	r2, [r2, #0]
 8002afc:	6952      	ldr	r2, [r2, #20]
 8002afe:	f022 0201 	bic.w	r2, r2, #1
 8002b02:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2220      	movs	r2, #32
 8002b08:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f7ff fed5 	bl	80028bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002b12:	2300      	movs	r3, #0
 8002b14:	e002      	b.n	8002b1c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002b16:	2300      	movs	r3, #0
 8002b18:	e000      	b.n	8002b1c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002b1a:	2302      	movs	r3, #2
  }
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3710      	adds	r7, #16
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b28:	b0a3      	sub	sp, #140	; 0x8c
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	67f8      	str	r0, [r7, #124]	; 0x7c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b2e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b30:	6819      	ldr	r1, [r3, #0]
 8002b32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	610b      	str	r3, [r1, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b44:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b46:	689a      	ldr	r2, [r3, #8]
 8002b48:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	431a      	orrs	r2, r3
 8002b4e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	431a      	orrs	r2, r3
 8002b54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b56:	69db      	ldr	r3, [r3, #28]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  MODIFY_REG(huart->Instance->CR1,
 8002b5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b60:	6819      	ldr	r1, [r3, #0]
 8002b62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	f423 4216 	bic.w	r2, r3, #38400	; 0x9600
 8002b6c:	f022 020c 	bic.w	r2, r2, #12
 8002b70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b74:	4313      	orrs	r3, r2
 8002b76:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b7a:	6819      	ldr	r1, [r3, #0]
 8002b7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	614b      	str	r3, [r1, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b8e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b90:	69db      	ldr	r3, [r3, #28]
 8002b92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b96:	f040 8171 	bne.w	8002e7c <UART_SetConfig+0x358>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b9a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4ab4      	ldr	r2, [pc, #720]	; (8002e70 <UART_SetConfig+0x34c>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d005      	beq.n	8002bb0 <UART_SetConfig+0x8c>
 8002ba4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4ab2      	ldr	r2, [pc, #712]	; (8002e74 <UART_SetConfig+0x350>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	f040 80b1 	bne.w	8002d12 <UART_SetConfig+0x1ee>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002bb0:	f7fe ff4a 	bl	8001a48 <HAL_RCC_GetPCLK2Freq>
 8002bb4:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002bb8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002bba:	681d      	ldr	r5, [r3, #0]
 8002bbc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	f04f 0200 	mov.w	r2, #0
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	4614      	mov	r4, r2
 8002bca:	18db      	adds	r3, r3, r3
 8002bcc:	eb44 0404 	adc.w	r4, r4, r4
 8002bd0:	185b      	adds	r3, r3, r1
 8002bd2:	eb44 0402 	adc.w	r4, r4, r2
 8002bd6:	00e0      	lsls	r0, r4, #3
 8002bd8:	6478      	str	r0, [r7, #68]	; 0x44
 8002bda:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002bdc:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8002be0:	6478      	str	r0, [r7, #68]	; 0x44
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	643b      	str	r3, [r7, #64]	; 0x40
 8002be6:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002bea:	eb13 0801 	adds.w	r8, r3, r1
 8002bee:	eb44 0902 	adc.w	r9, r4, r2
 8002bf2:	4640      	mov	r0, r8
 8002bf4:	4649      	mov	r1, r9
 8002bf6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f04f 0400 	mov.w	r4, #0
 8002bfe:	18db      	adds	r3, r3, r3
 8002c00:	eb44 0404 	adc.w	r4, r4, r4
 8002c04:	461a      	mov	r2, r3
 8002c06:	4623      	mov	r3, r4
 8002c08:	f7fd fae2 	bl	80001d0 <__aeabi_uldivmod>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	460c      	mov	r4, r1
 8002c10:	461a      	mov	r2, r3
 8002c12:	4b99      	ldr	r3, [pc, #612]	; (8002e78 <UART_SetConfig+0x354>)
 8002c14:	fba3 2302 	umull	r2, r3, r3, r2
 8002c18:	095b      	lsrs	r3, r3, #5
 8002c1a:	011e      	lsls	r6, r3, #4
 8002c1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c20:	4619      	mov	r1, r3
 8002c22:	f04f 0200 	mov.w	r2, #0
 8002c26:	460b      	mov	r3, r1
 8002c28:	4614      	mov	r4, r2
 8002c2a:	18db      	adds	r3, r3, r3
 8002c2c:	eb44 0404 	adc.w	r4, r4, r4
 8002c30:	185b      	adds	r3, r3, r1
 8002c32:	eb44 0402 	adc.w	r4, r4, r2
 8002c36:	00e0      	lsls	r0, r4, #3
 8002c38:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002c3a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002c3c:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8002c40:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c46:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8002c4a:	eb13 0801 	adds.w	r8, r3, r1
 8002c4e:	eb44 0902 	adc.w	r9, r4, r2
 8002c52:	4640      	mov	r0, r8
 8002c54:	4649      	mov	r1, r9
 8002c56:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f04f 0400 	mov.w	r4, #0
 8002c5e:	18db      	adds	r3, r3, r3
 8002c60:	eb44 0404 	adc.w	r4, r4, r4
 8002c64:	461a      	mov	r2, r3
 8002c66:	4623      	mov	r3, r4
 8002c68:	f7fd fab2 	bl	80001d0 <__aeabi_uldivmod>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	460c      	mov	r4, r1
 8002c70:	461a      	mov	r2, r3
 8002c72:	4b81      	ldr	r3, [pc, #516]	; (8002e78 <UART_SetConfig+0x354>)
 8002c74:	fba3 1302 	umull	r1, r3, r3, r2
 8002c78:	095b      	lsrs	r3, r3, #5
 8002c7a:	2164      	movs	r1, #100	; 0x64
 8002c7c:	fb01 f303 	mul.w	r3, r1, r3
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	00db      	lsls	r3, r3, #3
 8002c84:	3332      	adds	r3, #50	; 0x32
 8002c86:	4a7c      	ldr	r2, [pc, #496]	; (8002e78 <UART_SetConfig+0x354>)
 8002c88:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8c:	095b      	lsrs	r3, r3, #5
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c94:	441e      	add	r6, r3
 8002c96:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	f04f 0200 	mov.w	r2, #0
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	4614      	mov	r4, r2
 8002ca4:	18db      	adds	r3, r3, r3
 8002ca6:	eb44 0404 	adc.w	r4, r4, r4
 8002caa:	185b      	adds	r3, r3, r1
 8002cac:	eb44 0402 	adc.w	r4, r4, r2
 8002cb0:	00e0      	lsls	r0, r4, #3
 8002cb2:	6378      	str	r0, [r7, #52]	; 0x34
 8002cb4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002cb6:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8002cba:	6378      	str	r0, [r7, #52]	; 0x34
 8002cbc:	00db      	lsls	r3, r3, #3
 8002cbe:	633b      	str	r3, [r7, #48]	; 0x30
 8002cc0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002cc4:	eb13 0801 	adds.w	r8, r3, r1
 8002cc8:	eb44 0902 	adc.w	r9, r4, r2
 8002ccc:	4640      	mov	r0, r8
 8002cce:	4649      	mov	r1, r9
 8002cd0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f04f 0400 	mov.w	r4, #0
 8002cd8:	18db      	adds	r3, r3, r3
 8002cda:	eb44 0404 	adc.w	r4, r4, r4
 8002cde:	461a      	mov	r2, r3
 8002ce0:	4623      	mov	r3, r4
 8002ce2:	f7fd fa75 	bl	80001d0 <__aeabi_uldivmod>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	460c      	mov	r4, r1
 8002cea:	461a      	mov	r2, r3
 8002cec:	4b62      	ldr	r3, [pc, #392]	; (8002e78 <UART_SetConfig+0x354>)
 8002cee:	fba3 1302 	umull	r1, r3, r3, r2
 8002cf2:	095b      	lsrs	r3, r3, #5
 8002cf4:	2164      	movs	r1, #100	; 0x64
 8002cf6:	fb01 f303 	mul.w	r3, r1, r3
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	3332      	adds	r3, #50	; 0x32
 8002d00:	4a5d      	ldr	r2, [pc, #372]	; (8002e78 <UART_SetConfig+0x354>)
 8002d02:	fba2 2303 	umull	r2, r3, r2, r3
 8002d06:	095b      	lsrs	r3, r3, #5
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	4433      	add	r3, r6
 8002d0e:	60ab      	str	r3, [r5, #8]
 8002d10:	e240      	b.n	8003194 <UART_SetConfig+0x670>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d12:	f7fe fe85 	bl	8001a20 <HAL_RCC_GetPCLK1Freq>
 8002d16:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d1a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	673a      	str	r2, [r7, #112]	; 0x70
 8002d20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d24:	4619      	mov	r1, r3
 8002d26:	f04f 0200 	mov.w	r2, #0
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	4614      	mov	r4, r2
 8002d2e:	18db      	adds	r3, r3, r3
 8002d30:	eb44 0404 	adc.w	r4, r4, r4
 8002d34:	185b      	adds	r3, r3, r1
 8002d36:	eb44 0402 	adc.w	r4, r4, r2
 8002d3a:	00e0      	lsls	r0, r4, #3
 8002d3c:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002d3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d40:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8002d44:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d4a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8002d4e:	185d      	adds	r5, r3, r1
 8002d50:	eb44 0602 	adc.w	r6, r4, r2
 8002d54:	4628      	mov	r0, r5
 8002d56:	4631      	mov	r1, r6
 8002d58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f04f 0400 	mov.w	r4, #0
 8002d60:	18db      	adds	r3, r3, r3
 8002d62:	eb44 0404 	adc.w	r4, r4, r4
 8002d66:	461a      	mov	r2, r3
 8002d68:	4623      	mov	r3, r4
 8002d6a:	f7fd fa31 	bl	80001d0 <__aeabi_uldivmod>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	460c      	mov	r4, r1
 8002d72:	461a      	mov	r2, r3
 8002d74:	4b40      	ldr	r3, [pc, #256]	; (8002e78 <UART_SetConfig+0x354>)
 8002d76:	fba3 2302 	umull	r2, r3, r3, r2
 8002d7a:	095b      	lsrs	r3, r3, #5
 8002d7c:	011e      	lsls	r6, r3, #4
 8002d7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d82:	4619      	mov	r1, r3
 8002d84:	f04f 0200 	mov.w	r2, #0
 8002d88:	460b      	mov	r3, r1
 8002d8a:	4614      	mov	r4, r2
 8002d8c:	18db      	adds	r3, r3, r3
 8002d8e:	eb44 0404 	adc.w	r4, r4, r4
 8002d92:	185b      	adds	r3, r3, r1
 8002d94:	eb44 0402 	adc.w	r4, r4, r2
 8002d98:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
 8002d9c:	ea4b 7b53 	orr.w	fp, fp, r3, lsr #29
 8002da0:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
 8002da4:	4653      	mov	r3, sl
 8002da6:	465c      	mov	r4, fp
 8002da8:	eb13 0a01 	adds.w	sl, r3, r1
 8002dac:	eb44 0b02 	adc.w	fp, r4, r2
 8002db0:	4650      	mov	r0, sl
 8002db2:	4659      	mov	r1, fp
 8002db4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f04f 0400 	mov.w	r4, #0
 8002dbc:	18db      	adds	r3, r3, r3
 8002dbe:	eb44 0404 	adc.w	r4, r4, r4
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	4623      	mov	r3, r4
 8002dc6:	f7fd fa03 	bl	80001d0 <__aeabi_uldivmod>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	460c      	mov	r4, r1
 8002dce:	461a      	mov	r2, r3
 8002dd0:	4b29      	ldr	r3, [pc, #164]	; (8002e78 <UART_SetConfig+0x354>)
 8002dd2:	fba3 1302 	umull	r1, r3, r3, r2
 8002dd6:	095b      	lsrs	r3, r3, #5
 8002dd8:	2164      	movs	r1, #100	; 0x64
 8002dda:	fb01 f303 	mul.w	r3, r1, r3
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	00db      	lsls	r3, r3, #3
 8002de2:	3332      	adds	r3, #50	; 0x32
 8002de4:	4a24      	ldr	r2, [pc, #144]	; (8002e78 <UART_SetConfig+0x354>)
 8002de6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dea:	095b      	lsrs	r3, r3, #5
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002df2:	441e      	add	r6, r3
 8002df4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002df8:	4619      	mov	r1, r3
 8002dfa:	f04f 0200 	mov.w	r2, #0
 8002dfe:	460b      	mov	r3, r1
 8002e00:	4614      	mov	r4, r2
 8002e02:	18db      	adds	r3, r3, r3
 8002e04:	eb44 0404 	adc.w	r4, r4, r4
 8002e08:	185b      	adds	r3, r3, r1
 8002e0a:	eb44 0402 	adc.w	r4, r4, r2
 8002e0e:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8002e12:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8002e16:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8002e1a:	4643      	mov	r3, r8
 8002e1c:	464c      	mov	r4, r9
 8002e1e:	eb13 0801 	adds.w	r8, r3, r1
 8002e22:	eb44 0902 	adc.w	r9, r4, r2
 8002e26:	4640      	mov	r0, r8
 8002e28:	4649      	mov	r1, r9
 8002e2a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f04f 0400 	mov.w	r4, #0
 8002e32:	18db      	adds	r3, r3, r3
 8002e34:	eb44 0404 	adc.w	r4, r4, r4
 8002e38:	461a      	mov	r2, r3
 8002e3a:	4623      	mov	r3, r4
 8002e3c:	f7fd f9c8 	bl	80001d0 <__aeabi_uldivmod>
 8002e40:	4603      	mov	r3, r0
 8002e42:	460c      	mov	r4, r1
 8002e44:	461a      	mov	r2, r3
 8002e46:	4b0c      	ldr	r3, [pc, #48]	; (8002e78 <UART_SetConfig+0x354>)
 8002e48:	fba3 1302 	umull	r1, r3, r3, r2
 8002e4c:	095b      	lsrs	r3, r3, #5
 8002e4e:	2164      	movs	r1, #100	; 0x64
 8002e50:	fb01 f303 	mul.w	r3, r1, r3
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	3332      	adds	r3, #50	; 0x32
 8002e5a:	4a07      	ldr	r2, [pc, #28]	; (8002e78 <UART_SetConfig+0x354>)
 8002e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e60:	095b      	lsrs	r3, r3, #5
 8002e62:	f003 0307 	and.w	r3, r3, #7
 8002e66:	4433      	add	r3, r6
 8002e68:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002e6a:	6093      	str	r3, [r2, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002e6c:	e192      	b.n	8003194 <UART_SetConfig+0x670>
 8002e6e:	bf00      	nop
 8002e70:	40011000 	.word	0x40011000
 8002e74:	40011400 	.word	0x40011400
 8002e78:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	4bc1      	ldr	r3, [pc, #772]	; (8003188 <UART_SetConfig+0x664>)
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d005      	beq.n	8002e92 <UART_SetConfig+0x36e>
 8002e86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	4bc0      	ldr	r3, [pc, #768]	; (800318c <UART_SetConfig+0x668>)
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	f040 80bf 	bne.w	8003010 <UART_SetConfig+0x4ec>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e92:	f7fe fdd9 	bl	8001a48 <HAL_RCC_GetPCLK2Freq>
 8002e96:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e9a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e9c:	681e      	ldr	r6, [r3, #0]
 8002e9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	f04f 0200 	mov.w	r2, #0
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	4614      	mov	r4, r2
 8002eac:	18db      	adds	r3, r3, r3
 8002eae:	eb44 0404 	adc.w	r4, r4, r4
 8002eb2:	185b      	adds	r3, r3, r1
 8002eb4:	eb44 0402 	adc.w	r4, r4, r2
 8002eb8:	00e0      	lsls	r0, r4, #3
 8002eba:	6278      	str	r0, [r7, #36]	; 0x24
 8002ebc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ebe:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8002ec2:	6278      	str	r0, [r7, #36]	; 0x24
 8002ec4:	00db      	lsls	r3, r3, #3
 8002ec6:	623b      	str	r3, [r7, #32]
 8002ec8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002ecc:	eb13 0801 	adds.w	r8, r3, r1
 8002ed0:	eb44 0902 	adc.w	r9, r4, r2
 8002ed4:	4640      	mov	r0, r8
 8002ed6:	4649      	mov	r1, r9
 8002ed8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f04f 0400 	mov.w	r4, #0
 8002ee0:	00a2      	lsls	r2, r4, #2
 8002ee2:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002ee4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002ee6:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8002eea:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	65bb      	str	r3, [r7, #88]	; 0x58
 8002ef0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002ef4:	f7fd f96c 	bl	80001d0 <__aeabi_uldivmod>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	460c      	mov	r4, r1
 8002efc:	461a      	mov	r2, r3
 8002efe:	4ba4      	ldr	r3, [pc, #656]	; (8003190 <UART_SetConfig+0x66c>)
 8002f00:	fba3 2302 	umull	r2, r3, r3, r2
 8002f04:	095b      	lsrs	r3, r3, #5
 8002f06:	011d      	lsls	r5, r3, #4
 8002f08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	f04f 0200 	mov.w	r2, #0
 8002f12:	460b      	mov	r3, r1
 8002f14:	4614      	mov	r4, r2
 8002f16:	18db      	adds	r3, r3, r3
 8002f18:	eb44 0404 	adc.w	r4, r4, r4
 8002f1c:	185b      	adds	r3, r3, r1
 8002f1e:	eb44 0402 	adc.w	r4, r4, r2
 8002f22:	00e0      	lsls	r0, r4, #3
 8002f24:	61f8      	str	r0, [r7, #28]
 8002f26:	69f8      	ldr	r0, [r7, #28]
 8002f28:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8002f2c:	61f8      	str	r0, [r7, #28]
 8002f2e:	00db      	lsls	r3, r3, #3
 8002f30:	61bb      	str	r3, [r7, #24]
 8002f32:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002f36:	eb13 0801 	adds.w	r8, r3, r1
 8002f3a:	eb44 0902 	adc.w	r9, r4, r2
 8002f3e:	4640      	mov	r0, r8
 8002f40:	4649      	mov	r1, r9
 8002f42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f04f 0400 	mov.w	r4, #0
 8002f4a:	00a2      	lsls	r2, r4, #2
 8002f4c:	657a      	str	r2, [r7, #84]	; 0x54
 8002f4e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002f50:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8002f54:	657a      	str	r2, [r7, #84]	; 0x54
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	653b      	str	r3, [r7, #80]	; 0x50
 8002f5a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002f5e:	f7fd f937 	bl	80001d0 <__aeabi_uldivmod>
 8002f62:	4603      	mov	r3, r0
 8002f64:	460c      	mov	r4, r1
 8002f66:	461a      	mov	r2, r3
 8002f68:	4b89      	ldr	r3, [pc, #548]	; (8003190 <UART_SetConfig+0x66c>)
 8002f6a:	fba3 1302 	umull	r1, r3, r3, r2
 8002f6e:	095b      	lsrs	r3, r3, #5
 8002f70:	2164      	movs	r1, #100	; 0x64
 8002f72:	fb01 f303 	mul.w	r3, r1, r3
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	011b      	lsls	r3, r3, #4
 8002f7a:	3332      	adds	r3, #50	; 0x32
 8002f7c:	4a84      	ldr	r2, [pc, #528]	; (8003190 <UART_SetConfig+0x66c>)
 8002f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f82:	095b      	lsrs	r3, r3, #5
 8002f84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f88:	441d      	add	r5, r3
 8002f8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f8e:	4619      	mov	r1, r3
 8002f90:	f04f 0200 	mov.w	r2, #0
 8002f94:	460b      	mov	r3, r1
 8002f96:	4614      	mov	r4, r2
 8002f98:	18db      	adds	r3, r3, r3
 8002f9a:	eb44 0404 	adc.w	r4, r4, r4
 8002f9e:	185b      	adds	r3, r3, r1
 8002fa0:	eb44 0402 	adc.w	r4, r4, r2
 8002fa4:	00e0      	lsls	r0, r4, #3
 8002fa6:	6178      	str	r0, [r7, #20]
 8002fa8:	6978      	ldr	r0, [r7, #20]
 8002faa:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8002fae:	6178      	str	r0, [r7, #20]
 8002fb0:	00db      	lsls	r3, r3, #3
 8002fb2:	613b      	str	r3, [r7, #16]
 8002fb4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002fb8:	eb13 0801 	adds.w	r8, r3, r1
 8002fbc:	eb44 0902 	adc.w	r9, r4, r2
 8002fc0:	4640      	mov	r0, r8
 8002fc2:	4649      	mov	r1, r9
 8002fc4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f04f 0400 	mov.w	r4, #0
 8002fcc:	00a2      	lsls	r2, r4, #2
 8002fce:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002fd0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002fd2:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8002fd6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fdc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002fe0:	f7fd f8f6 	bl	80001d0 <__aeabi_uldivmod>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	460c      	mov	r4, r1
 8002fe8:	461a      	mov	r2, r3
 8002fea:	4b69      	ldr	r3, [pc, #420]	; (8003190 <UART_SetConfig+0x66c>)
 8002fec:	fba3 1302 	umull	r1, r3, r3, r2
 8002ff0:	095b      	lsrs	r3, r3, #5
 8002ff2:	2164      	movs	r1, #100	; 0x64
 8002ff4:	fb01 f303 	mul.w	r3, r1, r3
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	011b      	lsls	r3, r3, #4
 8002ffc:	3332      	adds	r3, #50	; 0x32
 8002ffe:	4a64      	ldr	r2, [pc, #400]	; (8003190 <UART_SetConfig+0x66c>)
 8003000:	fba2 2303 	umull	r2, r3, r2, r3
 8003004:	095b      	lsrs	r3, r3, #5
 8003006:	f003 030f 	and.w	r3, r3, #15
 800300a:	442b      	add	r3, r5
 800300c:	60b3      	str	r3, [r6, #8]
 800300e:	e0c1      	b.n	8003194 <UART_SetConfig+0x670>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003010:	f7fe fd06 	bl	8001a20 <HAL_RCC_GetPCLK1Freq>
 8003014:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003018:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	65bb      	str	r3, [r7, #88]	; 0x58
 800301e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003022:	4619      	mov	r1, r3
 8003024:	f04f 0200 	mov.w	r2, #0
 8003028:	460b      	mov	r3, r1
 800302a:	4614      	mov	r4, r2
 800302c:	18db      	adds	r3, r3, r3
 800302e:	eb44 0404 	adc.w	r4, r4, r4
 8003032:	185b      	adds	r3, r3, r1
 8003034:	eb44 0402 	adc.w	r4, r4, r2
 8003038:	00e6      	lsls	r6, r4, #3
 800303a:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
 800303e:	00dd      	lsls	r5, r3, #3
 8003040:	462b      	mov	r3, r5
 8003042:	4634      	mov	r4, r6
 8003044:	185d      	adds	r5, r3, r1
 8003046:	eb44 0602 	adc.w	r6, r4, r2
 800304a:	4628      	mov	r0, r5
 800304c:	4631      	mov	r1, r6
 800304e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f04f 0400 	mov.w	r4, #0
 8003056:	00a5      	lsls	r5, r4, #2
 8003058:	677d      	str	r5, [r7, #116]	; 0x74
 800305a:	6f7d      	ldr	r5, [r7, #116]	; 0x74
 800305c:	ea45 7593 	orr.w	r5, r5, r3, lsr #30
 8003060:	677d      	str	r5, [r7, #116]	; 0x74
 8003062:	009c      	lsls	r4, r3, #2
 8003064:	673c      	str	r4, [r7, #112]	; 0x70
 8003066:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800306a:	f7fd f8b1 	bl	80001d0 <__aeabi_uldivmod>
 800306e:	4603      	mov	r3, r0
 8003070:	460c      	mov	r4, r1
 8003072:	461a      	mov	r2, r3
 8003074:	4b46      	ldr	r3, [pc, #280]	; (8003190 <UART_SetConfig+0x66c>)
 8003076:	fba3 1302 	umull	r1, r3, r3, r2
 800307a:	095b      	lsrs	r3, r3, #5
 800307c:	011d      	lsls	r5, r3, #4
 800307e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003082:	4619      	mov	r1, r3
 8003084:	f04f 0200 	mov.w	r2, #0
 8003088:	460b      	mov	r3, r1
 800308a:	4614      	mov	r4, r2
 800308c:	18db      	adds	r3, r3, r3
 800308e:	eb44 0404 	adc.w	r4, r4, r4
 8003092:	185b      	adds	r3, r3, r1
 8003094:	eb44 0402 	adc.w	r4, r4, r2
 8003098:	00e0      	lsls	r0, r4, #3
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	00d8      	lsls	r0, r3, #3
 80030a6:	60b8      	str	r0, [r7, #8]
 80030a8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80030ac:	eb13 0801 	adds.w	r8, r3, r1
 80030b0:	eb44 0902 	adc.w	r9, r4, r2
 80030b4:	4640      	mov	r0, r8
 80030b6:	4649      	mov	r1, r9
 80030b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f04f 0400 	mov.w	r4, #0
 80030c0:	00a6      	lsls	r6, r4, #2
 80030c2:	66fe      	str	r6, [r7, #108]	; 0x6c
 80030c4:	6efe      	ldr	r6, [r7, #108]	; 0x6c
 80030c6:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 80030ca:	66fe      	str	r6, [r7, #108]	; 0x6c
 80030cc:	009c      	lsls	r4, r3, #2
 80030ce:	66bc      	str	r4, [r7, #104]	; 0x68
 80030d0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80030d4:	f7fd f87c 	bl	80001d0 <__aeabi_uldivmod>
 80030d8:	4603      	mov	r3, r0
 80030da:	460c      	mov	r4, r1
 80030dc:	461a      	mov	r2, r3
 80030de:	4b2c      	ldr	r3, [pc, #176]	; (8003190 <UART_SetConfig+0x66c>)
 80030e0:	fba3 1302 	umull	r1, r3, r3, r2
 80030e4:	095b      	lsrs	r3, r3, #5
 80030e6:	2164      	movs	r1, #100	; 0x64
 80030e8:	fb01 f303 	mul.w	r3, r1, r3
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	011b      	lsls	r3, r3, #4
 80030f0:	3332      	adds	r3, #50	; 0x32
 80030f2:	4a27      	ldr	r2, [pc, #156]	; (8003190 <UART_SetConfig+0x66c>)
 80030f4:	fba2 1303 	umull	r1, r3, r2, r3
 80030f8:	095b      	lsrs	r3, r3, #5
 80030fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030fe:	441d      	add	r5, r3
 8003100:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003104:	4619      	mov	r1, r3
 8003106:	f04f 0200 	mov.w	r2, #0
 800310a:	460b      	mov	r3, r1
 800310c:	4614      	mov	r4, r2
 800310e:	18db      	adds	r3, r3, r3
 8003110:	eb44 0404 	adc.w	r4, r4, r4
 8003114:	185b      	adds	r3, r3, r1
 8003116:	eb44 0402 	adc.w	r4, r4, r2
 800311a:	00e0      	lsls	r0, r4, #3
 800311c:	6078      	str	r0, [r7, #4]
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8003124:	6078      	str	r0, [r7, #4]
 8003126:	00d8      	lsls	r0, r3, #3
 8003128:	6038      	str	r0, [r7, #0]
 800312a:	e897 0018 	ldmia.w	r7, {r3, r4}
 800312e:	eb13 0801 	adds.w	r8, r3, r1
 8003132:	eb44 0902 	adc.w	r9, r4, r2
 8003136:	4640      	mov	r0, r8
 8003138:	4649      	mov	r1, r9
 800313a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f04f 0400 	mov.w	r4, #0
 8003142:	00a6      	lsls	r6, r4, #2
 8003144:	667e      	str	r6, [r7, #100]	; 0x64
 8003146:	6e7e      	ldr	r6, [r7, #100]	; 0x64
 8003148:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 800314c:	667e      	str	r6, [r7, #100]	; 0x64
 800314e:	009c      	lsls	r4, r3, #2
 8003150:	663c      	str	r4, [r7, #96]	; 0x60
 8003152:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003156:	f7fd f83b 	bl	80001d0 <__aeabi_uldivmod>
 800315a:	4603      	mov	r3, r0
 800315c:	460c      	mov	r4, r1
 800315e:	461a      	mov	r2, r3
 8003160:	4b0b      	ldr	r3, [pc, #44]	; (8003190 <UART_SetConfig+0x66c>)
 8003162:	fba3 1302 	umull	r1, r3, r3, r2
 8003166:	095b      	lsrs	r3, r3, #5
 8003168:	2164      	movs	r1, #100	; 0x64
 800316a:	fb01 f303 	mul.w	r3, r1, r3
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	011b      	lsls	r3, r3, #4
 8003172:	3332      	adds	r3, #50	; 0x32
 8003174:	4a06      	ldr	r2, [pc, #24]	; (8003190 <UART_SetConfig+0x66c>)
 8003176:	fba2 1303 	umull	r1, r3, r2, r3
 800317a:	095b      	lsrs	r3, r3, #5
 800317c:	f003 030f 	and.w	r3, r3, #15
 8003180:	442b      	add	r3, r5
 8003182:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003184:	6093      	str	r3, [r2, #8]
}
 8003186:	e005      	b.n	8003194 <UART_SetConfig+0x670>
 8003188:	40011000 	.word	0x40011000
 800318c:	40011400 	.word	0x40011400
 8003190:	51eb851f 	.word	0x51eb851f
 8003194:	bf00      	nop
 8003196:	378c      	adds	r7, #140	; 0x8c
 8003198:	46bd      	mov	sp, r7
 800319a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800319e:	bf00      	nop

080031a0 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 80031a4:	2200      	movs	r2, #0
 80031a6:	2110      	movs	r1, #16
 80031a8:	4802      	ldr	r0, [pc, #8]	; (80031b4 <ST7735_Select+0x14>)
 80031aa:	f7fe f807 	bl	80011bc <HAL_GPIO_WritePin>
}
 80031ae:	bf00      	nop
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	40020000 	.word	0x40020000

080031b8 <ST7735_Unselect>:

void ST7735_Unselect() {
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 80031bc:	2201      	movs	r2, #1
 80031be:	2110      	movs	r1, #16
 80031c0:	4802      	ldr	r0, [pc, #8]	; (80031cc <ST7735_Unselect+0x14>)
 80031c2:	f7fd fffb 	bl	80011bc <HAL_GPIO_WritePin>
}
 80031c6:	bf00      	nop
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	40020000 	.word	0x40020000

080031d0 <ST7735_Reset>:

static void ST7735_Reset() {
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
	ST7735_Select();
 80031d4:	f7ff ffe4 	bl	80031a0 <ST7735_Select>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 80031d8:	2200      	movs	r2, #0
 80031da:	2102      	movs	r1, #2
 80031dc:	4807      	ldr	r0, [pc, #28]	; (80031fc <ST7735_Reset+0x2c>)
 80031de:	f7fd ffed 	bl	80011bc <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80031e2:	2005      	movs	r0, #5
 80031e4:	f7fd f9be 	bl	8000564 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 80031e8:	2201      	movs	r2, #1
 80031ea:	2102      	movs	r1, #2
 80031ec:	4803      	ldr	r0, [pc, #12]	; (80031fc <ST7735_Reset+0x2c>)
 80031ee:	f7fd ffe5 	bl	80011bc <HAL_GPIO_WritePin>
    ST7735_Unselect();
 80031f2:	f7ff ffe1 	bl	80031b8 <ST7735_Unselect>
}
 80031f6:	bf00      	nop
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	40020c00 	.word	0x40020c00

08003200 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	4603      	mov	r3, r0
 8003208:	71fb      	strb	r3, [r7, #7]
	//Copy the command to the protected screen buffer;
	xSemaphoreTake(sDisplaySPI, portMAX_DELAY);
 800320a:	4b0d      	ldr	r3, [pc, #52]	; (8003240 <ST7735_WriteCommand+0x40>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003212:	4618      	mov	r0, r3
 8003214:	f001 fbac 	bl	8004970 <xQueueSemaphoreTake>
	cmd_buf = cmd;
 8003218:	4a0a      	ldr	r2, [pc, #40]	; (8003244 <ST7735_WriteCommand+0x44>)
 800321a:	79fb      	ldrb	r3, [r7, #7]
 800321c:	7013      	strb	r3, [r2, #0]
	ST7735_Select();
 800321e:	f7ff ffbf 	bl	80031a0 <ST7735_Select>
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8003222:	2200      	movs	r2, #0
 8003224:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003228:	4807      	ldr	r0, [pc, #28]	; (8003248 <ST7735_WriteCommand+0x48>)
 800322a:	f7fd ffc7 	bl	80011bc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, &cmd_buf, sizeof(cmd));
 800322e:	2201      	movs	r2, #1
 8003230:	4904      	ldr	r1, [pc, #16]	; (8003244 <ST7735_WriteCommand+0x44>)
 8003232:	4806      	ldr	r0, [pc, #24]	; (800324c <ST7735_WriteCommand+0x4c>)
 8003234:	f7fe fcb2 	bl	8001b9c <HAL_SPI_Transmit_DMA>
    //while (HAL_SPI_GetState(&hspi3) == HAL_SPI_STATE_BUSY_TX);
}
 8003238:	bf00      	nop
 800323a:	3708      	adds	r7, #8
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	20016af8 	.word	0x20016af8
 8003244:	2001202c 	.word	0x2001202c
 8003248:	40020800 	.word	0x40020800
 800324c:	200169e0 	.word	0x200169e0

08003250 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
	//Copy the data to the protected screen buffer;
	xSemaphoreTake(sDisplaySPI, portMAX_DELAY);
 800325a:	4b16      	ldr	r3, [pc, #88]	; (80032b4 <ST7735_WriteData+0x64>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003262:	4618      	mov	r0, r3
 8003264:	f001 fb84 	bl	8004970 <xQueueSemaphoreTake>
	for(int i = 0; i < buff_size; i++) {
 8003268:	2300      	movs	r3, #0
 800326a:	60fb      	str	r3, [r7, #12]
 800326c:	e00a      	b.n	8003284 <ST7735_WriteData+0x34>
		((uint8_t *)data_buf)[i] = buff[i];
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	4a11      	ldr	r2, [pc, #68]	; (80032b8 <ST7735_WriteData+0x68>)
 8003272:	4413      	add	r3, r2
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	6879      	ldr	r1, [r7, #4]
 8003278:	440a      	add	r2, r1
 800327a:	7812      	ldrb	r2, [r2, #0]
 800327c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < buff_size; i++) {
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	3301      	adds	r3, #1
 8003282:	60fb      	str	r3, [r7, #12]
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	429a      	cmp	r2, r3
 800328a:	d3f0      	bcc.n	800326e <ST7735_WriteData+0x1e>
	}
	ST7735_Select();
 800328c:	f7ff ff88 	bl	80031a0 <ST7735_Select>
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8003290:	2201      	movs	r2, #1
 8003292:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003296:	4809      	ldr	r0, [pc, #36]	; (80032bc <ST7735_WriteData+0x6c>)
 8003298:	f7fd ff90 	bl	80011bc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, (uint8_t *)data_buf, buff_size);
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	b29b      	uxth	r3, r3
 80032a0:	461a      	mov	r2, r3
 80032a2:	4905      	ldr	r1, [pc, #20]	; (80032b8 <ST7735_WriteData+0x68>)
 80032a4:	4806      	ldr	r0, [pc, #24]	; (80032c0 <ST7735_WriteData+0x70>)
 80032a6:	f7fe fc79 	bl	8001b9c <HAL_SPI_Transmit_DMA>
    //while (HAL_SPI_GetState(&hspi3) == HAL_SPI_STATE_BUSY_TX);
}
 80032aa:	bf00      	nop
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	20016af8 	.word	0x20016af8
 80032b8:	2000802c 	.word	0x2000802c
 80032bc:	40020800 	.word	0x40020800
 80032c0:	200169e0 	.word	0x200169e0

080032c4 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	1c5a      	adds	r2, r3, #1
 80032d0:	607a      	str	r2, [r7, #4]
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 80032d6:	e034      	b.n	8003342 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	1c5a      	adds	r2, r3, #1
 80032dc:	607a      	str	r2, [r7, #4]
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 80032e2:	7afb      	ldrb	r3, [r7, #11]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7ff ff8b 	bl	8003200 <ST7735_WriteCommand>

        numArgs = *addr++;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	1c5a      	adds	r2, r3, #1
 80032ee:	607a      	str	r2, [r7, #4]
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 80032f4:	7abb      	ldrb	r3, [r7, #10]
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032fc:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 80032fe:	7abb      	ldrb	r3, [r7, #10]
 8003300:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003304:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8003306:	7abb      	ldrb	r3, [r7, #10]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d008      	beq.n	800331e <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 800330c:	7abb      	ldrb	r3, [r7, #10]
 800330e:	4619      	mov	r1, r3
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f7ff ff9d 	bl	8003250 <ST7735_WriteData>
            addr += numArgs;
 8003316:	7abb      	ldrb	r3, [r7, #10]
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	4413      	add	r3, r2
 800331c:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 800331e:	89bb      	ldrh	r3, [r7, #12]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00e      	beq.n	8003342 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	1c5a      	adds	r2, r3, #1
 8003328:	607a      	str	r2, [r7, #4]
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 800332e:	89bb      	ldrh	r3, [r7, #12]
 8003330:	2bff      	cmp	r3, #255	; 0xff
 8003332:	d102      	bne.n	800333a <ST7735_ExecuteCommandList+0x76>
 8003334:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003338:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800333a:	89bb      	ldrh	r3, [r7, #12]
 800333c:	4618      	mov	r0, r3
 800333e:	f7fd f911 	bl	8000564 <HAL_Delay>
    while(numCommands--) {
 8003342:	7bfb      	ldrb	r3, [r7, #15]
 8003344:	1e5a      	subs	r2, r3, #1
 8003346:	73fa      	strb	r2, [r7, #15]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d1c5      	bne.n	80032d8 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 800334c:	bf00      	nop
 800334e:	3710      	adds	r7, #16
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8003354:	b590      	push	{r4, r7, lr}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	4604      	mov	r4, r0
 800335c:	4608      	mov	r0, r1
 800335e:	4611      	mov	r1, r2
 8003360:	461a      	mov	r2, r3
 8003362:	4623      	mov	r3, r4
 8003364:	71fb      	strb	r3, [r7, #7]
 8003366:	4603      	mov	r3, r0
 8003368:	71bb      	strb	r3, [r7, #6]
 800336a:	460b      	mov	r3, r1
 800336c:	717b      	strb	r3, [r7, #5]
 800336e:	4613      	mov	r3, r2
 8003370:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8003372:	202a      	movs	r0, #42	; 0x2a
 8003374:	f7ff ff44 	bl	8003200 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8003378:	2300      	movs	r3, #0
 800337a:	733b      	strb	r3, [r7, #12]
 800337c:	79fb      	ldrb	r3, [r7, #7]
 800337e:	737b      	strb	r3, [r7, #13]
 8003380:	2300      	movs	r3, #0
 8003382:	73bb      	strb	r3, [r7, #14]
 8003384:	797b      	ldrb	r3, [r7, #5]
 8003386:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8003388:	f107 030c 	add.w	r3, r7, #12
 800338c:	2104      	movs	r1, #4
 800338e:	4618      	mov	r0, r3
 8003390:	f7ff ff5e 	bl	8003250 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8003394:	202b      	movs	r0, #43	; 0x2b
 8003396:	f7ff ff33 	bl	8003200 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 800339a:	79bb      	ldrb	r3, [r7, #6]
 800339c:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 800339e:	793b      	ldrb	r3, [r7, #4]
 80033a0:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80033a2:	f107 030c 	add.w	r3, r7, #12
 80033a6:	2104      	movs	r1, #4
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7ff ff51 	bl	8003250 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80033ae:	202c      	movs	r0, #44	; 0x2c
 80033b0:	f7ff ff26 	bl	8003200 <ST7735_WriteCommand>
}
 80033b4:	bf00      	nop
 80033b6:	3714      	adds	r7, #20
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd90      	pop	{r4, r7, pc}

080033bc <ST7735_Init>:

void ST7735_Init() {
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
    //ST7735_Select();
    ST7735_Reset();
 80033c0:	f7ff ff06 	bl	80031d0 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 80033c4:	4805      	ldr	r0, [pc, #20]	; (80033dc <ST7735_Init+0x20>)
 80033c6:	f7ff ff7d 	bl	80032c4 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 80033ca:	4805      	ldr	r0, [pc, #20]	; (80033e0 <ST7735_Init+0x24>)
 80033cc:	f7ff ff7a 	bl	80032c4 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 80033d0:	4804      	ldr	r0, [pc, #16]	; (80033e4 <ST7735_Init+0x28>)
 80033d2:	f7ff ff77 	bl	80032c4 <ST7735_ExecuteCommandList>
    //ST7735_Unselect();
}
 80033d6:	bf00      	nop
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	08006ecc 	.word	0x08006ecc
 80033e0:	08006f08 	.word	0x08006f08
 80033e4:	08006f18 	.word	0x08006f18

080033e8 <ST7735_DrawImage>:

void ST7735_FillScreen(uint16_t color) {
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
}

void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 80033e8:	b590      	push	{r4, r7, lr}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	4604      	mov	r4, r0
 80033f0:	4608      	mov	r0, r1
 80033f2:	4611      	mov	r1, r2
 80033f4:	461a      	mov	r2, r3
 80033f6:	4623      	mov	r3, r4
 80033f8:	80fb      	strh	r3, [r7, #6]
 80033fa:	4603      	mov	r3, r0
 80033fc:	80bb      	strh	r3, [r7, #4]
 80033fe:	460b      	mov	r3, r1
 8003400:	807b      	strh	r3, [r7, #2]
 8003402:	4613      	mov	r3, r2
 8003404:	803b      	strh	r3, [r7, #0]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8003406:	88fb      	ldrh	r3, [r7, #6]
 8003408:	2b9f      	cmp	r3, #159	; 0x9f
 800340a:	d82f      	bhi.n	800346c <ST7735_DrawImage+0x84>
 800340c:	88bb      	ldrh	r3, [r7, #4]
 800340e:	2b7f      	cmp	r3, #127	; 0x7f
 8003410:	d82c      	bhi.n	800346c <ST7735_DrawImage+0x84>
    if((x + w - 1) >= ST7735_WIDTH) return;
 8003412:	88fa      	ldrh	r2, [r7, #6]
 8003414:	887b      	ldrh	r3, [r7, #2]
 8003416:	4413      	add	r3, r2
 8003418:	3b01      	subs	r3, #1
 800341a:	2b9f      	cmp	r3, #159	; 0x9f
 800341c:	dc28      	bgt.n	8003470 <ST7735_DrawImage+0x88>
    if((y + h - 1) >= ST7735_HEIGHT) return;
 800341e:	88ba      	ldrh	r2, [r7, #4]
 8003420:	883b      	ldrh	r3, [r7, #0]
 8003422:	4413      	add	r3, r2
 8003424:	3b01      	subs	r3, #1
 8003426:	2b7f      	cmp	r3, #127	; 0x7f
 8003428:	dc24      	bgt.n	8003474 <ST7735_DrawImage+0x8c>

    //ST7735_Select();
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800342a:	88fb      	ldrh	r3, [r7, #6]
 800342c:	b2d8      	uxtb	r0, r3
 800342e:	88bb      	ldrh	r3, [r7, #4]
 8003430:	b2d9      	uxtb	r1, r3
 8003432:	88fb      	ldrh	r3, [r7, #6]
 8003434:	b2da      	uxtb	r2, r3
 8003436:	887b      	ldrh	r3, [r7, #2]
 8003438:	b2db      	uxtb	r3, r3
 800343a:	4413      	add	r3, r2
 800343c:	b2db      	uxtb	r3, r3
 800343e:	3b01      	subs	r3, #1
 8003440:	b2dc      	uxtb	r4, r3
 8003442:	88bb      	ldrh	r3, [r7, #4]
 8003444:	b2da      	uxtb	r2, r3
 8003446:	883b      	ldrh	r3, [r7, #0]
 8003448:	b2db      	uxtb	r3, r3
 800344a:	4413      	add	r3, r2
 800344c:	b2db      	uxtb	r3, r3
 800344e:	3b01      	subs	r3, #1
 8003450:	b2db      	uxtb	r3, r3
 8003452:	4622      	mov	r2, r4
 8003454:	f7ff ff7e 	bl	8003354 <ST7735_SetAddressWindow>
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 8003458:	887b      	ldrh	r3, [r7, #2]
 800345a:	883a      	ldrh	r2, [r7, #0]
 800345c:	fb02 f303 	mul.w	r3, r2, r3
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	4619      	mov	r1, r3
 8003464:	69b8      	ldr	r0, [r7, #24]
 8003466:	f7ff fef3 	bl	8003250 <ST7735_WriteData>
 800346a:	e004      	b.n	8003476 <ST7735_DrawImage+0x8e>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800346c:	bf00      	nop
 800346e:	e002      	b.n	8003476 <ST7735_DrawImage+0x8e>
    if((x + w - 1) >= ST7735_WIDTH) return;
 8003470:	bf00      	nop
 8003472:	e000      	b.n	8003476 <ST7735_DrawImage+0x8e>
    if((y + h - 1) >= ST7735_HEIGHT) return;
 8003474:	bf00      	nop
    //ST7735_Unselect();
}
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	bd90      	pop	{r4, r7, pc}

0800347c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003480:	bf00      	nop
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
	...

0800348c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003492:	f3ef 8305 	mrs	r3, IPSR
 8003496:	60bb      	str	r3, [r7, #8]
  return(result);
 8003498:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800349a:	2b00      	cmp	r3, #0
 800349c:	d10f      	bne.n	80034be <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800349e:	f3ef 8310 	mrs	r3, PRIMASK
 80034a2:	607b      	str	r3, [r7, #4]
  return(result);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d105      	bne.n	80034b6 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80034aa:	f3ef 8311 	mrs	r3, BASEPRI
 80034ae:	603b      	str	r3, [r7, #0]
  return(result);
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d007      	beq.n	80034c6 <osKernelInitialize+0x3a>
 80034b6:	4b0e      	ldr	r3, [pc, #56]	; (80034f0 <osKernelInitialize+0x64>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d103      	bne.n	80034c6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80034be:	f06f 0305 	mvn.w	r3, #5
 80034c2:	60fb      	str	r3, [r7, #12]
 80034c4:	e00c      	b.n	80034e0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80034c6:	4b0a      	ldr	r3, [pc, #40]	; (80034f0 <osKernelInitialize+0x64>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d105      	bne.n	80034da <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80034ce:	4b08      	ldr	r3, [pc, #32]	; (80034f0 <osKernelInitialize+0x64>)
 80034d0:	2201      	movs	r2, #1
 80034d2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80034d4:	2300      	movs	r3, #0
 80034d6:	60fb      	str	r3, [r7, #12]
 80034d8:	e002      	b.n	80034e0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80034da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80034de:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80034e0:	68fb      	ldr	r3, [r7, #12]
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3714      	adds	r7, #20
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	20012030 	.word	0x20012030

080034f4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034fa:	f3ef 8305 	mrs	r3, IPSR
 80034fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8003500:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10f      	bne.n	8003526 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003506:	f3ef 8310 	mrs	r3, PRIMASK
 800350a:	607b      	str	r3, [r7, #4]
  return(result);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d105      	bne.n	800351e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003512:	f3ef 8311 	mrs	r3, BASEPRI
 8003516:	603b      	str	r3, [r7, #0]
  return(result);
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d007      	beq.n	800352e <osKernelStart+0x3a>
 800351e:	4b0f      	ldr	r3, [pc, #60]	; (800355c <osKernelStart+0x68>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2b02      	cmp	r3, #2
 8003524:	d103      	bne.n	800352e <osKernelStart+0x3a>
    stat = osErrorISR;
 8003526:	f06f 0305 	mvn.w	r3, #5
 800352a:	60fb      	str	r3, [r7, #12]
 800352c:	e010      	b.n	8003550 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800352e:	4b0b      	ldr	r3, [pc, #44]	; (800355c <osKernelStart+0x68>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d109      	bne.n	800354a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003536:	f7ff ffa1 	bl	800347c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800353a:	4b08      	ldr	r3, [pc, #32]	; (800355c <osKernelStart+0x68>)
 800353c:	2202      	movs	r2, #2
 800353e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003540:	f001 fe74 	bl	800522c <vTaskStartScheduler>
      stat = osOK;
 8003544:	2300      	movs	r3, #0
 8003546:	60fb      	str	r3, [r7, #12]
 8003548:	e002      	b.n	8003550 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800354a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800354e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003550:	68fb      	ldr	r3, [r7, #12]
}
 8003552:	4618      	mov	r0, r3
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	20012030 	.word	0x20012030

08003560 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003560:	b580      	push	{r7, lr}
 8003562:	b090      	sub	sp, #64	; 0x40
 8003564:	af04      	add	r7, sp, #16
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800356c:	2300      	movs	r3, #0
 800356e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003570:	f3ef 8305 	mrs	r3, IPSR
 8003574:	61fb      	str	r3, [r7, #28]
  return(result);
 8003576:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003578:	2b00      	cmp	r3, #0
 800357a:	f040 808f 	bne.w	800369c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800357e:	f3ef 8310 	mrs	r3, PRIMASK
 8003582:	61bb      	str	r3, [r7, #24]
  return(result);
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d105      	bne.n	8003596 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800358a:	f3ef 8311 	mrs	r3, BASEPRI
 800358e:	617b      	str	r3, [r7, #20]
  return(result);
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <osThreadNew+0x3e>
 8003596:	4b44      	ldr	r3, [pc, #272]	; (80036a8 <osThreadNew+0x148>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2b02      	cmp	r3, #2
 800359c:	d07e      	beq.n	800369c <osThreadNew+0x13c>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d07b      	beq.n	800369c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80035a4:	2380      	movs	r3, #128	; 0x80
 80035a6:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80035a8:	2318      	movs	r3, #24
 80035aa:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80035ac:	2300      	movs	r3, #0
 80035ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80035b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80035b4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d045      	beq.n	8003648 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d002      	beq.n	80035ca <osThreadNew+0x6a>
        name = attr->name;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d002      	beq.n	80035d8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80035d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d008      	beq.n	80035f0 <osThreadNew+0x90>
 80035de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e0:	2b38      	cmp	r3, #56	; 0x38
 80035e2:	d805      	bhi.n	80035f0 <osThreadNew+0x90>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f003 0301 	and.w	r3, r3, #1
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d001      	beq.n	80035f4 <osThreadNew+0x94>
        return (NULL);
 80035f0:	2300      	movs	r3, #0
 80035f2:	e054      	b.n	800369e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d003      	beq.n	8003604 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	695b      	ldr	r3, [r3, #20]
 8003600:	089b      	lsrs	r3, r3, #2
 8003602:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00e      	beq.n	800362a <osThreadNew+0xca>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	2b5b      	cmp	r3, #91	; 0x5b
 8003612:	d90a      	bls.n	800362a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003618:	2b00      	cmp	r3, #0
 800361a:	d006      	beq.n	800362a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d002      	beq.n	800362a <osThreadNew+0xca>
        mem = 1;
 8003624:	2301      	movs	r3, #1
 8003626:	623b      	str	r3, [r7, #32]
 8003628:	e010      	b.n	800364c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10c      	bne.n	800364c <osThreadNew+0xec>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d108      	bne.n	800364c <osThreadNew+0xec>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d104      	bne.n	800364c <osThreadNew+0xec>
          mem = 0;
 8003642:	2300      	movs	r3, #0
 8003644:	623b      	str	r3, [r7, #32]
 8003646:	e001      	b.n	800364c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8003648:	2300      	movs	r3, #0
 800364a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800364c:	6a3b      	ldr	r3, [r7, #32]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d110      	bne.n	8003674 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800365a:	9202      	str	r2, [sp, #8]
 800365c:	9301      	str	r3, [sp, #4]
 800365e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003660:	9300      	str	r3, [sp, #0]
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003666:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003668:	68f8      	ldr	r0, [r7, #12]
 800366a:	f001 fc0d 	bl	8004e88 <xTaskCreateStatic>
 800366e:	4603      	mov	r3, r0
 8003670:	613b      	str	r3, [r7, #16]
 8003672:	e013      	b.n	800369c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8003674:	6a3b      	ldr	r3, [r7, #32]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d110      	bne.n	800369c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800367a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367c:	b29a      	uxth	r2, r3
 800367e:	f107 0310 	add.w	r3, r7, #16
 8003682:	9301      	str	r3, [sp, #4]
 8003684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003686:	9300      	str	r3, [sp, #0]
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800368c:	68f8      	ldr	r0, [r7, #12]
 800368e:	f001 fc55 	bl	8004f3c <xTaskCreate>
 8003692:	4603      	mov	r3, r0
 8003694:	2b01      	cmp	r3, #1
 8003696:	d001      	beq.n	800369c <osThreadNew+0x13c>
          hTask = NULL;
 8003698:	2300      	movs	r3, #0
 800369a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800369c:	693b      	ldr	r3, [r7, #16]
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3730      	adds	r7, #48	; 0x30
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	20012030 	.word	0x20012030

080036ac <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b086      	sub	sp, #24
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036b4:	f3ef 8305 	mrs	r3, IPSR
 80036b8:	613b      	str	r3, [r7, #16]
  return(result);
 80036ba:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d10f      	bne.n	80036e0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036c0:	f3ef 8310 	mrs	r3, PRIMASK
 80036c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d105      	bne.n	80036d8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80036cc:	f3ef 8311 	mrs	r3, BASEPRI
 80036d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d007      	beq.n	80036e8 <osDelay+0x3c>
 80036d8:	4b0a      	ldr	r3, [pc, #40]	; (8003704 <osDelay+0x58>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d103      	bne.n	80036e8 <osDelay+0x3c>
    stat = osErrorISR;
 80036e0:	f06f 0305 	mvn.w	r3, #5
 80036e4:	617b      	str	r3, [r7, #20]
 80036e6:	e007      	b.n	80036f8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80036e8:	2300      	movs	r3, #0
 80036ea:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d002      	beq.n	80036f8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f001 fd66 	bl	80051c4 <vTaskDelay>
    }
  }

  return (stat);
 80036f8:	697b      	ldr	r3, [r7, #20]
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3718      	adds	r7, #24
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	20012030 	.word	0x20012030

08003708 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	4a07      	ldr	r2, [pc, #28]	; (8003734 <vApplicationGetIdleTaskMemory+0x2c>)
 8003718:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	4a06      	ldr	r2, [pc, #24]	; (8003738 <vApplicationGetIdleTaskMemory+0x30>)
 800371e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2280      	movs	r2, #128	; 0x80
 8003724:	601a      	str	r2, [r3, #0]
}
 8003726:	bf00      	nop
 8003728:	3714      	adds	r7, #20
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	20012034 	.word	0x20012034
 8003738:	20012090 	.word	0x20012090

0800373c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800373c:	b480      	push	{r7}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	4a07      	ldr	r2, [pc, #28]	; (8003768 <vApplicationGetTimerTaskMemory+0x2c>)
 800374c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	4a06      	ldr	r2, [pc, #24]	; (800376c <vApplicationGetTimerTaskMemory+0x30>)
 8003752:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f44f 7280 	mov.w	r2, #256	; 0x100
 800375a:	601a      	str	r2, [r3, #0]
}
 800375c:	bf00      	nop
 800375e:	3714      	adds	r7, #20
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr
 8003768:	20012290 	.word	0x20012290
 800376c:	200122ec 	.word	0x200122ec

08003770 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f103 0208 	add.w	r2, r3, #8
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003788:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f103 0208 	add.w	r2, r3, #8
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f103 0208 	add.w	r2, r3, #8
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80037a4:	bf00      	nop
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80037be:	bf00      	nop
 80037c0:	370c      	adds	r7, #12
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr

080037ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80037ca:	b480      	push	{r7}
 80037cc:	b085      	sub	sp, #20
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
 80037d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	68fa      	ldr	r2, [r7, #12]
 80037de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	689a      	ldr	r2, [r3, #8]
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	683a      	ldr	r2, [r7, #0]
 80037ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	683a      	ldr	r2, [r7, #0]
 80037f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	1c5a      	adds	r2, r3, #1
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	601a      	str	r2, [r3, #0]
}
 8003806:	bf00      	nop
 8003808:	3714      	adds	r7, #20
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr

08003812 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003812:	b480      	push	{r7}
 8003814:	b085      	sub	sp, #20
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
 800381a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003828:	d103      	bne.n	8003832 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	60fb      	str	r3, [r7, #12]
 8003830:	e00c      	b.n	800384c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	3308      	adds	r3, #8
 8003836:	60fb      	str	r3, [r7, #12]
 8003838:	e002      	b.n	8003840 <vListInsert+0x2e>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	60fb      	str	r3, [r7, #12]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	429a      	cmp	r2, r3
 800384a:	d9f6      	bls.n	800383a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	685a      	ldr	r2, [r3, #4]
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	683a      	ldr	r2, [r7, #0]
 800385a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	683a      	ldr	r2, [r7, #0]
 8003866:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	1c5a      	adds	r2, r3, #1
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	601a      	str	r2, [r3, #0]
}
 8003878:	bf00      	nop
 800387a:	3714      	adds	r7, #20
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	6892      	ldr	r2, [r2, #8]
 800389a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	6852      	ldr	r2, [r2, #4]
 80038a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	685a      	ldr	r2, [r3, #4]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d103      	bne.n	80038b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689a      	ldr	r2, [r3, #8]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	1e5a      	subs	r2, r3, #1
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3714      	adds	r7, #20
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	3b04      	subs	r3, #4
 80038e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80038f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	3b04      	subs	r3, #4
 80038f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	f023 0201 	bic.w	r2, r3, #1
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	3b04      	subs	r3, #4
 8003906:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003908:	4a0c      	ldr	r2, [pc, #48]	; (800393c <pxPortInitialiseStack+0x64>)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	3b14      	subs	r3, #20
 8003912:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	3b04      	subs	r3, #4
 800391e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f06f 0202 	mvn.w	r2, #2
 8003926:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	3b20      	subs	r3, #32
 800392c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800392e:	68fb      	ldr	r3, [r7, #12]
}
 8003930:	4618      	mov	r0, r3
 8003932:	3714      	adds	r7, #20
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr
 800393c:	08003941 	.word	0x08003941

08003940 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003946:	2300      	movs	r3, #0
 8003948:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800394a:	4b11      	ldr	r3, [pc, #68]	; (8003990 <prvTaskExitError+0x50>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003952:	d009      	beq.n	8003968 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003958:	f383 8811 	msr	BASEPRI, r3
 800395c:	f3bf 8f6f 	isb	sy
 8003960:	f3bf 8f4f 	dsb	sy
 8003964:	60fb      	str	r3, [r7, #12]
 8003966:	e7fe      	b.n	8003966 <prvTaskExitError+0x26>
 8003968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800396c:	f383 8811 	msr	BASEPRI, r3
 8003970:	f3bf 8f6f 	isb	sy
 8003974:	f3bf 8f4f 	dsb	sy
 8003978:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800397a:	bf00      	nop
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d0fc      	beq.n	800397c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003982:	bf00      	nop
 8003984:	3714      	adds	r7, #20
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	20000008 	.word	0x20000008
	...

080039a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80039a0:	4b07      	ldr	r3, [pc, #28]	; (80039c0 <pxCurrentTCBConst2>)
 80039a2:	6819      	ldr	r1, [r3, #0]
 80039a4:	6808      	ldr	r0, [r1, #0]
 80039a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039aa:	f380 8809 	msr	PSP, r0
 80039ae:	f3bf 8f6f 	isb	sy
 80039b2:	f04f 0000 	mov.w	r0, #0
 80039b6:	f380 8811 	msr	BASEPRI, r0
 80039ba:	4770      	bx	lr
 80039bc:	f3af 8000 	nop.w

080039c0 <pxCurrentTCBConst2>:
 80039c0:	2001630c 	.word	0x2001630c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80039c4:	bf00      	nop
 80039c6:	bf00      	nop

080039c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80039c8:	4808      	ldr	r0, [pc, #32]	; (80039ec <prvPortStartFirstTask+0x24>)
 80039ca:	6800      	ldr	r0, [r0, #0]
 80039cc:	6800      	ldr	r0, [r0, #0]
 80039ce:	f380 8808 	msr	MSP, r0
 80039d2:	f04f 0000 	mov.w	r0, #0
 80039d6:	f380 8814 	msr	CONTROL, r0
 80039da:	b662      	cpsie	i
 80039dc:	b661      	cpsie	f
 80039de:	f3bf 8f4f 	dsb	sy
 80039e2:	f3bf 8f6f 	isb	sy
 80039e6:	df00      	svc	0
 80039e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80039ea:	bf00      	nop
 80039ec:	e000ed08 	.word	0xe000ed08

080039f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b086      	sub	sp, #24
 80039f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80039f6:	4b44      	ldr	r3, [pc, #272]	; (8003b08 <xPortStartScheduler+0x118>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a44      	ldr	r2, [pc, #272]	; (8003b0c <xPortStartScheduler+0x11c>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d109      	bne.n	8003a14 <xPortStartScheduler+0x24>
 8003a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a04:	f383 8811 	msr	BASEPRI, r3
 8003a08:	f3bf 8f6f 	isb	sy
 8003a0c:	f3bf 8f4f 	dsb	sy
 8003a10:	613b      	str	r3, [r7, #16]
 8003a12:	e7fe      	b.n	8003a12 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003a14:	4b3c      	ldr	r3, [pc, #240]	; (8003b08 <xPortStartScheduler+0x118>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a3d      	ldr	r2, [pc, #244]	; (8003b10 <xPortStartScheduler+0x120>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d109      	bne.n	8003a32 <xPortStartScheduler+0x42>
 8003a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a22:	f383 8811 	msr	BASEPRI, r3
 8003a26:	f3bf 8f6f 	isb	sy
 8003a2a:	f3bf 8f4f 	dsb	sy
 8003a2e:	60fb      	str	r3, [r7, #12]
 8003a30:	e7fe      	b.n	8003a30 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003a32:	4b38      	ldr	r3, [pc, #224]	; (8003b14 <xPortStartScheduler+0x124>)
 8003a34:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	22ff      	movs	r2, #255	; 0xff
 8003a42:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003a4c:	78fb      	ldrb	r3, [r7, #3]
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003a54:	b2da      	uxtb	r2, r3
 8003a56:	4b30      	ldr	r3, [pc, #192]	; (8003b18 <xPortStartScheduler+0x128>)
 8003a58:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003a5a:	4b30      	ldr	r3, [pc, #192]	; (8003b1c <xPortStartScheduler+0x12c>)
 8003a5c:	2207      	movs	r2, #7
 8003a5e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003a60:	e009      	b.n	8003a76 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8003a62:	4b2e      	ldr	r3, [pc, #184]	; (8003b1c <xPortStartScheduler+0x12c>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	3b01      	subs	r3, #1
 8003a68:	4a2c      	ldr	r2, [pc, #176]	; (8003b1c <xPortStartScheduler+0x12c>)
 8003a6a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003a6c:	78fb      	ldrb	r3, [r7, #3]
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003a76:	78fb      	ldrb	r3, [r7, #3]
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a7e:	2b80      	cmp	r3, #128	; 0x80
 8003a80:	d0ef      	beq.n	8003a62 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003a82:	4b26      	ldr	r3, [pc, #152]	; (8003b1c <xPortStartScheduler+0x12c>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f1c3 0307 	rsb	r3, r3, #7
 8003a8a:	2b04      	cmp	r3, #4
 8003a8c:	d009      	beq.n	8003aa2 <xPortStartScheduler+0xb2>
 8003a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a92:	f383 8811 	msr	BASEPRI, r3
 8003a96:	f3bf 8f6f 	isb	sy
 8003a9a:	f3bf 8f4f 	dsb	sy
 8003a9e:	60bb      	str	r3, [r7, #8]
 8003aa0:	e7fe      	b.n	8003aa0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003aa2:	4b1e      	ldr	r3, [pc, #120]	; (8003b1c <xPortStartScheduler+0x12c>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	021b      	lsls	r3, r3, #8
 8003aa8:	4a1c      	ldr	r2, [pc, #112]	; (8003b1c <xPortStartScheduler+0x12c>)
 8003aaa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003aac:	4b1b      	ldr	r3, [pc, #108]	; (8003b1c <xPortStartScheduler+0x12c>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003ab4:	4a19      	ldr	r2, [pc, #100]	; (8003b1c <xPortStartScheduler+0x12c>)
 8003ab6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	b2da      	uxtb	r2, r3
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003ac0:	4a17      	ldr	r2, [pc, #92]	; (8003b20 <xPortStartScheduler+0x130>)
 8003ac2:	4b17      	ldr	r3, [pc, #92]	; (8003b20 <xPortStartScheduler+0x130>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003aca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003acc:	4a14      	ldr	r2, [pc, #80]	; (8003b20 <xPortStartScheduler+0x130>)
 8003ace:	4b14      	ldr	r3, [pc, #80]	; (8003b20 <xPortStartScheduler+0x130>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003ad6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003ad8:	f000 f8d6 	bl	8003c88 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003adc:	4b11      	ldr	r3, [pc, #68]	; (8003b24 <xPortStartScheduler+0x134>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003ae2:	f000 f8f5 	bl	8003cd0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003ae6:	4a10      	ldr	r2, [pc, #64]	; (8003b28 <xPortStartScheduler+0x138>)
 8003ae8:	4b0f      	ldr	r3, [pc, #60]	; (8003b28 <xPortStartScheduler+0x138>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003af0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003af2:	f7ff ff69 	bl	80039c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003af6:	f001 fd6f 	bl	80055d8 <vTaskSwitchContext>
	prvTaskExitError();
 8003afa:	f7ff ff21 	bl	8003940 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3718      	adds	r7, #24
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	e000ed00 	.word	0xe000ed00
 8003b0c:	410fc271 	.word	0x410fc271
 8003b10:	410fc270 	.word	0x410fc270
 8003b14:	e000e400 	.word	0xe000e400
 8003b18:	200126ec 	.word	0x200126ec
 8003b1c:	200126f0 	.word	0x200126f0
 8003b20:	e000ed20 	.word	0xe000ed20
 8003b24:	20000008 	.word	0x20000008
 8003b28:	e000ef34 	.word	0xe000ef34

08003b2c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b36:	f383 8811 	msr	BASEPRI, r3
 8003b3a:	f3bf 8f6f 	isb	sy
 8003b3e:	f3bf 8f4f 	dsb	sy
 8003b42:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003b44:	4b0e      	ldr	r3, [pc, #56]	; (8003b80 <vPortEnterCritical+0x54>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	3301      	adds	r3, #1
 8003b4a:	4a0d      	ldr	r2, [pc, #52]	; (8003b80 <vPortEnterCritical+0x54>)
 8003b4c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003b4e:	4b0c      	ldr	r3, [pc, #48]	; (8003b80 <vPortEnterCritical+0x54>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d10e      	bne.n	8003b74 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003b56:	4b0b      	ldr	r3, [pc, #44]	; (8003b84 <vPortEnterCritical+0x58>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d009      	beq.n	8003b74 <vPortEnterCritical+0x48>
 8003b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b64:	f383 8811 	msr	BASEPRI, r3
 8003b68:	f3bf 8f6f 	isb	sy
 8003b6c:	f3bf 8f4f 	dsb	sy
 8003b70:	603b      	str	r3, [r7, #0]
 8003b72:	e7fe      	b.n	8003b72 <vPortEnterCritical+0x46>
	}
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr
 8003b80:	20000008 	.word	0x20000008
 8003b84:	e000ed04 	.word	0xe000ed04

08003b88 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003b8e:	4b11      	ldr	r3, [pc, #68]	; (8003bd4 <vPortExitCritical+0x4c>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d109      	bne.n	8003baa <vPortExitCritical+0x22>
 8003b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b9a:	f383 8811 	msr	BASEPRI, r3
 8003b9e:	f3bf 8f6f 	isb	sy
 8003ba2:	f3bf 8f4f 	dsb	sy
 8003ba6:	607b      	str	r3, [r7, #4]
 8003ba8:	e7fe      	b.n	8003ba8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8003baa:	4b0a      	ldr	r3, [pc, #40]	; (8003bd4 <vPortExitCritical+0x4c>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	4a08      	ldr	r2, [pc, #32]	; (8003bd4 <vPortExitCritical+0x4c>)
 8003bb2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003bb4:	4b07      	ldr	r3, [pc, #28]	; (8003bd4 <vPortExitCritical+0x4c>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d104      	bne.n	8003bc6 <vPortExitCritical+0x3e>
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003bc6:	bf00      	nop
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	20000008 	.word	0x20000008
	...

08003be0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003be0:	f3ef 8009 	mrs	r0, PSP
 8003be4:	f3bf 8f6f 	isb	sy
 8003be8:	4b15      	ldr	r3, [pc, #84]	; (8003c40 <pxCurrentTCBConst>)
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	f01e 0f10 	tst.w	lr, #16
 8003bf0:	bf08      	it	eq
 8003bf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003bf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bfa:	6010      	str	r0, [r2, #0]
 8003bfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003c00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003c04:	f380 8811 	msr	BASEPRI, r0
 8003c08:	f3bf 8f4f 	dsb	sy
 8003c0c:	f3bf 8f6f 	isb	sy
 8003c10:	f001 fce2 	bl	80055d8 <vTaskSwitchContext>
 8003c14:	f04f 0000 	mov.w	r0, #0
 8003c18:	f380 8811 	msr	BASEPRI, r0
 8003c1c:	bc09      	pop	{r0, r3}
 8003c1e:	6819      	ldr	r1, [r3, #0]
 8003c20:	6808      	ldr	r0, [r1, #0]
 8003c22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c26:	f01e 0f10 	tst.w	lr, #16
 8003c2a:	bf08      	it	eq
 8003c2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003c30:	f380 8809 	msr	PSP, r0
 8003c34:	f3bf 8f6f 	isb	sy
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	f3af 8000 	nop.w

08003c40 <pxCurrentTCBConst>:
 8003c40:	2001630c 	.word	0x2001630c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003c44:	bf00      	nop
 8003c46:	bf00      	nop

08003c48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
	__asm volatile
 8003c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c52:	f383 8811 	msr	BASEPRI, r3
 8003c56:	f3bf 8f6f 	isb	sy
 8003c5a:	f3bf 8f4f 	dsb	sy
 8003c5e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003c60:	f001 fc02 	bl	8005468 <xTaskIncrementTick>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d003      	beq.n	8003c72 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003c6a:	4b06      	ldr	r3, [pc, #24]	; (8003c84 <SysTick_Handler+0x3c>)
 8003c6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c70:	601a      	str	r2, [r3, #0]
 8003c72:	2300      	movs	r3, #0
 8003c74:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8003c7c:	bf00      	nop
 8003c7e:	3708      	adds	r7, #8
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	e000ed04 	.word	0xe000ed04

08003c88 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003c88:	b480      	push	{r7}
 8003c8a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003c8c:	4b0b      	ldr	r3, [pc, #44]	; (8003cbc <vPortSetupTimerInterrupt+0x34>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003c92:	4b0b      	ldr	r3, [pc, #44]	; (8003cc0 <vPortSetupTimerInterrupt+0x38>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003c98:	4a0a      	ldr	r2, [pc, #40]	; (8003cc4 <vPortSetupTimerInterrupt+0x3c>)
 8003c9a:	4b0b      	ldr	r3, [pc, #44]	; (8003cc8 <vPortSetupTimerInterrupt+0x40>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	490b      	ldr	r1, [pc, #44]	; (8003ccc <vPortSetupTimerInterrupt+0x44>)
 8003ca0:	fba1 1303 	umull	r1, r3, r1, r3
 8003ca4:	099b      	lsrs	r3, r3, #6
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003caa:	4b04      	ldr	r3, [pc, #16]	; (8003cbc <vPortSetupTimerInterrupt+0x34>)
 8003cac:	2207      	movs	r2, #7
 8003cae:	601a      	str	r2, [r3, #0]
}
 8003cb0:	bf00      	nop
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	e000e010 	.word	0xe000e010
 8003cc0:	e000e018 	.word	0xe000e018
 8003cc4:	e000e014 	.word	0xe000e014
 8003cc8:	2000800c 	.word	0x2000800c
 8003ccc:	10624dd3 	.word	0x10624dd3

08003cd0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003cd0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003ce0 <vPortEnableVFP+0x10>
 8003cd4:	6801      	ldr	r1, [r0, #0]
 8003cd6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003cda:	6001      	str	r1, [r0, #0]
 8003cdc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003cde:	bf00      	nop
 8003ce0:	e000ed88 	.word	0xe000ed88

08003ce4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b085      	sub	sp, #20
 8003ce8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003cea:	f3ef 8305 	mrs	r3, IPSR
 8003cee:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2b0f      	cmp	r3, #15
 8003cf4:	d913      	bls.n	8003d1e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003cf6:	4a16      	ldr	r2, [pc, #88]	; (8003d50 <vPortValidateInterruptPriority+0x6c>)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003d00:	4b14      	ldr	r3, [pc, #80]	; (8003d54 <vPortValidateInterruptPriority+0x70>)
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	7afa      	ldrb	r2, [r7, #11]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d209      	bcs.n	8003d1e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8003d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d0e:	f383 8811 	msr	BASEPRI, r3
 8003d12:	f3bf 8f6f 	isb	sy
 8003d16:	f3bf 8f4f 	dsb	sy
 8003d1a:	607b      	str	r3, [r7, #4]
 8003d1c:	e7fe      	b.n	8003d1c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003d1e:	4b0e      	ldr	r3, [pc, #56]	; (8003d58 <vPortValidateInterruptPriority+0x74>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003d26:	4b0d      	ldr	r3, [pc, #52]	; (8003d5c <vPortValidateInterruptPriority+0x78>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d909      	bls.n	8003d42 <vPortValidateInterruptPriority+0x5e>
 8003d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d32:	f383 8811 	msr	BASEPRI, r3
 8003d36:	f3bf 8f6f 	isb	sy
 8003d3a:	f3bf 8f4f 	dsb	sy
 8003d3e:	603b      	str	r3, [r7, #0]
 8003d40:	e7fe      	b.n	8003d40 <vPortValidateInterruptPriority+0x5c>
	}
 8003d42:	bf00      	nop
 8003d44:	3714      	adds	r7, #20
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	e000e3f0 	.word	0xe000e3f0
 8003d54:	200126ec 	.word	0x200126ec
 8003d58:	e000ed0c 	.word	0xe000ed0c
 8003d5c:	200126f0 	.word	0x200126f0

08003d60 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b08a      	sub	sp, #40	; 0x28
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003d6c:	f001 fac2 	bl	80052f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003d70:	4b57      	ldr	r3, [pc, #348]	; (8003ed0 <pvPortMalloc+0x170>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d101      	bne.n	8003d7c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003d78:	f000 f90c 	bl	8003f94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003d7c:	4b55      	ldr	r3, [pc, #340]	; (8003ed4 <pvPortMalloc+0x174>)
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4013      	ands	r3, r2
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f040 808c 	bne.w	8003ea2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d01c      	beq.n	8003dca <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8003d90:	2208      	movs	r2, #8
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4413      	add	r3, r2
 8003d96:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f003 0307 	and.w	r3, r3, #7
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d013      	beq.n	8003dca <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f023 0307 	bic.w	r3, r3, #7
 8003da8:	3308      	adds	r3, #8
 8003daa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f003 0307 	and.w	r3, r3, #7
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d009      	beq.n	8003dca <pvPortMalloc+0x6a>
 8003db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dba:	f383 8811 	msr	BASEPRI, r3
 8003dbe:	f3bf 8f6f 	isb	sy
 8003dc2:	f3bf 8f4f 	dsb	sy
 8003dc6:	617b      	str	r3, [r7, #20]
 8003dc8:	e7fe      	b.n	8003dc8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d068      	beq.n	8003ea2 <pvPortMalloc+0x142>
 8003dd0:	4b41      	ldr	r3, [pc, #260]	; (8003ed8 <pvPortMalloc+0x178>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d863      	bhi.n	8003ea2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003dda:	4b40      	ldr	r3, [pc, #256]	; (8003edc <pvPortMalloc+0x17c>)
 8003ddc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003dde:	4b3f      	ldr	r3, [pc, #252]	; (8003edc <pvPortMalloc+0x17c>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003de4:	e004      	b.n	8003df0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8003de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df2:	685a      	ldr	r2, [r3, #4]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d203      	bcs.n	8003e02 <pvPortMalloc+0xa2>
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1f1      	bne.n	8003de6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003e02:	4b33      	ldr	r3, [pc, #204]	; (8003ed0 <pvPortMalloc+0x170>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d04a      	beq.n	8003ea2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003e0c:	6a3b      	ldr	r3, [r7, #32]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2208      	movs	r2, #8
 8003e12:	4413      	add	r3, r2
 8003e14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	6a3b      	ldr	r3, [r7, #32]
 8003e1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e20:	685a      	ldr	r2, [r3, #4]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	1ad2      	subs	r2, r2, r3
 8003e26:	2308      	movs	r3, #8
 8003e28:	005b      	lsls	r3, r3, #1
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d91e      	bls.n	8003e6c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4413      	add	r3, r2
 8003e34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	f003 0307 	and.w	r3, r3, #7
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d009      	beq.n	8003e54 <pvPortMalloc+0xf4>
 8003e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e44:	f383 8811 	msr	BASEPRI, r3
 8003e48:	f3bf 8f6f 	isb	sy
 8003e4c:	f3bf 8f4f 	dsb	sy
 8003e50:	613b      	str	r3, [r7, #16]
 8003e52:	e7fe      	b.n	8003e52 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e56:	685a      	ldr	r2, [r3, #4]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	1ad2      	subs	r2, r2, r3
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003e66:	69b8      	ldr	r0, [r7, #24]
 8003e68:	f000 f8f6 	bl	8004058 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003e6c:	4b1a      	ldr	r3, [pc, #104]	; (8003ed8 <pvPortMalloc+0x178>)
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	4a18      	ldr	r2, [pc, #96]	; (8003ed8 <pvPortMalloc+0x178>)
 8003e78:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003e7a:	4b17      	ldr	r3, [pc, #92]	; (8003ed8 <pvPortMalloc+0x178>)
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	4b18      	ldr	r3, [pc, #96]	; (8003ee0 <pvPortMalloc+0x180>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d203      	bcs.n	8003e8e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003e86:	4b14      	ldr	r3, [pc, #80]	; (8003ed8 <pvPortMalloc+0x178>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a15      	ldr	r2, [pc, #84]	; (8003ee0 <pvPortMalloc+0x180>)
 8003e8c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e90:	685a      	ldr	r2, [r3, #4]
 8003e92:	4b10      	ldr	r3, [pc, #64]	; (8003ed4 <pvPortMalloc+0x174>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	431a      	orrs	r2, r3
 8003e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003ea2:	f001 fa35 	bl	8005310 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	f003 0307 	and.w	r3, r3, #7
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d009      	beq.n	8003ec4 <pvPortMalloc+0x164>
 8003eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb4:	f383 8811 	msr	BASEPRI, r3
 8003eb8:	f3bf 8f6f 	isb	sy
 8003ebc:	f3bf 8f4f 	dsb	sy
 8003ec0:	60fb      	str	r3, [r7, #12]
 8003ec2:	e7fe      	b.n	8003ec2 <pvPortMalloc+0x162>
	return pvReturn;
 8003ec4:	69fb      	ldr	r3, [r7, #28]
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3728      	adds	r7, #40	; 0x28
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	200162fc 	.word	0x200162fc
 8003ed4:	20016308 	.word	0x20016308
 8003ed8:	20016300 	.word	0x20016300
 8003edc:	200162f4 	.word	0x200162f4
 8003ee0:	20016304 	.word	0x20016304

08003ee4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b086      	sub	sp, #24
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d046      	beq.n	8003f84 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003ef6:	2308      	movs	r3, #8
 8003ef8:	425b      	negs	r3, r3
 8003efa:	697a      	ldr	r2, [r7, #20]
 8003efc:	4413      	add	r3, r2
 8003efe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	685a      	ldr	r2, [r3, #4]
 8003f08:	4b20      	ldr	r3, [pc, #128]	; (8003f8c <vPortFree+0xa8>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d109      	bne.n	8003f26 <vPortFree+0x42>
 8003f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f16:	f383 8811 	msr	BASEPRI, r3
 8003f1a:	f3bf 8f6f 	isb	sy
 8003f1e:	f3bf 8f4f 	dsb	sy
 8003f22:	60fb      	str	r3, [r7, #12]
 8003f24:	e7fe      	b.n	8003f24 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d009      	beq.n	8003f42 <vPortFree+0x5e>
 8003f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f32:	f383 8811 	msr	BASEPRI, r3
 8003f36:	f3bf 8f6f 	isb	sy
 8003f3a:	f3bf 8f4f 	dsb	sy
 8003f3e:	60bb      	str	r3, [r7, #8]
 8003f40:	e7fe      	b.n	8003f40 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	685a      	ldr	r2, [r3, #4]
 8003f46:	4b11      	ldr	r3, [pc, #68]	; (8003f8c <vPortFree+0xa8>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d019      	beq.n	8003f84 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d115      	bne.n	8003f84 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	685a      	ldr	r2, [r3, #4]
 8003f5c:	4b0b      	ldr	r3, [pc, #44]	; (8003f8c <vPortFree+0xa8>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	43db      	mvns	r3, r3
 8003f62:	401a      	ands	r2, r3
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003f68:	f001 f9c4 	bl	80052f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	4b07      	ldr	r3, [pc, #28]	; (8003f90 <vPortFree+0xac>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4413      	add	r3, r2
 8003f76:	4a06      	ldr	r2, [pc, #24]	; (8003f90 <vPortFree+0xac>)
 8003f78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003f7a:	6938      	ldr	r0, [r7, #16]
 8003f7c:	f000 f86c 	bl	8004058 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003f80:	f001 f9c6 	bl	8005310 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003f84:	bf00      	nop
 8003f86:	3718      	adds	r7, #24
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	20016308 	.word	0x20016308
 8003f90:	20016300 	.word	0x20016300

08003f94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003f9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003f9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003fa0:	4b27      	ldr	r3, [pc, #156]	; (8004040 <prvHeapInit+0xac>)
 8003fa2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f003 0307 	and.w	r3, r3, #7
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00c      	beq.n	8003fc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	3307      	adds	r3, #7
 8003fb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f023 0307 	bic.w	r3, r3, #7
 8003fba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003fbc:	68ba      	ldr	r2, [r7, #8]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	4a1f      	ldr	r2, [pc, #124]	; (8004040 <prvHeapInit+0xac>)
 8003fc4:	4413      	add	r3, r2
 8003fc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003fcc:	4a1d      	ldr	r2, [pc, #116]	; (8004044 <prvHeapInit+0xb0>)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003fd2:	4b1c      	ldr	r3, [pc, #112]	; (8004044 <prvHeapInit+0xb0>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	4413      	add	r3, r2
 8003fde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003fe0:	2208      	movs	r2, #8
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	1a9b      	subs	r3, r3, r2
 8003fe6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f023 0307 	bic.w	r3, r3, #7
 8003fee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	4a15      	ldr	r2, [pc, #84]	; (8004048 <prvHeapInit+0xb4>)
 8003ff4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003ff6:	4b14      	ldr	r3, [pc, #80]	; (8004048 <prvHeapInit+0xb4>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003ffe:	4b12      	ldr	r3, [pc, #72]	; (8004048 <prvHeapInit+0xb4>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2200      	movs	r2, #0
 8004004:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	1ad2      	subs	r2, r2, r3
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004014:	4b0c      	ldr	r3, [pc, #48]	; (8004048 <prvHeapInit+0xb4>)
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	4a0a      	ldr	r2, [pc, #40]	; (800404c <prvHeapInit+0xb8>)
 8004022:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	4a09      	ldr	r2, [pc, #36]	; (8004050 <prvHeapInit+0xbc>)
 800402a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800402c:	4b09      	ldr	r3, [pc, #36]	; (8004054 <prvHeapInit+0xc0>)
 800402e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004032:	601a      	str	r2, [r3, #0]
}
 8004034:	bf00      	nop
 8004036:	3714      	adds	r7, #20
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	200126f4 	.word	0x200126f4
 8004044:	200162f4 	.word	0x200162f4
 8004048:	200162fc 	.word	0x200162fc
 800404c:	20016304 	.word	0x20016304
 8004050:	20016300 	.word	0x20016300
 8004054:	20016308 	.word	0x20016308

08004058 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004058:	b480      	push	{r7}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004060:	4b28      	ldr	r3, [pc, #160]	; (8004104 <prvInsertBlockIntoFreeList+0xac>)
 8004062:	60fb      	str	r3, [r7, #12]
 8004064:	e002      	b.n	800406c <prvInsertBlockIntoFreeList+0x14>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	60fb      	str	r3, [r7, #12]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	429a      	cmp	r2, r3
 8004074:	d3f7      	bcc.n	8004066 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	68ba      	ldr	r2, [r7, #8]
 8004080:	441a      	add	r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	429a      	cmp	r2, r3
 8004086:	d108      	bne.n	800409a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	685a      	ldr	r2, [r3, #4]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	441a      	add	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	68ba      	ldr	r2, [r7, #8]
 80040a4:	441a      	add	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d118      	bne.n	80040e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	4b15      	ldr	r3, [pc, #84]	; (8004108 <prvInsertBlockIntoFreeList+0xb0>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d00d      	beq.n	80040d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685a      	ldr	r2, [r3, #4]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	441a      	add	r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	601a      	str	r2, [r3, #0]
 80040d4:	e008      	b.n	80040e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80040d6:	4b0c      	ldr	r3, [pc, #48]	; (8004108 <prvInsertBlockIntoFreeList+0xb0>)
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	601a      	str	r2, [r3, #0]
 80040de:	e003      	b.n	80040e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80040e8:	68fa      	ldr	r2, [r7, #12]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d002      	beq.n	80040f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80040f6:	bf00      	nop
 80040f8:	3714      	adds	r7, #20
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	200162f4 	.word	0x200162f4
 8004108:	200162fc 	.word	0x200162fc

0800410c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d109      	bne.n	8004134 <xQueueGenericReset+0x28>
 8004120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004124:	f383 8811 	msr	BASEPRI, r3
 8004128:	f3bf 8f6f 	isb	sy
 800412c:	f3bf 8f4f 	dsb	sy
 8004130:	60bb      	str	r3, [r7, #8]
 8004132:	e7fe      	b.n	8004132 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004134:	f7ff fcfa 	bl	8003b2c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004140:	68f9      	ldr	r1, [r7, #12]
 8004142:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004144:	fb01 f303 	mul.w	r3, r1, r3
 8004148:	441a      	add	r2, r3
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004164:	3b01      	subs	r3, #1
 8004166:	68f9      	ldr	r1, [r7, #12]
 8004168:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800416a:	fb01 f303 	mul.w	r3, r1, r3
 800416e:	441a      	add	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	22ff      	movs	r2, #255	; 0xff
 8004178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	22ff      	movs	r2, #255	; 0xff
 8004180:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d114      	bne.n	80041b4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d01a      	beq.n	80041c8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	3310      	adds	r3, #16
 8004196:	4618      	mov	r0, r3
 8004198:	f001 fac8 	bl	800572c <xTaskRemoveFromEventList>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d012      	beq.n	80041c8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80041a2:	4b0d      	ldr	r3, [pc, #52]	; (80041d8 <xQueueGenericReset+0xcc>)
 80041a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041a8:	601a      	str	r2, [r3, #0]
 80041aa:	f3bf 8f4f 	dsb	sy
 80041ae:	f3bf 8f6f 	isb	sy
 80041b2:	e009      	b.n	80041c8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	3310      	adds	r3, #16
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7ff fad9 	bl	8003770 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	3324      	adds	r3, #36	; 0x24
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7ff fad4 	bl	8003770 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80041c8:	f7ff fcde 	bl	8003b88 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80041cc:	2301      	movs	r3, #1
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3710      	adds	r7, #16
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	e000ed04 	.word	0xe000ed04

080041dc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b08e      	sub	sp, #56	; 0x38
 80041e0:	af02      	add	r7, sp, #8
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
 80041e8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d109      	bne.n	8004204 <xQueueGenericCreateStatic+0x28>
 80041f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f4:	f383 8811 	msr	BASEPRI, r3
 80041f8:	f3bf 8f6f 	isb	sy
 80041fc:	f3bf 8f4f 	dsb	sy
 8004200:	62bb      	str	r3, [r7, #40]	; 0x28
 8004202:	e7fe      	b.n	8004202 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d109      	bne.n	800421e <xQueueGenericCreateStatic+0x42>
 800420a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800420e:	f383 8811 	msr	BASEPRI, r3
 8004212:	f3bf 8f6f 	isb	sy
 8004216:	f3bf 8f4f 	dsb	sy
 800421a:	627b      	str	r3, [r7, #36]	; 0x24
 800421c:	e7fe      	b.n	800421c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d002      	beq.n	800422a <xQueueGenericCreateStatic+0x4e>
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d001      	beq.n	800422e <xQueueGenericCreateStatic+0x52>
 800422a:	2301      	movs	r3, #1
 800422c:	e000      	b.n	8004230 <xQueueGenericCreateStatic+0x54>
 800422e:	2300      	movs	r3, #0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d109      	bne.n	8004248 <xQueueGenericCreateStatic+0x6c>
 8004234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004238:	f383 8811 	msr	BASEPRI, r3
 800423c:	f3bf 8f6f 	isb	sy
 8004240:	f3bf 8f4f 	dsb	sy
 8004244:	623b      	str	r3, [r7, #32]
 8004246:	e7fe      	b.n	8004246 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d102      	bne.n	8004254 <xQueueGenericCreateStatic+0x78>
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d101      	bne.n	8004258 <xQueueGenericCreateStatic+0x7c>
 8004254:	2301      	movs	r3, #1
 8004256:	e000      	b.n	800425a <xQueueGenericCreateStatic+0x7e>
 8004258:	2300      	movs	r3, #0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d109      	bne.n	8004272 <xQueueGenericCreateStatic+0x96>
 800425e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004262:	f383 8811 	msr	BASEPRI, r3
 8004266:	f3bf 8f6f 	isb	sy
 800426a:	f3bf 8f4f 	dsb	sy
 800426e:	61fb      	str	r3, [r7, #28]
 8004270:	e7fe      	b.n	8004270 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004272:	2350      	movs	r3, #80	; 0x50
 8004274:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	2b50      	cmp	r3, #80	; 0x50
 800427a:	d009      	beq.n	8004290 <xQueueGenericCreateStatic+0xb4>
 800427c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004280:	f383 8811 	msr	BASEPRI, r3
 8004284:	f3bf 8f6f 	isb	sy
 8004288:	f3bf 8f4f 	dsb	sy
 800428c:	61bb      	str	r3, [r7, #24]
 800428e:	e7fe      	b.n	800428e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004290:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00d      	beq.n	80042b8 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800429c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80042a4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80042a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042aa:	9300      	str	r3, [sp, #0]
 80042ac:	4613      	mov	r3, r2
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	68b9      	ldr	r1, [r7, #8]
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	f000 f844 	bl	8004340 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80042b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3730      	adds	r7, #48	; 0x30
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b08a      	sub	sp, #40	; 0x28
 80042c6:	af02      	add	r7, sp, #8
 80042c8:	60f8      	str	r0, [r7, #12]
 80042ca:	60b9      	str	r1, [r7, #8]
 80042cc:	4613      	mov	r3, r2
 80042ce:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d109      	bne.n	80042ea <xQueueGenericCreate+0x28>
 80042d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042da:	f383 8811 	msr	BASEPRI, r3
 80042de:	f3bf 8f6f 	isb	sy
 80042e2:	f3bf 8f4f 	dsb	sy
 80042e6:	613b      	str	r3, [r7, #16]
 80042e8:	e7fe      	b.n	80042e8 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d102      	bne.n	80042f6 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80042f0:	2300      	movs	r3, #0
 80042f2:	61fb      	str	r3, [r7, #28]
 80042f4:	e004      	b.n	8004300 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	68ba      	ldr	r2, [r7, #8]
 80042fa:	fb02 f303 	mul.w	r3, r2, r3
 80042fe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	3350      	adds	r3, #80	; 0x50
 8004304:	4618      	mov	r0, r3
 8004306:	f7ff fd2b 	bl	8003d60 <pvPortMalloc>
 800430a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d011      	beq.n	8004336 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	3350      	adds	r3, #80	; 0x50
 800431a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004324:	79fa      	ldrb	r2, [r7, #7]
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	9300      	str	r3, [sp, #0]
 800432a:	4613      	mov	r3, r2
 800432c:	697a      	ldr	r2, [r7, #20]
 800432e:	68b9      	ldr	r1, [r7, #8]
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f000 f805 	bl	8004340 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004336:	69bb      	ldr	r3, [r7, #24]
	}
 8004338:	4618      	mov	r0, r3
 800433a:	3720      	adds	r7, #32
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
 800434c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d103      	bne.n	800435c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	69ba      	ldr	r2, [r7, #24]
 8004358:	601a      	str	r2, [r3, #0]
 800435a:	e002      	b.n	8004362 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	68ba      	ldr	r2, [r7, #8]
 800436c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800436e:	2101      	movs	r1, #1
 8004370:	69b8      	ldr	r0, [r7, #24]
 8004372:	f7ff fecb 	bl	800410c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	78fa      	ldrb	r2, [r7, #3]
 800437a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800437e:	bf00      	nop
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
	...

08004388 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b08e      	sub	sp, #56	; 0x38
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]
 8004394:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004396:	2300      	movs	r3, #0
 8004398:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800439e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d109      	bne.n	80043b8 <xQueueGenericSend+0x30>
 80043a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a8:	f383 8811 	msr	BASEPRI, r3
 80043ac:	f3bf 8f6f 	isb	sy
 80043b0:	f3bf 8f4f 	dsb	sy
 80043b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80043b6:	e7fe      	b.n	80043b6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d103      	bne.n	80043c6 <xQueueGenericSend+0x3e>
 80043be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <xQueueGenericSend+0x42>
 80043c6:	2301      	movs	r3, #1
 80043c8:	e000      	b.n	80043cc <xQueueGenericSend+0x44>
 80043ca:	2300      	movs	r3, #0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d109      	bne.n	80043e4 <xQueueGenericSend+0x5c>
 80043d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d4:	f383 8811 	msr	BASEPRI, r3
 80043d8:	f3bf 8f6f 	isb	sy
 80043dc:	f3bf 8f4f 	dsb	sy
 80043e0:	627b      	str	r3, [r7, #36]	; 0x24
 80043e2:	e7fe      	b.n	80043e2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d103      	bne.n	80043f2 <xQueueGenericSend+0x6a>
 80043ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d101      	bne.n	80043f6 <xQueueGenericSend+0x6e>
 80043f2:	2301      	movs	r3, #1
 80043f4:	e000      	b.n	80043f8 <xQueueGenericSend+0x70>
 80043f6:	2300      	movs	r3, #0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d109      	bne.n	8004410 <xQueueGenericSend+0x88>
 80043fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004400:	f383 8811 	msr	BASEPRI, r3
 8004404:	f3bf 8f6f 	isb	sy
 8004408:	f3bf 8f4f 	dsb	sy
 800440c:	623b      	str	r3, [r7, #32]
 800440e:	e7fe      	b.n	800440e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004410:	f001 fb42 	bl	8005a98 <xTaskGetSchedulerState>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d102      	bne.n	8004420 <xQueueGenericSend+0x98>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d101      	bne.n	8004424 <xQueueGenericSend+0x9c>
 8004420:	2301      	movs	r3, #1
 8004422:	e000      	b.n	8004426 <xQueueGenericSend+0x9e>
 8004424:	2300      	movs	r3, #0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d109      	bne.n	800443e <xQueueGenericSend+0xb6>
 800442a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442e:	f383 8811 	msr	BASEPRI, r3
 8004432:	f3bf 8f6f 	isb	sy
 8004436:	f3bf 8f4f 	dsb	sy
 800443a:	61fb      	str	r3, [r7, #28]
 800443c:	e7fe      	b.n	800443c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800443e:	f7ff fb75 	bl	8003b2c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004444:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800444a:	429a      	cmp	r2, r3
 800444c:	d302      	bcc.n	8004454 <xQueueGenericSend+0xcc>
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	2b02      	cmp	r3, #2
 8004452:	d129      	bne.n	80044a8 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004454:	683a      	ldr	r2, [r7, #0]
 8004456:	68b9      	ldr	r1, [r7, #8]
 8004458:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800445a:	f000 fba9 	bl	8004bb0 <prvCopyDataToQueue>
 800445e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004464:	2b00      	cmp	r3, #0
 8004466:	d010      	beq.n	800448a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446a:	3324      	adds	r3, #36	; 0x24
 800446c:	4618      	mov	r0, r3
 800446e:	f001 f95d 	bl	800572c <xTaskRemoveFromEventList>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d013      	beq.n	80044a0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004478:	4b3f      	ldr	r3, [pc, #252]	; (8004578 <xQueueGenericSend+0x1f0>)
 800447a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800447e:	601a      	str	r2, [r3, #0]
 8004480:	f3bf 8f4f 	dsb	sy
 8004484:	f3bf 8f6f 	isb	sy
 8004488:	e00a      	b.n	80044a0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800448a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800448c:	2b00      	cmp	r3, #0
 800448e:	d007      	beq.n	80044a0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004490:	4b39      	ldr	r3, [pc, #228]	; (8004578 <xQueueGenericSend+0x1f0>)
 8004492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004496:	601a      	str	r2, [r3, #0]
 8004498:	f3bf 8f4f 	dsb	sy
 800449c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80044a0:	f7ff fb72 	bl	8003b88 <vPortExitCritical>
				return pdPASS;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e063      	b.n	8004570 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d103      	bne.n	80044b6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80044ae:	f7ff fb6b 	bl	8003b88 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80044b2:	2300      	movs	r3, #0
 80044b4:	e05c      	b.n	8004570 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80044b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d106      	bne.n	80044ca <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80044bc:	f107 0314 	add.w	r3, r7, #20
 80044c0:	4618      	mov	r0, r3
 80044c2:	f001 f995 	bl	80057f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80044c6:	2301      	movs	r3, #1
 80044c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80044ca:	f7ff fb5d 	bl	8003b88 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80044ce:	f000 ff11 	bl	80052f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80044d2:	f7ff fb2b 	bl	8003b2c <vPortEnterCritical>
 80044d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044dc:	b25b      	sxtb	r3, r3
 80044de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044e2:	d103      	bne.n	80044ec <xQueueGenericSend+0x164>
 80044e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044f2:	b25b      	sxtb	r3, r3
 80044f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044f8:	d103      	bne.n	8004502 <xQueueGenericSend+0x17a>
 80044fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004502:	f7ff fb41 	bl	8003b88 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004506:	1d3a      	adds	r2, r7, #4
 8004508:	f107 0314 	add.w	r3, r7, #20
 800450c:	4611      	mov	r1, r2
 800450e:	4618      	mov	r0, r3
 8004510:	f001 f984 	bl	800581c <xTaskCheckForTimeOut>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d124      	bne.n	8004564 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800451a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800451c:	f000 fc40 	bl	8004da0 <prvIsQueueFull>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d018      	beq.n	8004558 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004528:	3310      	adds	r3, #16
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	4611      	mov	r1, r2
 800452e:	4618      	mov	r0, r3
 8004530:	f001 f8ae 	bl	8005690 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004534:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004536:	f000 fbcb 	bl	8004cd0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800453a:	f000 fee9 	bl	8005310 <xTaskResumeAll>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	f47f af7c 	bne.w	800443e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8004546:	4b0c      	ldr	r3, [pc, #48]	; (8004578 <xQueueGenericSend+0x1f0>)
 8004548:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800454c:	601a      	str	r2, [r3, #0]
 800454e:	f3bf 8f4f 	dsb	sy
 8004552:	f3bf 8f6f 	isb	sy
 8004556:	e772      	b.n	800443e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004558:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800455a:	f000 fbb9 	bl	8004cd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800455e:	f000 fed7 	bl	8005310 <xTaskResumeAll>
 8004562:	e76c      	b.n	800443e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004564:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004566:	f000 fbb3 	bl	8004cd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800456a:	f000 fed1 	bl	8005310 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800456e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004570:	4618      	mov	r0, r3
 8004572:	3738      	adds	r7, #56	; 0x38
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	e000ed04 	.word	0xe000ed04

0800457c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b08e      	sub	sp, #56	; 0x38
 8004580:	af00      	add	r7, sp, #0
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	607a      	str	r2, [r7, #4]
 8004588:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800458e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004590:	2b00      	cmp	r3, #0
 8004592:	d109      	bne.n	80045a8 <xQueueGenericSendFromISR+0x2c>
 8004594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004598:	f383 8811 	msr	BASEPRI, r3
 800459c:	f3bf 8f6f 	isb	sy
 80045a0:	f3bf 8f4f 	dsb	sy
 80045a4:	627b      	str	r3, [r7, #36]	; 0x24
 80045a6:	e7fe      	b.n	80045a6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d103      	bne.n	80045b6 <xQueueGenericSendFromISR+0x3a>
 80045ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d101      	bne.n	80045ba <xQueueGenericSendFromISR+0x3e>
 80045b6:	2301      	movs	r3, #1
 80045b8:	e000      	b.n	80045bc <xQueueGenericSendFromISR+0x40>
 80045ba:	2300      	movs	r3, #0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d109      	bne.n	80045d4 <xQueueGenericSendFromISR+0x58>
 80045c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c4:	f383 8811 	msr	BASEPRI, r3
 80045c8:	f3bf 8f6f 	isb	sy
 80045cc:	f3bf 8f4f 	dsb	sy
 80045d0:	623b      	str	r3, [r7, #32]
 80045d2:	e7fe      	b.n	80045d2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d103      	bne.n	80045e2 <xQueueGenericSendFromISR+0x66>
 80045da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d101      	bne.n	80045e6 <xQueueGenericSendFromISR+0x6a>
 80045e2:	2301      	movs	r3, #1
 80045e4:	e000      	b.n	80045e8 <xQueueGenericSendFromISR+0x6c>
 80045e6:	2300      	movs	r3, #0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d109      	bne.n	8004600 <xQueueGenericSendFromISR+0x84>
 80045ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f0:	f383 8811 	msr	BASEPRI, r3
 80045f4:	f3bf 8f6f 	isb	sy
 80045f8:	f3bf 8f4f 	dsb	sy
 80045fc:	61fb      	str	r3, [r7, #28]
 80045fe:	e7fe      	b.n	80045fe <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004600:	f7ff fb70 	bl	8003ce4 <vPortValidateInterruptPriority>
	__asm volatile
 8004604:	f3ef 8211 	mrs	r2, BASEPRI
 8004608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460c:	f383 8811 	msr	BASEPRI, r3
 8004610:	f3bf 8f6f 	isb	sy
 8004614:	f3bf 8f4f 	dsb	sy
 8004618:	61ba      	str	r2, [r7, #24]
 800461a:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800461c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800461e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004622:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004628:	429a      	cmp	r2, r3
 800462a:	d302      	bcc.n	8004632 <xQueueGenericSendFromISR+0xb6>
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	2b02      	cmp	r3, #2
 8004630:	d12c      	bne.n	800468c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004634:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004638:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800463c:	683a      	ldr	r2, [r7, #0]
 800463e:	68b9      	ldr	r1, [r7, #8]
 8004640:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004642:	f000 fab5 	bl	8004bb0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004646:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800464a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800464e:	d112      	bne.n	8004676 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004654:	2b00      	cmp	r3, #0
 8004656:	d016      	beq.n	8004686 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800465a:	3324      	adds	r3, #36	; 0x24
 800465c:	4618      	mov	r0, r3
 800465e:	f001 f865 	bl	800572c <xTaskRemoveFromEventList>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00e      	beq.n	8004686 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00b      	beq.n	8004686 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2201      	movs	r2, #1
 8004672:	601a      	str	r2, [r3, #0]
 8004674:	e007      	b.n	8004686 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004676:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800467a:	3301      	adds	r3, #1
 800467c:	b2db      	uxtb	r3, r3
 800467e:	b25a      	sxtb	r2, r3
 8004680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004682:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004686:	2301      	movs	r3, #1
 8004688:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800468a:	e001      	b.n	8004690 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800468c:	2300      	movs	r3, #0
 800468e:	637b      	str	r3, [r7, #52]	; 0x34
 8004690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004692:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800469a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800469c:	4618      	mov	r0, r3
 800469e:	3738      	adds	r7, #56	; 0x38
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b08e      	sub	sp, #56	; 0x38
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80046b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d109      	bne.n	80046cc <xQueueGiveFromISR+0x28>
	__asm volatile
 80046b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046bc:	f383 8811 	msr	BASEPRI, r3
 80046c0:	f3bf 8f6f 	isb	sy
 80046c4:	f3bf 8f4f 	dsb	sy
 80046c8:	623b      	str	r3, [r7, #32]
 80046ca:	e7fe      	b.n	80046ca <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80046cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d009      	beq.n	80046e8 <xQueueGiveFromISR+0x44>
 80046d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d8:	f383 8811 	msr	BASEPRI, r3
 80046dc:	f3bf 8f6f 	isb	sy
 80046e0:	f3bf 8f4f 	dsb	sy
 80046e4:	61fb      	str	r3, [r7, #28]
 80046e6:	e7fe      	b.n	80046e6 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80046e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d103      	bne.n	80046f8 <xQueueGiveFromISR+0x54>
 80046f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d101      	bne.n	80046fc <xQueueGiveFromISR+0x58>
 80046f8:	2301      	movs	r3, #1
 80046fa:	e000      	b.n	80046fe <xQueueGiveFromISR+0x5a>
 80046fc:	2300      	movs	r3, #0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d109      	bne.n	8004716 <xQueueGiveFromISR+0x72>
 8004702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004706:	f383 8811 	msr	BASEPRI, r3
 800470a:	f3bf 8f6f 	isb	sy
 800470e:	f3bf 8f4f 	dsb	sy
 8004712:	61bb      	str	r3, [r7, #24]
 8004714:	e7fe      	b.n	8004714 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004716:	f7ff fae5 	bl	8003ce4 <vPortValidateInterruptPriority>
	__asm volatile
 800471a:	f3ef 8211 	mrs	r2, BASEPRI
 800471e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004722:	f383 8811 	msr	BASEPRI, r3
 8004726:	f3bf 8f6f 	isb	sy
 800472a:	f3bf 8f4f 	dsb	sy
 800472e:	617a      	str	r2, [r7, #20]
 8004730:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004732:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004734:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800473c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800473e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004742:	429a      	cmp	r2, r3
 8004744:	d92b      	bls.n	800479e <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004748:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800474c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004752:	1c5a      	adds	r2, r3, #1
 8004754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004756:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004758:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800475c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004760:	d112      	bne.n	8004788 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004766:	2b00      	cmp	r3, #0
 8004768:	d016      	beq.n	8004798 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800476a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800476c:	3324      	adds	r3, #36	; 0x24
 800476e:	4618      	mov	r0, r3
 8004770:	f000 ffdc 	bl	800572c <xTaskRemoveFromEventList>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00e      	beq.n	8004798 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00b      	beq.n	8004798 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	2201      	movs	r2, #1
 8004784:	601a      	str	r2, [r3, #0]
 8004786:	e007      	b.n	8004798 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004788:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800478c:	3301      	adds	r3, #1
 800478e:	b2db      	uxtb	r3, r3
 8004790:	b25a      	sxtb	r2, r3
 8004792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004794:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004798:	2301      	movs	r3, #1
 800479a:	637b      	str	r3, [r7, #52]	; 0x34
 800479c:	e001      	b.n	80047a2 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800479e:	2300      	movs	r3, #0
 80047a0:	637b      	str	r3, [r7, #52]	; 0x34
 80047a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80047ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3738      	adds	r7, #56	; 0x38
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
	...

080047b8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b08c      	sub	sp, #48	; 0x30
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80047c4:	2300      	movs	r3, #0
 80047c6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80047cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d109      	bne.n	80047e6 <xQueueReceive+0x2e>
	__asm volatile
 80047d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d6:	f383 8811 	msr	BASEPRI, r3
 80047da:	f3bf 8f6f 	isb	sy
 80047de:	f3bf 8f4f 	dsb	sy
 80047e2:	623b      	str	r3, [r7, #32]
 80047e4:	e7fe      	b.n	80047e4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d103      	bne.n	80047f4 <xQueueReceive+0x3c>
 80047ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d101      	bne.n	80047f8 <xQueueReceive+0x40>
 80047f4:	2301      	movs	r3, #1
 80047f6:	e000      	b.n	80047fa <xQueueReceive+0x42>
 80047f8:	2300      	movs	r3, #0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d109      	bne.n	8004812 <xQueueReceive+0x5a>
 80047fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004802:	f383 8811 	msr	BASEPRI, r3
 8004806:	f3bf 8f6f 	isb	sy
 800480a:	f3bf 8f4f 	dsb	sy
 800480e:	61fb      	str	r3, [r7, #28]
 8004810:	e7fe      	b.n	8004810 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004812:	f001 f941 	bl	8005a98 <xTaskGetSchedulerState>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d102      	bne.n	8004822 <xQueueReceive+0x6a>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d101      	bne.n	8004826 <xQueueReceive+0x6e>
 8004822:	2301      	movs	r3, #1
 8004824:	e000      	b.n	8004828 <xQueueReceive+0x70>
 8004826:	2300      	movs	r3, #0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d109      	bne.n	8004840 <xQueueReceive+0x88>
 800482c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004830:	f383 8811 	msr	BASEPRI, r3
 8004834:	f3bf 8f6f 	isb	sy
 8004838:	f3bf 8f4f 	dsb	sy
 800483c:	61bb      	str	r3, [r7, #24]
 800483e:	e7fe      	b.n	800483e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004840:	f7ff f974 	bl	8003b2c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004848:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800484a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484c:	2b00      	cmp	r3, #0
 800484e:	d01f      	beq.n	8004890 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004850:	68b9      	ldr	r1, [r7, #8]
 8004852:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004854:	f000 fa16 	bl	8004c84 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485a:	1e5a      	subs	r2, r3, #1
 800485c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800485e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d00f      	beq.n	8004888 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800486a:	3310      	adds	r3, #16
 800486c:	4618      	mov	r0, r3
 800486e:	f000 ff5d 	bl	800572c <xTaskRemoveFromEventList>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d007      	beq.n	8004888 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004878:	4b3c      	ldr	r3, [pc, #240]	; (800496c <xQueueReceive+0x1b4>)
 800487a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800487e:	601a      	str	r2, [r3, #0]
 8004880:	f3bf 8f4f 	dsb	sy
 8004884:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004888:	f7ff f97e 	bl	8003b88 <vPortExitCritical>
				return pdPASS;
 800488c:	2301      	movs	r3, #1
 800488e:	e069      	b.n	8004964 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d103      	bne.n	800489e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004896:	f7ff f977 	bl	8003b88 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800489a:	2300      	movs	r3, #0
 800489c:	e062      	b.n	8004964 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800489e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d106      	bne.n	80048b2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80048a4:	f107 0310 	add.w	r3, r7, #16
 80048a8:	4618      	mov	r0, r3
 80048aa:	f000 ffa1 	bl	80057f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80048ae:	2301      	movs	r3, #1
 80048b0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80048b2:	f7ff f969 	bl	8003b88 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80048b6:	f000 fd1d 	bl	80052f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80048ba:	f7ff f937 	bl	8003b2c <vPortEnterCritical>
 80048be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048c4:	b25b      	sxtb	r3, r3
 80048c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048ca:	d103      	bne.n	80048d4 <xQueueReceive+0x11c>
 80048cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048da:	b25b      	sxtb	r3, r3
 80048dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048e0:	d103      	bne.n	80048ea <xQueueReceive+0x132>
 80048e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048ea:	f7ff f94d 	bl	8003b88 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80048ee:	1d3a      	adds	r2, r7, #4
 80048f0:	f107 0310 	add.w	r3, r7, #16
 80048f4:	4611      	mov	r1, r2
 80048f6:	4618      	mov	r0, r3
 80048f8:	f000 ff90 	bl	800581c <xTaskCheckForTimeOut>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d123      	bne.n	800494a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004902:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004904:	f000 fa36 	bl	8004d74 <prvIsQueueEmpty>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d017      	beq.n	800493e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800490e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004910:	3324      	adds	r3, #36	; 0x24
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	4611      	mov	r1, r2
 8004916:	4618      	mov	r0, r3
 8004918:	f000 feba 	bl	8005690 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800491c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800491e:	f000 f9d7 	bl	8004cd0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004922:	f000 fcf5 	bl	8005310 <xTaskResumeAll>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d189      	bne.n	8004840 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800492c:	4b0f      	ldr	r3, [pc, #60]	; (800496c <xQueueReceive+0x1b4>)
 800492e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004932:	601a      	str	r2, [r3, #0]
 8004934:	f3bf 8f4f 	dsb	sy
 8004938:	f3bf 8f6f 	isb	sy
 800493c:	e780      	b.n	8004840 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800493e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004940:	f000 f9c6 	bl	8004cd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004944:	f000 fce4 	bl	8005310 <xTaskResumeAll>
 8004948:	e77a      	b.n	8004840 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800494a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800494c:	f000 f9c0 	bl	8004cd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004950:	f000 fcde 	bl	8005310 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004954:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004956:	f000 fa0d 	bl	8004d74 <prvIsQueueEmpty>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	f43f af6f 	beq.w	8004840 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004962:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004964:	4618      	mov	r0, r3
 8004966:	3730      	adds	r7, #48	; 0x30
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	e000ed04 	.word	0xe000ed04

08004970 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b08e      	sub	sp, #56	; 0x38
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800497a:	2300      	movs	r3, #0
 800497c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004982:	2300      	movs	r3, #0
 8004984:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004988:	2b00      	cmp	r3, #0
 800498a:	d109      	bne.n	80049a0 <xQueueSemaphoreTake+0x30>
 800498c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004990:	f383 8811 	msr	BASEPRI, r3
 8004994:	f3bf 8f6f 	isb	sy
 8004998:	f3bf 8f4f 	dsb	sy
 800499c:	623b      	str	r3, [r7, #32]
 800499e:	e7fe      	b.n	800499e <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80049a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d009      	beq.n	80049bc <xQueueSemaphoreTake+0x4c>
 80049a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ac:	f383 8811 	msr	BASEPRI, r3
 80049b0:	f3bf 8f6f 	isb	sy
 80049b4:	f3bf 8f4f 	dsb	sy
 80049b8:	61fb      	str	r3, [r7, #28]
 80049ba:	e7fe      	b.n	80049ba <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80049bc:	f001 f86c 	bl	8005a98 <xTaskGetSchedulerState>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d102      	bne.n	80049cc <xQueueSemaphoreTake+0x5c>
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d101      	bne.n	80049d0 <xQueueSemaphoreTake+0x60>
 80049cc:	2301      	movs	r3, #1
 80049ce:	e000      	b.n	80049d2 <xQueueSemaphoreTake+0x62>
 80049d0:	2300      	movs	r3, #0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d109      	bne.n	80049ea <xQueueSemaphoreTake+0x7a>
 80049d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049da:	f383 8811 	msr	BASEPRI, r3
 80049de:	f3bf 8f6f 	isb	sy
 80049e2:	f3bf 8f4f 	dsb	sy
 80049e6:	61bb      	str	r3, [r7, #24]
 80049e8:	e7fe      	b.n	80049e8 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80049ea:	f7ff f89f 	bl	8003b2c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80049ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f2:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80049f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d024      	beq.n	8004a44 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80049fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fc:	1e5a      	subs	r2, r3, #1
 80049fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a00:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d104      	bne.n	8004a14 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004a0a:	f001 f9b7 	bl	8005d7c <pvTaskIncrementMutexHeldCount>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a12:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d00f      	beq.n	8004a3c <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a1e:	3310      	adds	r3, #16
 8004a20:	4618      	mov	r0, r3
 8004a22:	f000 fe83 	bl	800572c <xTaskRemoveFromEventList>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d007      	beq.n	8004a3c <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004a2c:	4b53      	ldr	r3, [pc, #332]	; (8004b7c <xQueueSemaphoreTake+0x20c>)
 8004a2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a32:	601a      	str	r2, [r3, #0]
 8004a34:	f3bf 8f4f 	dsb	sy
 8004a38:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004a3c:	f7ff f8a4 	bl	8003b88 <vPortExitCritical>
				return pdPASS;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e096      	b.n	8004b72 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d110      	bne.n	8004a6c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d009      	beq.n	8004a64 <xQueueSemaphoreTake+0xf4>
 8004a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a54:	f383 8811 	msr	BASEPRI, r3
 8004a58:	f3bf 8f6f 	isb	sy
 8004a5c:	f3bf 8f4f 	dsb	sy
 8004a60:	617b      	str	r3, [r7, #20]
 8004a62:	e7fe      	b.n	8004a62 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004a64:	f7ff f890 	bl	8003b88 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	e082      	b.n	8004b72 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d106      	bne.n	8004a80 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a72:	f107 030c 	add.w	r3, r7, #12
 8004a76:	4618      	mov	r0, r3
 8004a78:	f000 feba 	bl	80057f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a80:	f7ff f882 	bl	8003b88 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a84:	f000 fc36 	bl	80052f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a88:	f7ff f850 	bl	8003b2c <vPortEnterCritical>
 8004a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a92:	b25b      	sxtb	r3, r3
 8004a94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a98:	d103      	bne.n	8004aa2 <xQueueSemaphoreTake+0x132>
 8004a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004aa8:	b25b      	sxtb	r3, r3
 8004aaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004aae:	d103      	bne.n	8004ab8 <xQueueSemaphoreTake+0x148>
 8004ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ab8:	f7ff f866 	bl	8003b88 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004abc:	463a      	mov	r2, r7
 8004abe:	f107 030c 	add.w	r3, r7, #12
 8004ac2:	4611      	mov	r1, r2
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f000 fea9 	bl	800581c <xTaskCheckForTimeOut>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d132      	bne.n	8004b36 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ad0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004ad2:	f000 f94f 	bl	8004d74 <prvIsQueueEmpty>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d026      	beq.n	8004b2a <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d109      	bne.n	8004af8 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8004ae4:	f7ff f822 	bl	8003b2c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	4618      	mov	r0, r3
 8004aee:	f000 fff1 	bl	8005ad4 <xTaskPriorityInherit>
 8004af2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004af4:	f7ff f848 	bl	8003b88 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004afa:	3324      	adds	r3, #36	; 0x24
 8004afc:	683a      	ldr	r2, [r7, #0]
 8004afe:	4611      	mov	r1, r2
 8004b00:	4618      	mov	r0, r3
 8004b02:	f000 fdc5 	bl	8005690 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004b06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b08:	f000 f8e2 	bl	8004cd0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004b0c:	f000 fc00 	bl	8005310 <xTaskResumeAll>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	f47f af69 	bne.w	80049ea <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8004b18:	4b18      	ldr	r3, [pc, #96]	; (8004b7c <xQueueSemaphoreTake+0x20c>)
 8004b1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b1e:	601a      	str	r2, [r3, #0]
 8004b20:	f3bf 8f4f 	dsb	sy
 8004b24:	f3bf 8f6f 	isb	sy
 8004b28:	e75f      	b.n	80049ea <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004b2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b2c:	f000 f8d0 	bl	8004cd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b30:	f000 fbee 	bl	8005310 <xTaskResumeAll>
 8004b34:	e759      	b.n	80049ea <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004b36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b38:	f000 f8ca 	bl	8004cd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b3c:	f000 fbe8 	bl	8005310 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b42:	f000 f917 	bl	8004d74 <prvIsQueueEmpty>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	f43f af4e 	beq.w	80049ea <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00d      	beq.n	8004b70 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8004b54:	f7fe ffea 	bl	8003b2c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004b58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b5a:	f000 f811 	bl	8004b80 <prvGetDisinheritPriorityAfterTimeout>
 8004b5e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b66:	4618      	mov	r0, r3
 8004b68:	f001 f888 	bl	8005c7c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004b6c:	f7ff f80c 	bl	8003b88 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004b70:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3738      	adds	r7, #56	; 0x38
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	e000ed04 	.word	0xe000ed04

08004b80 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004b80:	b480      	push	{r7}
 8004b82:	b085      	sub	sp, #20
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d006      	beq.n	8004b9e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8004b9a:	60fb      	str	r3, [r7, #12]
 8004b9c:	e001      	b.n	8004ba2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
	}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3714      	adds	r7, #20
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b086      	sub	sp, #24
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d10d      	bne.n	8004bea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d14d      	bne.n	8004c72 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f000 ffe2 	bl	8005ba4 <xTaskPriorityDisinherit>
 8004be0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2200      	movs	r2, #0
 8004be6:	609a      	str	r2, [r3, #8]
 8004be8:	e043      	b.n	8004c72 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d119      	bne.n	8004c24 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6858      	ldr	r0, [r3, #4]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	68b9      	ldr	r1, [r7, #8]
 8004bfc:	f002 f92a 	bl	8006e54 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	685a      	ldr	r2, [r3, #4]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c08:	441a      	add	r2, r3
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	685a      	ldr	r2, [r3, #4]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d32b      	bcc.n	8004c72 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	605a      	str	r2, [r3, #4]
 8004c22:	e026      	b.n	8004c72 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	68d8      	ldr	r0, [r3, #12]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	68b9      	ldr	r1, [r7, #8]
 8004c30:	f002 f910 	bl	8006e54 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	68da      	ldr	r2, [r3, #12]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3c:	425b      	negs	r3, r3
 8004c3e:	441a      	add	r2, r3
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	68da      	ldr	r2, [r3, #12]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d207      	bcs.n	8004c60 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	689a      	ldr	r2, [r3, #8]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c58:	425b      	negs	r3, r3
 8004c5a:	441a      	add	r2, r3
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d105      	bne.n	8004c72 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d002      	beq.n	8004c72 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	3b01      	subs	r3, #1
 8004c70:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	1c5a      	adds	r2, r3, #1
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004c7a:	697b      	ldr	r3, [r7, #20]
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3718      	adds	r7, #24
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d018      	beq.n	8004cc8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	68da      	ldr	r2, [r3, #12]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9e:	441a      	add	r2, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	68da      	ldr	r2, [r3, #12]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d303      	bcc.n	8004cb8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	68d9      	ldr	r1, [r3, #12]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	6838      	ldr	r0, [r7, #0]
 8004cc4:	f002 f8c6 	bl	8006e54 <memcpy>
	}
}
 8004cc8:	bf00      	nop
 8004cca:	3708      	adds	r7, #8
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004cd8:	f7fe ff28 	bl	8003b2c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ce2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ce4:	e011      	b.n	8004d0a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d012      	beq.n	8004d14 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	3324      	adds	r3, #36	; 0x24
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f000 fd1a 	bl	800572c <xTaskRemoveFromEventList>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d001      	beq.n	8004d02 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004cfe:	f000 fded 	bl	80058dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004d02:	7bfb      	ldrb	r3, [r7, #15]
 8004d04:	3b01      	subs	r3, #1
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	dce9      	bgt.n	8004ce6 <prvUnlockQueue+0x16>
 8004d12:	e000      	b.n	8004d16 <prvUnlockQueue+0x46>
					break;
 8004d14:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	22ff      	movs	r2, #255	; 0xff
 8004d1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004d1e:	f7fe ff33 	bl	8003b88 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004d22:	f7fe ff03 	bl	8003b2c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d2c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d2e:	e011      	b.n	8004d54 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	691b      	ldr	r3, [r3, #16]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d012      	beq.n	8004d5e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	3310      	adds	r3, #16
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f000 fcf5 	bl	800572c <xTaskRemoveFromEventList>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d001      	beq.n	8004d4c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004d48:	f000 fdc8 	bl	80058dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004d4c:	7bbb      	ldrb	r3, [r7, #14]
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	dce9      	bgt.n	8004d30 <prvUnlockQueue+0x60>
 8004d5c:	e000      	b.n	8004d60 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004d5e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	22ff      	movs	r2, #255	; 0xff
 8004d64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004d68:	f7fe ff0e 	bl	8003b88 <vPortExitCritical>
}
 8004d6c:	bf00      	nop
 8004d6e:	3710      	adds	r7, #16
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d7c:	f7fe fed6 	bl	8003b2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d102      	bne.n	8004d8e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	60fb      	str	r3, [r7, #12]
 8004d8c:	e001      	b.n	8004d92 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d92:	f7fe fef9 	bl	8003b88 <vPortExitCritical>

	return xReturn;
 8004d96:	68fb      	ldr	r3, [r7, #12]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3710      	adds	r7, #16
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004da8:	f7fe fec0 	bl	8003b2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d102      	bne.n	8004dbe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004db8:	2301      	movs	r3, #1
 8004dba:	60fb      	str	r3, [r7, #12]
 8004dbc:	e001      	b.n	8004dc2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004dc2:	f7fe fee1 	bl	8003b88 <vPortExitCritical>

	return xReturn;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3710      	adds	r7, #16
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b085      	sub	sp, #20
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004dda:	2300      	movs	r3, #0
 8004ddc:	60fb      	str	r3, [r7, #12]
 8004dde:	e014      	b.n	8004e0a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004de0:	4a0e      	ldr	r2, [pc, #56]	; (8004e1c <vQueueAddToRegistry+0x4c>)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d10b      	bne.n	8004e04 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004dec:	490b      	ldr	r1, [pc, #44]	; (8004e1c <vQueueAddToRegistry+0x4c>)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	683a      	ldr	r2, [r7, #0]
 8004df2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004df6:	4a09      	ldr	r2, [pc, #36]	; (8004e1c <vQueueAddToRegistry+0x4c>)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	00db      	lsls	r3, r3, #3
 8004dfc:	4413      	add	r3, r2
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004e02:	e005      	b.n	8004e10 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	3301      	adds	r3, #1
 8004e08:	60fb      	str	r3, [r7, #12]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2b07      	cmp	r3, #7
 8004e0e:	d9e7      	bls.n	8004de0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004e10:	bf00      	nop
 8004e12:	3714      	adds	r7, #20
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr
 8004e1c:	2001693c 	.word	0x2001693c

08004e20 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b086      	sub	sp, #24
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004e30:	f7fe fe7c 	bl	8003b2c <vPortEnterCritical>
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e3a:	b25b      	sxtb	r3, r3
 8004e3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e40:	d103      	bne.n	8004e4a <vQueueWaitForMessageRestricted+0x2a>
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e50:	b25b      	sxtb	r3, r3
 8004e52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e56:	d103      	bne.n	8004e60 <vQueueWaitForMessageRestricted+0x40>
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e60:	f7fe fe92 	bl	8003b88 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d106      	bne.n	8004e7a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	3324      	adds	r3, #36	; 0x24
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	68b9      	ldr	r1, [r7, #8]
 8004e74:	4618      	mov	r0, r3
 8004e76:	f000 fc2f 	bl	80056d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004e7a:	6978      	ldr	r0, [r7, #20]
 8004e7c:	f7ff ff28 	bl	8004cd0 <prvUnlockQueue>
	}
 8004e80:	bf00      	nop
 8004e82:	3718      	adds	r7, #24
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b08e      	sub	sp, #56	; 0x38
 8004e8c:	af04      	add	r7, sp, #16
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	607a      	str	r2, [r7, #4]
 8004e94:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d109      	bne.n	8004eb0 <xTaskCreateStatic+0x28>
 8004e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea0:	f383 8811 	msr	BASEPRI, r3
 8004ea4:	f3bf 8f6f 	isb	sy
 8004ea8:	f3bf 8f4f 	dsb	sy
 8004eac:	623b      	str	r3, [r7, #32]
 8004eae:	e7fe      	b.n	8004eae <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d109      	bne.n	8004eca <xTaskCreateStatic+0x42>
 8004eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eba:	f383 8811 	msr	BASEPRI, r3
 8004ebe:	f3bf 8f6f 	isb	sy
 8004ec2:	f3bf 8f4f 	dsb	sy
 8004ec6:	61fb      	str	r3, [r7, #28]
 8004ec8:	e7fe      	b.n	8004ec8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004eca:	235c      	movs	r3, #92	; 0x5c
 8004ecc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	2b5c      	cmp	r3, #92	; 0x5c
 8004ed2:	d009      	beq.n	8004ee8 <xTaskCreateStatic+0x60>
 8004ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed8:	f383 8811 	msr	BASEPRI, r3
 8004edc:	f3bf 8f6f 	isb	sy
 8004ee0:	f3bf 8f4f 	dsb	sy
 8004ee4:	61bb      	str	r3, [r7, #24]
 8004ee6:	e7fe      	b.n	8004ee6 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004ee8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d01e      	beq.n	8004f2e <xTaskCreateStatic+0xa6>
 8004ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d01b      	beq.n	8004f2e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004efe:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f02:	2202      	movs	r2, #2
 8004f04:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004f08:	2300      	movs	r3, #0
 8004f0a:	9303      	str	r3, [sp, #12]
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0e:	9302      	str	r3, [sp, #8]
 8004f10:	f107 0314 	add.w	r3, r7, #20
 8004f14:	9301      	str	r3, [sp, #4]
 8004f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f18:	9300      	str	r3, [sp, #0]
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	68b9      	ldr	r1, [r7, #8]
 8004f20:	68f8      	ldr	r0, [r7, #12]
 8004f22:	f000 f850 	bl	8004fc6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f28:	f000 f8dc 	bl	80050e4 <prvAddNewTaskToReadyList>
 8004f2c:	e001      	b.n	8004f32 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004f32:	697b      	ldr	r3, [r7, #20]
	}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3728      	adds	r7, #40	; 0x28
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b08c      	sub	sp, #48	; 0x30
 8004f40:	af04      	add	r7, sp, #16
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	603b      	str	r3, [r7, #0]
 8004f48:	4613      	mov	r3, r2
 8004f4a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004f4c:	88fb      	ldrh	r3, [r7, #6]
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	4618      	mov	r0, r3
 8004f52:	f7fe ff05 	bl	8003d60 <pvPortMalloc>
 8004f56:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d00e      	beq.n	8004f7c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004f5e:	205c      	movs	r0, #92	; 0x5c
 8004f60:	f7fe fefe 	bl	8003d60 <pvPortMalloc>
 8004f64:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d003      	beq.n	8004f74 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	697a      	ldr	r2, [r7, #20]
 8004f70:	631a      	str	r2, [r3, #48]	; 0x30
 8004f72:	e005      	b.n	8004f80 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004f74:	6978      	ldr	r0, [r7, #20]
 8004f76:	f7fe ffb5 	bl	8003ee4 <vPortFree>
 8004f7a:	e001      	b.n	8004f80 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d017      	beq.n	8004fb6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004f8e:	88fa      	ldrh	r2, [r7, #6]
 8004f90:	2300      	movs	r3, #0
 8004f92:	9303      	str	r3, [sp, #12]
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	9302      	str	r3, [sp, #8]
 8004f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f9a:	9301      	str	r3, [sp, #4]
 8004f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9e:	9300      	str	r3, [sp, #0]
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	68b9      	ldr	r1, [r7, #8]
 8004fa4:	68f8      	ldr	r0, [r7, #12]
 8004fa6:	f000 f80e 	bl	8004fc6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004faa:	69f8      	ldr	r0, [r7, #28]
 8004fac:	f000 f89a 	bl	80050e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	61bb      	str	r3, [r7, #24]
 8004fb4:	e002      	b.n	8004fbc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004fb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004fba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004fbc:	69bb      	ldr	r3, [r7, #24]
	}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3720      	adds	r7, #32
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}

08004fc6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004fc6:	b580      	push	{r7, lr}
 8004fc8:	b088      	sub	sp, #32
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	60f8      	str	r0, [r7, #12]
 8004fce:	60b9      	str	r1, [r7, #8]
 8004fd0:	607a      	str	r2, [r7, #4]
 8004fd2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	461a      	mov	r2, r3
 8004fde:	21a5      	movs	r1, #165	; 0xa5
 8004fe0:	f001 ff43 	bl	8006e6a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	4413      	add	r3, r2
 8004ff4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	f023 0307 	bic.w	r3, r3, #7
 8004ffc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	f003 0307 	and.w	r3, r3, #7
 8005004:	2b00      	cmp	r3, #0
 8005006:	d009      	beq.n	800501c <prvInitialiseNewTask+0x56>
 8005008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800500c:	f383 8811 	msr	BASEPRI, r3
 8005010:	f3bf 8f6f 	isb	sy
 8005014:	f3bf 8f4f 	dsb	sy
 8005018:	617b      	str	r3, [r7, #20]
 800501a:	e7fe      	b.n	800501a <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d01f      	beq.n	8005062 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005022:	2300      	movs	r3, #0
 8005024:	61fb      	str	r3, [r7, #28]
 8005026:	e012      	b.n	800504e <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005028:	68ba      	ldr	r2, [r7, #8]
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	4413      	add	r3, r2
 800502e:	7819      	ldrb	r1, [r3, #0]
 8005030:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	4413      	add	r3, r2
 8005036:	3334      	adds	r3, #52	; 0x34
 8005038:	460a      	mov	r2, r1
 800503a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800503c:	68ba      	ldr	r2, [r7, #8]
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	4413      	add	r3, r2
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d006      	beq.n	8005056 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	3301      	adds	r3, #1
 800504c:	61fb      	str	r3, [r7, #28]
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	2b0f      	cmp	r3, #15
 8005052:	d9e9      	bls.n	8005028 <prvInitialiseNewTask+0x62>
 8005054:	e000      	b.n	8005058 <prvInitialiseNewTask+0x92>
			{
				break;
 8005056:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800505a:	2200      	movs	r2, #0
 800505c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005060:	e003      	b.n	800506a <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005064:	2200      	movs	r2, #0
 8005066:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800506a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506c:	2b37      	cmp	r3, #55	; 0x37
 800506e:	d901      	bls.n	8005074 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005070:	2337      	movs	r3, #55	; 0x37
 8005072:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005076:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005078:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800507a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800507c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800507e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005082:	2200      	movs	r2, #0
 8005084:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005088:	3304      	adds	r3, #4
 800508a:	4618      	mov	r0, r3
 800508c:	f7fe fb90 	bl	80037b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005092:	3318      	adds	r3, #24
 8005094:	4618      	mov	r0, r3
 8005096:	f7fe fb8b 	bl	80037b0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800509a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800509c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800509e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80050a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80050aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050ae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80050b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b2:	2200      	movs	r2, #0
 80050b4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80050b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80050be:	683a      	ldr	r2, [r7, #0]
 80050c0:	68f9      	ldr	r1, [r7, #12]
 80050c2:	69b8      	ldr	r0, [r7, #24]
 80050c4:	f7fe fc08 	bl	80038d8 <pxPortInitialiseStack>
 80050c8:	4602      	mov	r2, r0
 80050ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050cc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80050ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d002      	beq.n	80050da <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80050d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050da:	bf00      	nop
 80050dc:	3720      	adds	r7, #32
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
	...

080050e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80050ec:	f7fe fd1e 	bl	8003b2c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80050f0:	4b2d      	ldr	r3, [pc, #180]	; (80051a8 <prvAddNewTaskToReadyList+0xc4>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	3301      	adds	r3, #1
 80050f6:	4a2c      	ldr	r2, [pc, #176]	; (80051a8 <prvAddNewTaskToReadyList+0xc4>)
 80050f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80050fa:	4b2c      	ldr	r3, [pc, #176]	; (80051ac <prvAddNewTaskToReadyList+0xc8>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d109      	bne.n	8005116 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005102:	4a2a      	ldr	r2, [pc, #168]	; (80051ac <prvAddNewTaskToReadyList+0xc8>)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005108:	4b27      	ldr	r3, [pc, #156]	; (80051a8 <prvAddNewTaskToReadyList+0xc4>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2b01      	cmp	r3, #1
 800510e:	d110      	bne.n	8005132 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005110:	f000 fc08 	bl	8005924 <prvInitialiseTaskLists>
 8005114:	e00d      	b.n	8005132 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005116:	4b26      	ldr	r3, [pc, #152]	; (80051b0 <prvAddNewTaskToReadyList+0xcc>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d109      	bne.n	8005132 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800511e:	4b23      	ldr	r3, [pc, #140]	; (80051ac <prvAddNewTaskToReadyList+0xc8>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005128:	429a      	cmp	r2, r3
 800512a:	d802      	bhi.n	8005132 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800512c:	4a1f      	ldr	r2, [pc, #124]	; (80051ac <prvAddNewTaskToReadyList+0xc8>)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005132:	4b20      	ldr	r3, [pc, #128]	; (80051b4 <prvAddNewTaskToReadyList+0xd0>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	3301      	adds	r3, #1
 8005138:	4a1e      	ldr	r2, [pc, #120]	; (80051b4 <prvAddNewTaskToReadyList+0xd0>)
 800513a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800513c:	4b1d      	ldr	r3, [pc, #116]	; (80051b4 <prvAddNewTaskToReadyList+0xd0>)
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005148:	4b1b      	ldr	r3, [pc, #108]	; (80051b8 <prvAddNewTaskToReadyList+0xd4>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	429a      	cmp	r2, r3
 800514e:	d903      	bls.n	8005158 <prvAddNewTaskToReadyList+0x74>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005154:	4a18      	ldr	r2, [pc, #96]	; (80051b8 <prvAddNewTaskToReadyList+0xd4>)
 8005156:	6013      	str	r3, [r2, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800515c:	4613      	mov	r3, r2
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	4413      	add	r3, r2
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	4a15      	ldr	r2, [pc, #84]	; (80051bc <prvAddNewTaskToReadyList+0xd8>)
 8005166:	441a      	add	r2, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	3304      	adds	r3, #4
 800516c:	4619      	mov	r1, r3
 800516e:	4610      	mov	r0, r2
 8005170:	f7fe fb2b 	bl	80037ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005174:	f7fe fd08 	bl	8003b88 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005178:	4b0d      	ldr	r3, [pc, #52]	; (80051b0 <prvAddNewTaskToReadyList+0xcc>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d00e      	beq.n	800519e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005180:	4b0a      	ldr	r3, [pc, #40]	; (80051ac <prvAddNewTaskToReadyList+0xc8>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518a:	429a      	cmp	r2, r3
 800518c:	d207      	bcs.n	800519e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800518e:	4b0c      	ldr	r3, [pc, #48]	; (80051c0 <prvAddNewTaskToReadyList+0xdc>)
 8005190:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005194:	601a      	str	r2, [r3, #0]
 8005196:	f3bf 8f4f 	dsb	sy
 800519a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800519e:	bf00      	nop
 80051a0:	3708      	adds	r7, #8
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	200167e0 	.word	0x200167e0
 80051ac:	2001630c 	.word	0x2001630c
 80051b0:	200167ec 	.word	0x200167ec
 80051b4:	200167fc 	.word	0x200167fc
 80051b8:	200167e8 	.word	0x200167e8
 80051bc:	20016310 	.word	0x20016310
 80051c0:	e000ed04 	.word	0xe000ed04

080051c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80051cc:	2300      	movs	r3, #0
 80051ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d016      	beq.n	8005204 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80051d6:	4b13      	ldr	r3, [pc, #76]	; (8005224 <vTaskDelay+0x60>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d009      	beq.n	80051f2 <vTaskDelay+0x2e>
 80051de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e2:	f383 8811 	msr	BASEPRI, r3
 80051e6:	f3bf 8f6f 	isb	sy
 80051ea:	f3bf 8f4f 	dsb	sy
 80051ee:	60bb      	str	r3, [r7, #8]
 80051f0:	e7fe      	b.n	80051f0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80051f2:	f000 f87f 	bl	80052f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80051f6:	2100      	movs	r1, #0
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f000 fdd3 	bl	8005da4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80051fe:	f000 f887 	bl	8005310 <xTaskResumeAll>
 8005202:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d107      	bne.n	800521a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800520a:	4b07      	ldr	r3, [pc, #28]	; (8005228 <vTaskDelay+0x64>)
 800520c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005210:	601a      	str	r2, [r3, #0]
 8005212:	f3bf 8f4f 	dsb	sy
 8005216:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800521a:	bf00      	nop
 800521c:	3710      	adds	r7, #16
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	20016808 	.word	0x20016808
 8005228:	e000ed04 	.word	0xe000ed04

0800522c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b08a      	sub	sp, #40	; 0x28
 8005230:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005232:	2300      	movs	r3, #0
 8005234:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005236:	2300      	movs	r3, #0
 8005238:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800523a:	463a      	mov	r2, r7
 800523c:	1d39      	adds	r1, r7, #4
 800523e:	f107 0308 	add.w	r3, r7, #8
 8005242:	4618      	mov	r0, r3
 8005244:	f7fe fa60 	bl	8003708 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005248:	6839      	ldr	r1, [r7, #0]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	68ba      	ldr	r2, [r7, #8]
 800524e:	9202      	str	r2, [sp, #8]
 8005250:	9301      	str	r3, [sp, #4]
 8005252:	2300      	movs	r3, #0
 8005254:	9300      	str	r3, [sp, #0]
 8005256:	2300      	movs	r3, #0
 8005258:	460a      	mov	r2, r1
 800525a:	4920      	ldr	r1, [pc, #128]	; (80052dc <vTaskStartScheduler+0xb0>)
 800525c:	4820      	ldr	r0, [pc, #128]	; (80052e0 <vTaskStartScheduler+0xb4>)
 800525e:	f7ff fe13 	bl	8004e88 <xTaskCreateStatic>
 8005262:	4602      	mov	r2, r0
 8005264:	4b1f      	ldr	r3, [pc, #124]	; (80052e4 <vTaskStartScheduler+0xb8>)
 8005266:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005268:	4b1e      	ldr	r3, [pc, #120]	; (80052e4 <vTaskStartScheduler+0xb8>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d002      	beq.n	8005276 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005270:	2301      	movs	r3, #1
 8005272:	617b      	str	r3, [r7, #20]
 8005274:	e001      	b.n	800527a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005276:	2300      	movs	r3, #0
 8005278:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	2b01      	cmp	r3, #1
 800527e:	d102      	bne.n	8005286 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005280:	f000 fde4 	bl	8005e4c <xTimerCreateTimerTask>
 8005284:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	2b01      	cmp	r3, #1
 800528a:	d115      	bne.n	80052b8 <vTaskStartScheduler+0x8c>
 800528c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005290:	f383 8811 	msr	BASEPRI, r3
 8005294:	f3bf 8f6f 	isb	sy
 8005298:	f3bf 8f4f 	dsb	sy
 800529c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800529e:	4b12      	ldr	r3, [pc, #72]	; (80052e8 <vTaskStartScheduler+0xbc>)
 80052a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80052a4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80052a6:	4b11      	ldr	r3, [pc, #68]	; (80052ec <vTaskStartScheduler+0xc0>)
 80052a8:	2201      	movs	r2, #1
 80052aa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80052ac:	4b10      	ldr	r3, [pc, #64]	; (80052f0 <vTaskStartScheduler+0xc4>)
 80052ae:	2200      	movs	r2, #0
 80052b0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80052b2:	f7fe fb9d 	bl	80039f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80052b6:	e00d      	b.n	80052d4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052be:	d109      	bne.n	80052d4 <vTaskStartScheduler+0xa8>
 80052c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c4:	f383 8811 	msr	BASEPRI, r3
 80052c8:	f3bf 8f6f 	isb	sy
 80052cc:	f3bf 8f4f 	dsb	sy
 80052d0:	60fb      	str	r3, [r7, #12]
 80052d2:	e7fe      	b.n	80052d2 <vTaskStartScheduler+0xa6>
}
 80052d4:	bf00      	nop
 80052d6:	3718      	adds	r7, #24
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	08006e94 	.word	0x08006e94
 80052e0:	080058f5 	.word	0x080058f5
 80052e4:	20016804 	.word	0x20016804
 80052e8:	20016800 	.word	0x20016800
 80052ec:	200167ec 	.word	0x200167ec
 80052f0:	200167e4 	.word	0x200167e4

080052f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80052f4:	b480      	push	{r7}
 80052f6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80052f8:	4b04      	ldr	r3, [pc, #16]	; (800530c <vTaskSuspendAll+0x18>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	3301      	adds	r3, #1
 80052fe:	4a03      	ldr	r2, [pc, #12]	; (800530c <vTaskSuspendAll+0x18>)
 8005300:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005302:	bf00      	nop
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr
 800530c:	20016808 	.word	0x20016808

08005310 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005316:	2300      	movs	r3, #0
 8005318:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800531a:	2300      	movs	r3, #0
 800531c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800531e:	4b41      	ldr	r3, [pc, #260]	; (8005424 <xTaskResumeAll+0x114>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d109      	bne.n	800533a <xTaskResumeAll+0x2a>
 8005326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532a:	f383 8811 	msr	BASEPRI, r3
 800532e:	f3bf 8f6f 	isb	sy
 8005332:	f3bf 8f4f 	dsb	sy
 8005336:	603b      	str	r3, [r7, #0]
 8005338:	e7fe      	b.n	8005338 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800533a:	f7fe fbf7 	bl	8003b2c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800533e:	4b39      	ldr	r3, [pc, #228]	; (8005424 <xTaskResumeAll+0x114>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	3b01      	subs	r3, #1
 8005344:	4a37      	ldr	r2, [pc, #220]	; (8005424 <xTaskResumeAll+0x114>)
 8005346:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005348:	4b36      	ldr	r3, [pc, #216]	; (8005424 <xTaskResumeAll+0x114>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d162      	bne.n	8005416 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005350:	4b35      	ldr	r3, [pc, #212]	; (8005428 <xTaskResumeAll+0x118>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d05e      	beq.n	8005416 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005358:	e02f      	b.n	80053ba <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800535a:	4b34      	ldr	r3, [pc, #208]	; (800542c <xTaskResumeAll+0x11c>)
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	3318      	adds	r3, #24
 8005366:	4618      	mov	r0, r3
 8005368:	f7fe fa8c 	bl	8003884 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	3304      	adds	r3, #4
 8005370:	4618      	mov	r0, r3
 8005372:	f7fe fa87 	bl	8003884 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800537a:	4b2d      	ldr	r3, [pc, #180]	; (8005430 <xTaskResumeAll+0x120>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	429a      	cmp	r2, r3
 8005380:	d903      	bls.n	800538a <xTaskResumeAll+0x7a>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005386:	4a2a      	ldr	r2, [pc, #168]	; (8005430 <xTaskResumeAll+0x120>)
 8005388:	6013      	str	r3, [r2, #0]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800538e:	4613      	mov	r3, r2
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	4413      	add	r3, r2
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	4a27      	ldr	r2, [pc, #156]	; (8005434 <xTaskResumeAll+0x124>)
 8005398:	441a      	add	r2, r3
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	3304      	adds	r3, #4
 800539e:	4619      	mov	r1, r3
 80053a0:	4610      	mov	r0, r2
 80053a2:	f7fe fa12 	bl	80037ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053aa:	4b23      	ldr	r3, [pc, #140]	; (8005438 <xTaskResumeAll+0x128>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d302      	bcc.n	80053ba <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80053b4:	4b21      	ldr	r3, [pc, #132]	; (800543c <xTaskResumeAll+0x12c>)
 80053b6:	2201      	movs	r2, #1
 80053b8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80053ba:	4b1c      	ldr	r3, [pc, #112]	; (800542c <xTaskResumeAll+0x11c>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d1cb      	bne.n	800535a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d001      	beq.n	80053cc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80053c8:	f000 fb46 	bl	8005a58 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80053cc:	4b1c      	ldr	r3, [pc, #112]	; (8005440 <xTaskResumeAll+0x130>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d010      	beq.n	80053fa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80053d8:	f000 f846 	bl	8005468 <xTaskIncrementTick>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d002      	beq.n	80053e8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80053e2:	4b16      	ldr	r3, [pc, #88]	; (800543c <xTaskResumeAll+0x12c>)
 80053e4:	2201      	movs	r2, #1
 80053e6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	3b01      	subs	r3, #1
 80053ec:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d1f1      	bne.n	80053d8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80053f4:	4b12      	ldr	r3, [pc, #72]	; (8005440 <xTaskResumeAll+0x130>)
 80053f6:	2200      	movs	r2, #0
 80053f8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80053fa:	4b10      	ldr	r3, [pc, #64]	; (800543c <xTaskResumeAll+0x12c>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d009      	beq.n	8005416 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005402:	2301      	movs	r3, #1
 8005404:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005406:	4b0f      	ldr	r3, [pc, #60]	; (8005444 <xTaskResumeAll+0x134>)
 8005408:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800540c:	601a      	str	r2, [r3, #0]
 800540e:	f3bf 8f4f 	dsb	sy
 8005412:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005416:	f7fe fbb7 	bl	8003b88 <vPortExitCritical>

	return xAlreadyYielded;
 800541a:	68bb      	ldr	r3, [r7, #8]
}
 800541c:	4618      	mov	r0, r3
 800541e:	3710      	adds	r7, #16
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}
 8005424:	20016808 	.word	0x20016808
 8005428:	200167e0 	.word	0x200167e0
 800542c:	200167a0 	.word	0x200167a0
 8005430:	200167e8 	.word	0x200167e8
 8005434:	20016310 	.word	0x20016310
 8005438:	2001630c 	.word	0x2001630c
 800543c:	200167f4 	.word	0x200167f4
 8005440:	200167f0 	.word	0x200167f0
 8005444:	e000ed04 	.word	0xe000ed04

08005448 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800544e:	4b05      	ldr	r3, [pc, #20]	; (8005464 <xTaskGetTickCount+0x1c>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005454:	687b      	ldr	r3, [r7, #4]
}
 8005456:	4618      	mov	r0, r3
 8005458:	370c      	adds	r7, #12
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	200167e4 	.word	0x200167e4

08005468 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b086      	sub	sp, #24
 800546c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800546e:	2300      	movs	r3, #0
 8005470:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005472:	4b4e      	ldr	r3, [pc, #312]	; (80055ac <xTaskIncrementTick+0x144>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2b00      	cmp	r3, #0
 8005478:	f040 8088 	bne.w	800558c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800547c:	4b4c      	ldr	r3, [pc, #304]	; (80055b0 <xTaskIncrementTick+0x148>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	3301      	adds	r3, #1
 8005482:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005484:	4a4a      	ldr	r2, [pc, #296]	; (80055b0 <xTaskIncrementTick+0x148>)
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d11f      	bne.n	80054d0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005490:	4b48      	ldr	r3, [pc, #288]	; (80055b4 <xTaskIncrementTick+0x14c>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d009      	beq.n	80054ae <xTaskIncrementTick+0x46>
 800549a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800549e:	f383 8811 	msr	BASEPRI, r3
 80054a2:	f3bf 8f6f 	isb	sy
 80054a6:	f3bf 8f4f 	dsb	sy
 80054aa:	603b      	str	r3, [r7, #0]
 80054ac:	e7fe      	b.n	80054ac <xTaskIncrementTick+0x44>
 80054ae:	4b41      	ldr	r3, [pc, #260]	; (80055b4 <xTaskIncrementTick+0x14c>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	60fb      	str	r3, [r7, #12]
 80054b4:	4b40      	ldr	r3, [pc, #256]	; (80055b8 <xTaskIncrementTick+0x150>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a3e      	ldr	r2, [pc, #248]	; (80055b4 <xTaskIncrementTick+0x14c>)
 80054ba:	6013      	str	r3, [r2, #0]
 80054bc:	4a3e      	ldr	r2, [pc, #248]	; (80055b8 <xTaskIncrementTick+0x150>)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6013      	str	r3, [r2, #0]
 80054c2:	4b3e      	ldr	r3, [pc, #248]	; (80055bc <xTaskIncrementTick+0x154>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	3301      	adds	r3, #1
 80054c8:	4a3c      	ldr	r2, [pc, #240]	; (80055bc <xTaskIncrementTick+0x154>)
 80054ca:	6013      	str	r3, [r2, #0]
 80054cc:	f000 fac4 	bl	8005a58 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80054d0:	4b3b      	ldr	r3, [pc, #236]	; (80055c0 <xTaskIncrementTick+0x158>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	693a      	ldr	r2, [r7, #16]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d349      	bcc.n	800556e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054da:	4b36      	ldr	r3, [pc, #216]	; (80055b4 <xTaskIncrementTick+0x14c>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d104      	bne.n	80054ee <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054e4:	4b36      	ldr	r3, [pc, #216]	; (80055c0 <xTaskIncrementTick+0x158>)
 80054e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054ea:	601a      	str	r2, [r3, #0]
					break;
 80054ec:	e03f      	b.n	800556e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054ee:	4b31      	ldr	r3, [pc, #196]	; (80055b4 <xTaskIncrementTick+0x14c>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80054fe:	693a      	ldr	r2, [r7, #16]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	429a      	cmp	r2, r3
 8005504:	d203      	bcs.n	800550e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005506:	4a2e      	ldr	r2, [pc, #184]	; (80055c0 <xTaskIncrementTick+0x158>)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800550c:	e02f      	b.n	800556e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	3304      	adds	r3, #4
 8005512:	4618      	mov	r0, r3
 8005514:	f7fe f9b6 	bl	8003884 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800551c:	2b00      	cmp	r3, #0
 800551e:	d004      	beq.n	800552a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	3318      	adds	r3, #24
 8005524:	4618      	mov	r0, r3
 8005526:	f7fe f9ad 	bl	8003884 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800552e:	4b25      	ldr	r3, [pc, #148]	; (80055c4 <xTaskIncrementTick+0x15c>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	429a      	cmp	r2, r3
 8005534:	d903      	bls.n	800553e <xTaskIncrementTick+0xd6>
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800553a:	4a22      	ldr	r2, [pc, #136]	; (80055c4 <xTaskIncrementTick+0x15c>)
 800553c:	6013      	str	r3, [r2, #0]
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005542:	4613      	mov	r3, r2
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	4413      	add	r3, r2
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	4a1f      	ldr	r2, [pc, #124]	; (80055c8 <xTaskIncrementTick+0x160>)
 800554c:	441a      	add	r2, r3
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	3304      	adds	r3, #4
 8005552:	4619      	mov	r1, r3
 8005554:	4610      	mov	r0, r2
 8005556:	f7fe f938 	bl	80037ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800555e:	4b1b      	ldr	r3, [pc, #108]	; (80055cc <xTaskIncrementTick+0x164>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005564:	429a      	cmp	r2, r3
 8005566:	d3b8      	bcc.n	80054da <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005568:	2301      	movs	r3, #1
 800556a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800556c:	e7b5      	b.n	80054da <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800556e:	4b17      	ldr	r3, [pc, #92]	; (80055cc <xTaskIncrementTick+0x164>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005574:	4914      	ldr	r1, [pc, #80]	; (80055c8 <xTaskIncrementTick+0x160>)
 8005576:	4613      	mov	r3, r2
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	4413      	add	r3, r2
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	440b      	add	r3, r1
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2b01      	cmp	r3, #1
 8005584:	d907      	bls.n	8005596 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8005586:	2301      	movs	r3, #1
 8005588:	617b      	str	r3, [r7, #20]
 800558a:	e004      	b.n	8005596 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800558c:	4b10      	ldr	r3, [pc, #64]	; (80055d0 <xTaskIncrementTick+0x168>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	3301      	adds	r3, #1
 8005592:	4a0f      	ldr	r2, [pc, #60]	; (80055d0 <xTaskIncrementTick+0x168>)
 8005594:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005596:	4b0f      	ldr	r3, [pc, #60]	; (80055d4 <xTaskIncrementTick+0x16c>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d001      	beq.n	80055a2 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800559e:	2301      	movs	r3, #1
 80055a0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80055a2:	697b      	ldr	r3, [r7, #20]
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3718      	adds	r7, #24
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	20016808 	.word	0x20016808
 80055b0:	200167e4 	.word	0x200167e4
 80055b4:	20016798 	.word	0x20016798
 80055b8:	2001679c 	.word	0x2001679c
 80055bc:	200167f8 	.word	0x200167f8
 80055c0:	20016800 	.word	0x20016800
 80055c4:	200167e8 	.word	0x200167e8
 80055c8:	20016310 	.word	0x20016310
 80055cc:	2001630c 	.word	0x2001630c
 80055d0:	200167f0 	.word	0x200167f0
 80055d4:	200167f4 	.word	0x200167f4

080055d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80055de:	4b27      	ldr	r3, [pc, #156]	; (800567c <vTaskSwitchContext+0xa4>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d003      	beq.n	80055ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80055e6:	4b26      	ldr	r3, [pc, #152]	; (8005680 <vTaskSwitchContext+0xa8>)
 80055e8:	2201      	movs	r2, #1
 80055ea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80055ec:	e040      	b.n	8005670 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80055ee:	4b24      	ldr	r3, [pc, #144]	; (8005680 <vTaskSwitchContext+0xa8>)
 80055f0:	2200      	movs	r2, #0
 80055f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055f4:	4b23      	ldr	r3, [pc, #140]	; (8005684 <vTaskSwitchContext+0xac>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	60fb      	str	r3, [r7, #12]
 80055fa:	e00f      	b.n	800561c <vTaskSwitchContext+0x44>
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d109      	bne.n	8005616 <vTaskSwitchContext+0x3e>
 8005602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005606:	f383 8811 	msr	BASEPRI, r3
 800560a:	f3bf 8f6f 	isb	sy
 800560e:	f3bf 8f4f 	dsb	sy
 8005612:	607b      	str	r3, [r7, #4]
 8005614:	e7fe      	b.n	8005614 <vTaskSwitchContext+0x3c>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	3b01      	subs	r3, #1
 800561a:	60fb      	str	r3, [r7, #12]
 800561c:	491a      	ldr	r1, [pc, #104]	; (8005688 <vTaskSwitchContext+0xb0>)
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	4613      	mov	r3, r2
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	4413      	add	r3, r2
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	440b      	add	r3, r1
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d0e5      	beq.n	80055fc <vTaskSwitchContext+0x24>
 8005630:	68fa      	ldr	r2, [r7, #12]
 8005632:	4613      	mov	r3, r2
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	4413      	add	r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	4a13      	ldr	r2, [pc, #76]	; (8005688 <vTaskSwitchContext+0xb0>)
 800563c:	4413      	add	r3, r2
 800563e:	60bb      	str	r3, [r7, #8]
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	685a      	ldr	r2, [r3, #4]
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	605a      	str	r2, [r3, #4]
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	685a      	ldr	r2, [r3, #4]
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	3308      	adds	r3, #8
 8005652:	429a      	cmp	r2, r3
 8005654:	d104      	bne.n	8005660 <vTaskSwitchContext+0x88>
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	685a      	ldr	r2, [r3, #4]
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	605a      	str	r2, [r3, #4]
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	4a09      	ldr	r2, [pc, #36]	; (800568c <vTaskSwitchContext+0xb4>)
 8005668:	6013      	str	r3, [r2, #0]
 800566a:	4a06      	ldr	r2, [pc, #24]	; (8005684 <vTaskSwitchContext+0xac>)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6013      	str	r3, [r2, #0]
}
 8005670:	bf00      	nop
 8005672:	3714      	adds	r7, #20
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr
 800567c:	20016808 	.word	0x20016808
 8005680:	200167f4 	.word	0x200167f4
 8005684:	200167e8 	.word	0x200167e8
 8005688:	20016310 	.word	0x20016310
 800568c:	2001630c 	.word	0x2001630c

08005690 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d109      	bne.n	80056b4 <vTaskPlaceOnEventList+0x24>
 80056a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a4:	f383 8811 	msr	BASEPRI, r3
 80056a8:	f3bf 8f6f 	isb	sy
 80056ac:	f3bf 8f4f 	dsb	sy
 80056b0:	60fb      	str	r3, [r7, #12]
 80056b2:	e7fe      	b.n	80056b2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80056b4:	4b07      	ldr	r3, [pc, #28]	; (80056d4 <vTaskPlaceOnEventList+0x44>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	3318      	adds	r3, #24
 80056ba:	4619      	mov	r1, r3
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f7fe f8a8 	bl	8003812 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80056c2:	2101      	movs	r1, #1
 80056c4:	6838      	ldr	r0, [r7, #0]
 80056c6:	f000 fb6d 	bl	8005da4 <prvAddCurrentTaskToDelayedList>
}
 80056ca:	bf00      	nop
 80056cc:	3710      	adds	r7, #16
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	2001630c 	.word	0x2001630c

080056d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b086      	sub	sp, #24
 80056dc:	af00      	add	r7, sp, #0
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d109      	bne.n	80056fe <vTaskPlaceOnEventListRestricted+0x26>
 80056ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ee:	f383 8811 	msr	BASEPRI, r3
 80056f2:	f3bf 8f6f 	isb	sy
 80056f6:	f3bf 8f4f 	dsb	sy
 80056fa:	617b      	str	r3, [r7, #20]
 80056fc:	e7fe      	b.n	80056fc <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80056fe:	4b0a      	ldr	r3, [pc, #40]	; (8005728 <vTaskPlaceOnEventListRestricted+0x50>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	3318      	adds	r3, #24
 8005704:	4619      	mov	r1, r3
 8005706:	68f8      	ldr	r0, [r7, #12]
 8005708:	f7fe f85f 	bl	80037ca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d002      	beq.n	8005718 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8005712:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005716:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005718:	6879      	ldr	r1, [r7, #4]
 800571a:	68b8      	ldr	r0, [r7, #8]
 800571c:	f000 fb42 	bl	8005da4 <prvAddCurrentTaskToDelayedList>
	}
 8005720:	bf00      	nop
 8005722:	3718      	adds	r7, #24
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	2001630c 	.word	0x2001630c

0800572c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b086      	sub	sp, #24
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d109      	bne.n	8005756 <xTaskRemoveFromEventList+0x2a>
 8005742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005746:	f383 8811 	msr	BASEPRI, r3
 800574a:	f3bf 8f6f 	isb	sy
 800574e:	f3bf 8f4f 	dsb	sy
 8005752:	60fb      	str	r3, [r7, #12]
 8005754:	e7fe      	b.n	8005754 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	3318      	adds	r3, #24
 800575a:	4618      	mov	r0, r3
 800575c:	f7fe f892 	bl	8003884 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005760:	4b1d      	ldr	r3, [pc, #116]	; (80057d8 <xTaskRemoveFromEventList+0xac>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d11d      	bne.n	80057a4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	3304      	adds	r3, #4
 800576c:	4618      	mov	r0, r3
 800576e:	f7fe f889 	bl	8003884 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005776:	4b19      	ldr	r3, [pc, #100]	; (80057dc <xTaskRemoveFromEventList+0xb0>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	429a      	cmp	r2, r3
 800577c:	d903      	bls.n	8005786 <xTaskRemoveFromEventList+0x5a>
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005782:	4a16      	ldr	r2, [pc, #88]	; (80057dc <xTaskRemoveFromEventList+0xb0>)
 8005784:	6013      	str	r3, [r2, #0]
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800578a:	4613      	mov	r3, r2
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	4413      	add	r3, r2
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	4a13      	ldr	r2, [pc, #76]	; (80057e0 <xTaskRemoveFromEventList+0xb4>)
 8005794:	441a      	add	r2, r3
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	3304      	adds	r3, #4
 800579a:	4619      	mov	r1, r3
 800579c:	4610      	mov	r0, r2
 800579e:	f7fe f814 	bl	80037ca <vListInsertEnd>
 80057a2:	e005      	b.n	80057b0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	3318      	adds	r3, #24
 80057a8:	4619      	mov	r1, r3
 80057aa:	480e      	ldr	r0, [pc, #56]	; (80057e4 <xTaskRemoveFromEventList+0xb8>)
 80057ac:	f7fe f80d 	bl	80037ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057b4:	4b0c      	ldr	r3, [pc, #48]	; (80057e8 <xTaskRemoveFromEventList+0xbc>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d905      	bls.n	80057ca <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80057be:	2301      	movs	r3, #1
 80057c0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80057c2:	4b0a      	ldr	r3, [pc, #40]	; (80057ec <xTaskRemoveFromEventList+0xc0>)
 80057c4:	2201      	movs	r2, #1
 80057c6:	601a      	str	r2, [r3, #0]
 80057c8:	e001      	b.n	80057ce <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80057ca:	2300      	movs	r3, #0
 80057cc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80057ce:	697b      	ldr	r3, [r7, #20]
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3718      	adds	r7, #24
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	20016808 	.word	0x20016808
 80057dc:	200167e8 	.word	0x200167e8
 80057e0:	20016310 	.word	0x20016310
 80057e4:	200167a0 	.word	0x200167a0
 80057e8:	2001630c 	.word	0x2001630c
 80057ec:	200167f4 	.word	0x200167f4

080057f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80057f0:	b480      	push	{r7}
 80057f2:	b083      	sub	sp, #12
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80057f8:	4b06      	ldr	r3, [pc, #24]	; (8005814 <vTaskInternalSetTimeOutState+0x24>)
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005800:	4b05      	ldr	r3, [pc, #20]	; (8005818 <vTaskInternalSetTimeOutState+0x28>)
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	605a      	str	r2, [r3, #4]
}
 8005808:	bf00      	nop
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr
 8005814:	200167f8 	.word	0x200167f8
 8005818:	200167e4 	.word	0x200167e4

0800581c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b088      	sub	sp, #32
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d109      	bne.n	8005840 <xTaskCheckForTimeOut+0x24>
 800582c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005830:	f383 8811 	msr	BASEPRI, r3
 8005834:	f3bf 8f6f 	isb	sy
 8005838:	f3bf 8f4f 	dsb	sy
 800583c:	613b      	str	r3, [r7, #16]
 800583e:	e7fe      	b.n	800583e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d109      	bne.n	800585a <xTaskCheckForTimeOut+0x3e>
 8005846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800584a:	f383 8811 	msr	BASEPRI, r3
 800584e:	f3bf 8f6f 	isb	sy
 8005852:	f3bf 8f4f 	dsb	sy
 8005856:	60fb      	str	r3, [r7, #12]
 8005858:	e7fe      	b.n	8005858 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800585a:	f7fe f967 	bl	8003b2c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800585e:	4b1d      	ldr	r3, [pc, #116]	; (80058d4 <xTaskCheckForTimeOut+0xb8>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	69ba      	ldr	r2, [r7, #24]
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005876:	d102      	bne.n	800587e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005878:	2300      	movs	r3, #0
 800587a:	61fb      	str	r3, [r7, #28]
 800587c:	e023      	b.n	80058c6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	4b15      	ldr	r3, [pc, #84]	; (80058d8 <xTaskCheckForTimeOut+0xbc>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	429a      	cmp	r2, r3
 8005888:	d007      	beq.n	800589a <xTaskCheckForTimeOut+0x7e>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	685a      	ldr	r2, [r3, #4]
 800588e:	69bb      	ldr	r3, [r7, #24]
 8005890:	429a      	cmp	r2, r3
 8005892:	d802      	bhi.n	800589a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005894:	2301      	movs	r3, #1
 8005896:	61fb      	str	r3, [r7, #28]
 8005898:	e015      	b.n	80058c6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d90b      	bls.n	80058bc <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	1ad2      	subs	r2, r2, r3
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f7ff ff9d 	bl	80057f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80058b6:	2300      	movs	r3, #0
 80058b8:	61fb      	str	r3, [r7, #28]
 80058ba:	e004      	b.n	80058c6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	2200      	movs	r2, #0
 80058c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80058c2:	2301      	movs	r3, #1
 80058c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80058c6:	f7fe f95f 	bl	8003b88 <vPortExitCritical>

	return xReturn;
 80058ca:	69fb      	ldr	r3, [r7, #28]
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3720      	adds	r7, #32
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	200167e4 	.word	0x200167e4
 80058d8:	200167f8 	.word	0x200167f8

080058dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80058dc:	b480      	push	{r7}
 80058de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80058e0:	4b03      	ldr	r3, [pc, #12]	; (80058f0 <vTaskMissedYield+0x14>)
 80058e2:	2201      	movs	r2, #1
 80058e4:	601a      	str	r2, [r3, #0]
}
 80058e6:	bf00      	nop
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr
 80058f0:	200167f4 	.word	0x200167f4

080058f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b082      	sub	sp, #8
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80058fc:	f000 f852 	bl	80059a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005900:	4b06      	ldr	r3, [pc, #24]	; (800591c <prvIdleTask+0x28>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	2b01      	cmp	r3, #1
 8005906:	d9f9      	bls.n	80058fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8005908:	4b05      	ldr	r3, [pc, #20]	; (8005920 <prvIdleTask+0x2c>)
 800590a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800590e:	601a      	str	r2, [r3, #0]
 8005910:	f3bf 8f4f 	dsb	sy
 8005914:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005918:	e7f0      	b.n	80058fc <prvIdleTask+0x8>
 800591a:	bf00      	nop
 800591c:	20016310 	.word	0x20016310
 8005920:	e000ed04 	.word	0xe000ed04

08005924 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b082      	sub	sp, #8
 8005928:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800592a:	2300      	movs	r3, #0
 800592c:	607b      	str	r3, [r7, #4]
 800592e:	e00c      	b.n	800594a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	4613      	mov	r3, r2
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	4413      	add	r3, r2
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	4a12      	ldr	r2, [pc, #72]	; (8005984 <prvInitialiseTaskLists+0x60>)
 800593c:	4413      	add	r3, r2
 800593e:	4618      	mov	r0, r3
 8005940:	f7fd ff16 	bl	8003770 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	3301      	adds	r3, #1
 8005948:	607b      	str	r3, [r7, #4]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2b37      	cmp	r3, #55	; 0x37
 800594e:	d9ef      	bls.n	8005930 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005950:	480d      	ldr	r0, [pc, #52]	; (8005988 <prvInitialiseTaskLists+0x64>)
 8005952:	f7fd ff0d 	bl	8003770 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005956:	480d      	ldr	r0, [pc, #52]	; (800598c <prvInitialiseTaskLists+0x68>)
 8005958:	f7fd ff0a 	bl	8003770 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800595c:	480c      	ldr	r0, [pc, #48]	; (8005990 <prvInitialiseTaskLists+0x6c>)
 800595e:	f7fd ff07 	bl	8003770 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005962:	480c      	ldr	r0, [pc, #48]	; (8005994 <prvInitialiseTaskLists+0x70>)
 8005964:	f7fd ff04 	bl	8003770 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005968:	480b      	ldr	r0, [pc, #44]	; (8005998 <prvInitialiseTaskLists+0x74>)
 800596a:	f7fd ff01 	bl	8003770 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800596e:	4b0b      	ldr	r3, [pc, #44]	; (800599c <prvInitialiseTaskLists+0x78>)
 8005970:	4a05      	ldr	r2, [pc, #20]	; (8005988 <prvInitialiseTaskLists+0x64>)
 8005972:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005974:	4b0a      	ldr	r3, [pc, #40]	; (80059a0 <prvInitialiseTaskLists+0x7c>)
 8005976:	4a05      	ldr	r2, [pc, #20]	; (800598c <prvInitialiseTaskLists+0x68>)
 8005978:	601a      	str	r2, [r3, #0]
}
 800597a:	bf00      	nop
 800597c:	3708      	adds	r7, #8
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	20016310 	.word	0x20016310
 8005988:	20016770 	.word	0x20016770
 800598c:	20016784 	.word	0x20016784
 8005990:	200167a0 	.word	0x200167a0
 8005994:	200167b4 	.word	0x200167b4
 8005998:	200167cc 	.word	0x200167cc
 800599c:	20016798 	.word	0x20016798
 80059a0:	2001679c 	.word	0x2001679c

080059a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b082      	sub	sp, #8
 80059a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80059aa:	e019      	b.n	80059e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80059ac:	f7fe f8be 	bl	8003b2c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059b0:	4b0f      	ldr	r3, [pc, #60]	; (80059f0 <prvCheckTasksWaitingTermination+0x4c>)
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	3304      	adds	r3, #4
 80059bc:	4618      	mov	r0, r3
 80059be:	f7fd ff61 	bl	8003884 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80059c2:	4b0c      	ldr	r3, [pc, #48]	; (80059f4 <prvCheckTasksWaitingTermination+0x50>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	3b01      	subs	r3, #1
 80059c8:	4a0a      	ldr	r2, [pc, #40]	; (80059f4 <prvCheckTasksWaitingTermination+0x50>)
 80059ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80059cc:	4b0a      	ldr	r3, [pc, #40]	; (80059f8 <prvCheckTasksWaitingTermination+0x54>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	3b01      	subs	r3, #1
 80059d2:	4a09      	ldr	r2, [pc, #36]	; (80059f8 <prvCheckTasksWaitingTermination+0x54>)
 80059d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80059d6:	f7fe f8d7 	bl	8003b88 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 f80e 	bl	80059fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80059e0:	4b05      	ldr	r3, [pc, #20]	; (80059f8 <prvCheckTasksWaitingTermination+0x54>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d1e1      	bne.n	80059ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80059e8:	bf00      	nop
 80059ea:	3708      	adds	r7, #8
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}
 80059f0:	200167b4 	.word	0x200167b4
 80059f4:	200167e0 	.word	0x200167e0
 80059f8:	200167c8 	.word	0x200167c8

080059fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d108      	bne.n	8005a20 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a12:	4618      	mov	r0, r3
 8005a14:	f7fe fa66 	bl	8003ee4 <vPortFree>
				vPortFree( pxTCB );
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f7fe fa63 	bl	8003ee4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005a1e:	e017      	b.n	8005a50 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d103      	bne.n	8005a32 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f7fe fa5a 	bl	8003ee4 <vPortFree>
	}
 8005a30:	e00e      	b.n	8005a50 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d009      	beq.n	8005a50 <prvDeleteTCB+0x54>
 8005a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a40:	f383 8811 	msr	BASEPRI, r3
 8005a44:	f3bf 8f6f 	isb	sy
 8005a48:	f3bf 8f4f 	dsb	sy
 8005a4c:	60fb      	str	r3, [r7, #12]
 8005a4e:	e7fe      	b.n	8005a4e <prvDeleteTCB+0x52>
	}
 8005a50:	bf00      	nop
 8005a52:	3710      	adds	r7, #16
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a5e:	4b0c      	ldr	r3, [pc, #48]	; (8005a90 <prvResetNextTaskUnblockTime+0x38>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d104      	bne.n	8005a72 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005a68:	4b0a      	ldr	r3, [pc, #40]	; (8005a94 <prvResetNextTaskUnblockTime+0x3c>)
 8005a6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a6e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005a70:	e008      	b.n	8005a84 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a72:	4b07      	ldr	r3, [pc, #28]	; (8005a90 <prvResetNextTaskUnblockTime+0x38>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	4a04      	ldr	r2, [pc, #16]	; (8005a94 <prvResetNextTaskUnblockTime+0x3c>)
 8005a82:	6013      	str	r3, [r2, #0]
}
 8005a84:	bf00      	nop
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr
 8005a90:	20016798 	.word	0x20016798
 8005a94:	20016800 	.word	0x20016800

08005a98 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005a9e:	4b0b      	ldr	r3, [pc, #44]	; (8005acc <xTaskGetSchedulerState+0x34>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d102      	bne.n	8005aac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	607b      	str	r3, [r7, #4]
 8005aaa:	e008      	b.n	8005abe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005aac:	4b08      	ldr	r3, [pc, #32]	; (8005ad0 <xTaskGetSchedulerState+0x38>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d102      	bne.n	8005aba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005ab4:	2302      	movs	r3, #2
 8005ab6:	607b      	str	r3, [r7, #4]
 8005ab8:	e001      	b.n	8005abe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005aba:	2300      	movs	r3, #0
 8005abc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005abe:	687b      	ldr	r3, [r7, #4]
	}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr
 8005acc:	200167ec 	.word	0x200167ec
 8005ad0:	20016808 	.word	0x20016808

08005ad4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d051      	beq.n	8005b8e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aee:	4b2a      	ldr	r3, [pc, #168]	; (8005b98 <xTaskPriorityInherit+0xc4>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d241      	bcs.n	8005b7c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	699b      	ldr	r3, [r3, #24]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	db06      	blt.n	8005b0e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b00:	4b25      	ldr	r3, [pc, #148]	; (8005b98 <xTaskPriorityInherit+0xc4>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b06:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	6959      	ldr	r1, [r3, #20]
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b16:	4613      	mov	r3, r2
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	4413      	add	r3, r2
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	4a1f      	ldr	r2, [pc, #124]	; (8005b9c <xTaskPriorityInherit+0xc8>)
 8005b20:	4413      	add	r3, r2
 8005b22:	4299      	cmp	r1, r3
 8005b24:	d122      	bne.n	8005b6c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	3304      	adds	r3, #4
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f7fd feaa 	bl	8003884 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005b30:	4b19      	ldr	r3, [pc, #100]	; (8005b98 <xTaskPriorityInherit+0xc4>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b3e:	4b18      	ldr	r3, [pc, #96]	; (8005ba0 <xTaskPriorityInherit+0xcc>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d903      	bls.n	8005b4e <xTaskPriorityInherit+0x7a>
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b4a:	4a15      	ldr	r2, [pc, #84]	; (8005ba0 <xTaskPriorityInherit+0xcc>)
 8005b4c:	6013      	str	r3, [r2, #0]
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b52:	4613      	mov	r3, r2
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	4413      	add	r3, r2
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	4a10      	ldr	r2, [pc, #64]	; (8005b9c <xTaskPriorityInherit+0xc8>)
 8005b5c:	441a      	add	r2, r3
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	3304      	adds	r3, #4
 8005b62:	4619      	mov	r1, r3
 8005b64:	4610      	mov	r0, r2
 8005b66:	f7fd fe30 	bl	80037ca <vListInsertEnd>
 8005b6a:	e004      	b.n	8005b76 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005b6c:	4b0a      	ldr	r3, [pc, #40]	; (8005b98 <xTaskPriorityInherit+0xc4>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005b76:	2301      	movs	r3, #1
 8005b78:	60fb      	str	r3, [r7, #12]
 8005b7a:	e008      	b.n	8005b8e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b80:	4b05      	ldr	r3, [pc, #20]	; (8005b98 <xTaskPriorityInherit+0xc4>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d201      	bcs.n	8005b8e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
	}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3710      	adds	r7, #16
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	2001630c 	.word	0x2001630c
 8005b9c:	20016310 	.word	0x20016310
 8005ba0:	200167e8 	.word	0x200167e8

08005ba4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b086      	sub	sp, #24
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d054      	beq.n	8005c64 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005bba:	4b2d      	ldr	r3, [pc, #180]	; (8005c70 <xTaskPriorityDisinherit+0xcc>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	693a      	ldr	r2, [r7, #16]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d009      	beq.n	8005bd8 <xTaskPriorityDisinherit+0x34>
 8005bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc8:	f383 8811 	msr	BASEPRI, r3
 8005bcc:	f3bf 8f6f 	isb	sy
 8005bd0:	f3bf 8f4f 	dsb	sy
 8005bd4:	60fb      	str	r3, [r7, #12]
 8005bd6:	e7fe      	b.n	8005bd6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d109      	bne.n	8005bf4 <xTaskPriorityDisinherit+0x50>
 8005be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be4:	f383 8811 	msr	BASEPRI, r3
 8005be8:	f3bf 8f6f 	isb	sy
 8005bec:	f3bf 8f4f 	dsb	sy
 8005bf0:	60bb      	str	r3, [r7, #8]
 8005bf2:	e7fe      	b.n	8005bf2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bf8:	1e5a      	subs	r2, r3, #1
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d02c      	beq.n	8005c64 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d128      	bne.n	8005c64 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	3304      	adds	r3, #4
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7fd fe34 	bl	8003884 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c28:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c34:	4b0f      	ldr	r3, [pc, #60]	; (8005c74 <xTaskPriorityDisinherit+0xd0>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d903      	bls.n	8005c44 <xTaskPriorityDisinherit+0xa0>
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c40:	4a0c      	ldr	r2, [pc, #48]	; (8005c74 <xTaskPriorityDisinherit+0xd0>)
 8005c42:	6013      	str	r3, [r2, #0]
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c48:	4613      	mov	r3, r2
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	4413      	add	r3, r2
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	4a09      	ldr	r2, [pc, #36]	; (8005c78 <xTaskPriorityDisinherit+0xd4>)
 8005c52:	441a      	add	r2, r3
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	3304      	adds	r3, #4
 8005c58:	4619      	mov	r1, r3
 8005c5a:	4610      	mov	r0, r2
 8005c5c:	f7fd fdb5 	bl	80037ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005c60:	2301      	movs	r3, #1
 8005c62:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005c64:	697b      	ldr	r3, [r7, #20]
	}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3718      	adds	r7, #24
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	2001630c 	.word	0x2001630c
 8005c74:	200167e8 	.word	0x200167e8
 8005c78:	20016310 	.word	0x20016310

08005c7c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b088      	sub	sp, #32
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d068      	beq.n	8005d66 <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d109      	bne.n	8005cb0 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8005c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca0:	f383 8811 	msr	BASEPRI, r3
 8005ca4:	f3bf 8f6f 	isb	sy
 8005ca8:	f3bf 8f4f 	dsb	sy
 8005cac:	60fb      	str	r3, [r7, #12]
 8005cae:	e7fe      	b.n	8005cae <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d202      	bcs.n	8005cc0 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	61fb      	str	r3, [r7, #28]
 8005cbe:	e002      	b.n	8005cc6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cc4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d04a      	beq.n	8005d66 <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d145      	bne.n	8005d66 <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005cda:	4b25      	ldr	r3, [pc, #148]	; (8005d70 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	69ba      	ldr	r2, [r7, #24]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d109      	bne.n	8005cf8 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8005ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce8:	f383 8811 	msr	BASEPRI, r3
 8005cec:	f3bf 8f6f 	isb	sy
 8005cf0:	f3bf 8f4f 	dsb	sy
 8005cf4:	60bb      	str	r3, [r7, #8]
 8005cf6:	e7fe      	b.n	8005cf6 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cfc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	69fa      	ldr	r2, [r7, #28]
 8005d02:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	699b      	ldr	r3, [r3, #24]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	db04      	blt.n	8005d16 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	6959      	ldr	r1, [r3, #20]
 8005d1a:	693a      	ldr	r2, [r7, #16]
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	4413      	add	r3, r2
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	4a13      	ldr	r2, [pc, #76]	; (8005d74 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8005d26:	4413      	add	r3, r2
 8005d28:	4299      	cmp	r1, r3
 8005d2a:	d11c      	bne.n	8005d66 <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	3304      	adds	r3, #4
 8005d30:	4618      	mov	r0, r3
 8005d32:	f7fd fda7 	bl	8003884 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d3a:	4b0f      	ldr	r3, [pc, #60]	; (8005d78 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d903      	bls.n	8005d4a <vTaskPriorityDisinheritAfterTimeout+0xce>
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d46:	4a0c      	ldr	r2, [pc, #48]	; (8005d78 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005d48:	6013      	str	r3, [r2, #0]
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d4e:	4613      	mov	r3, r2
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	4413      	add	r3, r2
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	4a07      	ldr	r2, [pc, #28]	; (8005d74 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8005d58:	441a      	add	r2, r3
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	3304      	adds	r3, #4
 8005d5e:	4619      	mov	r1, r3
 8005d60:	4610      	mov	r0, r2
 8005d62:	f7fd fd32 	bl	80037ca <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005d66:	bf00      	nop
 8005d68:	3720      	adds	r7, #32
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	2001630c 	.word	0x2001630c
 8005d74:	20016310 	.word	0x20016310
 8005d78:	200167e8 	.word	0x200167e8

08005d7c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005d7c:	b480      	push	{r7}
 8005d7e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005d80:	4b07      	ldr	r3, [pc, #28]	; (8005da0 <pvTaskIncrementMutexHeldCount+0x24>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d004      	beq.n	8005d92 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005d88:	4b05      	ldr	r3, [pc, #20]	; (8005da0 <pvTaskIncrementMutexHeldCount+0x24>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005d8e:	3201      	adds	r2, #1
 8005d90:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8005d92:	4b03      	ldr	r3, [pc, #12]	; (8005da0 <pvTaskIncrementMutexHeldCount+0x24>)
 8005d94:	681b      	ldr	r3, [r3, #0]
	}
 8005d96:	4618      	mov	r0, r3
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr
 8005da0:	2001630c 	.word	0x2001630c

08005da4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b084      	sub	sp, #16
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005dae:	4b21      	ldr	r3, [pc, #132]	; (8005e34 <prvAddCurrentTaskToDelayedList+0x90>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005db4:	4b20      	ldr	r3, [pc, #128]	; (8005e38 <prvAddCurrentTaskToDelayedList+0x94>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	3304      	adds	r3, #4
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f7fd fd62 	bl	8003884 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dc6:	d10a      	bne.n	8005dde <prvAddCurrentTaskToDelayedList+0x3a>
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d007      	beq.n	8005dde <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005dce:	4b1a      	ldr	r3, [pc, #104]	; (8005e38 <prvAddCurrentTaskToDelayedList+0x94>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	3304      	adds	r3, #4
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	4819      	ldr	r0, [pc, #100]	; (8005e3c <prvAddCurrentTaskToDelayedList+0x98>)
 8005dd8:	f7fd fcf7 	bl	80037ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005ddc:	e026      	b.n	8005e2c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4413      	add	r3, r2
 8005de4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005de6:	4b14      	ldr	r3, [pc, #80]	; (8005e38 <prvAddCurrentTaskToDelayedList+0x94>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68ba      	ldr	r2, [r7, #8]
 8005dec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005dee:	68ba      	ldr	r2, [r7, #8]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d209      	bcs.n	8005e0a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005df6:	4b12      	ldr	r3, [pc, #72]	; (8005e40 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	4b0f      	ldr	r3, [pc, #60]	; (8005e38 <prvAddCurrentTaskToDelayedList+0x94>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	3304      	adds	r3, #4
 8005e00:	4619      	mov	r1, r3
 8005e02:	4610      	mov	r0, r2
 8005e04:	f7fd fd05 	bl	8003812 <vListInsert>
}
 8005e08:	e010      	b.n	8005e2c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e0a:	4b0e      	ldr	r3, [pc, #56]	; (8005e44 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	4b0a      	ldr	r3, [pc, #40]	; (8005e38 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	3304      	adds	r3, #4
 8005e14:	4619      	mov	r1, r3
 8005e16:	4610      	mov	r0, r2
 8005e18:	f7fd fcfb 	bl	8003812 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005e1c:	4b0a      	ldr	r3, [pc, #40]	; (8005e48 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	68ba      	ldr	r2, [r7, #8]
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d202      	bcs.n	8005e2c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005e26:	4a08      	ldr	r2, [pc, #32]	; (8005e48 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	6013      	str	r3, [r2, #0]
}
 8005e2c:	bf00      	nop
 8005e2e:	3710      	adds	r7, #16
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}
 8005e34:	200167e4 	.word	0x200167e4
 8005e38:	2001630c 	.word	0x2001630c
 8005e3c:	200167cc 	.word	0x200167cc
 8005e40:	2001679c 	.word	0x2001679c
 8005e44:	20016798 	.word	0x20016798
 8005e48:	20016800 	.word	0x20016800

08005e4c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b08a      	sub	sp, #40	; 0x28
 8005e50:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005e52:	2300      	movs	r3, #0
 8005e54:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005e56:	f000 faff 	bl	8006458 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005e5a:	4b1c      	ldr	r3, [pc, #112]	; (8005ecc <xTimerCreateTimerTask+0x80>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d021      	beq.n	8005ea6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005e62:	2300      	movs	r3, #0
 8005e64:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005e66:	2300      	movs	r3, #0
 8005e68:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005e6a:	1d3a      	adds	r2, r7, #4
 8005e6c:	f107 0108 	add.w	r1, r7, #8
 8005e70:	f107 030c 	add.w	r3, r7, #12
 8005e74:	4618      	mov	r0, r3
 8005e76:	f7fd fc61 	bl	800373c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005e7a:	6879      	ldr	r1, [r7, #4]
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	9202      	str	r2, [sp, #8]
 8005e82:	9301      	str	r3, [sp, #4]
 8005e84:	2302      	movs	r3, #2
 8005e86:	9300      	str	r3, [sp, #0]
 8005e88:	2300      	movs	r3, #0
 8005e8a:	460a      	mov	r2, r1
 8005e8c:	4910      	ldr	r1, [pc, #64]	; (8005ed0 <xTimerCreateTimerTask+0x84>)
 8005e8e:	4811      	ldr	r0, [pc, #68]	; (8005ed4 <xTimerCreateTimerTask+0x88>)
 8005e90:	f7fe fffa 	bl	8004e88 <xTaskCreateStatic>
 8005e94:	4602      	mov	r2, r0
 8005e96:	4b10      	ldr	r3, [pc, #64]	; (8005ed8 <xTimerCreateTimerTask+0x8c>)
 8005e98:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005e9a:	4b0f      	ldr	r3, [pc, #60]	; (8005ed8 <xTimerCreateTimerTask+0x8c>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d001      	beq.n	8005ea6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d109      	bne.n	8005ec0 <xTimerCreateTimerTask+0x74>
 8005eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb0:	f383 8811 	msr	BASEPRI, r3
 8005eb4:	f3bf 8f6f 	isb	sy
 8005eb8:	f3bf 8f4f 	dsb	sy
 8005ebc:	613b      	str	r3, [r7, #16]
 8005ebe:	e7fe      	b.n	8005ebe <xTimerCreateTimerTask+0x72>
	return xReturn;
 8005ec0:	697b      	ldr	r3, [r7, #20]
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3718      	adds	r7, #24
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	2001683c 	.word	0x2001683c
 8005ed0:	08006e9c 	.word	0x08006e9c
 8005ed4:	0800600d 	.word	0x0800600d
 8005ed8:	20016840 	.word	0x20016840

08005edc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b08a      	sub	sp, #40	; 0x28
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	607a      	str	r2, [r7, #4]
 8005ee8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005eea:	2300      	movs	r3, #0
 8005eec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d109      	bne.n	8005f08 <xTimerGenericCommand+0x2c>
 8005ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef8:	f383 8811 	msr	BASEPRI, r3
 8005efc:	f3bf 8f6f 	isb	sy
 8005f00:	f3bf 8f4f 	dsb	sy
 8005f04:	623b      	str	r3, [r7, #32]
 8005f06:	e7fe      	b.n	8005f06 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005f08:	4b19      	ldr	r3, [pc, #100]	; (8005f70 <xTimerGenericCommand+0x94>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d02a      	beq.n	8005f66 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	2b05      	cmp	r3, #5
 8005f20:	dc18      	bgt.n	8005f54 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005f22:	f7ff fdb9 	bl	8005a98 <xTaskGetSchedulerState>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b02      	cmp	r3, #2
 8005f2a:	d109      	bne.n	8005f40 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005f2c:	4b10      	ldr	r3, [pc, #64]	; (8005f70 <xTimerGenericCommand+0x94>)
 8005f2e:	6818      	ldr	r0, [r3, #0]
 8005f30:	f107 0110 	add.w	r1, r7, #16
 8005f34:	2300      	movs	r3, #0
 8005f36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f38:	f7fe fa26 	bl	8004388 <xQueueGenericSend>
 8005f3c:	6278      	str	r0, [r7, #36]	; 0x24
 8005f3e:	e012      	b.n	8005f66 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005f40:	4b0b      	ldr	r3, [pc, #44]	; (8005f70 <xTimerGenericCommand+0x94>)
 8005f42:	6818      	ldr	r0, [r3, #0]
 8005f44:	f107 0110 	add.w	r1, r7, #16
 8005f48:	2300      	movs	r3, #0
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f7fe fa1c 	bl	8004388 <xQueueGenericSend>
 8005f50:	6278      	str	r0, [r7, #36]	; 0x24
 8005f52:	e008      	b.n	8005f66 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005f54:	4b06      	ldr	r3, [pc, #24]	; (8005f70 <xTimerGenericCommand+0x94>)
 8005f56:	6818      	ldr	r0, [r3, #0]
 8005f58:	f107 0110 	add.w	r1, r7, #16
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	683a      	ldr	r2, [r7, #0]
 8005f60:	f7fe fb0c 	bl	800457c <xQueueGenericSendFromISR>
 8005f64:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3728      	adds	r7, #40	; 0x28
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}
 8005f70:	2001683c 	.word	0x2001683c

08005f74 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b088      	sub	sp, #32
 8005f78:	af02      	add	r7, sp, #8
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f7e:	4b22      	ldr	r3, [pc, #136]	; (8006008 <prvProcessExpiredTimer+0x94>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	3304      	adds	r3, #4
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f7fd fc79 	bl	8003884 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f98:	f003 0304 	and.w	r3, r3, #4
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d021      	beq.n	8005fe4 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	699a      	ldr	r2, [r3, #24]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	18d1      	adds	r1, r2, r3
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	683a      	ldr	r2, [r7, #0]
 8005fac:	6978      	ldr	r0, [r7, #20]
 8005fae:	f000 f8d1 	bl	8006154 <prvInsertTimerInActiveList>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d01e      	beq.n	8005ff6 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005fb8:	2300      	movs	r3, #0
 8005fba:	9300      	str	r3, [sp, #0]
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	2100      	movs	r1, #0
 8005fc2:	6978      	ldr	r0, [r7, #20]
 8005fc4:	f7ff ff8a 	bl	8005edc <xTimerGenericCommand>
 8005fc8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d112      	bne.n	8005ff6 <prvProcessExpiredTimer+0x82>
 8005fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd4:	f383 8811 	msr	BASEPRI, r3
 8005fd8:	f3bf 8f6f 	isb	sy
 8005fdc:	f3bf 8f4f 	dsb	sy
 8005fe0:	60fb      	str	r3, [r7, #12]
 8005fe2:	e7fe      	b.n	8005fe2 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fea:	f023 0301 	bic.w	r3, r3, #1
 8005fee:	b2da      	uxtb	r2, r3
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	6a1b      	ldr	r3, [r3, #32]
 8005ffa:	6978      	ldr	r0, [r7, #20]
 8005ffc:	4798      	blx	r3
}
 8005ffe:	bf00      	nop
 8006000:	3718      	adds	r7, #24
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	20016834 	.word	0x20016834

0800600c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006014:	f107 0308 	add.w	r3, r7, #8
 8006018:	4618      	mov	r0, r3
 800601a:	f000 f857 	bl	80060cc <prvGetNextExpireTime>
 800601e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	4619      	mov	r1, r3
 8006024:	68f8      	ldr	r0, [r7, #12]
 8006026:	f000 f803 	bl	8006030 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800602a:	f000 f8d5 	bl	80061d8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800602e:	e7f1      	b.n	8006014 <prvTimerTask+0x8>

08006030 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800603a:	f7ff f95b 	bl	80052f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800603e:	f107 0308 	add.w	r3, r7, #8
 8006042:	4618      	mov	r0, r3
 8006044:	f000 f866 	bl	8006114 <prvSampleTimeNow>
 8006048:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d130      	bne.n	80060b2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d10a      	bne.n	800606c <prvProcessTimerOrBlockTask+0x3c>
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	429a      	cmp	r2, r3
 800605c:	d806      	bhi.n	800606c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800605e:	f7ff f957 	bl	8005310 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006062:	68f9      	ldr	r1, [r7, #12]
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f7ff ff85 	bl	8005f74 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800606a:	e024      	b.n	80060b6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d008      	beq.n	8006084 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006072:	4b13      	ldr	r3, [pc, #76]	; (80060c0 <prvProcessTimerOrBlockTask+0x90>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d101      	bne.n	8006080 <prvProcessTimerOrBlockTask+0x50>
 800607c:	2301      	movs	r3, #1
 800607e:	e000      	b.n	8006082 <prvProcessTimerOrBlockTask+0x52>
 8006080:	2300      	movs	r3, #0
 8006082:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006084:	4b0f      	ldr	r3, [pc, #60]	; (80060c4 <prvProcessTimerOrBlockTask+0x94>)
 8006086:	6818      	ldr	r0, [r3, #0]
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	1ad3      	subs	r3, r2, r3
 800608e:	683a      	ldr	r2, [r7, #0]
 8006090:	4619      	mov	r1, r3
 8006092:	f7fe fec5 	bl	8004e20 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006096:	f7ff f93b 	bl	8005310 <xTaskResumeAll>
 800609a:	4603      	mov	r3, r0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d10a      	bne.n	80060b6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80060a0:	4b09      	ldr	r3, [pc, #36]	; (80060c8 <prvProcessTimerOrBlockTask+0x98>)
 80060a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060a6:	601a      	str	r2, [r3, #0]
 80060a8:	f3bf 8f4f 	dsb	sy
 80060ac:	f3bf 8f6f 	isb	sy
}
 80060b0:	e001      	b.n	80060b6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80060b2:	f7ff f92d 	bl	8005310 <xTaskResumeAll>
}
 80060b6:	bf00      	nop
 80060b8:	3710      	adds	r7, #16
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop
 80060c0:	20016838 	.word	0x20016838
 80060c4:	2001683c 	.word	0x2001683c
 80060c8:	e000ed04 	.word	0xe000ed04

080060cc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80060cc:	b480      	push	{r7}
 80060ce:	b085      	sub	sp, #20
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80060d4:	4b0e      	ldr	r3, [pc, #56]	; (8006110 <prvGetNextExpireTime+0x44>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d101      	bne.n	80060e2 <prvGetNextExpireTime+0x16>
 80060de:	2201      	movs	r2, #1
 80060e0:	e000      	b.n	80060e4 <prvGetNextExpireTime+0x18>
 80060e2:	2200      	movs	r2, #0
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d105      	bne.n	80060fc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80060f0:	4b07      	ldr	r3, [pc, #28]	; (8006110 <prvGetNextExpireTime+0x44>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	60fb      	str	r3, [r7, #12]
 80060fa:	e001      	b.n	8006100 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80060fc:	2300      	movs	r3, #0
 80060fe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006100:	68fb      	ldr	r3, [r7, #12]
}
 8006102:	4618      	mov	r0, r3
 8006104:	3714      	adds	r7, #20
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr
 800610e:	bf00      	nop
 8006110:	20016834 	.word	0x20016834

08006114 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b084      	sub	sp, #16
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800611c:	f7ff f994 	bl	8005448 <xTaskGetTickCount>
 8006120:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006122:	4b0b      	ldr	r3, [pc, #44]	; (8006150 <prvSampleTimeNow+0x3c>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	429a      	cmp	r2, r3
 800612a:	d205      	bcs.n	8006138 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800612c:	f000 f930 	bl	8006390 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	601a      	str	r2, [r3, #0]
 8006136:	e002      	b.n	800613e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800613e:	4a04      	ldr	r2, [pc, #16]	; (8006150 <prvSampleTimeNow+0x3c>)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006144:	68fb      	ldr	r3, [r7, #12]
}
 8006146:	4618      	mov	r0, r3
 8006148:	3710      	adds	r7, #16
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	20016844 	.word	0x20016844

08006154 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b086      	sub	sp, #24
 8006158:	af00      	add	r7, sp, #0
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	607a      	str	r2, [r7, #4]
 8006160:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006162:	2300      	movs	r3, #0
 8006164:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	68ba      	ldr	r2, [r7, #8]
 800616a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	68fa      	ldr	r2, [r7, #12]
 8006170:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006172:	68ba      	ldr	r2, [r7, #8]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	429a      	cmp	r2, r3
 8006178:	d812      	bhi.n	80061a0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	1ad2      	subs	r2, r2, r3
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	699b      	ldr	r3, [r3, #24]
 8006184:	429a      	cmp	r2, r3
 8006186:	d302      	bcc.n	800618e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006188:	2301      	movs	r3, #1
 800618a:	617b      	str	r3, [r7, #20]
 800618c:	e01b      	b.n	80061c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800618e:	4b10      	ldr	r3, [pc, #64]	; (80061d0 <prvInsertTimerInActiveList+0x7c>)
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	3304      	adds	r3, #4
 8006196:	4619      	mov	r1, r3
 8006198:	4610      	mov	r0, r2
 800619a:	f7fd fb3a 	bl	8003812 <vListInsert>
 800619e:	e012      	b.n	80061c6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d206      	bcs.n	80061b6 <prvInsertTimerInActiveList+0x62>
 80061a8:	68ba      	ldr	r2, [r7, #8]
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d302      	bcc.n	80061b6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80061b0:	2301      	movs	r3, #1
 80061b2:	617b      	str	r3, [r7, #20]
 80061b4:	e007      	b.n	80061c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80061b6:	4b07      	ldr	r3, [pc, #28]	; (80061d4 <prvInsertTimerInActiveList+0x80>)
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	3304      	adds	r3, #4
 80061be:	4619      	mov	r1, r3
 80061c0:	4610      	mov	r0, r2
 80061c2:	f7fd fb26 	bl	8003812 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80061c6:	697b      	ldr	r3, [r7, #20]
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3718      	adds	r7, #24
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	20016838 	.word	0x20016838
 80061d4:	20016834 	.word	0x20016834

080061d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b08e      	sub	sp, #56	; 0x38
 80061dc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80061de:	e0c6      	b.n	800636e <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	da17      	bge.n	8006216 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80061e6:	1d3b      	adds	r3, r7, #4
 80061e8:	3304      	adds	r3, #4
 80061ea:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80061ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d109      	bne.n	8006206 <prvProcessReceivedCommands+0x2e>
 80061f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f6:	f383 8811 	msr	BASEPRI, r3
 80061fa:	f3bf 8f6f 	isb	sy
 80061fe:	f3bf 8f4f 	dsb	sy
 8006202:	61fb      	str	r3, [r7, #28]
 8006204:	e7fe      	b.n	8006204 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800620c:	6850      	ldr	r0, [r2, #4]
 800620e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006210:	6892      	ldr	r2, [r2, #8]
 8006212:	4611      	mov	r1, r2
 8006214:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2b00      	cmp	r3, #0
 800621a:	f2c0 80a8 	blt.w	800636e <prvProcessReceivedCommands+0x196>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006224:	695b      	ldr	r3, [r3, #20]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d004      	beq.n	8006234 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800622a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622c:	3304      	adds	r3, #4
 800622e:	4618      	mov	r0, r3
 8006230:	f7fd fb28 	bl	8003884 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006234:	463b      	mov	r3, r7
 8006236:	4618      	mov	r0, r3
 8006238:	f7ff ff6c 	bl	8006114 <prvSampleTimeNow>
 800623c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2b09      	cmp	r3, #9
 8006242:	f200 8093 	bhi.w	800636c <prvProcessReceivedCommands+0x194>
 8006246:	a201      	add	r2, pc, #4	; (adr r2, 800624c <prvProcessReceivedCommands+0x74>)
 8006248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800624c:	08006275 	.word	0x08006275
 8006250:	08006275 	.word	0x08006275
 8006254:	08006275 	.word	0x08006275
 8006258:	080062e7 	.word	0x080062e7
 800625c:	080062fb 	.word	0x080062fb
 8006260:	08006343 	.word	0x08006343
 8006264:	08006275 	.word	0x08006275
 8006268:	08006275 	.word	0x08006275
 800626c:	080062e7 	.word	0x080062e7
 8006270:	080062fb 	.word	0x080062fb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006276:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800627a:	f043 0301 	orr.w	r3, r3, #1
 800627e:	b2da      	uxtb	r2, r3
 8006280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006282:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006286:	68ba      	ldr	r2, [r7, #8]
 8006288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800628a:	699b      	ldr	r3, [r3, #24]
 800628c:	18d1      	adds	r1, r2, r3
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006292:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006294:	f7ff ff5e 	bl	8006154 <prvInsertTimerInActiveList>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d067      	beq.n	800636e <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800629e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a0:	6a1b      	ldr	r3, [r3, #32]
 80062a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80062a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062ac:	f003 0304 	and.w	r3, r3, #4
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d05c      	beq.n	800636e <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80062b4:	68ba      	ldr	r2, [r7, #8]
 80062b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b8:	699b      	ldr	r3, [r3, #24]
 80062ba:	441a      	add	r2, r3
 80062bc:	2300      	movs	r3, #0
 80062be:	9300      	str	r3, [sp, #0]
 80062c0:	2300      	movs	r3, #0
 80062c2:	2100      	movs	r1, #0
 80062c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062c6:	f7ff fe09 	bl	8005edc <xTimerGenericCommand>
 80062ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80062cc:	6a3b      	ldr	r3, [r7, #32]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d14d      	bne.n	800636e <prvProcessReceivedCommands+0x196>
 80062d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d6:	f383 8811 	msr	BASEPRI, r3
 80062da:	f3bf 8f6f 	isb	sy
 80062de:	f3bf 8f4f 	dsb	sy
 80062e2:	61bb      	str	r3, [r7, #24]
 80062e4:	e7fe      	b.n	80062e4 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80062e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062ec:	f023 0301 	bic.w	r3, r3, #1
 80062f0:	b2da      	uxtb	r2, r3
 80062f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80062f8:	e039      	b.n	800636e <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80062fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006300:	f043 0301 	orr.w	r3, r3, #1
 8006304:	b2da      	uxtb	r2, r3
 8006306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006308:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800630c:	68ba      	ldr	r2, [r7, #8]
 800630e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006310:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006314:	699b      	ldr	r3, [r3, #24]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d109      	bne.n	800632e <prvProcessReceivedCommands+0x156>
 800631a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800631e:	f383 8811 	msr	BASEPRI, r3
 8006322:	f3bf 8f6f 	isb	sy
 8006326:	f3bf 8f4f 	dsb	sy
 800632a:	617b      	str	r3, [r7, #20]
 800632c:	e7fe      	b.n	800632c <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800632e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006330:	699a      	ldr	r2, [r3, #24]
 8006332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006334:	18d1      	adds	r1, r2, r3
 8006336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800633a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800633c:	f7ff ff0a 	bl	8006154 <prvInsertTimerInActiveList>
					break;
 8006340:	e015      	b.n	800636e <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006344:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006348:	f003 0302 	and.w	r3, r3, #2
 800634c:	2b00      	cmp	r3, #0
 800634e:	d103      	bne.n	8006358 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8006350:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006352:	f7fd fdc7 	bl	8003ee4 <vPortFree>
 8006356:	e00a      	b.n	800636e <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800635e:	f023 0301 	bic.w	r3, r3, #1
 8006362:	b2da      	uxtb	r2, r3
 8006364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006366:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800636a:	e000      	b.n	800636e <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
 800636c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800636e:	4b07      	ldr	r3, [pc, #28]	; (800638c <prvProcessReceivedCommands+0x1b4>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	1d39      	adds	r1, r7, #4
 8006374:	2200      	movs	r2, #0
 8006376:	4618      	mov	r0, r3
 8006378:	f7fe fa1e 	bl	80047b8 <xQueueReceive>
 800637c:	4603      	mov	r3, r0
 800637e:	2b00      	cmp	r3, #0
 8006380:	f47f af2e 	bne.w	80061e0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006384:	bf00      	nop
 8006386:	3730      	adds	r7, #48	; 0x30
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}
 800638c:	2001683c 	.word	0x2001683c

08006390 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b088      	sub	sp, #32
 8006394:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006396:	e047      	b.n	8006428 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006398:	4b2d      	ldr	r3, [pc, #180]	; (8006450 <prvSwitchTimerLists+0xc0>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063a2:	4b2b      	ldr	r3, [pc, #172]	; (8006450 <prvSwitchTimerLists+0xc0>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	3304      	adds	r3, #4
 80063b0:	4618      	mov	r0, r3
 80063b2:	f7fd fa67 	bl	8003884 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	6a1b      	ldr	r3, [r3, #32]
 80063ba:	6938      	ldr	r0, [r7, #16]
 80063bc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063c4:	f003 0304 	and.w	r3, r3, #4
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d02d      	beq.n	8006428 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	699a      	ldr	r2, [r3, #24]
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	4413      	add	r3, r2
 80063d4:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 80063d6:	68fa      	ldr	r2, [r7, #12]
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d90e      	bls.n	80063fc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	693a      	ldr	r2, [r7, #16]
 80063e8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80063ea:	4b19      	ldr	r3, [pc, #100]	; (8006450 <prvSwitchTimerLists+0xc0>)
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	3304      	adds	r3, #4
 80063f2:	4619      	mov	r1, r3
 80063f4:	4610      	mov	r0, r2
 80063f6:	f7fd fa0c 	bl	8003812 <vListInsert>
 80063fa:	e015      	b.n	8006428 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80063fc:	2300      	movs	r3, #0
 80063fe:	9300      	str	r3, [sp, #0]
 8006400:	2300      	movs	r3, #0
 8006402:	697a      	ldr	r2, [r7, #20]
 8006404:	2100      	movs	r1, #0
 8006406:	6938      	ldr	r0, [r7, #16]
 8006408:	f7ff fd68 	bl	8005edc <xTimerGenericCommand>
 800640c:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d109      	bne.n	8006428 <prvSwitchTimerLists+0x98>
 8006414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006418:	f383 8811 	msr	BASEPRI, r3
 800641c:	f3bf 8f6f 	isb	sy
 8006420:	f3bf 8f4f 	dsb	sy
 8006424:	603b      	str	r3, [r7, #0]
 8006426:	e7fe      	b.n	8006426 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006428:	4b09      	ldr	r3, [pc, #36]	; (8006450 <prvSwitchTimerLists+0xc0>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d1b2      	bne.n	8006398 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006432:	4b07      	ldr	r3, [pc, #28]	; (8006450 <prvSwitchTimerLists+0xc0>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 8006438:	4b06      	ldr	r3, [pc, #24]	; (8006454 <prvSwitchTimerLists+0xc4>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a04      	ldr	r2, [pc, #16]	; (8006450 <prvSwitchTimerLists+0xc0>)
 800643e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006440:	4a04      	ldr	r2, [pc, #16]	; (8006454 <prvSwitchTimerLists+0xc4>)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6013      	str	r3, [r2, #0]
}
 8006446:	bf00      	nop
 8006448:	3718      	adds	r7, #24
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	20016834 	.word	0x20016834
 8006454:	20016838 	.word	0x20016838

08006458 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800645e:	f7fd fb65 	bl	8003b2c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006462:	4b15      	ldr	r3, [pc, #84]	; (80064b8 <prvCheckForValidListAndQueue+0x60>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d120      	bne.n	80064ac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800646a:	4814      	ldr	r0, [pc, #80]	; (80064bc <prvCheckForValidListAndQueue+0x64>)
 800646c:	f7fd f980 	bl	8003770 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006470:	4813      	ldr	r0, [pc, #76]	; (80064c0 <prvCheckForValidListAndQueue+0x68>)
 8006472:	f7fd f97d 	bl	8003770 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006476:	4b13      	ldr	r3, [pc, #76]	; (80064c4 <prvCheckForValidListAndQueue+0x6c>)
 8006478:	4a10      	ldr	r2, [pc, #64]	; (80064bc <prvCheckForValidListAndQueue+0x64>)
 800647a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800647c:	4b12      	ldr	r3, [pc, #72]	; (80064c8 <prvCheckForValidListAndQueue+0x70>)
 800647e:	4a10      	ldr	r2, [pc, #64]	; (80064c0 <prvCheckForValidListAndQueue+0x68>)
 8006480:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006482:	2300      	movs	r3, #0
 8006484:	9300      	str	r3, [sp, #0]
 8006486:	4b11      	ldr	r3, [pc, #68]	; (80064cc <prvCheckForValidListAndQueue+0x74>)
 8006488:	4a11      	ldr	r2, [pc, #68]	; (80064d0 <prvCheckForValidListAndQueue+0x78>)
 800648a:	2110      	movs	r1, #16
 800648c:	200a      	movs	r0, #10
 800648e:	f7fd fea5 	bl	80041dc <xQueueGenericCreateStatic>
 8006492:	4602      	mov	r2, r0
 8006494:	4b08      	ldr	r3, [pc, #32]	; (80064b8 <prvCheckForValidListAndQueue+0x60>)
 8006496:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006498:	4b07      	ldr	r3, [pc, #28]	; (80064b8 <prvCheckForValidListAndQueue+0x60>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d005      	beq.n	80064ac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80064a0:	4b05      	ldr	r3, [pc, #20]	; (80064b8 <prvCheckForValidListAndQueue+0x60>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	490b      	ldr	r1, [pc, #44]	; (80064d4 <prvCheckForValidListAndQueue+0x7c>)
 80064a6:	4618      	mov	r0, r3
 80064a8:	f7fe fc92 	bl	8004dd0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80064ac:	f7fd fb6c 	bl	8003b88 <vPortExitCritical>
}
 80064b0:	bf00      	nop
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	2001683c 	.word	0x2001683c
 80064bc:	2001680c 	.word	0x2001680c
 80064c0:	20016820 	.word	0x20016820
 80064c4:	20016834 	.word	0x20016834
 80064c8:	20016838 	.word	0x20016838
 80064cc:	200168e8 	.word	0x200168e8
 80064d0:	20016848 	.word	0x20016848
 80064d4:	08006ea4 	.word	0x08006ea4

080064d8 <vTaskDisplayTest>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void vTaskDisplayTest(void * displayTestParam) {
 80064d8:	b580      	push	{r7, lr}
 80064da:	b08c      	sub	sp, #48	; 0x30
 80064dc:	af02      	add	r7, sp, #8
 80064de:	6078      	str	r0, [r7, #4]
	uint32_t min_delay_ms = 500;
 80064e0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80064e4:	61fb      	str	r3, [r7, #28]
	uint32_t max_delay_ms = 5000;
 80064e6:	f241 3388 	movw	r3, #5000	; 0x1388
 80064ea:	61bb      	str	r3, [r7, #24]
	uint32_t min_delay_ticks = min_delay_ms / portTICK_PERIOD_MS;
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	617b      	str	r3, [r7, #20]
	uint32_t max_delay_ticks = max_delay_ms / portTICK_PERIOD_MS;
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	613b      	str	r3, [r7, #16]
    ST7735_Init();
 80064f4:	f7fc ff62 	bl	80033bc <ST7735_Init>
    //uint16_t img_buf[128*128];
    for(int i = 0; i < 128; i++) {
 80064f8:	2300      	movs	r3, #0
 80064fa:	627b      	str	r3, [r7, #36]	; 0x24
 80064fc:	e032      	b.n	8006564 <vTaskDisplayTest+0x8c>
    	for(int j = 0; j < 128; j++) {
 80064fe:	2300      	movs	r3, #0
 8006500:	623b      	str	r3, [r7, #32]
 8006502:	e029      	b.n	8006558 <vTaskDisplayTest+0x80>

    		uint16_t pixel = test_img_128x128[i][j];
 8006504:	491f      	ldr	r1, [pc, #124]	; (8006584 <vTaskDisplayTest+0xac>)
 8006506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006508:	01da      	lsls	r2, r3, #7
 800650a:	6a3b      	ldr	r3, [r7, #32]
 800650c:	4413      	add	r3, r2
 800650e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8006512:	81fb      	strh	r3, [r7, #14]
    		test_img_128x128[i][j] = ((pixel & 0x1f00) >> 5) + ((pixel & 0x00F8) << 5) + (pixel & 0xE007);
 8006514:	89fb      	ldrh	r3, [r7, #14]
 8006516:	115b      	asrs	r3, r3, #5
 8006518:	b21b      	sxth	r3, r3
 800651a:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 800651e:	b21a      	sxth	r2, r3
 8006520:	89fb      	ldrh	r3, [r7, #14]
 8006522:	015b      	lsls	r3, r3, #5
 8006524:	b21b      	sxth	r3, r3
 8006526:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 800652a:	b21b      	sxth	r3, r3
 800652c:	4313      	orrs	r3, r2
 800652e:	b21b      	sxth	r3, r3
 8006530:	b29a      	uxth	r2, r3
 8006532:	89fb      	ldrh	r3, [r7, #14]
 8006534:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8006538:	f023 0318 	bic.w	r3, r3, #24
 800653c:	b29b      	uxth	r3, r3
 800653e:	4413      	add	r3, r2
 8006540:	b298      	uxth	r0, r3
 8006542:	4910      	ldr	r1, [pc, #64]	; (8006584 <vTaskDisplayTest+0xac>)
 8006544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006546:	01da      	lsls	r2, r3, #7
 8006548:	6a3b      	ldr	r3, [r7, #32]
 800654a:	4413      	add	r3, r2
 800654c:	4602      	mov	r2, r0
 800654e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    	for(int j = 0; j < 128; j++) {
 8006552:	6a3b      	ldr	r3, [r7, #32]
 8006554:	3301      	adds	r3, #1
 8006556:	623b      	str	r3, [r7, #32]
 8006558:	6a3b      	ldr	r3, [r7, #32]
 800655a:	2b7f      	cmp	r3, #127	; 0x7f
 800655c:	ddd2      	ble.n	8006504 <vTaskDisplayTest+0x2c>
    for(int i = 0; i < 128; i++) {
 800655e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006560:	3301      	adds	r3, #1
 8006562:	627b      	str	r3, [r7, #36]	; 0x24
 8006564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006566:	2b7f      	cmp	r3, #127	; 0x7f
 8006568:	ddc9      	ble.n	80064fe <vTaskDisplayTest+0x26>
    	}
    }

	while(1) {
		ST7735_DrawImage(0, 0, 128, 128, test_img_128x128);
 800656a:	4b06      	ldr	r3, [pc, #24]	; (8006584 <vTaskDisplayTest+0xac>)
 800656c:	9300      	str	r3, [sp, #0]
 800656e:	2380      	movs	r3, #128	; 0x80
 8006570:	2280      	movs	r2, #128	; 0x80
 8006572:	2100      	movs	r1, #0
 8006574:	2000      	movs	r0, #0
 8006576:	f7fc ff37 	bl	80033e8 <ST7735_DrawImage>
		vTaskDelay(max_delay_ticks);
 800657a:	6938      	ldr	r0, [r7, #16]
 800657c:	f7fe fe22 	bl	80051c4 <vTaskDelay>
		ST7735_DrawImage(0, 0, 128, 128, test_img_128x128);
 8006580:	e7f3      	b.n	800656a <vTaskDisplayTest+0x92>
 8006582:	bf00      	nop
 8006584:	2000000c 	.word	0x2000000c

08006588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b082      	sub	sp, #8
 800658c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800658e:	f7f9 ffa7 	bl	80004e0 <HAL_Init>

  /* USER CODE BEGIN Init */
  sDisplaySPI = xSemaphoreCreateBinary();
 8006592:	2203      	movs	r2, #3
 8006594:	2100      	movs	r1, #0
 8006596:	2001      	movs	r0, #1
 8006598:	f7fd fe93 	bl	80042c2 <xQueueGenericCreate>
 800659c:	4602      	mov	r2, r0
 800659e:	4b16      	ldr	r3, [pc, #88]	; (80065f8 <main+0x70>)
 80065a0:	601a      	str	r2, [r3, #0]
  xSemaphoreGive(sDisplaySPI);
 80065a2:	4b15      	ldr	r3, [pc, #84]	; (80065f8 <main+0x70>)
 80065a4:	6818      	ldr	r0, [r3, #0]
 80065a6:	2300      	movs	r3, #0
 80065a8:	2200      	movs	r2, #0
 80065aa:	2100      	movs	r1, #0
 80065ac:	f7fd feec 	bl	8004388 <xQueueGenericSend>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80065b0:	f000 f82e 	bl	8006610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80065b4:	f000 f932 	bl	800681c <MX_GPIO_Init>
  MX_DMA_Init();
 80065b8:	f000 f908 	bl	80067cc <MX_DMA_Init>
  MX_USART2_UART_Init();
 80065bc:	f000 f8dc 	bl	8006778 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80065c0:	f000 f8a4 	bl	800670c <MX_SPI3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80065c4:	f000 f88e 	bl	80066e4 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80065c8:	f7fc ff60 	bl	800348c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80065cc:	4a0b      	ldr	r2, [pc, #44]	; (80065fc <main+0x74>)
 80065ce:	2100      	movs	r1, #0
 80065d0:	480b      	ldr	r0, [pc, #44]	; (8006600 <main+0x78>)
 80065d2:	f7fc ffc5 	bl	8003560 <osThreadNew>
 80065d6:	4602      	mov	r2, r0
 80065d8:	4b0a      	ldr	r3, [pc, #40]	; (8006604 <main+0x7c>)
 80065da:	601a      	str	r2, [r3, #0]
//  							const configSTACK_DEPTH_TYPE usStackDepth,
//  							void * const pvParameters,
//  							UBaseType_t uxPriority,
//  							TaskHandle_t * const pxCreatedTask ) PRIVILEGED_FUNCTION;

  xTaskCreate(
 80065dc:	2300      	movs	r3, #0
 80065de:	9301      	str	r3, [sp, #4]
 80065e0:	2302      	movs	r3, #2
 80065e2:	9300      	str	r3, [sp, #0]
 80065e4:	2300      	movs	r3, #0
 80065e6:	2280      	movs	r2, #128	; 0x80
 80065e8:	4907      	ldr	r1, [pc, #28]	; (8006608 <main+0x80>)
 80065ea:	4808      	ldr	r0, [pc, #32]	; (800660c <main+0x84>)
 80065ec:	f7fe fca6 	bl	8004f3c <xTaskCreate>
  );

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80065f0:	f7fc ff80 	bl	80034f4 <osKernelStart>
//  uint32_t cnt = 0;
//  HAL_GPIO_WritePin (GPIOA, GPIO_PIN_4, GPIO_PIN_SET);  	// Set CS (no transmission)
//  HAL_GPIO_WritePin(GPIOD,  GPIO_PIN_1, GPIO_PIN_SET); 		// No reset
//  HAL_GPIO_WritePin (GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);

  while (1)
 80065f4:	e7fe      	b.n	80065f4 <main+0x6c>
 80065f6:	bf00      	nop
 80065f8:	20016af8 	.word	0x20016af8
 80065fc:	08006f44 	.word	0x08006f44
 8006600:	08006959 	.word	0x08006959
 8006604:	2001697c 	.word	0x2001697c
 8006608:	08006eb8 	.word	0x08006eb8
 800660c:	080064d9 	.word	0x080064d9

08006610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b094      	sub	sp, #80	; 0x50
 8006614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006616:	f107 0320 	add.w	r3, r7, #32
 800661a:	2230      	movs	r2, #48	; 0x30
 800661c:	2100      	movs	r1, #0
 800661e:	4618      	mov	r0, r3
 8006620:	f000 fc23 	bl	8006e6a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006624:	f107 030c 	add.w	r3, r7, #12
 8006628:	2200      	movs	r2, #0
 800662a:	601a      	str	r2, [r3, #0]
 800662c:	605a      	str	r2, [r3, #4]
 800662e:	609a      	str	r2, [r3, #8]
 8006630:	60da      	str	r2, [r3, #12]
 8006632:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006634:	2300      	movs	r3, #0
 8006636:	60bb      	str	r3, [r7, #8]
 8006638:	4a28      	ldr	r2, [pc, #160]	; (80066dc <SystemClock_Config+0xcc>)
 800663a:	4b28      	ldr	r3, [pc, #160]	; (80066dc <SystemClock_Config+0xcc>)
 800663c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800663e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006642:	6413      	str	r3, [r2, #64]	; 0x40
 8006644:	4b25      	ldr	r3, [pc, #148]	; (80066dc <SystemClock_Config+0xcc>)
 8006646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800664c:	60bb      	str	r3, [r7, #8]
 800664e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006650:	2300      	movs	r3, #0
 8006652:	607b      	str	r3, [r7, #4]
 8006654:	4a22      	ldr	r2, [pc, #136]	; (80066e0 <SystemClock_Config+0xd0>)
 8006656:	4b22      	ldr	r3, [pc, #136]	; (80066e0 <SystemClock_Config+0xd0>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800665e:	6013      	str	r3, [r2, #0]
 8006660:	4b1f      	ldr	r3, [pc, #124]	; (80066e0 <SystemClock_Config+0xd0>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006668:	607b      	str	r3, [r7, #4]
 800666a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800666c:	2302      	movs	r3, #2
 800666e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006670:	2301      	movs	r3, #1
 8006672:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006674:	2310      	movs	r3, #16
 8006676:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006678:	2302      	movs	r3, #2
 800667a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800667c:	2300      	movs	r3, #0
 800667e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8006680:	2308      	movs	r3, #8
 8006682:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8006684:	2364      	movs	r3, #100	; 0x64
 8006686:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006688:	2302      	movs	r3, #2
 800668a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800668c:	2304      	movs	r3, #4
 800668e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006690:	f107 0320 	add.w	r3, r7, #32
 8006694:	4618      	mov	r0, r3
 8006696:	f7fa fdab 	bl	80011f0 <HAL_RCC_OscConfig>
 800669a:	4603      	mov	r3, r0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d001      	beq.n	80066a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80066a0:	f000 f974 	bl	800698c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80066a4:	230f      	movs	r3, #15
 80066a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80066a8:	2302      	movs	r3, #2
 80066aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80066ac:	2300      	movs	r3, #0
 80066ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80066b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80066b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80066b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80066ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80066bc:	f107 030c 	add.w	r3, r7, #12
 80066c0:	2103      	movs	r1, #3
 80066c2:	4618      	mov	r0, r3
 80066c4:	f7fb f804 	bl	80016d0 <HAL_RCC_ClockConfig>
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d001      	beq.n	80066d2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80066ce:	f000 f95d 	bl	800698c <Error_Handler>
  }
}
 80066d2:	bf00      	nop
 80066d4:	3750      	adds	r7, #80	; 0x50
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	40023800 	.word	0x40023800
 80066e0:	40007000 	.word	0x40007000

080066e4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	af00      	add	r7, sp, #0
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 80066e8:	2200      	movs	r2, #0
 80066ea:	2105      	movs	r1, #5
 80066ec:	202f      	movs	r0, #47	; 0x2f
 80066ee:	f7fa f811 	bl	8000714 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80066f2:	202f      	movs	r0, #47	; 0x2f
 80066f4:	f7fa f82a 	bl	800074c <HAL_NVIC_EnableIRQ>
  /* SPI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 80066f8:	2200      	movs	r2, #0
 80066fa:	2105      	movs	r1, #5
 80066fc:	2033      	movs	r0, #51	; 0x33
 80066fe:	f7fa f809 	bl	8000714 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8006702:	2033      	movs	r0, #51	; 0x33
 8006704:	f7fa f822 	bl	800074c <HAL_NVIC_EnableIRQ>
}
 8006708:	bf00      	nop
 800670a:	bd80      	pop	{r7, pc}

0800670c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8006710:	4b17      	ldr	r3, [pc, #92]	; (8006770 <MX_SPI3_Init+0x64>)
 8006712:	4a18      	ldr	r2, [pc, #96]	; (8006774 <MX_SPI3_Init+0x68>)
 8006714:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8006716:	4b16      	ldr	r3, [pc, #88]	; (8006770 <MX_SPI3_Init+0x64>)
 8006718:	f44f 7282 	mov.w	r2, #260	; 0x104
 800671c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800671e:	4b14      	ldr	r3, [pc, #80]	; (8006770 <MX_SPI3_Init+0x64>)
 8006720:	2200      	movs	r2, #0
 8006722:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8006724:	4b12      	ldr	r3, [pc, #72]	; (8006770 <MX_SPI3_Init+0x64>)
 8006726:	2200      	movs	r2, #0
 8006728:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800672a:	4b11      	ldr	r3, [pc, #68]	; (8006770 <MX_SPI3_Init+0x64>)
 800672c:	2200      	movs	r2, #0
 800672e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006730:	4b0f      	ldr	r3, [pc, #60]	; (8006770 <MX_SPI3_Init+0x64>)
 8006732:	2200      	movs	r2, #0
 8006734:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8006736:	4b0e      	ldr	r3, [pc, #56]	; (8006770 <MX_SPI3_Init+0x64>)
 8006738:	f44f 7200 	mov.w	r2, #512	; 0x200
 800673c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800673e:	4b0c      	ldr	r3, [pc, #48]	; (8006770 <MX_SPI3_Init+0x64>)
 8006740:	2200      	movs	r2, #0
 8006742:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006744:	4b0a      	ldr	r3, [pc, #40]	; (8006770 <MX_SPI3_Init+0x64>)
 8006746:	2200      	movs	r2, #0
 8006748:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800674a:	4b09      	ldr	r3, [pc, #36]	; (8006770 <MX_SPI3_Init+0x64>)
 800674c:	2200      	movs	r2, #0
 800674e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006750:	4b07      	ldr	r3, [pc, #28]	; (8006770 <MX_SPI3_Init+0x64>)
 8006752:	2200      	movs	r2, #0
 8006754:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8006756:	4b06      	ldr	r3, [pc, #24]	; (8006770 <MX_SPI3_Init+0x64>)
 8006758:	220a      	movs	r2, #10
 800675a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800675c:	4804      	ldr	r0, [pc, #16]	; (8006770 <MX_SPI3_Init+0x64>)
 800675e:	f7fb f9b9 	bl	8001ad4 <HAL_SPI_Init>
 8006762:	4603      	mov	r3, r0
 8006764:	2b00      	cmp	r3, #0
 8006766:	d001      	beq.n	800676c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8006768:	f000 f910 	bl	800698c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800676c:	bf00      	nop
 800676e:	bd80      	pop	{r7, pc}
 8006770:	200169e0 	.word	0x200169e0
 8006774:	40003c00 	.word	0x40003c00

08006778 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800677c:	4b11      	ldr	r3, [pc, #68]	; (80067c4 <MX_USART2_UART_Init+0x4c>)
 800677e:	4a12      	ldr	r2, [pc, #72]	; (80067c8 <MX_USART2_UART_Init+0x50>)
 8006780:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006782:	4b10      	ldr	r3, [pc, #64]	; (80067c4 <MX_USART2_UART_Init+0x4c>)
 8006784:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006788:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800678a:	4b0e      	ldr	r3, [pc, #56]	; (80067c4 <MX_USART2_UART_Init+0x4c>)
 800678c:	2200      	movs	r2, #0
 800678e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006790:	4b0c      	ldr	r3, [pc, #48]	; (80067c4 <MX_USART2_UART_Init+0x4c>)
 8006792:	2200      	movs	r2, #0
 8006794:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006796:	4b0b      	ldr	r3, [pc, #44]	; (80067c4 <MX_USART2_UART_Init+0x4c>)
 8006798:	2200      	movs	r2, #0
 800679a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800679c:	4b09      	ldr	r3, [pc, #36]	; (80067c4 <MX_USART2_UART_Init+0x4c>)
 800679e:	220c      	movs	r2, #12
 80067a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80067a2:	4b08      	ldr	r3, [pc, #32]	; (80067c4 <MX_USART2_UART_Init+0x4c>)
 80067a4:	2200      	movs	r2, #0
 80067a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80067a8:	4b06      	ldr	r3, [pc, #24]	; (80067c4 <MX_USART2_UART_Init+0x4c>)
 80067aa:	2200      	movs	r2, #0
 80067ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80067ae:	4805      	ldr	r0, [pc, #20]	; (80067c4 <MX_USART2_UART_Init+0x4c>)
 80067b0:	f7fb ff2c 	bl	800260c <HAL_UART_Init>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d001      	beq.n	80067be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80067ba:	f000 f8e7 	bl	800698c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80067be:	bf00      	nop
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	20016afc 	.word	0x20016afc
 80067c8:	40004400 	.word	0x40004400

080067cc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b082      	sub	sp, #8
 80067d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80067d2:	2300      	movs	r3, #0
 80067d4:	607b      	str	r3, [r7, #4]
 80067d6:	4a10      	ldr	r2, [pc, #64]	; (8006818 <MX_DMA_Init+0x4c>)
 80067d8:	4b0f      	ldr	r3, [pc, #60]	; (8006818 <MX_DMA_Init+0x4c>)
 80067da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80067e0:	6313      	str	r3, [r2, #48]	; 0x30
 80067e2:	4b0d      	ldr	r3, [pc, #52]	; (8006818 <MX_DMA_Init+0x4c>)
 80067e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067ea:	607b      	str	r3, [r7, #4]
 80067ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80067ee:	2200      	movs	r2, #0
 80067f0:	2105      	movs	r1, #5
 80067f2:	2010      	movs	r0, #16
 80067f4:	f7f9 ff8e 	bl	8000714 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80067f8:	2010      	movs	r0, #16
 80067fa:	f7f9 ffa7 	bl	800074c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80067fe:	2200      	movs	r2, #0
 8006800:	2105      	movs	r1, #5
 8006802:	2011      	movs	r0, #17
 8006804:	f7f9 ff86 	bl	8000714 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8006808:	2011      	movs	r0, #17
 800680a:	f7f9 ff9f 	bl	800074c <HAL_NVIC_EnableIRQ>

}
 800680e:	bf00      	nop
 8006810:	3708      	adds	r7, #8
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
 8006816:	bf00      	nop
 8006818:	40023800 	.word	0x40023800

0800681c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b088      	sub	sp, #32
 8006820:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006822:	f107 030c 	add.w	r3, r7, #12
 8006826:	2200      	movs	r2, #0
 8006828:	601a      	str	r2, [r3, #0]
 800682a:	605a      	str	r2, [r3, #4]
 800682c:	609a      	str	r2, [r3, #8]
 800682e:	60da      	str	r2, [r3, #12]
 8006830:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006832:	2300      	movs	r3, #0
 8006834:	60bb      	str	r3, [r7, #8]
 8006836:	4a3b      	ldr	r2, [pc, #236]	; (8006924 <MX_GPIO_Init+0x108>)
 8006838:	4b3a      	ldr	r3, [pc, #232]	; (8006924 <MX_GPIO_Init+0x108>)
 800683a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800683c:	f043 0301 	orr.w	r3, r3, #1
 8006840:	6313      	str	r3, [r2, #48]	; 0x30
 8006842:	4b38      	ldr	r3, [pc, #224]	; (8006924 <MX_GPIO_Init+0x108>)
 8006844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006846:	f003 0301 	and.w	r3, r3, #1
 800684a:	60bb      	str	r3, [r7, #8]
 800684c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800684e:	2300      	movs	r3, #0
 8006850:	607b      	str	r3, [r7, #4]
 8006852:	4a34      	ldr	r2, [pc, #208]	; (8006924 <MX_GPIO_Init+0x108>)
 8006854:	4b33      	ldr	r3, [pc, #204]	; (8006924 <MX_GPIO_Init+0x108>)
 8006856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006858:	f043 0308 	orr.w	r3, r3, #8
 800685c:	6313      	str	r3, [r2, #48]	; 0x30
 800685e:	4b31      	ldr	r3, [pc, #196]	; (8006924 <MX_GPIO_Init+0x108>)
 8006860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006862:	f003 0308 	and.w	r3, r3, #8
 8006866:	607b      	str	r3, [r7, #4]
 8006868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800686a:	2300      	movs	r3, #0
 800686c:	603b      	str	r3, [r7, #0]
 800686e:	4a2d      	ldr	r2, [pc, #180]	; (8006924 <MX_GPIO_Init+0x108>)
 8006870:	4b2c      	ldr	r3, [pc, #176]	; (8006924 <MX_GPIO_Init+0x108>)
 8006872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006874:	f043 0304 	orr.w	r3, r3, #4
 8006878:	6313      	str	r3, [r2, #48]	; 0x30
 800687a:	4b2a      	ldr	r3, [pc, #168]	; (8006924 <MX_GPIO_Init+0x108>)
 800687c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800687e:	f003 0304 	and.w	r3, r3, #4
 8006882:	603b      	str	r3, [r7, #0]
 8006884:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8006886:	2201      	movs	r2, #1
 8006888:	2110      	movs	r1, #16
 800688a:	4827      	ldr	r0, [pc, #156]	; (8006928 <MX_GPIO_Init+0x10c>)
 800688c:	f7fa fc96 	bl	80011bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 8006890:	2200      	movs	r2, #0
 8006892:	f24f 0102 	movw	r1, #61442	; 0xf002
 8006896:	4825      	ldr	r0, [pc, #148]	; (800692c <MX_GPIO_Init+0x110>)
 8006898:	f7fa fc90 	bl	80011bc <HAL_GPIO_WritePin>
                          |GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800689c:	2200      	movs	r2, #0
 800689e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80068a2:	4823      	ldr	r0, [pc, #140]	; (8006930 <MX_GPIO_Init+0x114>)
 80068a4:	f7fa fc8a 	bl	80011bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80068a8:	2310      	movs	r3, #16
 80068aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80068ac:	2301      	movs	r3, #1
 80068ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068b0:	2300      	movs	r3, #0
 80068b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068b4:	2303      	movs	r3, #3
 80068b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068b8:	f107 030c 	add.w	r3, r7, #12
 80068bc:	4619      	mov	r1, r3
 80068be:	481a      	ldr	r0, [pc, #104]	; (8006928 <MX_GPIO_Init+0x10c>)
 80068c0:	f7fa fae2 	bl	8000e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80068c4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80068c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80068ca:	2301      	movs	r3, #1
 80068cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068ce:	2300      	movs	r3, #0
 80068d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80068d2:	2300      	movs	r3, #0
 80068d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80068d6:	f107 030c 	add.w	r3, r7, #12
 80068da:	4619      	mov	r1, r3
 80068dc:	4813      	ldr	r0, [pc, #76]	; (800692c <MX_GPIO_Init+0x110>)
 80068de:	f7fa fad3 	bl	8000e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80068e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80068e8:	2301      	movs	r3, #1
 80068ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068ec:	2300      	movs	r3, #0
 80068ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068f0:	2303      	movs	r3, #3
 80068f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80068f4:	f107 030c 	add.w	r3, r7, #12
 80068f8:	4619      	mov	r1, r3
 80068fa:	480d      	ldr	r0, [pc, #52]	; (8006930 <MX_GPIO_Init+0x114>)
 80068fc:	f7fa fac4 	bl	8000e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006900:	2302      	movs	r3, #2
 8006902:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006904:	2301      	movs	r3, #1
 8006906:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006908:	2300      	movs	r3, #0
 800690a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800690c:	2302      	movs	r3, #2
 800690e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006910:	f107 030c 	add.w	r3, r7, #12
 8006914:	4619      	mov	r1, r3
 8006916:	4805      	ldr	r0, [pc, #20]	; (800692c <MX_GPIO_Init+0x110>)
 8006918:	f7fa fab6 	bl	8000e88 <HAL_GPIO_Init>

}
 800691c:	bf00      	nop
 800691e:	3720      	adds	r7, #32
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}
 8006924:	40023800 	.word	0x40023800
 8006928:	40020000 	.word	0x40020000
 800692c:	40020c00 	.word	0x40020c00
 8006930:	40020800 	.word	0x40020800

08006934 <HAL_SPI_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]

	ST7735_Unselect();
 800693c:	f7fc fc3c 	bl	80031b8 <ST7735_Unselect>
	xSemaphoreGiveFromISR(sDisplaySPI, NULL);
 8006940:	4b04      	ldr	r3, [pc, #16]	; (8006954 <HAL_SPI_TxCpltCallback+0x20>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2100      	movs	r1, #0
 8006946:	4618      	mov	r0, r3
 8006948:	f7fd feac 	bl	80046a4 <xQueueGiveFromISR>

}
 800694c:	bf00      	nop
 800694e:	3708      	adds	r7, #8
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}
 8006954:	20016af8 	.word	0x20016af8

08006958 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b082      	sub	sp, #8
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8006960:	2001      	movs	r0, #1
 8006962:	f7fc fea3 	bl	80036ac <osDelay>
 8006966:	e7fb      	b.n	8006960 <StartDefaultTask+0x8>

08006968 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b082      	sub	sp, #8
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a04      	ldr	r2, [pc, #16]	; (8006988 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d101      	bne.n	800697e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800697a:	f7f9 fdd3 	bl	8000524 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800697e:	bf00      	nop
 8006980:	3708      	adds	r7, #8
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	40014400 	.word	0x40014400

0800698c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800698c:	b480      	push	{r7}
 800698e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006990:	bf00      	nop
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr
	...

0800699c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b082      	sub	sp, #8
 80069a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80069a2:	2300      	movs	r3, #0
 80069a4:	607b      	str	r3, [r7, #4]
 80069a6:	4a12      	ldr	r2, [pc, #72]	; (80069f0 <HAL_MspInit+0x54>)
 80069a8:	4b11      	ldr	r3, [pc, #68]	; (80069f0 <HAL_MspInit+0x54>)
 80069aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80069b0:	6453      	str	r3, [r2, #68]	; 0x44
 80069b2:	4b0f      	ldr	r3, [pc, #60]	; (80069f0 <HAL_MspInit+0x54>)
 80069b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069ba:	607b      	str	r3, [r7, #4]
 80069bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80069be:	2300      	movs	r3, #0
 80069c0:	603b      	str	r3, [r7, #0]
 80069c2:	4a0b      	ldr	r2, [pc, #44]	; (80069f0 <HAL_MspInit+0x54>)
 80069c4:	4b0a      	ldr	r3, [pc, #40]	; (80069f0 <HAL_MspInit+0x54>)
 80069c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069cc:	6413      	str	r3, [r2, #64]	; 0x40
 80069ce:	4b08      	ldr	r3, [pc, #32]	; (80069f0 <HAL_MspInit+0x54>)
 80069d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069d6:	603b      	str	r3, [r7, #0]
 80069d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80069da:	2200      	movs	r2, #0
 80069dc:	210f      	movs	r1, #15
 80069de:	f06f 0001 	mvn.w	r0, #1
 80069e2:	f7f9 fe97 	bl	8000714 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80069e6:	bf00      	nop
 80069e8:	3708      	adds	r7, #8
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}
 80069ee:	bf00      	nop
 80069f0:	40023800 	.word	0x40023800

080069f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b08a      	sub	sp, #40	; 0x28
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069fc:	f107 0314 	add.w	r3, r7, #20
 8006a00:	2200      	movs	r2, #0
 8006a02:	601a      	str	r2, [r3, #0]
 8006a04:	605a      	str	r2, [r3, #4]
 8006a06:	609a      	str	r2, [r3, #8]
 8006a08:	60da      	str	r2, [r3, #12]
 8006a0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a30      	ldr	r2, [pc, #192]	; (8006ad4 <HAL_SPI_MspInit+0xe0>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d15a      	bne.n	8006acc <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8006a16:	2300      	movs	r3, #0
 8006a18:	613b      	str	r3, [r7, #16]
 8006a1a:	4a2f      	ldr	r2, [pc, #188]	; (8006ad8 <HAL_SPI_MspInit+0xe4>)
 8006a1c:	4b2e      	ldr	r3, [pc, #184]	; (8006ad8 <HAL_SPI_MspInit+0xe4>)
 8006a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a24:	6413      	str	r3, [r2, #64]	; 0x40
 8006a26:	4b2c      	ldr	r3, [pc, #176]	; (8006ad8 <HAL_SPI_MspInit+0xe4>)
 8006a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a2e:	613b      	str	r3, [r7, #16]
 8006a30:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006a32:	2300      	movs	r3, #0
 8006a34:	60fb      	str	r3, [r7, #12]
 8006a36:	4a28      	ldr	r2, [pc, #160]	; (8006ad8 <HAL_SPI_MspInit+0xe4>)
 8006a38:	4b27      	ldr	r3, [pc, #156]	; (8006ad8 <HAL_SPI_MspInit+0xe4>)
 8006a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a3c:	f043 0304 	orr.w	r3, r3, #4
 8006a40:	6313      	str	r3, [r2, #48]	; 0x30
 8006a42:	4b25      	ldr	r3, [pc, #148]	; (8006ad8 <HAL_SPI_MspInit+0xe4>)
 8006a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a46:	f003 0304 	and.w	r3, r3, #4
 8006a4a:	60fb      	str	r3, [r7, #12]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8006a4e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006a52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a54:	2302      	movs	r3, #2
 8006a56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a5c:	2303      	movs	r3, #3
 8006a5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8006a60:	2306      	movs	r3, #6
 8006a62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006a64:	f107 0314 	add.w	r3, r7, #20
 8006a68:	4619      	mov	r1, r3
 8006a6a:	481c      	ldr	r0, [pc, #112]	; (8006adc <HAL_SPI_MspInit+0xe8>)
 8006a6c:	f7fa fa0c 	bl	8000e88 <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream7;
 8006a70:	4b1b      	ldr	r3, [pc, #108]	; (8006ae0 <HAL_SPI_MspInit+0xec>)
 8006a72:	4a1c      	ldr	r2, [pc, #112]	; (8006ae4 <HAL_SPI_MspInit+0xf0>)
 8006a74:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8006a76:	4b1a      	ldr	r3, [pc, #104]	; (8006ae0 <HAL_SPI_MspInit+0xec>)
 8006a78:	2200      	movs	r2, #0
 8006a7a:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006a7c:	4b18      	ldr	r3, [pc, #96]	; (8006ae0 <HAL_SPI_MspInit+0xec>)
 8006a7e:	2240      	movs	r2, #64	; 0x40
 8006a80:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006a82:	4b17      	ldr	r3, [pc, #92]	; (8006ae0 <HAL_SPI_MspInit+0xec>)
 8006a84:	2200      	movs	r2, #0
 8006a86:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006a88:	4b15      	ldr	r3, [pc, #84]	; (8006ae0 <HAL_SPI_MspInit+0xec>)
 8006a8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006a8e:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006a90:	4b13      	ldr	r3, [pc, #76]	; (8006ae0 <HAL_SPI_MspInit+0xec>)
 8006a92:	2200      	movs	r2, #0
 8006a94:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006a96:	4b12      	ldr	r3, [pc, #72]	; (8006ae0 <HAL_SPI_MspInit+0xec>)
 8006a98:	2200      	movs	r2, #0
 8006a9a:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8006a9c:	4b10      	ldr	r3, [pc, #64]	; (8006ae0 <HAL_SPI_MspInit+0xec>)
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006aa2:	4b0f      	ldr	r3, [pc, #60]	; (8006ae0 <HAL_SPI_MspInit+0xec>)
 8006aa4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006aa8:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006aaa:	4b0d      	ldr	r3, [pc, #52]	; (8006ae0 <HAL_SPI_MspInit+0xec>)
 8006aac:	2200      	movs	r2, #0
 8006aae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8006ab0:	480b      	ldr	r0, [pc, #44]	; (8006ae0 <HAL_SPI_MspInit+0xec>)
 8006ab2:	f7f9 fe59 	bl	8000768 <HAL_DMA_Init>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d001      	beq.n	8006ac0 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8006abc:	f7ff ff66 	bl	800698c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	4a07      	ldr	r2, [pc, #28]	; (8006ae0 <HAL_SPI_MspInit+0xec>)
 8006ac4:	649a      	str	r2, [r3, #72]	; 0x48
 8006ac6:	4a06      	ldr	r2, [pc, #24]	; (8006ae0 <HAL_SPI_MspInit+0xec>)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8006acc:	bf00      	nop
 8006ace:	3728      	adds	r7, #40	; 0x28
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}
 8006ad4:	40003c00 	.word	0x40003c00
 8006ad8:	40023800 	.word	0x40023800
 8006adc:	40020800 	.word	0x40020800
 8006ae0:	20016a38 	.word	0x20016a38
 8006ae4:	400260b8 	.word	0x400260b8

08006ae8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b08a      	sub	sp, #40	; 0x28
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006af0:	f107 0314 	add.w	r3, r7, #20
 8006af4:	2200      	movs	r2, #0
 8006af6:	601a      	str	r2, [r3, #0]
 8006af8:	605a      	str	r2, [r3, #4]
 8006afa:	609a      	str	r2, [r3, #8]
 8006afc:	60da      	str	r2, [r3, #12]
 8006afe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a4c      	ldr	r2, [pc, #304]	; (8006c38 <HAL_UART_MspInit+0x150>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	f040 8092 	bne.w	8006c30 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	613b      	str	r3, [r7, #16]
 8006b10:	4a4a      	ldr	r2, [pc, #296]	; (8006c3c <HAL_UART_MspInit+0x154>)
 8006b12:	4b4a      	ldr	r3, [pc, #296]	; (8006c3c <HAL_UART_MspInit+0x154>)
 8006b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b1a:	6413      	str	r3, [r2, #64]	; 0x40
 8006b1c:	4b47      	ldr	r3, [pc, #284]	; (8006c3c <HAL_UART_MspInit+0x154>)
 8006b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b24:	613b      	str	r3, [r7, #16]
 8006b26:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b28:	2300      	movs	r3, #0
 8006b2a:	60fb      	str	r3, [r7, #12]
 8006b2c:	4a43      	ldr	r2, [pc, #268]	; (8006c3c <HAL_UART_MspInit+0x154>)
 8006b2e:	4b43      	ldr	r3, [pc, #268]	; (8006c3c <HAL_UART_MspInit+0x154>)
 8006b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b32:	f043 0301 	orr.w	r3, r3, #1
 8006b36:	6313      	str	r3, [r2, #48]	; 0x30
 8006b38:	4b40      	ldr	r3, [pc, #256]	; (8006c3c <HAL_UART_MspInit+0x154>)
 8006b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b3c:	f003 0301 	and.w	r3, r3, #1
 8006b40:	60fb      	str	r3, [r7, #12]
 8006b42:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006b44:	230c      	movs	r3, #12
 8006b46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b48:	2302      	movs	r3, #2
 8006b4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b50:	2303      	movs	r3, #3
 8006b52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006b54:	2307      	movs	r3, #7
 8006b56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b58:	f107 0314 	add.w	r3, r7, #20
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	4838      	ldr	r0, [pc, #224]	; (8006c40 <HAL_UART_MspInit+0x158>)
 8006b60:	f7fa f992 	bl	8000e88 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8006b64:	4b37      	ldr	r3, [pc, #220]	; (8006c44 <HAL_UART_MspInit+0x15c>)
 8006b66:	4a38      	ldr	r2, [pc, #224]	; (8006c48 <HAL_UART_MspInit+0x160>)
 8006b68:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8006b6a:	4b36      	ldr	r3, [pc, #216]	; (8006c44 <HAL_UART_MspInit+0x15c>)
 8006b6c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006b70:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006b72:	4b34      	ldr	r3, [pc, #208]	; (8006c44 <HAL_UART_MspInit+0x15c>)
 8006b74:	2240      	movs	r2, #64	; 0x40
 8006b76:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006b78:	4b32      	ldr	r3, [pc, #200]	; (8006c44 <HAL_UART_MspInit+0x15c>)
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006b7e:	4b31      	ldr	r3, [pc, #196]	; (8006c44 <HAL_UART_MspInit+0x15c>)
 8006b80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006b84:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006b86:	4b2f      	ldr	r3, [pc, #188]	; (8006c44 <HAL_UART_MspInit+0x15c>)
 8006b88:	2200      	movs	r2, #0
 8006b8a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006b8c:	4b2d      	ldr	r3, [pc, #180]	; (8006c44 <HAL_UART_MspInit+0x15c>)
 8006b8e:	2200      	movs	r2, #0
 8006b90:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8006b92:	4b2c      	ldr	r3, [pc, #176]	; (8006c44 <HAL_UART_MspInit+0x15c>)
 8006b94:	2200      	movs	r2, #0
 8006b96:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006b98:	4b2a      	ldr	r3, [pc, #168]	; (8006c44 <HAL_UART_MspInit+0x15c>)
 8006b9a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006b9e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006ba0:	4b28      	ldr	r3, [pc, #160]	; (8006c44 <HAL_UART_MspInit+0x15c>)
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8006ba6:	4827      	ldr	r0, [pc, #156]	; (8006c44 <HAL_UART_MspInit+0x15c>)
 8006ba8:	f7f9 fdde 	bl	8000768 <HAL_DMA_Init>
 8006bac:	4603      	mov	r3, r0
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d001      	beq.n	8006bb6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8006bb2:	f7ff feeb 	bl	800698c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4a22      	ldr	r2, [pc, #136]	; (8006c44 <HAL_UART_MspInit+0x15c>)
 8006bba:	631a      	str	r2, [r3, #48]	; 0x30
 8006bbc:	4a21      	ldr	r2, [pc, #132]	; (8006c44 <HAL_UART_MspInit+0x15c>)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8006bc2:	4b22      	ldr	r3, [pc, #136]	; (8006c4c <HAL_UART_MspInit+0x164>)
 8006bc4:	4a22      	ldr	r2, [pc, #136]	; (8006c50 <HAL_UART_MspInit+0x168>)
 8006bc6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8006bc8:	4b20      	ldr	r3, [pc, #128]	; (8006c4c <HAL_UART_MspInit+0x164>)
 8006bca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006bce:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006bd0:	4b1e      	ldr	r3, [pc, #120]	; (8006c4c <HAL_UART_MspInit+0x164>)
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006bd6:	4b1d      	ldr	r3, [pc, #116]	; (8006c4c <HAL_UART_MspInit+0x164>)
 8006bd8:	2200      	movs	r2, #0
 8006bda:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006bdc:	4b1b      	ldr	r3, [pc, #108]	; (8006c4c <HAL_UART_MspInit+0x164>)
 8006bde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006be2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006be4:	4b19      	ldr	r3, [pc, #100]	; (8006c4c <HAL_UART_MspInit+0x164>)
 8006be6:	2200      	movs	r2, #0
 8006be8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006bea:	4b18      	ldr	r3, [pc, #96]	; (8006c4c <HAL_UART_MspInit+0x164>)
 8006bec:	2200      	movs	r2, #0
 8006bee:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8006bf0:	4b16      	ldr	r3, [pc, #88]	; (8006c4c <HAL_UART_MspInit+0x164>)
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006bf6:	4b15      	ldr	r3, [pc, #84]	; (8006c4c <HAL_UART_MspInit+0x164>)
 8006bf8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006bfc:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006bfe:	4b13      	ldr	r3, [pc, #76]	; (8006c4c <HAL_UART_MspInit+0x164>)
 8006c00:	2200      	movs	r2, #0
 8006c02:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8006c04:	4811      	ldr	r0, [pc, #68]	; (8006c4c <HAL_UART_MspInit+0x164>)
 8006c06:	f7f9 fdaf 	bl	8000768 <HAL_DMA_Init>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d001      	beq.n	8006c14 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8006c10:	f7ff febc 	bl	800698c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	4a0d      	ldr	r2, [pc, #52]	; (8006c4c <HAL_UART_MspInit+0x164>)
 8006c18:	635a      	str	r2, [r3, #52]	; 0x34
 8006c1a:	4a0c      	ldr	r2, [pc, #48]	; (8006c4c <HAL_UART_MspInit+0x164>)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8006c20:	2200      	movs	r2, #0
 8006c22:	2105      	movs	r1, #5
 8006c24:	2026      	movs	r0, #38	; 0x26
 8006c26:	f7f9 fd75 	bl	8000714 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006c2a:	2026      	movs	r0, #38	; 0x26
 8006c2c:	f7f9 fd8e 	bl	800074c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8006c30:	bf00      	nop
 8006c32:	3728      	adds	r7, #40	; 0x28
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}
 8006c38:	40004400 	.word	0x40004400
 8006c3c:	40023800 	.word	0x40023800
 8006c40:	40020000 	.word	0x40020000
 8006c44:	20016a98 	.word	0x20016a98
 8006c48:	400260a0 	.word	0x400260a0
 8006c4c:	20016980 	.word	0x20016980
 8006c50:	40026088 	.word	0x40026088

08006c54 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b08c      	sub	sp, #48	; 0x30
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8006c60:	2300      	movs	r3, #0
 8006c62:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8006c64:	2200      	movs	r2, #0
 8006c66:	6879      	ldr	r1, [r7, #4]
 8006c68:	2019      	movs	r0, #25
 8006c6a:	f7f9 fd53 	bl	8000714 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8006c6e:	2019      	movs	r0, #25
 8006c70:	f7f9 fd6c 	bl	800074c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8006c74:	2300      	movs	r3, #0
 8006c76:	60fb      	str	r3, [r7, #12]
 8006c78:	4a1f      	ldr	r2, [pc, #124]	; (8006cf8 <HAL_InitTick+0xa4>)
 8006c7a:	4b1f      	ldr	r3, [pc, #124]	; (8006cf8 <HAL_InitTick+0xa4>)
 8006c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c82:	6453      	str	r3, [r2, #68]	; 0x44
 8006c84:	4b1c      	ldr	r3, [pc, #112]	; (8006cf8 <HAL_InitTick+0xa4>)
 8006c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c8c:	60fb      	str	r3, [r7, #12]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006c90:	f107 0210 	add.w	r2, r7, #16
 8006c94:	f107 0314 	add.w	r3, r7, #20
 8006c98:	4611      	mov	r1, r2
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f7fa fee8 	bl	8001a70 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM10 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8006ca0:	f7fa fed2 	bl	8001a48 <HAL_RCC_GetPCLK2Freq>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	005b      	lsls	r3, r3, #1
 8006ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8006caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cac:	4a13      	ldr	r2, [pc, #76]	; (8006cfc <HAL_InitTick+0xa8>)
 8006cae:	fba2 2303 	umull	r2, r3, r2, r3
 8006cb2:	0c9b      	lsrs	r3, r3, #18
 8006cb4:	3b01      	subs	r3, #1
 8006cb6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8006cb8:	4b11      	ldr	r3, [pc, #68]	; (8006d00 <HAL_InitTick+0xac>)
 8006cba:	4a12      	ldr	r2, [pc, #72]	; (8006d04 <HAL_InitTick+0xb0>)
 8006cbc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000 / 1000) - 1;
 8006cbe:	4b10      	ldr	r3, [pc, #64]	; (8006d00 <HAL_InitTick+0xac>)
 8006cc0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006cc4:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8006cc6:	4a0e      	ldr	r2, [pc, #56]	; (8006d00 <HAL_InitTick+0xac>)
 8006cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cca:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8006ccc:	4b0c      	ldr	r3, [pc, #48]	; (8006d00 <HAL_InitTick+0xac>)
 8006cce:	2200      	movs	r2, #0
 8006cd0:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006cd2:	4b0b      	ldr	r3, [pc, #44]	; (8006d00 <HAL_InitTick+0xac>)
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8006cd8:	4809      	ldr	r0, [pc, #36]	; (8006d00 <HAL_InitTick+0xac>)
 8006cda:	f7fb fa59 	bl	8002190 <HAL_TIM_Base_Init>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d104      	bne.n	8006cee <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 8006ce4:	4806      	ldr	r0, [pc, #24]	; (8006d00 <HAL_InitTick+0xac>)
 8006ce6:	f7fb fa88 	bl	80021fa <HAL_TIM_Base_Start_IT>
 8006cea:	4603      	mov	r3, r0
 8006cec:	e000      	b.n	8006cf0 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3730      	adds	r7, #48	; 0x30
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	40023800 	.word	0x40023800
 8006cfc:	431bde83 	.word	0x431bde83
 8006d00:	20016b3c 	.word	0x20016b3c
 8006d04:	40014400 	.word	0x40014400

08006d08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006d0c:	bf00      	nop
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr

08006d16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006d16:	b480      	push	{r7}
 8006d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006d1a:	e7fe      	b.n	8006d1a <HardFault_Handler+0x4>

08006d1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006d20:	e7fe      	b.n	8006d20 <MemManage_Handler+0x4>

08006d22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006d22:	b480      	push	{r7}
 8006d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006d26:	e7fe      	b.n	8006d26 <BusFault_Handler+0x4>

08006d28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006d2c:	e7fe      	b.n	8006d2c <UsageFault_Handler+0x4>

08006d2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006d2e:	b480      	push	{r7}
 8006d30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006d32:	bf00      	nop
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr

08006d3c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8006d40:	4802      	ldr	r0, [pc, #8]	; (8006d4c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8006d42:	f7fb fa7e 	bl	8002242 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8006d46:	bf00      	nop
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	bf00      	nop
 8006d4c:	20016b3c 	.word	0x20016b3c

08006d50 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006d54:	4802      	ldr	r0, [pc, #8]	; (8006d60 <USART2_IRQHandler+0x10>)
 8006d56:	f7fb fca7 	bl	80026a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8006d5a:	bf00      	nop
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	20016afc 	.word	0x20016afc

08006d64 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */
	//while(1);
  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8006d68:	4802      	ldr	r0, [pc, #8]	; (8006d74 <DMA1_Stream7_IRQHandler+0x10>)
 8006d6a:	f7f9 fe25 	bl	80009b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8006d6e:	bf00      	nop
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	20016a38 	.word	0x20016a38

08006d78 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8006d7c:	4802      	ldr	r0, [pc, #8]	; (8006d88 <SPI3_IRQHandler+0x10>)
 8006d7e:	f7fa ffbb 	bl	8001cf8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8006d82:	bf00      	nop
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	bf00      	nop
 8006d88:	200169e0 	.word	0x200169e0

08006d8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006d90:	4a08      	ldr	r2, [pc, #32]	; (8006db4 <SystemInit+0x28>)
 8006d92:	4b08      	ldr	r3, [pc, #32]	; (8006db4 <SystemInit+0x28>)
 8006d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006d9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006da0:	4b04      	ldr	r3, [pc, #16]	; (8006db4 <SystemInit+0x28>)
 8006da2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006da6:	609a      	str	r2, [r3, #8]
#endif
}
 8006da8:	bf00      	nop
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop
 8006db4:	e000ed00 	.word	0xe000ed00

08006db8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006db8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006df0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006dbc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006dbe:	e003      	b.n	8006dc8 <LoopCopyDataInit>

08006dc0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006dc0:	4b0c      	ldr	r3, [pc, #48]	; (8006df4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006dc2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006dc4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006dc6:	3104      	adds	r1, #4

08006dc8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006dc8:	480b      	ldr	r0, [pc, #44]	; (8006df8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006dca:	4b0c      	ldr	r3, [pc, #48]	; (8006dfc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006dcc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006dce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006dd0:	d3f6      	bcc.n	8006dc0 <CopyDataInit>
  ldr  r2, =_sbss
 8006dd2:	4a0b      	ldr	r2, [pc, #44]	; (8006e00 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006dd4:	e002      	b.n	8006ddc <LoopFillZerobss>

08006dd6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006dd6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006dd8:	f842 3b04 	str.w	r3, [r2], #4

08006ddc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006ddc:	4b09      	ldr	r3, [pc, #36]	; (8006e04 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006dde:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006de0:	d3f9      	bcc.n	8006dd6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006de2:	f7ff ffd3 	bl	8006d8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006de6:	f000 f811 	bl	8006e0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006dea:	f7ff fbcd 	bl	8006588 <main>
  bx  lr    
 8006dee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006df0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8006df4:	08006f90 	.word	0x08006f90
  ldr  r0, =_sdata
 8006df8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006dfc:	20008010 	.word	0x20008010
  ldr  r2, =_sbss
 8006e00:	20008010 	.word	0x20008010
  ldr  r3, = _ebss
 8006e04:	20016b7c 	.word	0x20016b7c

08006e08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006e08:	e7fe      	b.n	8006e08 <ADC_IRQHandler>
	...

08006e0c <__libc_init_array>:
 8006e0c:	b570      	push	{r4, r5, r6, lr}
 8006e0e:	4e0d      	ldr	r6, [pc, #52]	; (8006e44 <__libc_init_array+0x38>)
 8006e10:	4c0d      	ldr	r4, [pc, #52]	; (8006e48 <__libc_init_array+0x3c>)
 8006e12:	1ba4      	subs	r4, r4, r6
 8006e14:	10a4      	asrs	r4, r4, #2
 8006e16:	2500      	movs	r5, #0
 8006e18:	42a5      	cmp	r5, r4
 8006e1a:	d109      	bne.n	8006e30 <__libc_init_array+0x24>
 8006e1c:	4e0b      	ldr	r6, [pc, #44]	; (8006e4c <__libc_init_array+0x40>)
 8006e1e:	4c0c      	ldr	r4, [pc, #48]	; (8006e50 <__libc_init_array+0x44>)
 8006e20:	f000 f82c 	bl	8006e7c <_init>
 8006e24:	1ba4      	subs	r4, r4, r6
 8006e26:	10a4      	asrs	r4, r4, #2
 8006e28:	2500      	movs	r5, #0
 8006e2a:	42a5      	cmp	r5, r4
 8006e2c:	d105      	bne.n	8006e3a <__libc_init_array+0x2e>
 8006e2e:	bd70      	pop	{r4, r5, r6, pc}
 8006e30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006e34:	4798      	blx	r3
 8006e36:	3501      	adds	r5, #1
 8006e38:	e7ee      	b.n	8006e18 <__libc_init_array+0xc>
 8006e3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006e3e:	4798      	blx	r3
 8006e40:	3501      	adds	r5, #1
 8006e42:	e7f2      	b.n	8006e2a <__libc_init_array+0x1e>
 8006e44:	08006f88 	.word	0x08006f88
 8006e48:	08006f88 	.word	0x08006f88
 8006e4c:	08006f88 	.word	0x08006f88
 8006e50:	08006f8c 	.word	0x08006f8c

08006e54 <memcpy>:
 8006e54:	b510      	push	{r4, lr}
 8006e56:	1e43      	subs	r3, r0, #1
 8006e58:	440a      	add	r2, r1
 8006e5a:	4291      	cmp	r1, r2
 8006e5c:	d100      	bne.n	8006e60 <memcpy+0xc>
 8006e5e:	bd10      	pop	{r4, pc}
 8006e60:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e68:	e7f7      	b.n	8006e5a <memcpy+0x6>

08006e6a <memset>:
 8006e6a:	4402      	add	r2, r0
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d100      	bne.n	8006e74 <memset+0xa>
 8006e72:	4770      	bx	lr
 8006e74:	f803 1b01 	strb.w	r1, [r3], #1
 8006e78:	e7f9      	b.n	8006e6e <memset+0x4>
	...

08006e7c <_init>:
 8006e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e7e:	bf00      	nop
 8006e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e82:	bc08      	pop	{r3}
 8006e84:	469e      	mov	lr, r3
 8006e86:	4770      	bx	lr

08006e88 <_fini>:
 8006e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e8a:	bf00      	nop
 8006e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e8e:	bc08      	pop	{r3}
 8006e90:	469e      	mov	lr, r3
 8006e92:	4770      	bx	lr
