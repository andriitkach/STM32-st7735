
STM32SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa40  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e28  0800abd0  0800abd0  0001abd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c9f8  0800c9f8  0001c9f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ca00  0800ca00  0001ca00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ca04  0800ca04  0001ca04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000690  20000000  0800ca08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020690  2**0
                  CONTENTS
  8 .bss          0000eb20  20000690  20000690  00020690  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2000f1b0  2000f1b0  00020690  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020690  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001b48c  00000000  00000000  000206c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00003484  00000000  00000000  0003bb4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001548  00000000  00000000  0003efd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000013b8  00000000  00000000  00040518  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000aa81  00000000  00000000  000418d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000071c1  00000000  00000000  0004c351  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00053512  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006298  00000000  00000000  00053590  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000690 	.word	0x20000690
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800abb8 	.word	0x0800abb8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000694 	.word	0x20000694
 80001cc:	0800abb8 	.word	0x0800abb8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bb4:	f000 b97a 	b.w	8000eac <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	468c      	mov	ip, r1
 8000bd6:	460d      	mov	r5, r1
 8000bd8:	4604      	mov	r4, r0
 8000bda:	9e08      	ldr	r6, [sp, #32]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d151      	bne.n	8000c84 <__udivmoddi4+0xb4>
 8000be0:	428a      	cmp	r2, r1
 8000be2:	4617      	mov	r7, r2
 8000be4:	d96d      	bls.n	8000cc2 <__udivmoddi4+0xf2>
 8000be6:	fab2 fe82 	clz	lr, r2
 8000bea:	f1be 0f00 	cmp.w	lr, #0
 8000bee:	d00b      	beq.n	8000c08 <__udivmoddi4+0x38>
 8000bf0:	f1ce 0c20 	rsb	ip, lr, #32
 8000bf4:	fa01 f50e 	lsl.w	r5, r1, lr
 8000bf8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000bfc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c00:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c04:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c08:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c0c:	0c25      	lsrs	r5, r4, #16
 8000c0e:	fbbc f8fa 	udiv	r8, ip, sl
 8000c12:	fa1f f987 	uxth.w	r9, r7
 8000c16:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c1a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c1e:	fb08 f309 	mul.w	r3, r8, r9
 8000c22:	42ab      	cmp	r3, r5
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x6c>
 8000c26:	19ed      	adds	r5, r5, r7
 8000c28:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000c2c:	f080 8123 	bcs.w	8000e76 <__udivmoddi4+0x2a6>
 8000c30:	42ab      	cmp	r3, r5
 8000c32:	f240 8120 	bls.w	8000e76 <__udivmoddi4+0x2a6>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	443d      	add	r5, r7
 8000c3c:	1aed      	subs	r5, r5, r3
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c44:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c48:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c4c:	fb00 f909 	mul.w	r9, r0, r9
 8000c50:	45a1      	cmp	r9, r4
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x98>
 8000c54:	19e4      	adds	r4, r4, r7
 8000c56:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c5a:	f080 810a 	bcs.w	8000e72 <__udivmoddi4+0x2a2>
 8000c5e:	45a1      	cmp	r9, r4
 8000c60:	f240 8107 	bls.w	8000e72 <__udivmoddi4+0x2a2>
 8000c64:	3802      	subs	r0, #2
 8000c66:	443c      	add	r4, r7
 8000c68:	eba4 0409 	sub.w	r4, r4, r9
 8000c6c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c70:	2100      	movs	r1, #0
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	d061      	beq.n	8000d3a <__udivmoddi4+0x16a>
 8000c76:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	6034      	str	r4, [r6, #0]
 8000c7e:	6073      	str	r3, [r6, #4]
 8000c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c84:	428b      	cmp	r3, r1
 8000c86:	d907      	bls.n	8000c98 <__udivmoddi4+0xc8>
 8000c88:	2e00      	cmp	r6, #0
 8000c8a:	d054      	beq.n	8000d36 <__udivmoddi4+0x166>
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000c92:	4608      	mov	r0, r1
 8000c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c98:	fab3 f183 	clz	r1, r3
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	f040 808e 	bne.w	8000dbe <__udivmoddi4+0x1ee>
 8000ca2:	42ab      	cmp	r3, r5
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xdc>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80fa 	bhi.w	8000ea0 <__udivmoddi4+0x2d0>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb65 0503 	sbc.w	r5, r5, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	46ac      	mov	ip, r5
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	d03f      	beq.n	8000d3a <__udivmoddi4+0x16a>
 8000cba:	e886 1010 	stmia.w	r6, {r4, ip}
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	b912      	cbnz	r2, 8000cca <__udivmoddi4+0xfa>
 8000cc4:	2701      	movs	r7, #1
 8000cc6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000cca:	fab7 fe87 	clz	lr, r7
 8000cce:	f1be 0f00 	cmp.w	lr, #0
 8000cd2:	d134      	bne.n	8000d3e <__udivmoddi4+0x16e>
 8000cd4:	1beb      	subs	r3, r5, r7
 8000cd6:	0c3a      	lsrs	r2, r7, #16
 8000cd8:	fa1f fc87 	uxth.w	ip, r7
 8000cdc:	2101      	movs	r1, #1
 8000cde:	fbb3 f8f2 	udiv	r8, r3, r2
 8000ce2:	0c25      	lsrs	r5, r4, #16
 8000ce4:	fb02 3318 	mls	r3, r2, r8, r3
 8000ce8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000cec:	fb0c f308 	mul.w	r3, ip, r8
 8000cf0:	42ab      	cmp	r3, r5
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x134>
 8000cf4:	19ed      	adds	r5, r5, r7
 8000cf6:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x132>
 8000cfc:	42ab      	cmp	r3, r5
 8000cfe:	f200 80d1 	bhi.w	8000ea4 <__udivmoddi4+0x2d4>
 8000d02:	4680      	mov	r8, r0
 8000d04:	1aed      	subs	r5, r5, r3
 8000d06:	b2a3      	uxth	r3, r4
 8000d08:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d0c:	fb02 5510 	mls	r5, r2, r0, r5
 8000d10:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d14:	fb0c fc00 	mul.w	ip, ip, r0
 8000d18:	45a4      	cmp	ip, r4
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x15c>
 8000d1c:	19e4      	adds	r4, r4, r7
 8000d1e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x15a>
 8000d24:	45a4      	cmp	ip, r4
 8000d26:	f200 80b8 	bhi.w	8000e9a <__udivmoddi4+0x2ca>
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	eba4 040c 	sub.w	r4, r4, ip
 8000d30:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d34:	e79d      	b.n	8000c72 <__udivmoddi4+0xa2>
 8000d36:	4631      	mov	r1, r6
 8000d38:	4630      	mov	r0, r6
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	f1ce 0420 	rsb	r4, lr, #32
 8000d42:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d46:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d4a:	fa20 f804 	lsr.w	r8, r0, r4
 8000d4e:	0c3a      	lsrs	r2, r7, #16
 8000d50:	fa25 f404 	lsr.w	r4, r5, r4
 8000d54:	ea48 0803 	orr.w	r8, r8, r3
 8000d58:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d5c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d60:	fb02 4411 	mls	r4, r2, r1, r4
 8000d64:	fa1f fc87 	uxth.w	ip, r7
 8000d68:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000d6c:	fb01 f30c 	mul.w	r3, r1, ip
 8000d70:	42ab      	cmp	r3, r5
 8000d72:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d76:	d909      	bls.n	8000d8c <__udivmoddi4+0x1bc>
 8000d78:	19ed      	adds	r5, r5, r7
 8000d7a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 8000d7e:	f080 808a 	bcs.w	8000e96 <__udivmoddi4+0x2c6>
 8000d82:	42ab      	cmp	r3, r5
 8000d84:	f240 8087 	bls.w	8000e96 <__udivmoddi4+0x2c6>
 8000d88:	3902      	subs	r1, #2
 8000d8a:	443d      	add	r5, r7
 8000d8c:	1aeb      	subs	r3, r5, r3
 8000d8e:	fa1f f588 	uxth.w	r5, r8
 8000d92:	fbb3 f0f2 	udiv	r0, r3, r2
 8000d96:	fb02 3310 	mls	r3, r2, r0, r3
 8000d9a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d9e:	fb00 f30c 	mul.w	r3, r0, ip
 8000da2:	42ab      	cmp	r3, r5
 8000da4:	d907      	bls.n	8000db6 <__udivmoddi4+0x1e6>
 8000da6:	19ed      	adds	r5, r5, r7
 8000da8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000dac:	d26f      	bcs.n	8000e8e <__udivmoddi4+0x2be>
 8000dae:	42ab      	cmp	r3, r5
 8000db0:	d96d      	bls.n	8000e8e <__udivmoddi4+0x2be>
 8000db2:	3802      	subs	r0, #2
 8000db4:	443d      	add	r5, r7
 8000db6:	1aeb      	subs	r3, r5, r3
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	e78f      	b.n	8000cde <__udivmoddi4+0x10e>
 8000dbe:	f1c1 0720 	rsb	r7, r1, #32
 8000dc2:	fa22 f807 	lsr.w	r8, r2, r7
 8000dc6:	408b      	lsls	r3, r1
 8000dc8:	fa05 f401 	lsl.w	r4, r5, r1
 8000dcc:	ea48 0303 	orr.w	r3, r8, r3
 8000dd0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000dd4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	ea4e 0e04 	orr.w	lr, lr, r4
 8000dde:	fbb5 f9fc 	udiv	r9, r5, ip
 8000de2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000de6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000dea:	fa1f f883 	uxth.w	r8, r3
 8000dee:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000df2:	fb09 f408 	mul.w	r4, r9, r8
 8000df6:	42ac      	cmp	r4, r5
 8000df8:	fa02 f201 	lsl.w	r2, r2, r1
 8000dfc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x244>
 8000e02:	18ed      	adds	r5, r5, r3
 8000e04:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e08:	d243      	bcs.n	8000e92 <__udivmoddi4+0x2c2>
 8000e0a:	42ac      	cmp	r4, r5
 8000e0c:	d941      	bls.n	8000e92 <__udivmoddi4+0x2c2>
 8000e0e:	f1a9 0902 	sub.w	r9, r9, #2
 8000e12:	441d      	add	r5, r3
 8000e14:	1b2d      	subs	r5, r5, r4
 8000e16:	fa1f fe8e 	uxth.w	lr, lr
 8000e1a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e1e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e22:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e26:	fb00 f808 	mul.w	r8, r0, r8
 8000e2a:	45a0      	cmp	r8, r4
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x26e>
 8000e2e:	18e4      	adds	r4, r4, r3
 8000e30:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000e34:	d229      	bcs.n	8000e8a <__udivmoddi4+0x2ba>
 8000e36:	45a0      	cmp	r8, r4
 8000e38:	d927      	bls.n	8000e8a <__udivmoddi4+0x2ba>
 8000e3a:	3802      	subs	r0, #2
 8000e3c:	441c      	add	r4, r3
 8000e3e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e42:	eba4 0408 	sub.w	r4, r4, r8
 8000e46:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4a:	454c      	cmp	r4, r9
 8000e4c:	46c6      	mov	lr, r8
 8000e4e:	464d      	mov	r5, r9
 8000e50:	d315      	bcc.n	8000e7e <__udivmoddi4+0x2ae>
 8000e52:	d012      	beq.n	8000e7a <__udivmoddi4+0x2aa>
 8000e54:	b156      	cbz	r6, 8000e6c <__udivmoddi4+0x29c>
 8000e56:	ebba 030e 	subs.w	r3, sl, lr
 8000e5a:	eb64 0405 	sbc.w	r4, r4, r5
 8000e5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000e62:	40cb      	lsrs	r3, r1
 8000e64:	431f      	orrs	r7, r3
 8000e66:	40cc      	lsrs	r4, r1
 8000e68:	6037      	str	r7, [r6, #0]
 8000e6a:	6074      	str	r4, [r6, #4]
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	4618      	mov	r0, r3
 8000e74:	e6f8      	b.n	8000c68 <__udivmoddi4+0x98>
 8000e76:	4690      	mov	r8, r2
 8000e78:	e6e0      	b.n	8000c3c <__udivmoddi4+0x6c>
 8000e7a:	45c2      	cmp	sl, r8
 8000e7c:	d2ea      	bcs.n	8000e54 <__udivmoddi4+0x284>
 8000e7e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e82:	eb69 0503 	sbc.w	r5, r9, r3
 8000e86:	3801      	subs	r0, #1
 8000e88:	e7e4      	b.n	8000e54 <__udivmoddi4+0x284>
 8000e8a:	4628      	mov	r0, r5
 8000e8c:	e7d7      	b.n	8000e3e <__udivmoddi4+0x26e>
 8000e8e:	4640      	mov	r0, r8
 8000e90:	e791      	b.n	8000db6 <__udivmoddi4+0x1e6>
 8000e92:	4681      	mov	r9, r0
 8000e94:	e7be      	b.n	8000e14 <__udivmoddi4+0x244>
 8000e96:	4601      	mov	r1, r0
 8000e98:	e778      	b.n	8000d8c <__udivmoddi4+0x1bc>
 8000e9a:	3802      	subs	r0, #2
 8000e9c:	443c      	add	r4, r7
 8000e9e:	e745      	b.n	8000d2c <__udivmoddi4+0x15c>
 8000ea0:	4608      	mov	r0, r1
 8000ea2:	e708      	b.n	8000cb6 <__udivmoddi4+0xe6>
 8000ea4:	f1a8 0802 	sub.w	r8, r8, #2
 8000ea8:	443d      	add	r5, r7
 8000eaa:	e72b      	b.n	8000d04 <__udivmoddi4+0x134>

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <LIS302DL_Select>:
extern SPI_HandleTypeDef LIS302DL_SPI_PORT;

static uint8_t out_cmd_buf;
static uint8_t in_data_buf;

static void LIS302DL_Select(void) {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LIS302DL_CS_GPIO_Port, LIS302DL_CS_pin, GPIO_PIN_RESET);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2108      	movs	r1, #8
 8000eb8:	4802      	ldr	r0, [pc, #8]	; (8000ec4 <LIS302DL_Select+0x14>)
 8000eba:	f000 fefd 	bl	8001cb8 <HAL_GPIO_WritePin>
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40021000 	.word	0x40021000

08000ec8 <LIS302DL_Unselect>:

static void LIS302DL_Unselect(void) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LIS302DL_CS_GPIO_Port, LIS302DL_CS_pin, GPIO_PIN_SET);
 8000ecc:	2201      	movs	r2, #1
 8000ece:	2108      	movs	r1, #8
 8000ed0:	4802      	ldr	r0, [pc, #8]	; (8000edc <LIS302DL_Unselect+0x14>)
 8000ed2:	f000 fef1 	bl	8001cb8 <HAL_GPIO_WritePin>
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40021000 	.word	0x40021000

08000ee0 <LIS302DL_Init>:

void LIS302DL_Init(void) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
	LIS302DL_Select();
 8000ee6:	f7ff ffe3 	bl	8000eb0 <LIS302DL_Select>
	uint8_t cmd_buf[2];
	cmd_buf[0] = LIS302DL_CTRL_REG1;
 8000eea:	2320      	movs	r3, #32
 8000eec:	713b      	strb	r3, [r7, #4]
	cmd_buf[1] = 0x47;
 8000eee:	2347      	movs	r3, #71	; 0x47
 8000ef0:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&LIS302DL_SPI_PORT, &(cmd_buf[0]), 2, HAL_MAX_DELAY);
 8000ef2:	1d39      	adds	r1, r7, #4
 8000ef4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ef8:	2202      	movs	r2, #2
 8000efa:	4804      	ldr	r0, [pc, #16]	; (8000f0c <LIS302DL_Init+0x2c>)
 8000efc:	f001 fbb7 	bl	800266e <HAL_SPI_Transmit>
	LIS302DL_Unselect();
 8000f00:	f7ff ffe2 	bl	8000ec8 <LIS302DL_Unselect>
}
 8000f04:	bf00      	nop
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	2000f108 	.word	0x2000f108

08000f10 <LIS302DL_GetX>:
	LIS302DL_Select();
	HAL_SPI_Transmit(&LIS302DL_SPI_PORT, &out_cmd_buf, 1, HAL_MAX_DELAY);
	HAL_SPI_Receive(&LIS302DL_SPI_PORT, output, 1, HAL_MAX_DELAY);
	LIS302DL_Unselect();
}
int8_t LIS302DL_GetX(void) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
	uint8_t out_x;
	out_cmd_buf = (LIS302DL_OUT_X | (0x80));
 8000f16:	4b0d      	ldr	r3, [pc, #52]	; (8000f4c <LIS302DL_GetX+0x3c>)
 8000f18:	22a9      	movs	r2, #169	; 0xa9
 8000f1a:	701a      	strb	r2, [r3, #0]
	LIS302DL_Select();
 8000f1c:	f7ff ffc8 	bl	8000eb0 <LIS302DL_Select>
	HAL_SPI_Transmit(&LIS302DL_SPI_PORT, &out_cmd_buf, 1, HAL_MAX_DELAY);
 8000f20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f24:	2201      	movs	r2, #1
 8000f26:	4909      	ldr	r1, [pc, #36]	; (8000f4c <LIS302DL_GetX+0x3c>)
 8000f28:	4809      	ldr	r0, [pc, #36]	; (8000f50 <LIS302DL_GetX+0x40>)
 8000f2a:	f001 fba0 	bl	800266e <HAL_SPI_Transmit>
	HAL_SPI_Receive(&LIS302DL_SPI_PORT, &out_x, 1, HAL_MAX_DELAY);
 8000f2e:	1df9      	adds	r1, r7, #7
 8000f30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f34:	2201      	movs	r2, #1
 8000f36:	4806      	ldr	r0, [pc, #24]	; (8000f50 <LIS302DL_GetX+0x40>)
 8000f38:	f001 fccb 	bl	80028d2 <HAL_SPI_Receive>
	LIS302DL_Unselect();
 8000f3c:	f7ff ffc4 	bl	8000ec8 <LIS302DL_Unselect>
	return (int8_t)out_x;
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	b25b      	sxtb	r3, r3
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	200006ac 	.word	0x200006ac
 8000f50:	2000f108 	.word	0x2000f108

08000f54 <LIS302DL_GetY>:
int8_t LIS302DL_GetY(void) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
	uint8_t out_y;
	out_cmd_buf = (LIS302DL_OUT_Y | (0x80));
 8000f5a:	4b0d      	ldr	r3, [pc, #52]	; (8000f90 <LIS302DL_GetY+0x3c>)
 8000f5c:	22ab      	movs	r2, #171	; 0xab
 8000f5e:	701a      	strb	r2, [r3, #0]
	LIS302DL_Select();
 8000f60:	f7ff ffa6 	bl	8000eb0 <LIS302DL_Select>
	HAL_SPI_Transmit(&LIS302DL_SPI_PORT, &out_cmd_buf, 1, HAL_MAX_DELAY);
 8000f64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f68:	2201      	movs	r2, #1
 8000f6a:	4909      	ldr	r1, [pc, #36]	; (8000f90 <LIS302DL_GetY+0x3c>)
 8000f6c:	4809      	ldr	r0, [pc, #36]	; (8000f94 <LIS302DL_GetY+0x40>)
 8000f6e:	f001 fb7e 	bl	800266e <HAL_SPI_Transmit>
	HAL_SPI_Receive(&LIS302DL_SPI_PORT, &out_y, 1, HAL_MAX_DELAY);
 8000f72:	1df9      	adds	r1, r7, #7
 8000f74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f78:	2201      	movs	r2, #1
 8000f7a:	4806      	ldr	r0, [pc, #24]	; (8000f94 <LIS302DL_GetY+0x40>)
 8000f7c:	f001 fca9 	bl	80028d2 <HAL_SPI_Receive>
	LIS302DL_Unselect();
 8000f80:	f7ff ffa2 	bl	8000ec8 <LIS302DL_Unselect>
	return (int8_t)out_y;
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	b25b      	sxtb	r3, r3
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	200006ac 	.word	0x200006ac
 8000f94:	2000f108 	.word	0x2000f108

08000f98 <LIS302DL_GetZ>:
int8_t LIS302DL_GetZ(void) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
	uint8_t out_z;
	out_cmd_buf = (LIS302DL_OUT_Z | (0x80));
 8000f9e:	4b0d      	ldr	r3, [pc, #52]	; (8000fd4 <LIS302DL_GetZ+0x3c>)
 8000fa0:	22ad      	movs	r2, #173	; 0xad
 8000fa2:	701a      	strb	r2, [r3, #0]
	LIS302DL_Select();
 8000fa4:	f7ff ff84 	bl	8000eb0 <LIS302DL_Select>
	HAL_SPI_Transmit(&LIS302DL_SPI_PORT, &out_cmd_buf, 1, HAL_MAX_DELAY);
 8000fa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fac:	2201      	movs	r2, #1
 8000fae:	4909      	ldr	r1, [pc, #36]	; (8000fd4 <LIS302DL_GetZ+0x3c>)
 8000fb0:	4809      	ldr	r0, [pc, #36]	; (8000fd8 <LIS302DL_GetZ+0x40>)
 8000fb2:	f001 fb5c 	bl	800266e <HAL_SPI_Transmit>
	HAL_SPI_Receive(&LIS302DL_SPI_PORT, &out_z, 1, HAL_MAX_DELAY);
 8000fb6:	1df9      	adds	r1, r7, #7
 8000fb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	4806      	ldr	r0, [pc, #24]	; (8000fd8 <LIS302DL_GetZ+0x40>)
 8000fc0:	f001 fc87 	bl	80028d2 <HAL_SPI_Receive>
	LIS302DL_Unselect();
 8000fc4:	f7ff ff80 	bl	8000ec8 <LIS302DL_Unselect>
	return (int8_t)out_z;
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	b25b      	sxtb	r3, r3
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	200006ac 	.word	0x200006ac
 8000fd8:	2000f108 	.word	0x2000f108

08000fdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fe0:	4a0e      	ldr	r2, [pc, #56]	; (800101c <HAL_Init+0x40>)
 8000fe2:	4b0e      	ldr	r3, [pc, #56]	; (800101c <HAL_Init+0x40>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fec:	4a0b      	ldr	r2, [pc, #44]	; (800101c <HAL_Init+0x40>)
 8000fee:	4b0b      	ldr	r3, [pc, #44]	; (800101c <HAL_Init+0x40>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ff6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ff8:	4a08      	ldr	r2, [pc, #32]	; (800101c <HAL_Init+0x40>)
 8000ffa:	4b08      	ldr	r3, [pc, #32]	; (800101c <HAL_Init+0x40>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001002:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001004:	2003      	movs	r0, #3
 8001006:	f000 f8f8 	bl	80011fa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800100a:	2000      	movs	r0, #0
 800100c:	f006 fdbe 	bl	8007b8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001010:	f006 fce0 	bl	80079d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40023c00 	.word	0x40023c00

08001020 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <HAL_IncTick+0x20>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	461a      	mov	r2, r3
 800102a:	4b06      	ldr	r3, [pc, #24]	; (8001044 <HAL_IncTick+0x24>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4413      	add	r3, r2
 8001030:	4a04      	ldr	r2, [pc, #16]	; (8001044 <HAL_IncTick+0x24>)
 8001032:	6013      	str	r3, [r2, #0]
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	20000004 	.word	0x20000004
 8001044:	2000eff8 	.word	0x2000eff8

08001048 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  return uwTick;
 800104c:	4b03      	ldr	r3, [pc, #12]	; (800105c <HAL_GetTick+0x14>)
 800104e:	681b      	ldr	r3, [r3, #0]
}
 8001050:	4618      	mov	r0, r3
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	2000eff8 	.word	0x2000eff8

08001060 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001068:	f7ff ffee 	bl	8001048 <HAL_GetTick>
 800106c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001078:	d005      	beq.n	8001086 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800107a:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <HAL_Delay+0x40>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	461a      	mov	r2, r3
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	4413      	add	r3, r2
 8001084:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001086:	bf00      	nop
 8001088:	f7ff ffde 	bl	8001048 <HAL_GetTick>
 800108c:	4602      	mov	r2, r0
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	1ad2      	subs	r2, r2, r3
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	429a      	cmp	r2, r3
 8001096:	d3f7      	bcc.n	8001088 <HAL_Delay+0x28>
  {
  }
}
 8001098:	bf00      	nop
 800109a:	3710      	adds	r7, #16
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20000004 	.word	0x20000004

080010a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b4:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <__NVIC_SetPriorityGrouping+0x44>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ba:	68ba      	ldr	r2, [r7, #8]
 80010bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010c0:	4013      	ands	r3, r2
 80010c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010d6:	4a04      	ldr	r2, [pc, #16]	; (80010e8 <__NVIC_SetPriorityGrouping+0x44>)
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	60d3      	str	r3, [r2, #12]
}
 80010dc:	bf00      	nop
 80010de:	3714      	adds	r7, #20
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f0:	4b04      	ldr	r3, [pc, #16]	; (8001104 <__NVIC_GetPriorityGrouping+0x18>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	0a1b      	lsrs	r3, r3, #8
 80010f6:	f003 0307 	and.w	r3, r3, #7
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	2b00      	cmp	r3, #0
 8001118:	db0b      	blt.n	8001132 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800111a:	4909      	ldr	r1, [pc, #36]	; (8001140 <__NVIC_EnableIRQ+0x38>)
 800111c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001120:	095b      	lsrs	r3, r3, #5
 8001122:	79fa      	ldrb	r2, [r7, #7]
 8001124:	f002 021f 	and.w	r2, r2, #31
 8001128:	2001      	movs	r0, #1
 800112a:	fa00 f202 	lsl.w	r2, r0, r2
 800112e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	e000e100 	.word	0xe000e100

08001144 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	6039      	str	r1, [r7, #0]
 800114e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001154:	2b00      	cmp	r3, #0
 8001156:	db0a      	blt.n	800116e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001158:	490d      	ldr	r1, [pc, #52]	; (8001190 <__NVIC_SetPriority+0x4c>)
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	683a      	ldr	r2, [r7, #0]
 8001160:	b2d2      	uxtb	r2, r2
 8001162:	0112      	lsls	r2, r2, #4
 8001164:	b2d2      	uxtb	r2, r2
 8001166:	440b      	add	r3, r1
 8001168:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800116c:	e00a      	b.n	8001184 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116e:	4909      	ldr	r1, [pc, #36]	; (8001194 <__NVIC_SetPriority+0x50>)
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	f003 030f 	and.w	r3, r3, #15
 8001176:	3b04      	subs	r3, #4
 8001178:	683a      	ldr	r2, [r7, #0]
 800117a:	b2d2      	uxtb	r2, r2
 800117c:	0112      	lsls	r2, r2, #4
 800117e:	b2d2      	uxtb	r2, r2
 8001180:	440b      	add	r3, r1
 8001182:	761a      	strb	r2, [r3, #24]
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	e000e100 	.word	0xe000e100
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001198:	b480      	push	{r7}
 800119a:	b089      	sub	sp, #36	; 0x24
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	f1c3 0307 	rsb	r3, r3, #7
 80011b2:	2b04      	cmp	r3, #4
 80011b4:	bf28      	it	cs
 80011b6:	2304      	movcs	r3, #4
 80011b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	3304      	adds	r3, #4
 80011be:	2b06      	cmp	r3, #6
 80011c0:	d902      	bls.n	80011c8 <NVIC_EncodePriority+0x30>
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	3b03      	subs	r3, #3
 80011c6:	e000      	b.n	80011ca <NVIC_EncodePriority+0x32>
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011cc:	2201      	movs	r2, #1
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	1e5a      	subs	r2, r3, #1
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	401a      	ands	r2, r3
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011de:	2101      	movs	r1, #1
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	fa01 f303 	lsl.w	r3, r1, r3
 80011e6:	1e59      	subs	r1, r3, #1
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ec:	4313      	orrs	r3, r2
         );
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3724      	adds	r7, #36	; 0x24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f7ff ff4e 	bl	80010a4 <__NVIC_SetPriorityGrouping>
}
 8001208:	bf00      	nop
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
 800121c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800121e:	2300      	movs	r3, #0
 8001220:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001222:	f7ff ff63 	bl	80010ec <__NVIC_GetPriorityGrouping>
 8001226:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	68b9      	ldr	r1, [r7, #8]
 800122c:	6978      	ldr	r0, [r7, #20]
 800122e:	f7ff ffb3 	bl	8001198 <NVIC_EncodePriority>
 8001232:	4602      	mov	r2, r0
 8001234:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001238:	4611      	mov	r1, r2
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff ff82 	bl	8001144 <__NVIC_SetPriority>
}
 8001240:	bf00      	nop
 8001242:	3718      	adds	r7, #24
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff ff56 	bl	8001108 <__NVIC_EnableIRQ>
}
 800125c:	bf00      	nop
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001270:	f7ff feea 	bl	8001048 <HAL_GetTick>
 8001274:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d101      	bne.n	8001280 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	e099      	b.n	80013b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2200      	movs	r2, #0
 8001284:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2202      	movs	r2, #2
 800128c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	6812      	ldr	r2, [r2, #0]
 8001298:	6812      	ldr	r2, [r2, #0]
 800129a:	f022 0201 	bic.w	r2, r2, #1
 800129e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012a0:	e00f      	b.n	80012c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012a2:	f7ff fed1 	bl	8001048 <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	2b05      	cmp	r3, #5
 80012ae:	d908      	bls.n	80012c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2220      	movs	r2, #32
 80012b4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2203      	movs	r2, #3
 80012ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e078      	b.n	80013b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 0301 	and.w	r3, r3, #1
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d1e8      	bne.n	80012a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80012d8:	697a      	ldr	r2, [r7, #20]
 80012da:	4b38      	ldr	r3, [pc, #224]	; (80013bc <HAL_DMA_Init+0x158>)
 80012dc:	4013      	ands	r3, r2
 80012de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685a      	ldr	r2, [r3, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	691b      	ldr	r3, [r3, #16]
 80012f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001306:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6a1b      	ldr	r3, [r3, #32]
 800130c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800130e:	697a      	ldr	r2, [r7, #20]
 8001310:	4313      	orrs	r3, r2
 8001312:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001318:	2b04      	cmp	r3, #4
 800131a:	d107      	bne.n	800132c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001324:	4313      	orrs	r3, r2
 8001326:	697a      	ldr	r2, [r7, #20]
 8001328:	4313      	orrs	r3, r2
 800132a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	697a      	ldr	r2, [r7, #20]
 8001332:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	695b      	ldr	r3, [r3, #20]
 800133a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	f023 0307 	bic.w	r3, r3, #7
 8001342:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001348:	697a      	ldr	r2, [r7, #20]
 800134a:	4313      	orrs	r3, r2
 800134c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001352:	2b04      	cmp	r3, #4
 8001354:	d117      	bne.n	8001386 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800135a:	697a      	ldr	r2, [r7, #20]
 800135c:	4313      	orrs	r3, r2
 800135e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001364:	2b00      	cmp	r3, #0
 8001366:	d00e      	beq.n	8001386 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f000 fa91 	bl	8001890 <DMA_CheckFifoParam>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d008      	beq.n	8001386 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2240      	movs	r2, #64	; 0x40
 8001378:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2201      	movs	r2, #1
 800137e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001382:	2301      	movs	r3, #1
 8001384:	e016      	b.n	80013b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	697a      	ldr	r2, [r7, #20]
 800138c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f000 fa48 	bl	8001824 <DMA_CalcBaseAndBitshift>
 8001394:	4603      	mov	r3, r0
 8001396:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800139c:	223f      	movs	r2, #63	; 0x3f
 800139e:	409a      	lsls	r2, r3
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2200      	movs	r2, #0
 80013a8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2201      	movs	r2, #1
 80013ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80013b2:	2300      	movs	r3, #0
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3718      	adds	r7, #24
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	f010803f 	.word	0xf010803f

080013c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
 80013cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80013ce:	2300      	movs	r3, #0
 80013d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d101      	bne.n	80013e6 <HAL_DMA_Start_IT+0x26>
 80013e2:	2302      	movs	r3, #2
 80013e4:	e040      	b.n	8001468 <HAL_DMA_Start_IT+0xa8>
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	2201      	movs	r2, #1
 80013ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d12f      	bne.n	800145a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	2202      	movs	r2, #2
 80013fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	2200      	movs	r2, #0
 8001406:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	68b9      	ldr	r1, [r7, #8]
 800140e:	68f8      	ldr	r0, [r7, #12]
 8001410:	f000 f9da 	bl	80017c8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001418:	223f      	movs	r2, #63	; 0x3f
 800141a:	409a      	lsls	r2, r3
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	68fa      	ldr	r2, [r7, #12]
 8001426:	6812      	ldr	r2, [r2, #0]
 8001428:	6812      	ldr	r2, [r2, #0]
 800142a:	f042 0216 	orr.w	r2, r2, #22
 800142e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001434:	2b00      	cmp	r3, #0
 8001436:	d007      	beq.n	8001448 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	68fa      	ldr	r2, [r7, #12]
 800143e:	6812      	ldr	r2, [r2, #0]
 8001440:	6812      	ldr	r2, [r2, #0]
 8001442:	f042 0208 	orr.w	r2, r2, #8
 8001446:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	68fa      	ldr	r2, [r7, #12]
 800144e:	6812      	ldr	r2, [r2, #0]
 8001450:	6812      	ldr	r2, [r2, #0]
 8001452:	f042 0201 	orr.w	r2, r2, #1
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	e005      	b.n	8001466 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	2200      	movs	r2, #0
 800145e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001462:	2302      	movs	r3, #2
 8001464:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001466:	7dfb      	ldrb	r3, [r7, #23]
}
 8001468:	4618      	mov	r0, r3
 800146a:	3718      	adds	r7, #24
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800147e:	b2db      	uxtb	r3, r3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d004      	beq.n	800148e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2280      	movs	r2, #128	; 0x80
 8001488:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e00c      	b.n	80014a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2205      	movs	r2, #5
 8001492:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	6812      	ldr	r2, [r2, #0]
 800149e:	6812      	ldr	r2, [r2, #0]
 80014a0:	f022 0201 	bic.w	r2, r2, #1
 80014a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014a6:	2300      	movs	r3, #0
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80014bc:	2300      	movs	r3, #0
 80014be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80014c0:	4b92      	ldr	r3, [pc, #584]	; (800170c <HAL_DMA_IRQHandler+0x258>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a92      	ldr	r2, [pc, #584]	; (8001710 <HAL_DMA_IRQHandler+0x25c>)
 80014c6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ca:	0a9b      	lsrs	r3, r3, #10
 80014cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014de:	2208      	movs	r2, #8
 80014e0:	409a      	lsls	r2, r3
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	4013      	ands	r3, r2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d01a      	beq.n	8001520 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0304 	and.w	r3, r3, #4
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d013      	beq.n	8001520 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	6812      	ldr	r2, [r2, #0]
 8001500:	6812      	ldr	r2, [r2, #0]
 8001502:	f022 0204 	bic.w	r2, r2, #4
 8001506:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800150c:	2208      	movs	r2, #8
 800150e:	409a      	lsls	r2, r3
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001518:	f043 0201 	orr.w	r2, r3, #1
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001524:	2201      	movs	r2, #1
 8001526:	409a      	lsls	r2, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	4013      	ands	r3, r2
 800152c:	2b00      	cmp	r3, #0
 800152e:	d012      	beq.n	8001556 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	695b      	ldr	r3, [r3, #20]
 8001536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800153a:	2b00      	cmp	r3, #0
 800153c:	d00b      	beq.n	8001556 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001542:	2201      	movs	r2, #1
 8001544:	409a      	lsls	r2, r3
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800154e:	f043 0202 	orr.w	r2, r3, #2
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800155a:	2204      	movs	r2, #4
 800155c:	409a      	lsls	r2, r3
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	4013      	ands	r3, r2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d012      	beq.n	800158c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0302 	and.w	r3, r3, #2
 8001570:	2b00      	cmp	r3, #0
 8001572:	d00b      	beq.n	800158c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001578:	2204      	movs	r2, #4
 800157a:	409a      	lsls	r2, r3
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001584:	f043 0204 	orr.w	r2, r3, #4
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001590:	2210      	movs	r2, #16
 8001592:	409a      	lsls	r2, r3
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	4013      	ands	r3, r2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d043      	beq.n	8001624 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0308 	and.w	r3, r3, #8
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d03c      	beq.n	8001624 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ae:	2210      	movs	r2, #16
 80015b0:	409a      	lsls	r2, r3
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d018      	beq.n	80015f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d108      	bne.n	80015e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d024      	beq.n	8001624 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	4798      	blx	r3
 80015e2:	e01f      	b.n	8001624 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d01b      	beq.n	8001624 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	4798      	blx	r3
 80015f4:	e016      	b.n	8001624 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001600:	2b00      	cmp	r3, #0
 8001602:	d107      	bne.n	8001614 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	6812      	ldr	r2, [r2, #0]
 800160c:	6812      	ldr	r2, [r2, #0]
 800160e:	f022 0208 	bic.w	r2, r2, #8
 8001612:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001618:	2b00      	cmp	r3, #0
 800161a:	d003      	beq.n	8001624 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001628:	2220      	movs	r2, #32
 800162a:	409a      	lsls	r2, r3
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	4013      	ands	r3, r2
 8001630:	2b00      	cmp	r3, #0
 8001632:	f000 808e 	beq.w	8001752 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0310 	and.w	r3, r3, #16
 8001640:	2b00      	cmp	r3, #0
 8001642:	f000 8086 	beq.w	8001752 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800164a:	2220      	movs	r2, #32
 800164c:	409a      	lsls	r2, r3
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b05      	cmp	r3, #5
 800165c:	d136      	bne.n	80016cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	6812      	ldr	r2, [r2, #0]
 8001666:	6812      	ldr	r2, [r2, #0]
 8001668:	f022 0216 	bic.w	r2, r2, #22
 800166c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	6812      	ldr	r2, [r2, #0]
 8001676:	6952      	ldr	r2, [r2, #20]
 8001678:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800167c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	2b00      	cmp	r3, #0
 8001684:	d103      	bne.n	800168e <HAL_DMA_IRQHandler+0x1da>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800168a:	2b00      	cmp	r3, #0
 800168c:	d007      	beq.n	800169e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	6812      	ldr	r2, [r2, #0]
 8001696:	6812      	ldr	r2, [r2, #0]
 8001698:	f022 0208 	bic.w	r2, r2, #8
 800169c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a2:	223f      	movs	r2, #63	; 0x3f
 80016a4:	409a      	lsls	r2, r3
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2201      	movs	r2, #1
 80016b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d07d      	beq.n	80017be <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	4798      	blx	r3
        }
        return;
 80016ca:	e078      	b.n	80017be <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d01c      	beq.n	8001714 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d108      	bne.n	80016fa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d030      	beq.n	8001752 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	4798      	blx	r3
 80016f8:	e02b      	b.n	8001752 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d027      	beq.n	8001752 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	4798      	blx	r3
 800170a:	e022      	b.n	8001752 <HAL_DMA_IRQHandler+0x29e>
 800170c:	2000001c 	.word	0x2000001c
 8001710:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800171e:	2b00      	cmp	r3, #0
 8001720:	d10f      	bne.n	8001742 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	6812      	ldr	r2, [r2, #0]
 800172a:	6812      	ldr	r2, [r2, #0]
 800172c:	f022 0210 	bic.w	r2, r2, #16
 8001730:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2201      	movs	r2, #1
 800173e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001746:	2b00      	cmp	r3, #0
 8001748:	d003      	beq.n	8001752 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001756:	2b00      	cmp	r3, #0
 8001758:	d032      	beq.n	80017c0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	2b00      	cmp	r3, #0
 8001764:	d022      	beq.n	80017ac <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2205      	movs	r2, #5
 800176a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	6812      	ldr	r2, [r2, #0]
 8001776:	6812      	ldr	r2, [r2, #0]
 8001778:	f022 0201 	bic.w	r2, r2, #1
 800177c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	3301      	adds	r3, #1
 8001782:	60bb      	str	r3, [r7, #8]
 8001784:	697a      	ldr	r2, [r7, #20]
 8001786:	4293      	cmp	r3, r2
 8001788:	d807      	bhi.n	800179a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0301 	and.w	r3, r3, #1
 8001794:	2b00      	cmp	r3, #0
 8001796:	d1f2      	bne.n	800177e <HAL_DMA_IRQHandler+0x2ca>
 8001798:	e000      	b.n	800179c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800179a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2201      	movs	r2, #1
 80017a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d005      	beq.n	80017c0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	4798      	blx	r3
 80017bc:	e000      	b.n	80017c0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80017be:	bf00      	nop
    }
  }
}
 80017c0:	3718      	adds	r7, #24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop

080017c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	607a      	str	r2, [r7, #4]
 80017d4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	6812      	ldr	r2, [r2, #0]
 80017de:	6812      	ldr	r2, [r2, #0]
 80017e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80017e4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	683a      	ldr	r2, [r7, #0]
 80017ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	2b40      	cmp	r3, #64	; 0x40
 80017f4:	d108      	bne.n	8001808 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	68ba      	ldr	r2, [r7, #8]
 8001804:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001806:	e007      	b.n	8001818 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	68ba      	ldr	r2, [r7, #8]
 800180e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	60da      	str	r2, [r3, #12]
}
 8001818:	bf00      	nop
 800181a:	3714      	adds	r7, #20
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	b2db      	uxtb	r3, r3
 8001832:	3b10      	subs	r3, #16
 8001834:	4a14      	ldr	r2, [pc, #80]	; (8001888 <DMA_CalcBaseAndBitshift+0x64>)
 8001836:	fba2 2303 	umull	r2, r3, r2, r3
 800183a:	091b      	lsrs	r3, r3, #4
 800183c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800183e:	4a13      	ldr	r2, [pc, #76]	; (800188c <DMA_CalcBaseAndBitshift+0x68>)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	4413      	add	r3, r2
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	461a      	mov	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2b03      	cmp	r3, #3
 8001850:	d909      	bls.n	8001866 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800185a:	f023 0303 	bic.w	r3, r3, #3
 800185e:	1d1a      	adds	r2, r3, #4
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	659a      	str	r2, [r3, #88]	; 0x58
 8001864:	e007      	b.n	8001876 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800186e:	f023 0303 	bic.w	r3, r3, #3
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800187a:	4618      	mov	r0, r3
 800187c:	3714      	adds	r7, #20
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	aaaaaaab 	.word	0xaaaaaaab
 800188c:	0800ac18 	.word	0x0800ac18

08001890 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001898:	2300      	movs	r3, #0
 800189a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d11f      	bne.n	80018ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	2b03      	cmp	r3, #3
 80018ae:	d855      	bhi.n	800195c <DMA_CheckFifoParam+0xcc>
 80018b0:	a201      	add	r2, pc, #4	; (adr r2, 80018b8 <DMA_CheckFifoParam+0x28>)
 80018b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018b6:	bf00      	nop
 80018b8:	080018c9 	.word	0x080018c9
 80018bc:	080018db 	.word	0x080018db
 80018c0:	080018c9 	.word	0x080018c9
 80018c4:	0800195d 	.word	0x0800195d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d045      	beq.n	8001960 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018d8:	e042      	b.n	8001960 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80018e2:	d13f      	bne.n	8001964 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018e8:	e03c      	b.n	8001964 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	699b      	ldr	r3, [r3, #24]
 80018ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018f2:	d121      	bne.n	8001938 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	2b03      	cmp	r3, #3
 80018f8:	d836      	bhi.n	8001968 <DMA_CheckFifoParam+0xd8>
 80018fa:	a201      	add	r2, pc, #4	; (adr r2, 8001900 <DMA_CheckFifoParam+0x70>)
 80018fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001900:	08001911 	.word	0x08001911
 8001904:	08001917 	.word	0x08001917
 8001908:	08001911 	.word	0x08001911
 800190c:	08001929 	.word	0x08001929
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	73fb      	strb	r3, [r7, #15]
      break;
 8001914:	e02f      	b.n	8001976 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d024      	beq.n	800196c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001926:	e021      	b.n	800196c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001930:	d11e      	bne.n	8001970 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001936:	e01b      	b.n	8001970 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	2b02      	cmp	r3, #2
 800193c:	d902      	bls.n	8001944 <DMA_CheckFifoParam+0xb4>
 800193e:	2b03      	cmp	r3, #3
 8001940:	d003      	beq.n	800194a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001942:	e018      	b.n	8001976 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	73fb      	strb	r3, [r7, #15]
      break;
 8001948:	e015      	b.n	8001976 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d00e      	beq.n	8001974 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	73fb      	strb	r3, [r7, #15]
      break;
 800195a:	e00b      	b.n	8001974 <DMA_CheckFifoParam+0xe4>
      break;
 800195c:	bf00      	nop
 800195e:	e00a      	b.n	8001976 <DMA_CheckFifoParam+0xe6>
      break;
 8001960:	bf00      	nop
 8001962:	e008      	b.n	8001976 <DMA_CheckFifoParam+0xe6>
      break;
 8001964:	bf00      	nop
 8001966:	e006      	b.n	8001976 <DMA_CheckFifoParam+0xe6>
      break;
 8001968:	bf00      	nop
 800196a:	e004      	b.n	8001976 <DMA_CheckFifoParam+0xe6>
      break;
 800196c:	bf00      	nop
 800196e:	e002      	b.n	8001976 <DMA_CheckFifoParam+0xe6>
      break;   
 8001970:	bf00      	nop
 8001972:	e000      	b.n	8001976 <DMA_CheckFifoParam+0xe6>
      break;
 8001974:	bf00      	nop
    }
  } 
  
  return status; 
 8001976:	7bfb      	ldrb	r3, [r7, #15]
}
 8001978:	4618      	mov	r0, r3
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001984:	b480      	push	{r7}
 8001986:	b089      	sub	sp, #36	; 0x24
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800198e:	2300      	movs	r3, #0
 8001990:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001992:	2300      	movs	r3, #0
 8001994:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001996:	2300      	movs	r3, #0
 8001998:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800199a:	2300      	movs	r3, #0
 800199c:	61fb      	str	r3, [r7, #28]
 800199e:	e16b      	b.n	8001c78 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019a0:	2201      	movs	r2, #1
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	4013      	ands	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	f040 815a 	bne.w	8001c72 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d00b      	beq.n	80019de <HAL_GPIO_Init+0x5a>
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d007      	beq.n	80019de <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019d2:	2b11      	cmp	r3, #17
 80019d4:	d003      	beq.n	80019de <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2b12      	cmp	r3, #18
 80019dc:	d130      	bne.n	8001a40 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	2203      	movs	r2, #3
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	43db      	mvns	r3, r3
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	4013      	ands	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	68da      	ldr	r2, [r3, #12]
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a14:	2201      	movs	r2, #1
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4013      	ands	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	091b      	lsrs	r3, r3, #4
 8001a2a:	f003 0201 	and.w	r2, r3, #1
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	2203      	movs	r2, #3
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	43db      	mvns	r3, r3
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4013      	ands	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	689a      	ldr	r2, [r3, #8]
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d003      	beq.n	8001a80 <HAL_GPIO_Init+0xfc>
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	2b12      	cmp	r3, #18
 8001a7e:	d123      	bne.n	8001ac8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	08da      	lsrs	r2, r3, #3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3208      	adds	r2, #8
 8001a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	f003 0307 	and.w	r3, r3, #7
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	220f      	movs	r2, #15
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	691a      	ldr	r2, [r3, #16]
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	f003 0307 	and.w	r3, r3, #7
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	08da      	lsrs	r2, r3, #3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	3208      	adds	r2, #8
 8001ac2:	69b9      	ldr	r1, [r7, #24]
 8001ac4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	2203      	movs	r2, #3
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	4013      	ands	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f003 0203 	and.w	r2, r3, #3
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	f000 80b4 	beq.w	8001c72 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	4a5f      	ldr	r2, [pc, #380]	; (8001c8c <HAL_GPIO_Init+0x308>)
 8001b10:	4b5e      	ldr	r3, [pc, #376]	; (8001c8c <HAL_GPIO_Init+0x308>)
 8001b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b18:	6453      	str	r3, [r2, #68]	; 0x44
 8001b1a:	4b5c      	ldr	r3, [pc, #368]	; (8001c8c <HAL_GPIO_Init+0x308>)
 8001b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b26:	4a5a      	ldr	r2, [pc, #360]	; (8001c90 <HAL_GPIO_Init+0x30c>)
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	089b      	lsrs	r3, r3, #2
 8001b2c:	3302      	adds	r3, #2
 8001b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	f003 0303 	and.w	r3, r3, #3
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	220f      	movs	r2, #15
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	43db      	mvns	r3, r3
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	4013      	ands	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a51      	ldr	r2, [pc, #324]	; (8001c94 <HAL_GPIO_Init+0x310>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d02b      	beq.n	8001baa <HAL_GPIO_Init+0x226>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a50      	ldr	r2, [pc, #320]	; (8001c98 <HAL_GPIO_Init+0x314>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d025      	beq.n	8001ba6 <HAL_GPIO_Init+0x222>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a4f      	ldr	r2, [pc, #316]	; (8001c9c <HAL_GPIO_Init+0x318>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d01f      	beq.n	8001ba2 <HAL_GPIO_Init+0x21e>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a4e      	ldr	r2, [pc, #312]	; (8001ca0 <HAL_GPIO_Init+0x31c>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d019      	beq.n	8001b9e <HAL_GPIO_Init+0x21a>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a4d      	ldr	r2, [pc, #308]	; (8001ca4 <HAL_GPIO_Init+0x320>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d013      	beq.n	8001b9a <HAL_GPIO_Init+0x216>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a4c      	ldr	r2, [pc, #304]	; (8001ca8 <HAL_GPIO_Init+0x324>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d00d      	beq.n	8001b96 <HAL_GPIO_Init+0x212>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a4b      	ldr	r2, [pc, #300]	; (8001cac <HAL_GPIO_Init+0x328>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d007      	beq.n	8001b92 <HAL_GPIO_Init+0x20e>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a4a      	ldr	r2, [pc, #296]	; (8001cb0 <HAL_GPIO_Init+0x32c>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d101      	bne.n	8001b8e <HAL_GPIO_Init+0x20a>
 8001b8a:	2307      	movs	r3, #7
 8001b8c:	e00e      	b.n	8001bac <HAL_GPIO_Init+0x228>
 8001b8e:	2308      	movs	r3, #8
 8001b90:	e00c      	b.n	8001bac <HAL_GPIO_Init+0x228>
 8001b92:	2306      	movs	r3, #6
 8001b94:	e00a      	b.n	8001bac <HAL_GPIO_Init+0x228>
 8001b96:	2305      	movs	r3, #5
 8001b98:	e008      	b.n	8001bac <HAL_GPIO_Init+0x228>
 8001b9a:	2304      	movs	r3, #4
 8001b9c:	e006      	b.n	8001bac <HAL_GPIO_Init+0x228>
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e004      	b.n	8001bac <HAL_GPIO_Init+0x228>
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	e002      	b.n	8001bac <HAL_GPIO_Init+0x228>
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e000      	b.n	8001bac <HAL_GPIO_Init+0x228>
 8001baa:	2300      	movs	r3, #0
 8001bac:	69fa      	ldr	r2, [r7, #28]
 8001bae:	f002 0203 	and.w	r2, r2, #3
 8001bb2:	0092      	lsls	r2, r2, #2
 8001bb4:	4093      	lsls	r3, r2
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bbc:	4934      	ldr	r1, [pc, #208]	; (8001c90 <HAL_GPIO_Init+0x30c>)
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	089b      	lsrs	r3, r3, #2
 8001bc2:	3302      	adds	r3, #2
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bca:	4b3a      	ldr	r3, [pc, #232]	; (8001cb4 <HAL_GPIO_Init+0x330>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bee:	4a31      	ldr	r2, [pc, #196]	; (8001cb4 <HAL_GPIO_Init+0x330>)
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001bf4:	4b2f      	ldr	r3, [pc, #188]	; (8001cb4 <HAL_GPIO_Init+0x330>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4013      	ands	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d003      	beq.n	8001c18 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c18:	4a26      	ldr	r2, [pc, #152]	; (8001cb4 <HAL_GPIO_Init+0x330>)
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c1e:	4b25      	ldr	r3, [pc, #148]	; (8001cb4 <HAL_GPIO_Init+0x330>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	43db      	mvns	r3, r3
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d003      	beq.n	8001c42 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c42:	4a1c      	ldr	r2, [pc, #112]	; (8001cb4 <HAL_GPIO_Init+0x330>)
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c48:	4b1a      	ldr	r3, [pc, #104]	; (8001cb4 <HAL_GPIO_Init+0x330>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	43db      	mvns	r3, r3
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	4013      	ands	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d003      	beq.n	8001c6c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c6c:	4a11      	ldr	r2, [pc, #68]	; (8001cb4 <HAL_GPIO_Init+0x330>)
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	3301      	adds	r3, #1
 8001c76:	61fb      	str	r3, [r7, #28]
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	2b0f      	cmp	r3, #15
 8001c7c:	f67f ae90 	bls.w	80019a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c80:	bf00      	nop
 8001c82:	3724      	adds	r7, #36	; 0x24
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	40013800 	.word	0x40013800
 8001c94:	40020000 	.word	0x40020000
 8001c98:	40020400 	.word	0x40020400
 8001c9c:	40020800 	.word	0x40020800
 8001ca0:	40020c00 	.word	0x40020c00
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	40021400 	.word	0x40021400
 8001cac:	40021800 	.word	0x40021800
 8001cb0:	40021c00 	.word	0x40021c00
 8001cb4:	40013c00 	.word	0x40013c00

08001cb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	807b      	strh	r3, [r7, #2]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cc8:	787b      	ldrb	r3, [r7, #1]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cce:	887a      	ldrh	r2, [r7, #2]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cd4:	e003      	b.n	8001cde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cd6:	887b      	ldrh	r3, [r7, #2]
 8001cd8:	041a      	lsls	r2, r3, #16
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	619a      	str	r2, [r3, #24]
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
	...

08001cec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e25b      	b.n	80021b6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d075      	beq.n	8001df6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d0a:	4ba3      	ldr	r3, [pc, #652]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f003 030c 	and.w	r3, r3, #12
 8001d12:	2b04      	cmp	r3, #4
 8001d14:	d00c      	beq.n	8001d30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d16:	4ba0      	ldr	r3, [pc, #640]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d1e:	2b08      	cmp	r3, #8
 8001d20:	d112      	bne.n	8001d48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d22:	4b9d      	ldr	r3, [pc, #628]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d2e:	d10b      	bne.n	8001d48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d30:	4b99      	ldr	r3, [pc, #612]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d05b      	beq.n	8001df4 <HAL_RCC_OscConfig+0x108>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d157      	bne.n	8001df4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e236      	b.n	80021b6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d50:	d106      	bne.n	8001d60 <HAL_RCC_OscConfig+0x74>
 8001d52:	4a91      	ldr	r2, [pc, #580]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001d54:	4b90      	ldr	r3, [pc, #576]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d5c:	6013      	str	r3, [r2, #0]
 8001d5e:	e01d      	b.n	8001d9c <HAL_RCC_OscConfig+0xb0>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d68:	d10c      	bne.n	8001d84 <HAL_RCC_OscConfig+0x98>
 8001d6a:	4a8b      	ldr	r2, [pc, #556]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001d6c:	4b8a      	ldr	r3, [pc, #552]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d74:	6013      	str	r3, [r2, #0]
 8001d76:	4a88      	ldr	r2, [pc, #544]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001d78:	4b87      	ldr	r3, [pc, #540]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d80:	6013      	str	r3, [r2, #0]
 8001d82:	e00b      	b.n	8001d9c <HAL_RCC_OscConfig+0xb0>
 8001d84:	4a84      	ldr	r2, [pc, #528]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001d86:	4b84      	ldr	r3, [pc, #528]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d8e:	6013      	str	r3, [r2, #0]
 8001d90:	4a81      	ldr	r2, [pc, #516]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001d92:	4b81      	ldr	r3, [pc, #516]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d013      	beq.n	8001dcc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da4:	f7ff f950 	bl	8001048 <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dac:	f7ff f94c 	bl	8001048 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b64      	cmp	r3, #100	; 0x64
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e1fb      	b.n	80021b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dbe:	4b76      	ldr	r3, [pc, #472]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d0f0      	beq.n	8001dac <HAL_RCC_OscConfig+0xc0>
 8001dca:	e014      	b.n	8001df6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dcc:	f7ff f93c 	bl	8001048 <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dd4:	f7ff f938 	bl	8001048 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b64      	cmp	r3, #100	; 0x64
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e1e7      	b.n	80021b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001de6:	4b6c      	ldr	r3, [pc, #432]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1f0      	bne.n	8001dd4 <HAL_RCC_OscConfig+0xe8>
 8001df2:	e000      	b.n	8001df6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d063      	beq.n	8001eca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e02:	4b65      	ldr	r3, [pc, #404]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f003 030c 	and.w	r3, r3, #12
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d00b      	beq.n	8001e26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e0e:	4b62      	ldr	r3, [pc, #392]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e16:	2b08      	cmp	r3, #8
 8001e18:	d11c      	bne.n	8001e54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e1a:	4b5f      	ldr	r3, [pc, #380]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d116      	bne.n	8001e54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e26:	4b5c      	ldr	r3, [pc, #368]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d005      	beq.n	8001e3e <HAL_RCC_OscConfig+0x152>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d001      	beq.n	8001e3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e1bb      	b.n	80021b6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e3e:	4956      	ldr	r1, [pc, #344]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001e40:	4b55      	ldr	r3, [pc, #340]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e52:	e03a      	b.n	8001eca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d020      	beq.n	8001e9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e5c:	4b4f      	ldr	r3, [pc, #316]	; (8001f9c <HAL_RCC_OscConfig+0x2b0>)
 8001e5e:	2201      	movs	r2, #1
 8001e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e62:	f7ff f8f1 	bl	8001048 <HAL_GetTick>
 8001e66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e68:	e008      	b.n	8001e7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e6a:	f7ff f8ed 	bl	8001048 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e19c      	b.n	80021b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e7c:	4b46      	ldr	r3, [pc, #280]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d0f0      	beq.n	8001e6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e88:	4943      	ldr	r1, [pc, #268]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001e8a:	4b43      	ldr	r3, [pc, #268]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	600b      	str	r3, [r1, #0]
 8001e9c:	e015      	b.n	8001eca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e9e:	4b3f      	ldr	r3, [pc, #252]	; (8001f9c <HAL_RCC_OscConfig+0x2b0>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea4:	f7ff f8d0 	bl	8001048 <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eac:	f7ff f8cc 	bl	8001048 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e17b      	b.n	80021b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ebe:	4b36      	ldr	r3, [pc, #216]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1f0      	bne.n	8001eac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0308 	and.w	r3, r3, #8
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d030      	beq.n	8001f38 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	695b      	ldr	r3, [r3, #20]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d016      	beq.n	8001f0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ede:	4b30      	ldr	r3, [pc, #192]	; (8001fa0 <HAL_RCC_OscConfig+0x2b4>)
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee4:	f7ff f8b0 	bl	8001048 <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eec:	f7ff f8ac 	bl	8001048 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e15b      	b.n	80021b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001efe:	4b26      	ldr	r3, [pc, #152]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001f00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d0f0      	beq.n	8001eec <HAL_RCC_OscConfig+0x200>
 8001f0a:	e015      	b.n	8001f38 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f0c:	4b24      	ldr	r3, [pc, #144]	; (8001fa0 <HAL_RCC_OscConfig+0x2b4>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f12:	f7ff f899 	bl	8001048 <HAL_GetTick>
 8001f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f18:	e008      	b.n	8001f2c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f1a:	f7ff f895 	bl	8001048 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e144      	b.n	80021b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f2c:	4b1a      	ldr	r3, [pc, #104]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001f2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d1f0      	bne.n	8001f1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0304 	and.w	r3, r3, #4
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	f000 80a0 	beq.w	8002086 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f46:	2300      	movs	r3, #0
 8001f48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f4a:	4b13      	ldr	r3, [pc, #76]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d10f      	bne.n	8001f76 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	60bb      	str	r3, [r7, #8]
 8001f5a:	4a0f      	ldr	r2, [pc, #60]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001f5c:	4b0e      	ldr	r3, [pc, #56]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f64:	6413      	str	r3, [r2, #64]	; 0x40
 8001f66:	4b0c      	ldr	r3, [pc, #48]	; (8001f98 <HAL_RCC_OscConfig+0x2ac>)
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6e:	60bb      	str	r3, [r7, #8]
 8001f70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f72:	2301      	movs	r3, #1
 8001f74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f76:	4b0b      	ldr	r3, [pc, #44]	; (8001fa4 <HAL_RCC_OscConfig+0x2b8>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d121      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f82:	4a08      	ldr	r2, [pc, #32]	; (8001fa4 <HAL_RCC_OscConfig+0x2b8>)
 8001f84:	4b07      	ldr	r3, [pc, #28]	; (8001fa4 <HAL_RCC_OscConfig+0x2b8>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f8e:	f7ff f85b 	bl	8001048 <HAL_GetTick>
 8001f92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f94:	e011      	b.n	8001fba <HAL_RCC_OscConfig+0x2ce>
 8001f96:	bf00      	nop
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	42470000 	.word	0x42470000
 8001fa0:	42470e80 	.word	0x42470e80
 8001fa4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fa8:	f7ff f84e 	bl	8001048 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e0fd      	b.n	80021b6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fba:	4b81      	ldr	r3, [pc, #516]	; (80021c0 <HAL_RCC_OscConfig+0x4d4>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d0f0      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d106      	bne.n	8001fdc <HAL_RCC_OscConfig+0x2f0>
 8001fce:	4a7d      	ldr	r2, [pc, #500]	; (80021c4 <HAL_RCC_OscConfig+0x4d8>)
 8001fd0:	4b7c      	ldr	r3, [pc, #496]	; (80021c4 <HAL_RCC_OscConfig+0x4d8>)
 8001fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	6713      	str	r3, [r2, #112]	; 0x70
 8001fda:	e01c      	b.n	8002016 <HAL_RCC_OscConfig+0x32a>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	2b05      	cmp	r3, #5
 8001fe2:	d10c      	bne.n	8001ffe <HAL_RCC_OscConfig+0x312>
 8001fe4:	4a77      	ldr	r2, [pc, #476]	; (80021c4 <HAL_RCC_OscConfig+0x4d8>)
 8001fe6:	4b77      	ldr	r3, [pc, #476]	; (80021c4 <HAL_RCC_OscConfig+0x4d8>)
 8001fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fea:	f043 0304 	orr.w	r3, r3, #4
 8001fee:	6713      	str	r3, [r2, #112]	; 0x70
 8001ff0:	4a74      	ldr	r2, [pc, #464]	; (80021c4 <HAL_RCC_OscConfig+0x4d8>)
 8001ff2:	4b74      	ldr	r3, [pc, #464]	; (80021c4 <HAL_RCC_OscConfig+0x4d8>)
 8001ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff6:	f043 0301 	orr.w	r3, r3, #1
 8001ffa:	6713      	str	r3, [r2, #112]	; 0x70
 8001ffc:	e00b      	b.n	8002016 <HAL_RCC_OscConfig+0x32a>
 8001ffe:	4a71      	ldr	r2, [pc, #452]	; (80021c4 <HAL_RCC_OscConfig+0x4d8>)
 8002000:	4b70      	ldr	r3, [pc, #448]	; (80021c4 <HAL_RCC_OscConfig+0x4d8>)
 8002002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002004:	f023 0301 	bic.w	r3, r3, #1
 8002008:	6713      	str	r3, [r2, #112]	; 0x70
 800200a:	4a6e      	ldr	r2, [pc, #440]	; (80021c4 <HAL_RCC_OscConfig+0x4d8>)
 800200c:	4b6d      	ldr	r3, [pc, #436]	; (80021c4 <HAL_RCC_OscConfig+0x4d8>)
 800200e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002010:	f023 0304 	bic.w	r3, r3, #4
 8002014:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d015      	beq.n	800204a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800201e:	f7ff f813 	bl	8001048 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002024:	e00a      	b.n	800203c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002026:	f7ff f80f 	bl	8001048 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	f241 3288 	movw	r2, #5000	; 0x1388
 8002034:	4293      	cmp	r3, r2
 8002036:	d901      	bls.n	800203c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e0bc      	b.n	80021b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800203c:	4b61      	ldr	r3, [pc, #388]	; (80021c4 <HAL_RCC_OscConfig+0x4d8>)
 800203e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d0ee      	beq.n	8002026 <HAL_RCC_OscConfig+0x33a>
 8002048:	e014      	b.n	8002074 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800204a:	f7fe fffd 	bl	8001048 <HAL_GetTick>
 800204e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002050:	e00a      	b.n	8002068 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002052:	f7fe fff9 	bl	8001048 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002060:	4293      	cmp	r3, r2
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e0a6      	b.n	80021b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002068:	4b56      	ldr	r3, [pc, #344]	; (80021c4 <HAL_RCC_OscConfig+0x4d8>)
 800206a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d1ee      	bne.n	8002052 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002074:	7dfb      	ldrb	r3, [r7, #23]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d105      	bne.n	8002086 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800207a:	4a52      	ldr	r2, [pc, #328]	; (80021c4 <HAL_RCC_OscConfig+0x4d8>)
 800207c:	4b51      	ldr	r3, [pc, #324]	; (80021c4 <HAL_RCC_OscConfig+0x4d8>)
 800207e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002080:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002084:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 8092 	beq.w	80021b4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002090:	4b4c      	ldr	r3, [pc, #304]	; (80021c4 <HAL_RCC_OscConfig+0x4d8>)
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f003 030c 	and.w	r3, r3, #12
 8002098:	2b08      	cmp	r3, #8
 800209a:	d05c      	beq.n	8002156 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d141      	bne.n	8002128 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020a4:	4b48      	ldr	r3, [pc, #288]	; (80021c8 <HAL_RCC_OscConfig+0x4dc>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020aa:	f7fe ffcd 	bl	8001048 <HAL_GetTick>
 80020ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020b0:	e008      	b.n	80020c4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020b2:	f7fe ffc9 	bl	8001048 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e078      	b.n	80021b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020c4:	4b3f      	ldr	r3, [pc, #252]	; (80021c4 <HAL_RCC_OscConfig+0x4d8>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1f0      	bne.n	80020b2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020d0:	493c      	ldr	r1, [pc, #240]	; (80021c4 <HAL_RCC_OscConfig+0x4d8>)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	69da      	ldr	r2, [r3, #28]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a1b      	ldr	r3, [r3, #32]
 80020da:	431a      	orrs	r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e0:	019b      	lsls	r3, r3, #6
 80020e2:	431a      	orrs	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e8:	085b      	lsrs	r3, r3, #1
 80020ea:	3b01      	subs	r3, #1
 80020ec:	041b      	lsls	r3, r3, #16
 80020ee:	431a      	orrs	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f4:	061b      	lsls	r3, r3, #24
 80020f6:	4313      	orrs	r3, r2
 80020f8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020fa:	4b33      	ldr	r3, [pc, #204]	; (80021c8 <HAL_RCC_OscConfig+0x4dc>)
 80020fc:	2201      	movs	r2, #1
 80020fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002100:	f7fe ffa2 	bl	8001048 <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002108:	f7fe ff9e 	bl	8001048 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e04d      	b.n	80021b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800211a:	4b2a      	ldr	r3, [pc, #168]	; (80021c4 <HAL_RCC_OscConfig+0x4d8>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d0f0      	beq.n	8002108 <HAL_RCC_OscConfig+0x41c>
 8002126:	e045      	b.n	80021b4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002128:	4b27      	ldr	r3, [pc, #156]	; (80021c8 <HAL_RCC_OscConfig+0x4dc>)
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212e:	f7fe ff8b 	bl	8001048 <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002136:	f7fe ff87 	bl	8001048 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e036      	b.n	80021b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002148:	4b1e      	ldr	r3, [pc, #120]	; (80021c4 <HAL_RCC_OscConfig+0x4d8>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1f0      	bne.n	8002136 <HAL_RCC_OscConfig+0x44a>
 8002154:	e02e      	b.n	80021b4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d101      	bne.n	8002162 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e029      	b.n	80021b6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002162:	4b18      	ldr	r3, [pc, #96]	; (80021c4 <HAL_RCC_OscConfig+0x4d8>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	69db      	ldr	r3, [r3, #28]
 8002172:	429a      	cmp	r2, r3
 8002174:	d11c      	bne.n	80021b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002180:	429a      	cmp	r2, r3
 8002182:	d115      	bne.n	80021b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800218a:	4013      	ands	r3, r2
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002190:	4293      	cmp	r3, r2
 8002192:	d10d      	bne.n	80021b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800219e:	429a      	cmp	r2, r3
 80021a0:	d106      	bne.n	80021b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d001      	beq.n	80021b4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e000      	b.n	80021b6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3718      	adds	r7, #24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	40007000 	.word	0x40007000
 80021c4:	40023800 	.word	0x40023800
 80021c8:	42470060 	.word	0x42470060

080021cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d101      	bne.n	80021e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e0cc      	b.n	800237a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021e0:	4b68      	ldr	r3, [pc, #416]	; (8002384 <HAL_RCC_ClockConfig+0x1b8>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 020f 	and.w	r2, r3, #15
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d20c      	bcs.n	8002208 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ee:	4b65      	ldr	r3, [pc, #404]	; (8002384 <HAL_RCC_ClockConfig+0x1b8>)
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	b2d2      	uxtb	r2, r2
 80021f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021f6:	4b63      	ldr	r3, [pc, #396]	; (8002384 <HAL_RCC_ClockConfig+0x1b8>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 020f 	and.w	r2, r3, #15
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	429a      	cmp	r2, r3
 8002202:	d001      	beq.n	8002208 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e0b8      	b.n	800237a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d020      	beq.n	8002256 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0304 	and.w	r3, r3, #4
 800221c:	2b00      	cmp	r3, #0
 800221e:	d005      	beq.n	800222c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002220:	4a59      	ldr	r2, [pc, #356]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 8002222:	4b59      	ldr	r3, [pc, #356]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800222a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0308 	and.w	r3, r3, #8
 8002234:	2b00      	cmp	r3, #0
 8002236:	d005      	beq.n	8002244 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002238:	4a53      	ldr	r2, [pc, #332]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 800223a:	4b53      	ldr	r3, [pc, #332]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002242:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002244:	4950      	ldr	r1, [pc, #320]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 8002246:	4b50      	ldr	r3, [pc, #320]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	4313      	orrs	r3, r2
 8002254:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b00      	cmp	r3, #0
 8002260:	d044      	beq.n	80022ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d107      	bne.n	800227a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800226a:	4b47      	ldr	r3, [pc, #284]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d119      	bne.n	80022aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e07f      	b.n	800237a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	2b02      	cmp	r3, #2
 8002280:	d003      	beq.n	800228a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002286:	2b03      	cmp	r3, #3
 8002288:	d107      	bne.n	800229a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800228a:	4b3f      	ldr	r3, [pc, #252]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d109      	bne.n	80022aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e06f      	b.n	800237a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800229a:	4b3b      	ldr	r3, [pc, #236]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e067      	b.n	800237a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022aa:	4937      	ldr	r1, [pc, #220]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 80022ac:	4b36      	ldr	r3, [pc, #216]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f023 0203 	bic.w	r2, r3, #3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022bc:	f7fe fec4 	bl	8001048 <HAL_GetTick>
 80022c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022c2:	e00a      	b.n	80022da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022c4:	f7fe fec0 	bl	8001048 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e04f      	b.n	800237a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022da:	4b2b      	ldr	r3, [pc, #172]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f003 020c 	and.w	r2, r3, #12
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d1eb      	bne.n	80022c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022ec:	4b25      	ldr	r3, [pc, #148]	; (8002384 <HAL_RCC_ClockConfig+0x1b8>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 020f 	and.w	r2, r3, #15
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d90c      	bls.n	8002314 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022fa:	4b22      	ldr	r3, [pc, #136]	; (8002384 <HAL_RCC_ClockConfig+0x1b8>)
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	b2d2      	uxtb	r2, r2
 8002300:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002302:	4b20      	ldr	r3, [pc, #128]	; (8002384 <HAL_RCC_ClockConfig+0x1b8>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 020f 	and.w	r2, r3, #15
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	429a      	cmp	r2, r3
 800230e:	d001      	beq.n	8002314 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e032      	b.n	800237a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0304 	and.w	r3, r3, #4
 800231c:	2b00      	cmp	r3, #0
 800231e:	d008      	beq.n	8002332 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002320:	4919      	ldr	r1, [pc, #100]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 8002322:	4b19      	ldr	r3, [pc, #100]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	4313      	orrs	r3, r2
 8002330:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0308 	and.w	r3, r3, #8
 800233a:	2b00      	cmp	r3, #0
 800233c:	d009      	beq.n	8002352 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800233e:	4912      	ldr	r1, [pc, #72]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 8002340:	4b11      	ldr	r3, [pc, #68]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	4313      	orrs	r3, r2
 8002350:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002352:	f000 f821 	bl	8002398 <HAL_RCC_GetSysClockFreq>
 8002356:	4601      	mov	r1, r0
 8002358:	4b0b      	ldr	r3, [pc, #44]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	091b      	lsrs	r3, r3, #4
 800235e:	f003 030f 	and.w	r3, r3, #15
 8002362:	4a0a      	ldr	r2, [pc, #40]	; (800238c <HAL_RCC_ClockConfig+0x1c0>)
 8002364:	5cd3      	ldrb	r3, [r2, r3]
 8002366:	fa21 f303 	lsr.w	r3, r1, r3
 800236a:	4a09      	ldr	r2, [pc, #36]	; (8002390 <HAL_RCC_ClockConfig+0x1c4>)
 800236c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800236e:	4b09      	ldr	r3, [pc, #36]	; (8002394 <HAL_RCC_ClockConfig+0x1c8>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4618      	mov	r0, r3
 8002374:	f005 fc0a 	bl	8007b8c <HAL_InitTick>

  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	40023c00 	.word	0x40023c00
 8002388:	40023800 	.word	0x40023800
 800238c:	0800c774 	.word	0x0800c774
 8002390:	2000001c 	.word	0x2000001c
 8002394:	20000000 	.word	0x20000000

08002398 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800239c:	b087      	sub	sp, #28
 800239e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80023a0:	2200      	movs	r2, #0
 80023a2:	60fa      	str	r2, [r7, #12]
 80023a4:	2200      	movs	r2, #0
 80023a6:	617a      	str	r2, [r7, #20]
 80023a8:	2200      	movs	r2, #0
 80023aa:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0U;
 80023ac:	2200      	movs	r2, #0
 80023ae:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023b0:	4a51      	ldr	r2, [pc, #324]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80023b2:	6892      	ldr	r2, [r2, #8]
 80023b4:	f002 020c 	and.w	r2, r2, #12
 80023b8:	2a04      	cmp	r2, #4
 80023ba:	d007      	beq.n	80023cc <HAL_RCC_GetSysClockFreq+0x34>
 80023bc:	2a08      	cmp	r2, #8
 80023be:	d008      	beq.n	80023d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80023c0:	2a00      	cmp	r2, #0
 80023c2:	f040 8090 	bne.w	80024e6 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023c6:	4b4d      	ldr	r3, [pc, #308]	; (80024fc <HAL_RCC_GetSysClockFreq+0x164>)
 80023c8:	613b      	str	r3, [r7, #16]
       break;
 80023ca:	e08f      	b.n	80024ec <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023cc:	4b4c      	ldr	r3, [pc, #304]	; (8002500 <HAL_RCC_GetSysClockFreq+0x168>)
 80023ce:	613b      	str	r3, [r7, #16]
      break;
 80023d0:	e08c      	b.n	80024ec <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023d2:	4a49      	ldr	r2, [pc, #292]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80023d4:	6852      	ldr	r2, [r2, #4]
 80023d6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80023da:	60fa      	str	r2, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023dc:	4a46      	ldr	r2, [pc, #280]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80023de:	6852      	ldr	r2, [r2, #4]
 80023e0:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80023e4:	2a00      	cmp	r2, #0
 80023e6:	d023      	beq.n	8002430 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023e8:	4b43      	ldr	r3, [pc, #268]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	099b      	lsrs	r3, r3, #6
 80023ee:	f04f 0400 	mov.w	r4, #0
 80023f2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80023f6:	f04f 0200 	mov.w	r2, #0
 80023fa:	ea03 0301 	and.w	r3, r3, r1
 80023fe:	ea04 0402 	and.w	r4, r4, r2
 8002402:	4a3f      	ldr	r2, [pc, #252]	; (8002500 <HAL_RCC_GetSysClockFreq+0x168>)
 8002404:	fb02 f104 	mul.w	r1, r2, r4
 8002408:	2200      	movs	r2, #0
 800240a:	fb02 f203 	mul.w	r2, r2, r3
 800240e:	440a      	add	r2, r1
 8002410:	493b      	ldr	r1, [pc, #236]	; (8002500 <HAL_RCC_GetSysClockFreq+0x168>)
 8002412:	fba3 0101 	umull	r0, r1, r3, r1
 8002416:	1853      	adds	r3, r2, r1
 8002418:	4619      	mov	r1, r3
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f04f 0400 	mov.w	r4, #0
 8002420:	461a      	mov	r2, r3
 8002422:	4623      	mov	r3, r4
 8002424:	f7fe fbbc 	bl	8000ba0 <__aeabi_uldivmod>
 8002428:	4603      	mov	r3, r0
 800242a:	460c      	mov	r4, r1
 800242c:	617b      	str	r3, [r7, #20]
 800242e:	e04c      	b.n	80024ca <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002430:	4a31      	ldr	r2, [pc, #196]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002432:	6852      	ldr	r2, [r2, #4]
 8002434:	0992      	lsrs	r2, r2, #6
 8002436:	4611      	mov	r1, r2
 8002438:	f04f 0200 	mov.w	r2, #0
 800243c:	f240 15ff 	movw	r5, #511	; 0x1ff
 8002440:	f04f 0600 	mov.w	r6, #0
 8002444:	ea05 0501 	and.w	r5, r5, r1
 8002448:	ea06 0602 	and.w	r6, r6, r2
 800244c:	4629      	mov	r1, r5
 800244e:	4632      	mov	r2, r6
 8002450:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8002454:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 8002458:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 800245c:	4651      	mov	r1, sl
 800245e:	465a      	mov	r2, fp
 8002460:	46aa      	mov	sl, r5
 8002462:	46b3      	mov	fp, r6
 8002464:	4655      	mov	r5, sl
 8002466:	465e      	mov	r6, fp
 8002468:	1b4d      	subs	r5, r1, r5
 800246a:	eb62 0606 	sbc.w	r6, r2, r6
 800246e:	4629      	mov	r1, r5
 8002470:	4632      	mov	r2, r6
 8002472:	0194      	lsls	r4, r2, #6
 8002474:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002478:	018b      	lsls	r3, r1, #6
 800247a:	1a5b      	subs	r3, r3, r1
 800247c:	eb64 0402 	sbc.w	r4, r4, r2
 8002480:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8002484:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8002488:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 800248c:	4643      	mov	r3, r8
 800248e:	464c      	mov	r4, r9
 8002490:	4655      	mov	r5, sl
 8002492:	465e      	mov	r6, fp
 8002494:	18ed      	adds	r5, r5, r3
 8002496:	eb46 0604 	adc.w	r6, r6, r4
 800249a:	462b      	mov	r3, r5
 800249c:	4634      	mov	r4, r6
 800249e:	02a2      	lsls	r2, r4, #10
 80024a0:	607a      	str	r2, [r7, #4]
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80024a8:	607a      	str	r2, [r7, #4]
 80024aa:	029b      	lsls	r3, r3, #10
 80024ac:	603b      	str	r3, [r7, #0]
 80024ae:	e897 0018 	ldmia.w	r7, {r3, r4}
 80024b2:	4618      	mov	r0, r3
 80024b4:	4621      	mov	r1, r4
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f04f 0400 	mov.w	r4, #0
 80024bc:	461a      	mov	r2, r3
 80024be:	4623      	mov	r3, r4
 80024c0:	f7fe fb6e 	bl	8000ba0 <__aeabi_uldivmod>
 80024c4:	4603      	mov	r3, r0
 80024c6:	460c      	mov	r4, r1
 80024c8:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024ca:	4b0b      	ldr	r3, [pc, #44]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	0c1b      	lsrs	r3, r3, #16
 80024d0:	f003 0303 	and.w	r3, r3, #3
 80024d4:	3301      	adds	r3, #1
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e2:	613b      	str	r3, [r7, #16]
      break;
 80024e4:	e002      	b.n	80024ec <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024e6:	4b05      	ldr	r3, [pc, #20]	; (80024fc <HAL_RCC_GetSysClockFreq+0x164>)
 80024e8:	613b      	str	r3, [r7, #16]
      break;
 80024ea:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024ec:	693b      	ldr	r3, [r7, #16]
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	371c      	adds	r7, #28
 80024f2:	46bd      	mov	sp, r7
 80024f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024f8:	40023800 	.word	0x40023800
 80024fc:	00f42400 	.word	0x00f42400
 8002500:	017d7840 	.word	0x017d7840

08002504 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002508:	4b03      	ldr	r3, [pc, #12]	; (8002518 <HAL_RCC_GetHCLKFreq+0x14>)
 800250a:	681b      	ldr	r3, [r3, #0]
}
 800250c:	4618      	mov	r0, r3
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	2000001c 	.word	0x2000001c

0800251c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002520:	f7ff fff0 	bl	8002504 <HAL_RCC_GetHCLKFreq>
 8002524:	4601      	mov	r1, r0
 8002526:	4b05      	ldr	r3, [pc, #20]	; (800253c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	0b5b      	lsrs	r3, r3, #13
 800252c:	f003 0307 	and.w	r3, r3, #7
 8002530:	4a03      	ldr	r2, [pc, #12]	; (8002540 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002532:	5cd3      	ldrb	r3, [r2, r3]
 8002534:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002538:	4618      	mov	r0, r3
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40023800 	.word	0x40023800
 8002540:	0800c784 	.word	0x0800c784

08002544 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	220f      	movs	r2, #15
 8002552:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002554:	4b12      	ldr	r3, [pc, #72]	; (80025a0 <HAL_RCC_GetClockConfig+0x5c>)
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f003 0203 	and.w	r2, r3, #3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002560:	4b0f      	ldr	r3, [pc, #60]	; (80025a0 <HAL_RCC_GetClockConfig+0x5c>)
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800256c:	4b0c      	ldr	r3, [pc, #48]	; (80025a0 <HAL_RCC_GetClockConfig+0x5c>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002578:	4b09      	ldr	r3, [pc, #36]	; (80025a0 <HAL_RCC_GetClockConfig+0x5c>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	08db      	lsrs	r3, r3, #3
 800257e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002586:	4b07      	ldr	r3, [pc, #28]	; (80025a4 <HAL_RCC_GetClockConfig+0x60>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 020f 	and.w	r2, r3, #15
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	601a      	str	r2, [r3, #0]
}
 8002592:	bf00      	nop
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	40023800 	.word	0x40023800
 80025a4:	40023c00 	.word	0x40023c00

080025a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e055      	b.n	8002666 <HAL_SPI_Init+0xbe>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d106      	bne.n	80025da <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f005 fa29 	bl	8007a2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2202      	movs	r2, #2
 80025de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	6812      	ldr	r2, [r2, #0]
 80025ea:	6812      	ldr	r2, [r2, #0]
 80025ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025f0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	6851      	ldr	r1, [r2, #4]
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	6892      	ldr	r2, [r2, #8]
 80025fe:	4311      	orrs	r1, r2
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	68d2      	ldr	r2, [r2, #12]
 8002604:	4311      	orrs	r1, r2
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	6912      	ldr	r2, [r2, #16]
 800260a:	4311      	orrs	r1, r2
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	6952      	ldr	r2, [r2, #20]
 8002610:	4311      	orrs	r1, r2
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	6992      	ldr	r2, [r2, #24]
 8002616:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800261a:	4311      	orrs	r1, r2
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	69d2      	ldr	r2, [r2, #28]
 8002620:	4311      	orrs	r1, r2
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	6a12      	ldr	r2, [r2, #32]
 8002626:	4311      	orrs	r1, r2
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800262c:	430a      	orrs	r2, r1
 800262e:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	6992      	ldr	r2, [r2, #24]
 8002638:	0c12      	lsrs	r2, r2, #16
 800263a:	f002 0104 	and.w	r1, r2, #4
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002642:	430a      	orrs	r2, r1
 8002644:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	6812      	ldr	r2, [r2, #0]
 800264e:	69d2      	ldr	r2, [r2, #28]
 8002650:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002654:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b088      	sub	sp, #32
 8002672:	af00      	add	r7, sp, #0
 8002674:	60f8      	str	r0, [r7, #12]
 8002676:	60b9      	str	r1, [r7, #8]
 8002678:	603b      	str	r3, [r7, #0]
 800267a:	4613      	mov	r3, r2
 800267c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800267e:	2300      	movs	r3, #0
 8002680:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002688:	2b01      	cmp	r3, #1
 800268a:	d101      	bne.n	8002690 <HAL_SPI_Transmit+0x22>
 800268c:	2302      	movs	r3, #2
 800268e:	e11c      	b.n	80028ca <HAL_SPI_Transmit+0x25c>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002698:	f7fe fcd6 	bl	8001048 <HAL_GetTick>
 800269c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800269e:	88fb      	ldrh	r3, [r7, #6]
 80026a0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d002      	beq.n	80026b4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80026ae:	2302      	movs	r3, #2
 80026b0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80026b2:	e101      	b.n	80028b8 <HAL_SPI_Transmit+0x24a>
  }

  if ((pData == NULL) || (Size == 0U))
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d002      	beq.n	80026c0 <HAL_SPI_Transmit+0x52>
 80026ba:	88fb      	ldrh	r3, [r7, #6]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d102      	bne.n	80026c6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80026c4:	e0f8      	b.n	80028b8 <HAL_SPI_Transmit+0x24a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2203      	movs	r2, #3
 80026ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	68ba      	ldr	r2, [r7, #8]
 80026d8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	88fa      	ldrh	r2, [r7, #6]
 80026de:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	88fa      	ldrh	r2, [r7, #6]
 80026e4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2200      	movs	r2, #0
 80026ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2200      	movs	r2, #0
 80026f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800270c:	d107      	bne.n	800271e <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	6812      	ldr	r2, [r2, #0]
 8002716:	6812      	ldr	r2, [r2, #0]
 8002718:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800271c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002728:	2b40      	cmp	r3, #64	; 0x40
 800272a:	d007      	beq.n	800273c <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68fa      	ldr	r2, [r7, #12]
 8002732:	6812      	ldr	r2, [r2, #0]
 8002734:	6812      	ldr	r2, [r2, #0]
 8002736:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800273a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002744:	d14b      	bne.n	80027de <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d002      	beq.n	8002754 <HAL_SPI_Transmit+0xe6>
 800274e:	8afb      	ldrh	r3, [r7, #22]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d13e      	bne.n	80027d2 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68fa      	ldr	r2, [r7, #12]
 800275a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800275c:	8812      	ldrh	r2, [r2, #0]
 800275e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002764:	1c9a      	adds	r2, r3, #2
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800276e:	b29b      	uxth	r3, r3
 8002770:	3b01      	subs	r3, #1
 8002772:	b29a      	uxth	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002778:	e02b      	b.n	80027d2 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b02      	cmp	r3, #2
 8002786:	d112      	bne.n	80027ae <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002790:	8812      	ldrh	r2, [r2, #0]
 8002792:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002798:	1c9a      	adds	r2, r3, #2
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	3b01      	subs	r3, #1
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	86da      	strh	r2, [r3, #54]	; 0x36
 80027ac:	e011      	b.n	80027d2 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027ae:	f7fe fc4b 	bl	8001048 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	1ad2      	subs	r2, r2, r3
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d303      	bcc.n	80027c6 <HAL_SPI_Transmit+0x158>
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027c4:	d102      	bne.n	80027cc <HAL_SPI_Transmit+0x15e>
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d102      	bne.n	80027d2 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	77fb      	strb	r3, [r7, #31]
          goto error;
 80027d0:	e072      	b.n	80028b8 <HAL_SPI_Transmit+0x24a>
    while (hspi->TxXferCount > 0U)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1ce      	bne.n	800277a <HAL_SPI_Transmit+0x10c>
 80027dc:	e04c      	b.n	8002878 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d002      	beq.n	80027ec <HAL_SPI_Transmit+0x17e>
 80027e6:	8afb      	ldrh	r3, [r7, #22]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d140      	bne.n	800286e <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	330c      	adds	r3, #12
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80027f6:	7812      	ldrb	r2, [r2, #0]
 80027f8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002808:	b29b      	uxth	r3, r3
 800280a:	3b01      	subs	r3, #1
 800280c:	b29a      	uxth	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002812:	e02c      	b.n	800286e <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b02      	cmp	r3, #2
 8002820:	d113      	bne.n	800284a <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	330c      	adds	r3, #12
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800282c:	7812      	ldrb	r2, [r2, #0]
 800282e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002834:	1c5a      	adds	r2, r3, #1
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800283e:	b29b      	uxth	r3, r3
 8002840:	3b01      	subs	r3, #1
 8002842:	b29a      	uxth	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	86da      	strh	r2, [r3, #54]	; 0x36
 8002848:	e011      	b.n	800286e <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800284a:	f7fe fbfd 	bl	8001048 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	1ad2      	subs	r2, r2, r3
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	429a      	cmp	r2, r3
 8002858:	d303      	bcc.n	8002862 <HAL_SPI_Transmit+0x1f4>
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002860:	d102      	bne.n	8002868 <HAL_SPI_Transmit+0x1fa>
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d102      	bne.n	800286e <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800286c:	e024      	b.n	80028b8 <HAL_SPI_Transmit+0x24a>
    while (hspi->TxXferCount > 0U)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002872:	b29b      	uxth	r3, r3
 8002874:	2b00      	cmp	r3, #0
 8002876:	d1cd      	bne.n	8002814 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	6839      	ldr	r1, [r7, #0]
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	f000 fded 	bl	800345c <SPI_EndRxTxTransaction>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d002      	beq.n	800288e <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2220      	movs	r2, #32
 800288c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10a      	bne.n	80028ac <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002896:	2300      	movs	r3, #0
 8002898:	613b      	str	r3, [r7, #16]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	613b      	str	r3, [r7, #16]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	613b      	str	r3, [r7, #16]
 80028aa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <HAL_SPI_Transmit+0x24a>
  {
    errorcode = HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	77fb      	strb	r3, [r7, #31]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80028c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3720      	adds	r7, #32
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b088      	sub	sp, #32
 80028d6:	af02      	add	r7, sp, #8
 80028d8:	60f8      	str	r0, [r7, #12]
 80028da:	60b9      	str	r1, [r7, #8]
 80028dc:	603b      	str	r3, [r7, #0]
 80028de:	4613      	mov	r3, r2
 80028e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80028e2:	2300      	movs	r3, #0
 80028e4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028ee:	d112      	bne.n	8002916 <HAL_SPI_Receive+0x44>
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d10e      	bne.n	8002916 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2204      	movs	r2, #4
 80028fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002900:	88fa      	ldrh	r2, [r7, #6]
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	9300      	str	r3, [sp, #0]
 8002906:	4613      	mov	r3, r2
 8002908:	68ba      	ldr	r2, [r7, #8]
 800290a:	68b9      	ldr	r1, [r7, #8]
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	f000 f8e6 	bl	8002ade <HAL_SPI_TransmitReceive>
 8002912:	4603      	mov	r3, r0
 8002914:	e0df      	b.n	8002ad6 <HAL_SPI_Receive+0x204>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800291c:	2b01      	cmp	r3, #1
 800291e:	d101      	bne.n	8002924 <HAL_SPI_Receive+0x52>
 8002920:	2302      	movs	r3, #2
 8002922:	e0d8      	b.n	8002ad6 <HAL_SPI_Receive+0x204>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800292c:	f7fe fb8c 	bl	8001048 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b01      	cmp	r3, #1
 800293c:	d002      	beq.n	8002944 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800293e:	2302      	movs	r3, #2
 8002940:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002942:	e0bf      	b.n	8002ac4 <HAL_SPI_Receive+0x1f2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d002      	beq.n	8002950 <HAL_SPI_Receive+0x7e>
 800294a:	88fb      	ldrh	r3, [r7, #6]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d102      	bne.n	8002956 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002954:	e0b6      	b.n	8002ac4 <HAL_SPI_Receive+0x1f2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2204      	movs	r2, #4
 800295a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	68ba      	ldr	r2, [r7, #8]
 8002968:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	88fa      	ldrh	r2, [r7, #6]
 800296e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	88fa      	ldrh	r2, [r7, #6]
 8002974:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2200      	movs	r2, #0
 8002992:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800299c:	d107      	bne.n	80029ae <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	6812      	ldr	r2, [r2, #0]
 80029a6:	6812      	ldr	r2, [r2, #0]
 80029a8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80029ac:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b8:	2b40      	cmp	r3, #64	; 0x40
 80029ba:	d007      	beq.n	80029cc <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	6812      	ldr	r2, [r2, #0]
 80029c4:	6812      	ldr	r2, [r2, #0]
 80029c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029ca:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d161      	bne.n	8002a98 <HAL_SPI_Receive+0x1c6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80029d4:	e02d      	b.n	8002a32 <HAL_SPI_Receive+0x160>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d114      	bne.n	8002a0e <HAL_SPI_Receive+0x13c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e8:	68fa      	ldr	r2, [r7, #12]
 80029ea:	6812      	ldr	r2, [r2, #0]
 80029ec:	320c      	adds	r2, #12
 80029ee:	7812      	ldrb	r2, [r2, #0]
 80029f0:	b2d2      	uxtb	r2, r2
 80029f2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f8:	1c5a      	adds	r2, r3, #1
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	3b01      	subs	r3, #1
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a0c:	e011      	b.n	8002a32 <HAL_SPI_Receive+0x160>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a0e:	f7fe fb1b 	bl	8001048 <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	1ad2      	subs	r2, r2, r3
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d303      	bcc.n	8002a26 <HAL_SPI_Receive+0x154>
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a24:	d102      	bne.n	8002a2c <HAL_SPI_Receive+0x15a>
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d102      	bne.n	8002a32 <HAL_SPI_Receive+0x160>
        {
          errorcode = HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002a30:	e048      	b.n	8002ac4 <HAL_SPI_Receive+0x1f2>
    while (hspi->RxXferCount > 0U)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1cc      	bne.n	80029d6 <HAL_SPI_Receive+0x104>
 8002a3c:	e031      	b.n	8002aa2 <HAL_SPI_Receive+0x1d0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d113      	bne.n	8002a74 <HAL_SPI_Receive+0x1a2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	6812      	ldr	r2, [r2, #0]
 8002a54:	68d2      	ldr	r2, [r2, #12]
 8002a56:	b292      	uxth	r2, r2
 8002a58:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a5e:	1c9a      	adds	r2, r3, #2
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a72:	e011      	b.n	8002a98 <HAL_SPI_Receive+0x1c6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a74:	f7fe fae8 	bl	8001048 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad2      	subs	r2, r2, r3
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d303      	bcc.n	8002a8c <HAL_SPI_Receive+0x1ba>
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a8a:	d102      	bne.n	8002a92 <HAL_SPI_Receive+0x1c0>
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d102      	bne.n	8002a98 <HAL_SPI_Receive+0x1c6>
        {
          errorcode = HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002a96:	e015      	b.n	8002ac4 <HAL_SPI_Receive+0x1f2>
    while (hspi->RxXferCount > 0U)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d1cd      	bne.n	8002a3e <HAL_SPI_Receive+0x16c>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	6839      	ldr	r1, [r7, #0]
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f000 fc72 	bl	8003390 <SPI_EndRxTransaction>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d002      	beq.n	8002ab8 <HAL_SPI_Receive+0x1e6>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2220      	movs	r2, #32
 8002ab6:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <HAL_SPI_Receive+0x1f2>
  {
    errorcode = HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	75fb      	strb	r3, [r7, #23]
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002ad4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3718      	adds	r7, #24
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b08c      	sub	sp, #48	; 0x30
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	60f8      	str	r0, [r7, #12]
 8002ae6:	60b9      	str	r1, [r7, #8]
 8002ae8:	607a      	str	r2, [r7, #4]
 8002aea:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002aec:	2301      	movs	r3, #1
 8002aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002af0:	2300      	movs	r3, #0
 8002af2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d101      	bne.n	8002b04 <HAL_SPI_TransmitReceive+0x26>
 8002b00:	2302      	movs	r3, #2
 8002b02:	e188      	b.n	8002e16 <HAL_SPI_TransmitReceive+0x338>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b0c:	f7fe fa9c 	bl	8001048 <HAL_GetTick>
 8002b10:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002b22:	887b      	ldrh	r3, [r7, #2]
 8002b24:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002b26:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d00f      	beq.n	8002b4e <HAL_SPI_TransmitReceive+0x70>
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b34:	d107      	bne.n	8002b46 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d103      	bne.n	8002b46 <HAL_SPI_TransmitReceive+0x68>
 8002b3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b42:	2b04      	cmp	r3, #4
 8002b44:	d003      	beq.n	8002b4e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002b46:	2302      	movs	r3, #2
 8002b48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002b4c:	e159      	b.n	8002e02 <HAL_SPI_TransmitReceive+0x324>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d005      	beq.n	8002b60 <HAL_SPI_TransmitReceive+0x82>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d002      	beq.n	8002b60 <HAL_SPI_TransmitReceive+0x82>
 8002b5a:	887b      	ldrh	r3, [r7, #2]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d103      	bne.n	8002b68 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002b66:	e14c      	b.n	8002e02 <HAL_SPI_TransmitReceive+0x324>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	2b04      	cmp	r3, #4
 8002b72:	d003      	beq.n	8002b7c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2205      	movs	r2, #5
 8002b78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	887a      	ldrh	r2, [r7, #2]
 8002b8c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	887a      	ldrh	r2, [r7, #2]
 8002b92:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	68ba      	ldr	r2, [r7, #8]
 8002b98:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	887a      	ldrh	r2, [r7, #2]
 8002b9e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	887a      	ldrh	r2, [r7, #2]
 8002ba4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bbc:	2b40      	cmp	r3, #64	; 0x40
 8002bbe:	d007      	beq.n	8002bd0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	6812      	ldr	r2, [r2, #0]
 8002bc8:	6812      	ldr	r2, [r2, #0]
 8002bca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bd8:	d178      	bne.n	8002ccc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d002      	beq.n	8002be8 <HAL_SPI_TransmitReceive+0x10a>
 8002be2:	8b7b      	ldrh	r3, [r7, #26]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d166      	bne.n	8002cb6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002bf0:	8812      	ldrh	r2, [r2, #0]
 8002bf2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf8:	1c9a      	adds	r2, r3, #2
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	3b01      	subs	r3, #1
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c0c:	e053      	b.n	8002cb6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d11b      	bne.n	8002c54 <HAL_SPI_TransmitReceive+0x176>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d016      	beq.n	8002c54 <HAL_SPI_TransmitReceive+0x176>
 8002c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d113      	bne.n	8002c54 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002c34:	8812      	ldrh	r2, [r2, #0]
 8002c36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3c:	1c9a      	adds	r2, r3, #2
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	b29a      	uxth	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c50:	2300      	movs	r3, #0
 8002c52:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d119      	bne.n	8002c96 <HAL_SPI_TransmitReceive+0x1b8>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d014      	beq.n	8002c96 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	6812      	ldr	r2, [r2, #0]
 8002c74:	68d2      	ldr	r2, [r2, #12]
 8002c76:	b292      	uxth	r2, r2
 8002c78:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7e:	1c9a      	adds	r2, r3, #2
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c92:	2301      	movs	r3, #1
 8002c94:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002c96:	f7fe f9d7 	bl	8001048 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9e:	1ad2      	subs	r2, r2, r3
 8002ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d307      	bcc.n	8002cb6 <HAL_SPI_TransmitReceive+0x1d8>
 8002ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ca8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cac:	d003      	beq.n	8002cb6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002cb4:	e0a5      	b.n	8002e02 <HAL_SPI_TransmitReceive+0x324>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1a6      	bne.n	8002c0e <HAL_SPI_TransmitReceive+0x130>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1a1      	bne.n	8002c0e <HAL_SPI_TransmitReceive+0x130>
 8002cca:	e07c      	b.n	8002dc6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d002      	beq.n	8002cda <HAL_SPI_TransmitReceive+0x1fc>
 8002cd4:	8b7b      	ldrh	r3, [r7, #26]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d16b      	bne.n	8002db2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	330c      	adds	r3, #12
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002ce4:	7812      	ldrb	r2, [r2, #0]
 8002ce6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cec:	1c5a      	adds	r2, r3, #1
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d00:	e057      	b.n	8002db2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d11c      	bne.n	8002d4a <HAL_SPI_TransmitReceive+0x26c>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d017      	beq.n	8002d4a <HAL_SPI_TransmitReceive+0x26c>
 8002d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d114      	bne.n	8002d4a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	330c      	adds	r3, #12
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002d2a:	7812      	ldrb	r2, [r2, #0]
 8002d2c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	1c5a      	adds	r2, r3, #1
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d46:	2300      	movs	r3, #0
 8002d48:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f003 0301 	and.w	r3, r3, #1
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d119      	bne.n	8002d8c <HAL_SPI_TransmitReceive+0x2ae>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d014      	beq.n	8002d8c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d66:	68fa      	ldr	r2, [r7, #12]
 8002d68:	6812      	ldr	r2, [r2, #0]
 8002d6a:	68d2      	ldr	r2, [r2, #12]
 8002d6c:	b2d2      	uxtb	r2, r2
 8002d6e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d74:	1c5a      	adds	r2, r3, #1
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	3b01      	subs	r3, #1
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002d8c:	f7fe f95c 	bl	8001048 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d94:	1ad2      	subs	r2, r2, r3
 8002d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d303      	bcc.n	8002da4 <HAL_SPI_TransmitReceive+0x2c6>
 8002d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002da2:	d102      	bne.n	8002daa <HAL_SPI_TransmitReceive+0x2cc>
 8002da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d103      	bne.n	8002db2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002db0:	e027      	b.n	8002e02 <HAL_SPI_TransmitReceive+0x324>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1a2      	bne.n	8002d02 <HAL_SPI_TransmitReceive+0x224>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d19d      	bne.n	8002d02 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002dc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dc8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002dca:	68f8      	ldr	r0, [r7, #12]
 8002dcc:	f000 fb46 	bl	800345c <SPI_EndRxTxTransaction>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d006      	beq.n	8002de4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2220      	movs	r2, #32
 8002de0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002de2:	e00e      	b.n	8002e02 <HAL_SPI_TransmitReceive+0x324>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d10a      	bne.n	8002e02 <HAL_SPI_TransmitReceive+0x324>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002dec:	2300      	movs	r3, #0
 8002dee:	617b      	str	r3, [r7, #20]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	617b      	str	r3, [r7, #20]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	617b      	str	r3, [r7, #20]
 8002e00:	697b      	ldr	r3, [r7, #20]
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3730      	adds	r7, #48	; 0x30
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
	...

08002e20 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d101      	bne.n	8002e40 <HAL_SPI_Transmit_DMA+0x20>
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	e093      	b.n	8002f68 <HAL_SPI_Transmit_DMA+0x148>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d002      	beq.n	8002e5a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8002e54:	2302      	movs	r3, #2
 8002e56:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002e58:	e081      	b.n	8002f5e <HAL_SPI_Transmit_DMA+0x13e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d002      	beq.n	8002e66 <HAL_SPI_Transmit_DMA+0x46>
 8002e60:	88fb      	ldrh	r3, [r7, #6]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d102      	bne.n	8002e6c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002e6a:	e078      	b.n	8002f5e <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2203      	movs	r2, #3
 8002e70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	68ba      	ldr	r2, [r7, #8]
 8002e7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	88fa      	ldrh	r2, [r7, #6]
 8002e84:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	88fa      	ldrh	r2, [r7, #6]
 8002e8a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eb2:	d107      	bne.n	8002ec4 <HAL_SPI_Transmit_DMA+0xa4>
  {
    SPI_1LINE_TX(hspi);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	6812      	ldr	r2, [r2, #0]
 8002ebc:	6812      	ldr	r2, [r2, #0]
 8002ebe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ec2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ec8:	4a29      	ldr	r2, [pc, #164]	; (8002f70 <HAL_SPI_Transmit_DMA+0x150>)
 8002eca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ed0:	4a28      	ldr	r2, [pc, #160]	; (8002f74 <HAL_SPI_Transmit_DMA+0x154>)
 8002ed2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ed8:	4a27      	ldr	r2, [pc, #156]	; (8002f78 <HAL_SPI_Transmit_DMA+0x158>)
 8002eda:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eec:	4619      	mov	r1, r3
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	330c      	adds	r3, #12
 8002ef4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002efa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002efc:	f7fe fa60 	bl	80013c0 <HAL_DMA_Start_IT>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00c      	beq.n	8002f20 <HAL_SPI_Transmit_DMA+0x100>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f0a:	f043 0210 	orr.w	r2, r3, #16
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8002f1e:	e01e      	b.n	8002f5e <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f2a:	2b40      	cmp	r3, #64	; 0x40
 8002f2c:	d007      	beq.n	8002f3e <HAL_SPI_Transmit_DMA+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	6812      	ldr	r2, [r2, #0]
 8002f36:	6812      	ldr	r2, [r2, #0]
 8002f38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f3c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	6812      	ldr	r2, [r2, #0]
 8002f46:	6852      	ldr	r2, [r2, #4]
 8002f48:	f042 0220 	orr.w	r2, r2, #32
 8002f4c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	6812      	ldr	r2, [r2, #0]
 8002f56:	6852      	ldr	r2, [r2, #4]
 8002f58:	f042 0202 	orr.w	r2, r2, #2
 8002f5c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002f66:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3718      	adds	r7, #24
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	08003239 	.word	0x08003239
 8002f74:	08003191 	.word	0x08003191
 8002f78:	08003255 	.word	0x08003255

08002f7c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b088      	sub	sp, #32
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d10e      	bne.n	8002fbc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d009      	beq.n	8002fbc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d004      	beq.n	8002fbc <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	4798      	blx	r3
    return;
 8002fba:	e0cf      	b.n	800315c <HAL_SPI_IRQHandler+0x1e0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d009      	beq.n	8002fda <HAL_SPI_IRQHandler+0x5e>
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d004      	beq.n	8002fda <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	4798      	blx	r3
    return;
 8002fd8:	e0c0      	b.n	800315c <HAL_SPI_IRQHandler+0x1e0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	f003 0320 	and.w	r3, r3, #32
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d10a      	bne.n	8002ffa <HAL_SPI_IRQHandler+0x7e>
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d105      	bne.n	8002ffa <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f000 80b1 	beq.w	800315c <HAL_SPI_IRQHandler+0x1e0>
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	f003 0320 	and.w	r3, r3, #32
 8003000:	2b00      	cmp	r3, #0
 8003002:	f000 80ab 	beq.w	800315c <HAL_SPI_IRQHandler+0x1e0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800300c:	2b00      	cmp	r3, #0
 800300e:	d023      	beq.n	8003058 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003016:	b2db      	uxtb	r3, r3
 8003018:	2b03      	cmp	r3, #3
 800301a:	d011      	beq.n	8003040 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003020:	f043 0204 	orr.w	r2, r3, #4
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003028:	2300      	movs	r3, #0
 800302a:	617b      	str	r3, [r7, #20]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	617b      	str	r3, [r7, #20]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	617b      	str	r3, [r7, #20]
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	e00b      	b.n	8003058 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003040:	2300      	movs	r3, #0
 8003042:	613b      	str	r3, [r7, #16]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	613b      	str	r3, [r7, #16]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	613b      	str	r3, [r7, #16]
 8003054:	693b      	ldr	r3, [r7, #16]
        return;
 8003056:	e081      	b.n	800315c <HAL_SPI_IRQHandler+0x1e0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	f003 0320 	and.w	r3, r3, #32
 800305e:	2b00      	cmp	r3, #0
 8003060:	d014      	beq.n	800308c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003066:	f043 0201 	orr.w	r2, r3, #1
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800306e:	2300      	movs	r3, #0
 8003070:	60fb      	str	r3, [r7, #12]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	60fb      	str	r3, [r7, #12]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	6812      	ldr	r2, [r2, #0]
 8003082:	6812      	ldr	r2, [r2, #0]
 8003084:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003088:	601a      	str	r2, [r3, #0]
 800308a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00c      	beq.n	80030b0 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800309a:	f043 0208 	orr.w	r2, r3, #8
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80030a2:	2300      	movs	r3, #0
 80030a4:	60bb      	str	r3, [r7, #8]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	60bb      	str	r3, [r7, #8]
 80030ae:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d050      	beq.n	800315a <HAL_SPI_IRQHandler+0x1de>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	6812      	ldr	r2, [r2, #0]
 80030c0:	6852      	ldr	r2, [r2, #4]
 80030c2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80030c6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d104      	bne.n	80030e4 <HAL_SPI_IRQHandler+0x168>
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	f003 0301 	and.w	r3, r3, #1
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d034      	beq.n	800314e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	6812      	ldr	r2, [r2, #0]
 80030ec:	6852      	ldr	r2, [r2, #4]
 80030ee:	f022 0203 	bic.w	r2, r2, #3
 80030f2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d011      	beq.n	8003120 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003100:	4a18      	ldr	r2, [pc, #96]	; (8003164 <HAL_SPI_IRQHandler+0x1e8>)
 8003102:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003108:	4618      	mov	r0, r3
 800310a:	f7fe f9b1 	bl	8001470 <HAL_DMA_Abort_IT>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d005      	beq.n	8003120 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003118:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003124:	2b00      	cmp	r3, #0
 8003126:	d016      	beq.n	8003156 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800312c:	4a0d      	ldr	r2, [pc, #52]	; (8003164 <HAL_SPI_IRQHandler+0x1e8>)
 800312e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003134:	4618      	mov	r0, r3
 8003136:	f7fe f99b 	bl	8001470 <HAL_DMA_Abort_IT>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00a      	beq.n	8003156 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003144:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800314c:	e003      	b.n	8003156 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 f814 	bl	800317c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003154:	e000      	b.n	8003158 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8003156:	bf00      	nop
    return;
 8003158:	bf00      	nop
 800315a:	bf00      	nop
  }
}
 800315c:	3720      	adds	r7, #32
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	08003295 	.word	0x08003295

08003168 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003170:	bf00      	nop
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800319c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800319e:	f7fd ff53 	bl	8001048 <HAL_GetTick>
 80031a2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031b2:	d03b      	beq.n	800322c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	697a      	ldr	r2, [r7, #20]
 80031ba:	6812      	ldr	r2, [r2, #0]
 80031bc:	6852      	ldr	r2, [r2, #4]
 80031be:	f022 0220 	bic.w	r2, r2, #32
 80031c2:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	6812      	ldr	r2, [r2, #0]
 80031cc:	6852      	ldr	r2, [r2, #4]
 80031ce:	f022 0202 	bic.w	r2, r2, #2
 80031d2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	2164      	movs	r1, #100	; 0x64
 80031d8:	6978      	ldr	r0, [r7, #20]
 80031da:	f000 f93f 	bl	800345c <SPI_EndRxTxTransaction>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d005      	beq.n	80031f0 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e8:	f043 0220 	orr.w	r2, r3, #32
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d10a      	bne.n	800320e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80031f8:	2300      	movs	r3, #0
 80031fa:	60fb      	str	r3, [r7, #12]
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	60fb      	str	r3, [r7, #12]
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	60fb      	str	r3, [r7, #12]
 800320c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	2200      	movs	r2, #0
 8003212:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003220:	2b00      	cmp	r3, #0
 8003222:	d003      	beq.n	800322c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003224:	6978      	ldr	r0, [r7, #20]
 8003226:	f7ff ffa9 	bl	800317c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800322a:	e002      	b.n	8003232 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800322c:	6978      	ldr	r0, [r7, #20]
 800322e:	f004 fb9d 	bl	800796c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003232:	3718      	adds	r7, #24
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003244:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003246:	68f8      	ldr	r0, [r7, #12]
 8003248:	f7ff ff8e 	bl	8003168 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800324c:	bf00      	nop
 800324e:	3710      	adds	r7, #16
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003260:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	6812      	ldr	r2, [r2, #0]
 800326a:	6852      	ldr	r2, [r2, #4]
 800326c:	f022 0203 	bic.w	r2, r2, #3
 8003270:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003276:	f043 0210 	orr.w	r2, r3, #16
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2201      	movs	r2, #1
 8003282:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	f7ff ff78 	bl	800317c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800328c:	bf00      	nop
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f7ff ff64 	bl	800317c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80032b4:	bf00      	nop
 80032b6:	3710      	adds	r7, #16
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	603b      	str	r3, [r7, #0]
 80032c8:	4613      	mov	r3, r2
 80032ca:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032cc:	e04c      	b.n	8003368 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032d4:	d048      	beq.n	8003368 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80032d6:	f7fd feb7 	bl	8001048 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	1ad2      	subs	r2, r2, r3
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d202      	bcs.n	80032ec <SPI_WaitFlagStateUntilTimeout+0x30>
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d13d      	bne.n	8003368 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	6812      	ldr	r2, [r2, #0]
 80032f4:	6852      	ldr	r2, [r2, #4]
 80032f6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80032fa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003304:	d111      	bne.n	800332a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800330e:	d004      	beq.n	800331a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003318:	d107      	bne.n	800332a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	6812      	ldr	r2, [r2, #0]
 8003322:	6812      	ldr	r2, [r2, #0]
 8003324:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003328:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003332:	d10f      	bne.n	8003354 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	6812      	ldr	r2, [r2, #0]
 800333c:	6812      	ldr	r2, [r2, #0]
 800333e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003342:	601a      	str	r2, [r3, #0]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	6812      	ldr	r2, [r2, #0]
 800334c:	6812      	ldr	r2, [r2, #0]
 800334e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003352:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e00f      	b.n	8003388 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	689a      	ldr	r2, [r3, #8]
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	401a      	ands	r2, r3
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	429a      	cmp	r2, r3
 8003376:	bf0c      	ite	eq
 8003378:	2301      	moveq	r3, #1
 800337a:	2300      	movne	r3, #0
 800337c:	b2db      	uxtb	r3, r3
 800337e:	461a      	mov	r2, r3
 8003380:	79fb      	ldrb	r3, [r7, #7]
 8003382:	429a      	cmp	r2, r3
 8003384:	d1a3      	bne.n	80032ce <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	3710      	adds	r7, #16
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b086      	sub	sp, #24
 8003394:	af02      	add	r7, sp, #8
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033a4:	d111      	bne.n	80033ca <SPI_EndRxTransaction+0x3a>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033ae:	d004      	beq.n	80033ba <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033b8:	d107      	bne.n	80033ca <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	6812      	ldr	r2, [r2, #0]
 80033c2:	6812      	ldr	r2, [r2, #0]
 80033c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033c8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033d2:	d12a      	bne.n	800342a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033dc:	d012      	beq.n	8003404 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	9300      	str	r3, [sp, #0]
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	2200      	movs	r2, #0
 80033e6:	2180      	movs	r1, #128	; 0x80
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f7ff ff67 	bl	80032bc <SPI_WaitFlagStateUntilTimeout>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d02d      	beq.n	8003450 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f8:	f043 0220 	orr.w	r2, r3, #32
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e026      	b.n	8003452 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	9300      	str	r3, [sp, #0]
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	2200      	movs	r2, #0
 800340c:	2101      	movs	r1, #1
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	f7ff ff54 	bl	80032bc <SPI_WaitFlagStateUntilTimeout>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d01a      	beq.n	8003450 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800341e:	f043 0220 	orr.w	r2, r3, #32
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e013      	b.n	8003452 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	9300      	str	r3, [sp, #0]
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	2200      	movs	r2, #0
 8003432:	2101      	movs	r1, #1
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	f7ff ff41 	bl	80032bc <SPI_WaitFlagStateUntilTimeout>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d007      	beq.n	8003450 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003444:	f043 0220 	orr.w	r2, r3, #32
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e000      	b.n	8003452 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
	...

0800345c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b088      	sub	sp, #32
 8003460:	af02      	add	r7, sp, #8
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003468:	4b1b      	ldr	r3, [pc, #108]	; (80034d8 <SPI_EndRxTxTransaction+0x7c>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a1b      	ldr	r2, [pc, #108]	; (80034dc <SPI_EndRxTxTransaction+0x80>)
 800346e:	fba2 2303 	umull	r2, r3, r2, r3
 8003472:	0d5b      	lsrs	r3, r3, #21
 8003474:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003478:	fb02 f303 	mul.w	r3, r2, r3
 800347c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003486:	d112      	bne.n	80034ae <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	9300      	str	r3, [sp, #0]
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	2200      	movs	r2, #0
 8003490:	2180      	movs	r1, #128	; 0x80
 8003492:	68f8      	ldr	r0, [r7, #12]
 8003494:	f7ff ff12 	bl	80032bc <SPI_WaitFlagStateUntilTimeout>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d016      	beq.n	80034cc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a2:	f043 0220 	orr.w	r2, r3, #32
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e00f      	b.n	80034ce <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d00a      	beq.n	80034ca <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	3b01      	subs	r3, #1
 80034b8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c4:	2b80      	cmp	r3, #128	; 0x80
 80034c6:	d0f2      	beq.n	80034ae <SPI_EndRxTxTransaction+0x52>
 80034c8:	e000      	b.n	80034cc <SPI_EndRxTxTransaction+0x70>
        break;
 80034ca:	bf00      	nop
  }

  return HAL_OK;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3718      	adds	r7, #24
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	2000001c 	.word	0x2000001c
 80034dc:	165e9f81 	.word	0x165e9f81

080034e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e01d      	b.n	800352e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d106      	bne.n	800350c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f815 	bl	8003536 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2202      	movs	r2, #2
 8003510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	3304      	adds	r3, #4
 800351c:	4619      	mov	r1, r3
 800351e:	4610      	mov	r0, r2
 8003520:	f000 f968 	bl	80037f4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003536:	b480      	push	{r7}
 8003538:	b083      	sub	sp, #12
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800353e:	bf00      	nop
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr

0800354a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800354a:	b480      	push	{r7}
 800354c:	b085      	sub	sp, #20
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	6812      	ldr	r2, [r2, #0]
 800355a:	68d2      	ldr	r2, [r2, #12]
 800355c:	f042 0201 	orr.w	r2, r2, #1
 8003560:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f003 0307 	and.w	r3, r3, #7
 800356c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2b06      	cmp	r3, #6
 8003572:	d007      	beq.n	8003584 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	6812      	ldr	r2, [r2, #0]
 800357c:	6812      	ldr	r2, [r2, #0]
 800357e:	f042 0201 	orr.w	r2, r2, #1
 8003582:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3714      	adds	r7, #20
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr

08003592 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	b082      	sub	sp, #8
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d122      	bne.n	80035ee <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d11b      	bne.n	80035ee <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f06f 0202 	mvn.w	r2, #2
 80035be:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	f003 0303 	and.w	r3, r3, #3
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d003      	beq.n	80035dc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 f8ee 	bl	80037b6 <HAL_TIM_IC_CaptureCallback>
 80035da:	e005      	b.n	80035e8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 f8e0 	bl	80037a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 f8f1 	bl	80037ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	2b04      	cmp	r3, #4
 80035fa:	d122      	bne.n	8003642 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	f003 0304 	and.w	r3, r3, #4
 8003606:	2b04      	cmp	r3, #4
 8003608:	d11b      	bne.n	8003642 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f06f 0204 	mvn.w	r2, #4
 8003612:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2202      	movs	r2, #2
 8003618:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	699b      	ldr	r3, [r3, #24]
 8003620:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003624:	2b00      	cmp	r3, #0
 8003626:	d003      	beq.n	8003630 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f000 f8c4 	bl	80037b6 <HAL_TIM_IC_CaptureCallback>
 800362e:	e005      	b.n	800363c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 f8b6 	bl	80037a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 f8c7 	bl	80037ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	f003 0308 	and.w	r3, r3, #8
 800364c:	2b08      	cmp	r3, #8
 800364e:	d122      	bne.n	8003696 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	f003 0308 	and.w	r3, r3, #8
 800365a:	2b08      	cmp	r3, #8
 800365c:	d11b      	bne.n	8003696 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f06f 0208 	mvn.w	r2, #8
 8003666:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2204      	movs	r2, #4
 800366c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	69db      	ldr	r3, [r3, #28]
 8003674:	f003 0303 	and.w	r3, r3, #3
 8003678:	2b00      	cmp	r3, #0
 800367a:	d003      	beq.n	8003684 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 f89a 	bl	80037b6 <HAL_TIM_IC_CaptureCallback>
 8003682:	e005      	b.n	8003690 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f000 f88c 	bl	80037a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 f89d 	bl	80037ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	f003 0310 	and.w	r3, r3, #16
 80036a0:	2b10      	cmp	r3, #16
 80036a2:	d122      	bne.n	80036ea <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	f003 0310 	and.w	r3, r3, #16
 80036ae:	2b10      	cmp	r3, #16
 80036b0:	d11b      	bne.n	80036ea <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f06f 0210 	mvn.w	r2, #16
 80036ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2208      	movs	r2, #8
 80036c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	69db      	ldr	r3, [r3, #28]
 80036c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d003      	beq.n	80036d8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 f870 	bl	80037b6 <HAL_TIM_IC_CaptureCallback>
 80036d6:	e005      	b.n	80036e4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 f862 	bl	80037a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f873 	bl	80037ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	f003 0301 	and.w	r3, r3, #1
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d10e      	bne.n	8003716 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	2b01      	cmp	r3, #1
 8003704:	d107      	bne.n	8003716 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f06f 0201 	mvn.w	r2, #1
 800370e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f004 f945 	bl	80079a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003720:	2b80      	cmp	r3, #128	; 0x80
 8003722:	d10e      	bne.n	8003742 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800372e:	2b80      	cmp	r3, #128	; 0x80
 8003730:	d107      	bne.n	8003742 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800373a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 f903 	bl	8003948 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800374c:	2b40      	cmp	r3, #64	; 0x40
 800374e:	d10e      	bne.n	800376e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800375a:	2b40      	cmp	r3, #64	; 0x40
 800375c:	d107      	bne.n	800376e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003766:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f000 f838 	bl	80037de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	f003 0320 	and.w	r3, r3, #32
 8003778:	2b20      	cmp	r3, #32
 800377a:	d10e      	bne.n	800379a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	f003 0320 	and.w	r3, r3, #32
 8003786:	2b20      	cmp	r3, #32
 8003788:	d107      	bne.n	800379a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f06f 0220 	mvn.w	r2, #32
 8003792:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 f8cd 	bl	8003934 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800379a:	bf00      	nop
 800379c:	3708      	adds	r7, #8
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037a2:	b480      	push	{r7}
 80037a4:	b083      	sub	sp, #12
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037aa:	bf00      	nop
 80037ac:	370c      	adds	r7, #12
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr

080037b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037b6:	b480      	push	{r7}
 80037b8:	b083      	sub	sp, #12
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037be:	bf00      	nop
 80037c0:	370c      	adds	r7, #12
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr

080037ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037ca:	b480      	push	{r7}
 80037cc:	b083      	sub	sp, #12
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037d2:	bf00      	nop
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr

080037de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037de:	b480      	push	{r7}
 80037e0:	b083      	sub	sp, #12
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037e6:	bf00      	nop
 80037e8:	370c      	adds	r7, #12
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
	...

080037f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a40      	ldr	r2, [pc, #256]	; (8003908 <TIM_Base_SetConfig+0x114>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d013      	beq.n	8003834 <TIM_Base_SetConfig+0x40>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003812:	d00f      	beq.n	8003834 <TIM_Base_SetConfig+0x40>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a3d      	ldr	r2, [pc, #244]	; (800390c <TIM_Base_SetConfig+0x118>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d00b      	beq.n	8003834 <TIM_Base_SetConfig+0x40>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a3c      	ldr	r2, [pc, #240]	; (8003910 <TIM_Base_SetConfig+0x11c>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d007      	beq.n	8003834 <TIM_Base_SetConfig+0x40>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a3b      	ldr	r2, [pc, #236]	; (8003914 <TIM_Base_SetConfig+0x120>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d003      	beq.n	8003834 <TIM_Base_SetConfig+0x40>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a3a      	ldr	r2, [pc, #232]	; (8003918 <TIM_Base_SetConfig+0x124>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d108      	bne.n	8003846 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800383a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	4313      	orrs	r3, r2
 8003844:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a2f      	ldr	r2, [pc, #188]	; (8003908 <TIM_Base_SetConfig+0x114>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d02b      	beq.n	80038a6 <TIM_Base_SetConfig+0xb2>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003854:	d027      	beq.n	80038a6 <TIM_Base_SetConfig+0xb2>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a2c      	ldr	r2, [pc, #176]	; (800390c <TIM_Base_SetConfig+0x118>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d023      	beq.n	80038a6 <TIM_Base_SetConfig+0xb2>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a2b      	ldr	r2, [pc, #172]	; (8003910 <TIM_Base_SetConfig+0x11c>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d01f      	beq.n	80038a6 <TIM_Base_SetConfig+0xb2>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a2a      	ldr	r2, [pc, #168]	; (8003914 <TIM_Base_SetConfig+0x120>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d01b      	beq.n	80038a6 <TIM_Base_SetConfig+0xb2>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a29      	ldr	r2, [pc, #164]	; (8003918 <TIM_Base_SetConfig+0x124>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d017      	beq.n	80038a6 <TIM_Base_SetConfig+0xb2>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a28      	ldr	r2, [pc, #160]	; (800391c <TIM_Base_SetConfig+0x128>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d013      	beq.n	80038a6 <TIM_Base_SetConfig+0xb2>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a27      	ldr	r2, [pc, #156]	; (8003920 <TIM_Base_SetConfig+0x12c>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d00f      	beq.n	80038a6 <TIM_Base_SetConfig+0xb2>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a26      	ldr	r2, [pc, #152]	; (8003924 <TIM_Base_SetConfig+0x130>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d00b      	beq.n	80038a6 <TIM_Base_SetConfig+0xb2>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a25      	ldr	r2, [pc, #148]	; (8003928 <TIM_Base_SetConfig+0x134>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d007      	beq.n	80038a6 <TIM_Base_SetConfig+0xb2>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a24      	ldr	r2, [pc, #144]	; (800392c <TIM_Base_SetConfig+0x138>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d003      	beq.n	80038a6 <TIM_Base_SetConfig+0xb2>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a23      	ldr	r2, [pc, #140]	; (8003930 <TIM_Base_SetConfig+0x13c>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d108      	bne.n	80038b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	689a      	ldr	r2, [r3, #8]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a0a      	ldr	r2, [pc, #40]	; (8003908 <TIM_Base_SetConfig+0x114>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d003      	beq.n	80038ec <TIM_Base_SetConfig+0xf8>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a0c      	ldr	r2, [pc, #48]	; (8003918 <TIM_Base_SetConfig+0x124>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d103      	bne.n	80038f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	691a      	ldr	r2, [r3, #16]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	615a      	str	r2, [r3, #20]
}
 80038fa:	bf00      	nop
 80038fc:	3714      	adds	r7, #20
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	40010000 	.word	0x40010000
 800390c:	40000400 	.word	0x40000400
 8003910:	40000800 	.word	0x40000800
 8003914:	40000c00 	.word	0x40000c00
 8003918:	40010400 	.word	0x40010400
 800391c:	40014000 	.word	0x40014000
 8003920:	40014400 	.word	0x40014400
 8003924:	40014800 	.word	0x40014800
 8003928:	40001800 	.word	0x40001800
 800392c:	40001c00 	.word	0x40001c00
 8003930:	40002000 	.word	0x40002000

08003934 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 800395c:	b580      	push	{r7, lr}
 800395e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8003960:	2200      	movs	r2, #0
 8003962:	2110      	movs	r1, #16
 8003964:	4802      	ldr	r0, [pc, #8]	; (8003970 <ST7735_Select+0x14>)
 8003966:	f7fe f9a7 	bl	8001cb8 <HAL_GPIO_WritePin>
}
 800396a:	bf00      	nop
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	40020000 	.word	0x40020000

08003974 <ST7735_Unselect>:

void ST7735_Unselect() {
 8003974:	b580      	push	{r7, lr}
 8003976:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8003978:	2201      	movs	r2, #1
 800397a:	2110      	movs	r1, #16
 800397c:	4802      	ldr	r0, [pc, #8]	; (8003988 <ST7735_Unselect+0x14>)
 800397e:	f7fe f99b 	bl	8001cb8 <HAL_GPIO_WritePin>
}
 8003982:	bf00      	nop
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	40020000 	.word	0x40020000

0800398c <ST7735_Reset>:

static void ST7735_Reset() {
 800398c:	b580      	push	{r7, lr}
 800398e:	af00      	add	r7, sp, #0
	ST7735_Select();
 8003990:	f7ff ffe4 	bl	800395c <ST7735_Select>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8003994:	2200      	movs	r2, #0
 8003996:	2102      	movs	r1, #2
 8003998:	4807      	ldr	r0, [pc, #28]	; (80039b8 <ST7735_Reset+0x2c>)
 800399a:	f7fe f98d 	bl	8001cb8 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 800399e:	2005      	movs	r0, #5
 80039a0:	f7fd fb5e 	bl	8001060 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 80039a4:	2201      	movs	r2, #1
 80039a6:	2102      	movs	r1, #2
 80039a8:	4803      	ldr	r0, [pc, #12]	; (80039b8 <ST7735_Reset+0x2c>)
 80039aa:	f7fe f985 	bl	8001cb8 <HAL_GPIO_WritePin>
    ST7735_Unselect();
 80039ae:	f7ff ffe1 	bl	8003974 <ST7735_Unselect>
}
 80039b2:	bf00      	nop
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	40020c00 	.word	0x40020c00

080039bc <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	4603      	mov	r3, r0
 80039c4:	71fb      	strb	r3, [r7, #7]
	//Copy the command to the protected screen buffer;
	xSemaphoreTake(sDisplaySPI, portMAX_DELAY);
 80039c6:	4b0d      	ldr	r3, [pc, #52]	; (80039fc <ST7735_WriteCommand+0x40>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80039ce:	4618      	mov	r0, r3
 80039d0:	f001 fe4e 	bl	8005670 <xQueueSemaphoreTake>
	cmd_buf = cmd;
 80039d4:	4a0a      	ldr	r2, [pc, #40]	; (8003a00 <ST7735_WriteCommand+0x44>)
 80039d6:	79fb      	ldrb	r3, [r7, #7]
 80039d8:	7013      	strb	r3, [r2, #0]
	ST7735_Select();
 80039da:	f7ff ffbf 	bl	800395c <ST7735_Select>
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 80039de:	2200      	movs	r2, #0
 80039e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80039e4:	4807      	ldr	r0, [pc, #28]	; (8003a04 <ST7735_WriteCommand+0x48>)
 80039e6:	f7fe f967 	bl	8001cb8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, &cmd_buf, sizeof(cmd));
 80039ea:	2201      	movs	r2, #1
 80039ec:	4904      	ldr	r1, [pc, #16]	; (8003a00 <ST7735_WriteCommand+0x44>)
 80039ee:	4806      	ldr	r0, [pc, #24]	; (8003a08 <ST7735_WriteCommand+0x4c>)
 80039f0:	f7ff fa16 	bl	8002e20 <HAL_SPI_Transmit_DMA>
    //while (HAL_SPI_GetState(&hspi3) == HAL_SPI_STATE_BUSY_TX);
}
 80039f4:	bf00      	nop
 80039f6:	3708      	adds	r7, #8
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	2000f100 	.word	0x2000f100
 8003a00:	2000a6b0 	.word	0x2000a6b0
 8003a04:	40020800 	.word	0x40020800
 8003a08:	2000f044 	.word	0x2000f044

08003a0c <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
	//Copy the data to the protected screen buffer;
	xSemaphoreTake(sDisplaySPI, portMAX_DELAY);
 8003a16:	4b16      	ldr	r3, [pc, #88]	; (8003a70 <ST7735_WriteData+0x64>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f001 fe26 	bl	8005670 <xQueueSemaphoreTake>
	for(int i = 0; i < buff_size; i++) {
 8003a24:	2300      	movs	r3, #0
 8003a26:	60fb      	str	r3, [r7, #12]
 8003a28:	e00a      	b.n	8003a40 <ST7735_WriteData+0x34>
		((uint8_t *)data_buf)[i] = buff[i];
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	4a11      	ldr	r2, [pc, #68]	; (8003a74 <ST7735_WriteData+0x68>)
 8003a2e:	4413      	add	r3, r2
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	6879      	ldr	r1, [r7, #4]
 8003a34:	440a      	add	r2, r1
 8003a36:	7812      	ldrb	r2, [r2, #0]
 8003a38:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < buff_size; i++) {
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	60fb      	str	r3, [r7, #12]
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d3f0      	bcc.n	8003a2a <ST7735_WriteData+0x1e>
	}
	ST7735_Select();
 8003a48:	f7ff ff88 	bl	800395c <ST7735_Select>
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a52:	4809      	ldr	r0, [pc, #36]	; (8003a78 <ST7735_WriteData+0x6c>)
 8003a54:	f7fe f930 	bl	8001cb8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, (uint8_t *)data_buf, buff_size);
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	4905      	ldr	r1, [pc, #20]	; (8003a74 <ST7735_WriteData+0x68>)
 8003a60:	4806      	ldr	r0, [pc, #24]	; (8003a7c <ST7735_WriteData+0x70>)
 8003a62:	f7ff f9dd 	bl	8002e20 <HAL_SPI_Transmit_DMA>
    //while (HAL_SPI_GetState(&hspi3) == HAL_SPI_STATE_BUSY_TX);
}
 8003a66:	bf00      	nop
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	2000f100 	.word	0x2000f100
 8003a74:	200006b0 	.word	0x200006b0
 8003a78:	40020800 	.word	0x40020800
 8003a7c:	2000f044 	.word	0x2000f044

08003a80 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	1c5a      	adds	r2, r3, #1
 8003a8c:	607a      	str	r2, [r7, #4]
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8003a92:	e034      	b.n	8003afe <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	1c5a      	adds	r2, r3, #1
 8003a98:	607a      	str	r2, [r7, #4]
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8003a9e:	7afb      	ldrb	r3, [r7, #11]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7ff ff8b 	bl	80039bc <ST7735_WriteCommand>

        numArgs = *addr++;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	1c5a      	adds	r2, r3, #1
 8003aaa:	607a      	str	r2, [r7, #4]
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8003ab0:	7abb      	ldrb	r3, [r7, #10]
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ab8:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8003aba:	7abb      	ldrb	r3, [r7, #10]
 8003abc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ac0:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8003ac2:	7abb      	ldrb	r3, [r7, #10]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d008      	beq.n	8003ada <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8003ac8:	7abb      	ldrb	r3, [r7, #10]
 8003aca:	4619      	mov	r1, r3
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f7ff ff9d 	bl	8003a0c <ST7735_WriteData>
            addr += numArgs;
 8003ad2:	7abb      	ldrb	r3, [r7, #10]
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8003ada:	89bb      	ldrh	r3, [r7, #12]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00e      	beq.n	8003afe <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	1c5a      	adds	r2, r3, #1
 8003ae4:	607a      	str	r2, [r7, #4]
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8003aea:	89bb      	ldrh	r3, [r7, #12]
 8003aec:	2bff      	cmp	r3, #255	; 0xff
 8003aee:	d102      	bne.n	8003af6 <ST7735_ExecuteCommandList+0x76>
 8003af0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003af4:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8003af6:	89bb      	ldrh	r3, [r7, #12]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7fd fab1 	bl	8001060 <HAL_Delay>
    while(numCommands--) {
 8003afe:	7bfb      	ldrb	r3, [r7, #15]
 8003b00:	1e5a      	subs	r2, r3, #1
 8003b02:	73fa      	strb	r2, [r7, #15]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1c5      	bne.n	8003a94 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8003b08:	bf00      	nop
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8003b10:	b590      	push	{r4, r7, lr}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	4604      	mov	r4, r0
 8003b18:	4608      	mov	r0, r1
 8003b1a:	4611      	mov	r1, r2
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	4623      	mov	r3, r4
 8003b20:	71fb      	strb	r3, [r7, #7]
 8003b22:	4603      	mov	r3, r0
 8003b24:	71bb      	strb	r3, [r7, #6]
 8003b26:	460b      	mov	r3, r1
 8003b28:	717b      	strb	r3, [r7, #5]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8003b2e:	202a      	movs	r0, #42	; 0x2a
 8003b30:	f7ff ff44 	bl	80039bc <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8003b34:	2300      	movs	r3, #0
 8003b36:	733b      	strb	r3, [r7, #12]
 8003b38:	79fb      	ldrb	r3, [r7, #7]
 8003b3a:	737b      	strb	r3, [r7, #13]
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	73bb      	strb	r3, [r7, #14]
 8003b40:	797b      	ldrb	r3, [r7, #5]
 8003b42:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8003b44:	f107 030c 	add.w	r3, r7, #12
 8003b48:	2104      	movs	r1, #4
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7ff ff5e 	bl	8003a0c <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8003b50:	202b      	movs	r0, #43	; 0x2b
 8003b52:	f7ff ff33 	bl	80039bc <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8003b56:	79bb      	ldrb	r3, [r7, #6]
 8003b58:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8003b5a:	793b      	ldrb	r3, [r7, #4]
 8003b5c:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8003b5e:	f107 030c 	add.w	r3, r7, #12
 8003b62:	2104      	movs	r1, #4
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7ff ff51 	bl	8003a0c <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8003b6a:	202c      	movs	r0, #44	; 0x2c
 8003b6c:	f7ff ff26 	bl	80039bc <ST7735_WriteCommand>
}
 8003b70:	bf00      	nop
 8003b72:	3714      	adds	r7, #20
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd90      	pop	{r4, r7, pc}

08003b78 <ST7735_Init>:

void ST7735_Init() {
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	af00      	add	r7, sp, #0
    //ST7735_Select();
    ST7735_Reset();
 8003b7c:	f7ff ff06 	bl	800398c <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8003b80:	4805      	ldr	r0, [pc, #20]	; (8003b98 <ST7735_Init+0x20>)
 8003b82:	f7ff ff7d 	bl	8003a80 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8003b86:	4805      	ldr	r0, [pc, #20]	; (8003b9c <ST7735_Init+0x24>)
 8003b88:	f7ff ff7a 	bl	8003a80 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8003b8c:	4804      	ldr	r0, [pc, #16]	; (8003ba0 <ST7735_Init+0x28>)
 8003b8e:	f7ff ff77 	bl	8003a80 <ST7735_ExecuteCommandList>
    //ST7735_Unselect();
}
 8003b92:	bf00      	nop
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	0800c6d8 	.word	0x0800c6d8
 8003b9c:	0800c714 	.word	0x0800c714
 8003ba0:	0800c724 	.word	0x0800c724

08003ba4 <ST7735_Refresh>:
    ST7735_Unselect();
}

//=====================================================================================================================

void ST7735_Refresh() {
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
	ST7735_SetAddressWindow(0, 0, ST7735_WIDTH, ST7735_HEIGHT);
 8003ba8:	2380      	movs	r3, #128	; 0x80
 8003baa:	22a0      	movs	r2, #160	; 0xa0
 8003bac:	2100      	movs	r1, #0
 8003bae:	2000      	movs	r0, #0
 8003bb0:	f7ff ffae 	bl	8003b10 <ST7735_SetAddressWindow>
	ST7735_WriteData((uint8_t*)&data_buf, ST7735_WIDTH*ST7735_HEIGHT*(sizeof(uint16_t)));
 8003bb4:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8003bb8:	4802      	ldr	r0, [pc, #8]	; (8003bc4 <ST7735_Refresh+0x20>)
 8003bba:	f7ff ff27 	bl	8003a0c <ST7735_WriteData>
}
 8003bbe:	bf00      	nop
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	200006b0 	.word	0x200006b0

08003bc8 <ST7735_AddHorLine>:
	data_buf[y*ST7735_WIDTH + x] = (color >> 8) + ((color & 0xFF) << 8);
	xSemaphoreGive(sDisplaySPI);

}

void ST7735_AddHorLine(uint8_t y, uint8_t x_start, uint8_t x_end, uint8_t width, uint16_t color, LineType_t type) {
 8003bc8:	b590      	push	{r4, r7, lr}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	4604      	mov	r4, r0
 8003bd0:	4608      	mov	r0, r1
 8003bd2:	4611      	mov	r1, r2
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	4623      	mov	r3, r4
 8003bd8:	71fb      	strb	r3, [r7, #7]
 8003bda:	4603      	mov	r3, r0
 8003bdc:	71bb      	strb	r3, [r7, #6]
 8003bde:	460b      	mov	r3, r1
 8003be0:	717b      	strb	r3, [r7, #5]
 8003be2:	4613      	mov	r3, r2
 8003be4:	713b      	strb	r3, [r7, #4]
	if(y > ST7735_HEIGHT || y < 0) return;
 8003be6:	79fb      	ldrb	r3, [r7, #7]
 8003be8:	2b80      	cmp	r3, #128	; 0x80
 8003bea:	d85a      	bhi.n	8003ca2 <ST7735_AddHorLine+0xda>
	uint16_t color__ = (color >> 8) + ((color & 0xFF) << 8);
 8003bec:	8c3b      	ldrh	r3, [r7, #32]
 8003bee:	0a1b      	lsrs	r3, r3, #8
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	8c3b      	ldrh	r3, [r7, #32]
 8003bf4:	021b      	lsls	r3, r3, #8
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	4413      	add	r3, r2
 8003bfa:	81bb      	strh	r3, [r7, #12]
	if(type == SOLID) {
 8003bfc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d124      	bne.n	8003c4e <ST7735_AddHorLine+0x86>
		xSemaphoreTake(sDisplaySPI, portMAX_DELAY);
 8003c04:	4b29      	ldr	r3, [pc, #164]	; (8003cac <ST7735_AddHorLine+0xe4>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f001 fd2f 	bl	8005670 <xQueueSemaphoreTake>
		for(uint8_t x = x_start; x <= x_end; x++)
 8003c12:	79bb      	ldrb	r3, [r7, #6]
 8003c14:	73fb      	strb	r3, [r7, #15]
 8003c16:	e00e      	b.n	8003c36 <ST7735_AddHorLine+0x6e>
			data_buf[y*ST7735_WIDTH + x] = color__;
 8003c18:	79fa      	ldrb	r2, [r7, #7]
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	4413      	add	r3, r2
 8003c20:	015b      	lsls	r3, r3, #5
 8003c22:	461a      	mov	r2, r3
 8003c24:	7bfb      	ldrb	r3, [r7, #15]
 8003c26:	4413      	add	r3, r2
 8003c28:	4921      	ldr	r1, [pc, #132]	; (8003cb0 <ST7735_AddHorLine+0xe8>)
 8003c2a:	89ba      	ldrh	r2, [r7, #12]
 8003c2c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(uint8_t x = x_start; x <= x_end; x++)
 8003c30:	7bfb      	ldrb	r3, [r7, #15]
 8003c32:	3301      	adds	r3, #1
 8003c34:	73fb      	strb	r3, [r7, #15]
 8003c36:	7bfa      	ldrb	r2, [r7, #15]
 8003c38:	797b      	ldrb	r3, [r7, #5]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d9ec      	bls.n	8003c18 <ST7735_AddHorLine+0x50>
		xSemaphoreGive(sDisplaySPI);
 8003c3e:	4b1b      	ldr	r3, [pc, #108]	; (8003cac <ST7735_AddHorLine+0xe4>)
 8003c40:	6818      	ldr	r0, [r3, #0]
 8003c42:	2300      	movs	r3, #0
 8003c44:	2200      	movs	r2, #0
 8003c46:	2100      	movs	r1, #0
 8003c48:	f001 fa1e 	bl	8005088 <xQueueGenericSend>
 8003c4c:	e02a      	b.n	8003ca4 <ST7735_AddHorLine+0xdc>
	} else {
		xSemaphoreTake(sDisplaySPI, portMAX_DELAY);
 8003c4e:	4b17      	ldr	r3, [pc, #92]	; (8003cac <ST7735_AddHorLine+0xe4>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003c56:	4618      	mov	r0, r3
 8003c58:	f001 fd0a 	bl	8005670 <xQueueSemaphoreTake>
		for(uint8_t x = x_start; x <= x_end; x++)
 8003c5c:	79bb      	ldrb	r3, [r7, #6]
 8003c5e:	73bb      	strb	r3, [r7, #14]
 8003c60:	e013      	b.n	8003c8a <ST7735_AddHorLine+0xc2>
			if((x & 0x02) == 0) data_buf[y*ST7735_WIDTH + x] = color__;
 8003c62:	7bbb      	ldrb	r3, [r7, #14]
 8003c64:	f003 0302 	and.w	r3, r3, #2
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d10b      	bne.n	8003c84 <ST7735_AddHorLine+0xbc>
 8003c6c:	79fa      	ldrb	r2, [r7, #7]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	4413      	add	r3, r2
 8003c74:	015b      	lsls	r3, r3, #5
 8003c76:	461a      	mov	r2, r3
 8003c78:	7bbb      	ldrb	r3, [r7, #14]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	490c      	ldr	r1, [pc, #48]	; (8003cb0 <ST7735_AddHorLine+0xe8>)
 8003c7e:	89ba      	ldrh	r2, [r7, #12]
 8003c80:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(uint8_t x = x_start; x <= x_end; x++)
 8003c84:	7bbb      	ldrb	r3, [r7, #14]
 8003c86:	3301      	adds	r3, #1
 8003c88:	73bb      	strb	r3, [r7, #14]
 8003c8a:	7bba      	ldrb	r2, [r7, #14]
 8003c8c:	797b      	ldrb	r3, [r7, #5]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d9e7      	bls.n	8003c62 <ST7735_AddHorLine+0x9a>
		xSemaphoreGive(sDisplaySPI);
 8003c92:	4b06      	ldr	r3, [pc, #24]	; (8003cac <ST7735_AddHorLine+0xe4>)
 8003c94:	6818      	ldr	r0, [r3, #0]
 8003c96:	2300      	movs	r3, #0
 8003c98:	2200      	movs	r2, #0
 8003c9a:	2100      	movs	r1, #0
 8003c9c:	f001 f9f4 	bl	8005088 <xQueueGenericSend>
 8003ca0:	e000      	b.n	8003ca4 <ST7735_AddHorLine+0xdc>
	if(y > ST7735_HEIGHT || y < 0) return;
 8003ca2:	bf00      	nop
	}
}
 8003ca4:	3714      	adds	r7, #20
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd90      	pop	{r4, r7, pc}
 8003caa:	bf00      	nop
 8003cac:	2000f100 	.word	0x2000f100
 8003cb0:	200006b0 	.word	0x200006b0

08003cb4 <ST7735_AddVerLine>:
void ST7735_AddVerLine(uint8_t x, uint8_t y_start, uint8_t y_end, uint8_t width, uint16_t color, LineType_t type) {
 8003cb4:	b590      	push	{r4, r7, lr}
 8003cb6:	b087      	sub	sp, #28
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	4604      	mov	r4, r0
 8003cbc:	4608      	mov	r0, r1
 8003cbe:	4611      	mov	r1, r2
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	4623      	mov	r3, r4
 8003cc4:	71fb      	strb	r3, [r7, #7]
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	71bb      	strb	r3, [r7, #6]
 8003cca:	460b      	mov	r3, r1
 8003ccc:	717b      	strb	r3, [r7, #5]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	713b      	strb	r3, [r7, #4]
	if(x > ST7735_WIDTH || x < 0) return;
 8003cd2:	79fb      	ldrb	r3, [r7, #7]
 8003cd4:	2ba0      	cmp	r3, #160	; 0xa0
 8003cd6:	d85a      	bhi.n	8003d8e <ST7735_AddVerLine+0xda>
	uint16_t color__ = (color >> 8) + ((color & 0xFF) << 8);
 8003cd8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003cda:	0a1b      	lsrs	r3, r3, #8
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003ce0:	021b      	lsls	r3, r3, #8
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	4413      	add	r3, r2
 8003ce6:	81fb      	strh	r3, [r7, #14]
	if(type == SOLID) {
 8003ce8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d124      	bne.n	8003d3a <ST7735_AddVerLine+0x86>
		xSemaphoreTake(sDisplaySPI, portMAX_DELAY);
 8003cf0:	4b29      	ldr	r3, [pc, #164]	; (8003d98 <ST7735_AddVerLine+0xe4>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f001 fcb9 	bl	8005670 <xQueueSemaphoreTake>
		for(int y = y_start; y <= y_end; y++)
 8003cfe:	79bb      	ldrb	r3, [r7, #6]
 8003d00:	617b      	str	r3, [r7, #20]
 8003d02:	e00e      	b.n	8003d22 <ST7735_AddVerLine+0x6e>
			data_buf[y*ST7735_WIDTH + x] = color__;
 8003d04:	697a      	ldr	r2, [r7, #20]
 8003d06:	4613      	mov	r3, r2
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	4413      	add	r3, r2
 8003d0c:	015b      	lsls	r3, r3, #5
 8003d0e:	461a      	mov	r2, r3
 8003d10:	79fb      	ldrb	r3, [r7, #7]
 8003d12:	4413      	add	r3, r2
 8003d14:	4921      	ldr	r1, [pc, #132]	; (8003d9c <ST7735_AddVerLine+0xe8>)
 8003d16:	89fa      	ldrh	r2, [r7, #14]
 8003d18:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int y = y_start; y <= y_end; y++)
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	3301      	adds	r3, #1
 8003d20:	617b      	str	r3, [r7, #20]
 8003d22:	797a      	ldrb	r2, [r7, #5]
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	daec      	bge.n	8003d04 <ST7735_AddVerLine+0x50>
		xSemaphoreGive(sDisplaySPI);
 8003d2a:	4b1b      	ldr	r3, [pc, #108]	; (8003d98 <ST7735_AddVerLine+0xe4>)
 8003d2c:	6818      	ldr	r0, [r3, #0]
 8003d2e:	2300      	movs	r3, #0
 8003d30:	2200      	movs	r2, #0
 8003d32:	2100      	movs	r1, #0
 8003d34:	f001 f9a8 	bl	8005088 <xQueueGenericSend>
 8003d38:	e02a      	b.n	8003d90 <ST7735_AddVerLine+0xdc>
	} else {
		xSemaphoreTake(sDisplaySPI, portMAX_DELAY);
 8003d3a:	4b17      	ldr	r3, [pc, #92]	; (8003d98 <ST7735_AddVerLine+0xe4>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003d42:	4618      	mov	r0, r3
 8003d44:	f001 fc94 	bl	8005670 <xQueueSemaphoreTake>
		for(int y = y_start; y <= y_end; y++)
 8003d48:	79bb      	ldrb	r3, [r7, #6]
 8003d4a:	613b      	str	r3, [r7, #16]
 8003d4c:	e013      	b.n	8003d76 <ST7735_AddVerLine+0xc2>
			if((y & 0x02) == 0)data_buf[y*ST7735_WIDTH + x] = color__;
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	f003 0302 	and.w	r3, r3, #2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d10b      	bne.n	8003d70 <ST7735_AddVerLine+0xbc>
 8003d58:	693a      	ldr	r2, [r7, #16]
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	4413      	add	r3, r2
 8003d60:	015b      	lsls	r3, r3, #5
 8003d62:	461a      	mov	r2, r3
 8003d64:	79fb      	ldrb	r3, [r7, #7]
 8003d66:	4413      	add	r3, r2
 8003d68:	490c      	ldr	r1, [pc, #48]	; (8003d9c <ST7735_AddVerLine+0xe8>)
 8003d6a:	89fa      	ldrh	r2, [r7, #14]
 8003d6c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int y = y_start; y <= y_end; y++)
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	3301      	adds	r3, #1
 8003d74:	613b      	str	r3, [r7, #16]
 8003d76:	797a      	ldrb	r2, [r7, #5]
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	dae7      	bge.n	8003d4e <ST7735_AddVerLine+0x9a>
		xSemaphoreGive(sDisplaySPI);
 8003d7e:	4b06      	ldr	r3, [pc, #24]	; (8003d98 <ST7735_AddVerLine+0xe4>)
 8003d80:	6818      	ldr	r0, [r3, #0]
 8003d82:	2300      	movs	r3, #0
 8003d84:	2200      	movs	r2, #0
 8003d86:	2100      	movs	r1, #0
 8003d88:	f001 f97e 	bl	8005088 <xQueueGenericSend>
 8003d8c:	e000      	b.n	8003d90 <ST7735_AddVerLine+0xdc>
	if(x > ST7735_WIDTH || x < 0) return;
 8003d8e:	bf00      	nop
	}
}
 8003d90:	371c      	adds	r7, #28
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd90      	pop	{r4, r7, pc}
 8003d96:	bf00      	nop
 8003d98:	2000f100 	.word	0x2000f100
 8003d9c:	200006b0 	.word	0x200006b0

08003da0 <ST7735_AddRectangle>:
void ST7735_AddRectangle(uint8_t x_start, uint8_t y_start, uint8_t x_end, uint8_t y_end, uint16_t color) {
 8003da0:	b590      	push	{r4, r7, lr}
 8003da2:	b087      	sub	sp, #28
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	4604      	mov	r4, r0
 8003da8:	4608      	mov	r0, r1
 8003daa:	4611      	mov	r1, r2
 8003dac:	461a      	mov	r2, r3
 8003dae:	4623      	mov	r3, r4
 8003db0:	71fb      	strb	r3, [r7, #7]
 8003db2:	4603      	mov	r3, r0
 8003db4:	71bb      	strb	r3, [r7, #6]
 8003db6:	460b      	mov	r3, r1
 8003db8:	717b      	strb	r3, [r7, #5]
 8003dba:	4613      	mov	r3, r2
 8003dbc:	713b      	strb	r3, [r7, #4]
	uint16_t color__ = (color >> 8) + ((color & 0xFF) << 8);
 8003dbe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003dc0:	0a1b      	lsrs	r3, r3, #8
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003dc6:	021b      	lsls	r3, r3, #8
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	4413      	add	r3, r2
 8003dcc:	81fb      	strh	r3, [r7, #14]
	xSemaphoreTake(sDisplaySPI, portMAX_DELAY);
 8003dce:	4b19      	ldr	r3, [pc, #100]	; (8003e34 <ST7735_AddRectangle+0x94>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f001 fc4a 	bl	8005670 <xQueueSemaphoreTake>
	for(int y = y_start; y <= y_end; y++) {
 8003ddc:	79bb      	ldrb	r3, [r7, #6]
 8003dde:	617b      	str	r3, [r7, #20]
 8003de0:	e018      	b.n	8003e14 <ST7735_AddRectangle+0x74>
		for(int x = x_start; x <= x_end; x++) {
 8003de2:	79fb      	ldrb	r3, [r7, #7]
 8003de4:	613b      	str	r3, [r7, #16]
 8003de6:	e00e      	b.n	8003e06 <ST7735_AddRectangle+0x66>
			data_buf[y*ST7735_WIDTH + x] = color__;
 8003de8:	697a      	ldr	r2, [r7, #20]
 8003dea:	4613      	mov	r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	4413      	add	r3, r2
 8003df0:	015b      	lsls	r3, r3, #5
 8003df2:	461a      	mov	r2, r3
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	4413      	add	r3, r2
 8003df8:	490f      	ldr	r1, [pc, #60]	; (8003e38 <ST7735_AddRectangle+0x98>)
 8003dfa:	89fa      	ldrh	r2, [r7, #14]
 8003dfc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int x = x_start; x <= x_end; x++) {
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	3301      	adds	r3, #1
 8003e04:	613b      	str	r3, [r7, #16]
 8003e06:	797a      	ldrb	r2, [r7, #5]
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	daec      	bge.n	8003de8 <ST7735_AddRectangle+0x48>
	for(int y = y_start; y <= y_end; y++) {
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	3301      	adds	r3, #1
 8003e12:	617b      	str	r3, [r7, #20]
 8003e14:	793a      	ldrb	r2, [r7, #4]
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	dae2      	bge.n	8003de2 <ST7735_AddRectangle+0x42>
		}
	}
	xSemaphoreGive(sDisplaySPI);
 8003e1c:	4b05      	ldr	r3, [pc, #20]	; (8003e34 <ST7735_AddRectangle+0x94>)
 8003e1e:	6818      	ldr	r0, [r3, #0]
 8003e20:	2300      	movs	r3, #0
 8003e22:	2200      	movs	r2, #0
 8003e24:	2100      	movs	r1, #0
 8003e26:	f001 f92f 	bl	8005088 <xQueueGenericSend>

}
 8003e2a:	bf00      	nop
 8003e2c:	371c      	adds	r7, #28
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd90      	pop	{r4, r7, pc}
 8003e32:	bf00      	nop
 8003e34:	2000f100 	.word	0x2000f100
 8003e38:	200006b0 	.word	0x200006b0

08003e3c <ST7735_AddFill>:
void ST7735_AddFill(uint16_t color) {
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	4603      	mov	r3, r0
 8003e44:	80fb      	strh	r3, [r7, #6]
	uint16_t color__ = (color >> 8) + ((color & 0xFF) << 8);
 8003e46:	88fb      	ldrh	r3, [r7, #6]
 8003e48:	0a1b      	lsrs	r3, r3, #8
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	88fb      	ldrh	r3, [r7, #6]
 8003e4e:	021b      	lsls	r3, r3, #8
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	4413      	add	r3, r2
 8003e54:	817b      	strh	r3, [r7, #10]
	xSemaphoreTake(sDisplaySPI, portMAX_DELAY);
 8003e56:	4b10      	ldr	r3, [pc, #64]	; (8003e98 <ST7735_AddFill+0x5c>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f001 fc06 	bl	8005670 <xQueueSemaphoreTake>
	for(int i = 0; i < ST7735_WIDTH*ST7735_HEIGHT; i++) {
 8003e64:	2300      	movs	r3, #0
 8003e66:	60fb      	str	r3, [r7, #12]
 8003e68:	e007      	b.n	8003e7a <ST7735_AddFill+0x3e>
		data_buf[i] = color__;
 8003e6a:	490c      	ldr	r1, [pc, #48]	; (8003e9c <ST7735_AddFill+0x60>)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	897a      	ldrh	r2, [r7, #10]
 8003e70:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for(int i = 0; i < ST7735_WIDTH*ST7735_HEIGHT; i++) {
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	3301      	adds	r3, #1
 8003e78:	60fb      	str	r3, [r7, #12]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003e80:	dbf3      	blt.n	8003e6a <ST7735_AddFill+0x2e>
	}
	xSemaphoreGive(sDisplaySPI);
 8003e82:	4b05      	ldr	r3, [pc, #20]	; (8003e98 <ST7735_AddFill+0x5c>)
 8003e84:	6818      	ldr	r0, [r3, #0]
 8003e86:	2300      	movs	r3, #0
 8003e88:	2200      	movs	r2, #0
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	f001 f8fc 	bl	8005088 <xQueueGenericSend>
}
 8003e90:	bf00      	nop
 8003e92:	3710      	adds	r7, #16
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	2000f100 	.word	0x2000f100
 8003e9c:	200006b0 	.word	0x200006b0

08003ea0 <ST7735_AddChar>:
	}

}


static void ST7735_AddChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color__, uint16_t bgcolor__) {
 8003ea0:	b082      	sub	sp, #8
 8003ea2:	b480      	push	{r7}
 8003ea4:	b087      	sub	sp, #28
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8003eaa:	4603      	mov	r3, r0
 8003eac:	80fb      	strh	r3, [r7, #6]
 8003eae:	460b      	mov	r3, r1
 8003eb0:	80bb      	strh	r3, [r7, #4]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    //ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);

    for(i = 0; i < font.height; i++) {
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	617b      	str	r3, [r7, #20]
 8003eba:	e034      	b.n	8003f26 <ST7735_AddChar+0x86>
        b = font.data[(ch - 32) * font.height + i];
 8003ebc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ebe:	78fb      	ldrb	r3, [r7, #3]
 8003ec0:	3b20      	subs	r3, #32
 8003ec2:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8003ec6:	fb01 f303 	mul.w	r3, r1, r3
 8003eca:	4619      	mov	r1, r3
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	440b      	add	r3, r1
 8003ed0:	005b      	lsls	r3, r3, #1
 8003ed2:	4413      	add	r3, r2
 8003ed4:	881b      	ldrh	r3, [r3, #0]
 8003ed6:	60fb      	str	r3, [r7, #12]
        for(j = 0; j < font.width; j++) {
 8003ed8:	2300      	movs	r3, #0
 8003eda:	613b      	str	r3, [r7, #16]
 8003edc:	e01a      	b.n	8003f14 <ST7735_AddChar+0x74>
            if((b << j) & 0x8000)  {
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00f      	beq.n	8003f0e <ST7735_AddChar+0x6e>
            	data_buf[(y+i)*ST7735_WIDTH + x + j] = color__;
 8003eee:	88ba      	ldrh	r2, [r7, #4]
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	441a      	add	r2, r3
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	4413      	add	r3, r2
 8003efa:	015b      	lsls	r3, r3, #5
 8003efc:	461a      	mov	r2, r3
 8003efe:	88fb      	ldrh	r3, [r7, #6]
 8003f00:	441a      	add	r2, r3
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	4413      	add	r3, r2
 8003f06:	490e      	ldr	r1, [pc, #56]	; (8003f40 <ST7735_AddChar+0xa0>)
 8003f08:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8003f0a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        for(j = 0; j < font.width; j++) {
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	3301      	adds	r3, #1
 8003f12:	613b      	str	r3, [r7, #16]
 8003f14:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003f18:	461a      	mov	r2, r3
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d8de      	bhi.n	8003ede <ST7735_AddChar+0x3e>
    for(i = 0; i < font.height; i++) {
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	3301      	adds	r3, #1
 8003f24:	617b      	str	r3, [r7, #20]
 8003f26:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d8c4      	bhi.n	8003ebc <ST7735_AddChar+0x1c>
            }
        }
    }
}
 8003f32:	bf00      	nop
 8003f34:	371c      	adds	r7, #28
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	b002      	add	sp, #8
 8003f3e:	4770      	bx	lr
 8003f40:	200006b0 	.word	0x200006b0

08003f44 <ST7735_AddString>:

void ST7735_AddString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8003f44:	b082      	sub	sp, #8
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b088      	sub	sp, #32
 8003f4a:	af04      	add	r7, sp, #16
 8003f4c:	603a      	str	r2, [r7, #0]
 8003f4e:	61fb      	str	r3, [r7, #28]
 8003f50:	4603      	mov	r3, r0
 8003f52:	80fb      	strh	r3, [r7, #6]
 8003f54:	460b      	mov	r3, r1
 8003f56:	80bb      	strh	r3, [r7, #4]

	uint16_t color__ = (color >> 8) + ((color & 0xFF) << 8);
 8003f58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f5a:	0a1b      	lsrs	r3, r3, #8
 8003f5c:	b29a      	uxth	r2, r3
 8003f5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f60:	021b      	lsls	r3, r3, #8
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	4413      	add	r3, r2
 8003f66:	81fb      	strh	r3, [r7, #14]
	uint16_t bgcolor__ = (bgcolor >> 8) + ((bgcolor & 0xFF) << 8);
 8003f68:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003f6a:	0a1b      	lsrs	r3, r3, #8
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003f70:	021b      	lsls	r3, r3, #8
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	4413      	add	r3, r2
 8003f76:	81bb      	strh	r3, [r7, #12]
	xSemaphoreTake(sDisplaySPI, portMAX_DELAY);
 8003f78:	4b24      	ldr	r3, [pc, #144]	; (800400c <ST7735_AddString+0xc8>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003f80:	4618      	mov	r0, r3
 8003f82:	f001 fb75 	bl	8005670 <xQueueSemaphoreTake>
    while(*str) {
 8003f86:	e02d      	b.n	8003fe4 <ST7735_AddString+0xa0>
        if(x + font.width >= ST7735_WIDTH) {
 8003f88:	88fb      	ldrh	r3, [r7, #6]
 8003f8a:	7f3a      	ldrb	r2, [r7, #28]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	2b9f      	cmp	r3, #159	; 0x9f
 8003f90:	dd13      	ble.n	8003fba <ST7735_AddString+0x76>
            x = 0;
 8003f92:	2300      	movs	r3, #0
 8003f94:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8003f96:	7f7b      	ldrb	r3, [r7, #29]
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	88bb      	ldrh	r3, [r7, #4]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8003fa0:	88bb      	ldrh	r3, [r7, #4]
 8003fa2:	7f7a      	ldrb	r2, [r7, #29]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	2b7f      	cmp	r3, #127	; 0x7f
 8003fa8:	dc21      	bgt.n	8003fee <ST7735_AddString+0xaa>
                break;
            }

            if(*str == ' ') {
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	2b20      	cmp	r3, #32
 8003fb0:	d103      	bne.n	8003fba <ST7735_AddString+0x76>
                // skip spaces in the beginning of the new line
                str++;
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	603b      	str	r3, [r7, #0]
                continue;
 8003fb8:	e014      	b.n	8003fe4 <ST7735_AddString+0xa0>
            }
        }

        ST7735_AddChar(x, y, *str, font, color__, bgcolor__);
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	781a      	ldrb	r2, [r3, #0]
 8003fbe:	88b9      	ldrh	r1, [r7, #4]
 8003fc0:	88f8      	ldrh	r0, [r7, #6]
 8003fc2:	89bb      	ldrh	r3, [r7, #12]
 8003fc4:	9302      	str	r3, [sp, #8]
 8003fc6:	89fb      	ldrh	r3, [r7, #14]
 8003fc8:	9301      	str	r3, [sp, #4]
 8003fca:	6a3b      	ldr	r3, [r7, #32]
 8003fcc:	9300      	str	r3, [sp, #0]
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	f7ff ff66 	bl	8003ea0 <ST7735_AddChar>
        x += font.width;
 8003fd4:	7f3b      	ldrb	r3, [r7, #28]
 8003fd6:	b29a      	uxth	r2, r3
 8003fd8:	88fb      	ldrh	r3, [r7, #6]
 8003fda:	4413      	add	r3, r2
 8003fdc:	80fb      	strh	r3, [r7, #6]
        str++;
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	603b      	str	r3, [r7, #0]
    while(*str) {
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1cd      	bne.n	8003f88 <ST7735_AddString+0x44>
 8003fec:	e000      	b.n	8003ff0 <ST7735_AddString+0xac>
                break;
 8003fee:	bf00      	nop
    }
    xSemaphoreGive(sDisplaySPI);
 8003ff0:	4b06      	ldr	r3, [pc, #24]	; (800400c <ST7735_AddString+0xc8>)
 8003ff2:	6818      	ldr	r0, [r3, #0]
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	2100      	movs	r1, #0
 8003ffa:	f001 f845 	bl	8005088 <xQueueGenericSend>
}
 8003ffe:	bf00      	nop
 8004000:	3710      	adds	r7, #16
 8004002:	46bd      	mov	sp, r7
 8004004:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004008:	b002      	add	sp, #8
 800400a:	4770      	bx	lr
 800400c:	2000f100 	.word	0x2000f100

08004010 <pushChannelData>:

void pushChannelData(int8_t newData, ChannelData_t * dataStruct) {
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	4603      	mov	r3, r0
 8004018:	6039      	str	r1, [r7, #0]
 800401a:	71fb      	strb	r3, [r7, #7]
	dataStruct->values[dataStruct->head] = newData;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004022:	4619      	mov	r1, r3
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	79fa      	ldrb	r2, [r7, #7]
 8004028:	545a      	strb	r2, [r3, r1]
	if(dataStruct->cnt < 127) dataStruct->cnt++;
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004030:	2b7e      	cmp	r3, #126	; 0x7e
 8004032:	d807      	bhi.n	8004044 <pushChannelData+0x34>
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800403a:	3301      	adds	r3, #1
 800403c:	b2da      	uxtb	r2, r3
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	dataStruct->head++;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800404a:	3301      	adds	r3, #1
 800404c:	b2da      	uxtb	r2, r3
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	dataStruct->head &= 0x7F;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800405a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800405e:	b2da      	uxtb	r2, r3
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
}
 8004066:	bf00      	nop
 8004068:	370c      	adds	r7, #12
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
	...

08004074 <printChannelData>:

void printChannelData(uint8_t x_start, uint8_t y_start, ChannelData_t * dataStruct, uint16_t color) {
 8004074:	b580      	push	{r7, lr}
 8004076:	b086      	sub	sp, #24
 8004078:	af00      	add	r7, sp, #0
 800407a:	603a      	str	r2, [r7, #0]
 800407c:	461a      	mov	r2, r3
 800407e:	4603      	mov	r3, r0
 8004080:	71fb      	strb	r3, [r7, #7]
 8004082:	460b      	mov	r3, r1
 8004084:	71bb      	strb	r3, [r7, #6]
 8004086:	4613      	mov	r3, r2
 8004088:	80bb      	strh	r3, [r7, #4]

	if(dataStruct->cnt == 0) return;
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004090:	2b00      	cmp	r3, #0
 8004092:	d06c      	beq.n	800416e <printChannelData+0xfa>
	uint16_t color_norm__ = (color >> 8) + ((color & 0xFF) << 8);
 8004094:	88bb      	ldrh	r3, [r7, #4]
 8004096:	0a1b      	lsrs	r3, r3, #8
 8004098:	b29a      	uxth	r2, r3
 800409a:	88bb      	ldrh	r3, [r7, #4]
 800409c:	021b      	lsls	r3, r3, #8
 800409e:	b29b      	uxth	r3, r3
 80040a0:	4413      	add	r3, r2
 80040a2:	81bb      	strh	r3, [r7, #12]
	uint16_t color_clip__ = ((ST7735_RED >> 8) + ((ST7735_RED & 0xFF) << 8));
 80040a4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80040a8:	817b      	strh	r3, [r7, #10]
	int i = dataStruct->head - 1;
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80040b0:	3b01      	subs	r3, #1
 80040b2:	617b      	str	r3, [r7, #20]
	int cnt = 0;
 80040b4:	2300      	movs	r3, #0
 80040b6:	613b      	str	r3, [r7, #16]
	xSemaphoreTake(sDisplaySPI, portMAX_DELAY);
 80040b8:	4b2f      	ldr	r3, [pc, #188]	; (8004178 <printChannelData+0x104>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80040c0:	4618      	mov	r0, r3
 80040c2:	f001 fad5 	bl	8005670 <xQueueSemaphoreTake>
	while(cnt < dataStruct->cnt) {
 80040c6:	e043      	b.n	8004150 <printChannelData+0xdc>
		uint16_t color__;
		if(dataStruct->values[i] >= (int8_t)71) {
 80040c8:	683a      	ldr	r2, [r7, #0]
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	4413      	add	r3, r2
 80040ce:	f993 3000 	ldrsb.w	r3, [r3]
 80040d2:	2b46      	cmp	r3, #70	; 0x46
 80040d4:	dd07      	ble.n	80040e6 <printChannelData+0x72>
			dataStruct->values[i] = (int8_t)71;
 80040d6:	683a      	ldr	r2, [r7, #0]
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	4413      	add	r3, r2
 80040dc:	2247      	movs	r2, #71	; 0x47
 80040de:	701a      	strb	r2, [r3, #0]
			color__ = color_clip__;
 80040e0:	897b      	ldrh	r3, [r7, #10]
 80040e2:	81fb      	strh	r3, [r7, #14]
 80040e4:	e011      	b.n	800410a <printChannelData+0x96>
		} else if(dataStruct->values[i] <= (int8_t)(-70)) {
 80040e6:	683a      	ldr	r2, [r7, #0]
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	4413      	add	r3, r2
 80040ec:	f993 3000 	ldrsb.w	r3, [r3]
 80040f0:	f113 0f45 	cmn.w	r3, #69	; 0x45
 80040f4:	da07      	bge.n	8004106 <printChannelData+0x92>
			dataStruct->values[i] = (int8_t)(-70);
 80040f6:	683a      	ldr	r2, [r7, #0]
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	4413      	add	r3, r2
 80040fc:	22ba      	movs	r2, #186	; 0xba
 80040fe:	701a      	strb	r2, [r3, #0]
			color__ = color_clip__;
 8004100:	897b      	ldrh	r3, [r7, #10]
 8004102:	81fb      	strh	r3, [r7, #14]
 8004104:	e001      	b.n	800410a <printChannelData+0x96>
		}
		else
			color__ = color_norm__;
 8004106:	89bb      	ldrh	r3, [r7, #12]
 8004108:	81fb      	strh	r3, [r7, #14]
		uint8_t y = y_start + (dataStruct->values[i] >> 2);
 800410a:	683a      	ldr	r2, [r7, #0]
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	4413      	add	r3, r2
 8004110:	f993 3000 	ldrsb.w	r3, [r3]
 8004114:	109b      	asrs	r3, r3, #2
 8004116:	b25b      	sxtb	r3, r3
 8004118:	b2da      	uxtb	r2, r3
 800411a:	79bb      	ldrb	r3, [r7, #6]
 800411c:	4413      	add	r3, r2
 800411e:	727b      	strb	r3, [r7, #9]
		data_buf[y*ST7735_WIDTH + x_start + cnt] = color__;//dataStruct.values[i];
 8004120:	7a7a      	ldrb	r2, [r7, #9]
 8004122:	4613      	mov	r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	4413      	add	r3, r2
 8004128:	015b      	lsls	r3, r3, #5
 800412a:	461a      	mov	r2, r3
 800412c:	79fb      	ldrb	r3, [r7, #7]
 800412e:	441a      	add	r2, r3
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	4413      	add	r3, r2
 8004134:	4911      	ldr	r1, [pc, #68]	; (800417c <printChannelData+0x108>)
 8004136:	89fa      	ldrh	r2, [r7, #14]
 8004138:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		i--;
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	3b01      	subs	r3, #1
 8004140:	617b      	str	r3, [r7, #20]
		i &= 0x7F;
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004148:	617b      	str	r3, [r7, #20]
		cnt++;
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	3301      	adds	r3, #1
 800414e:	613b      	str	r3, [r7, #16]
	while(cnt < dataStruct->cnt) {
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004156:	461a      	mov	r2, r3
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	429a      	cmp	r2, r3
 800415c:	dcb4      	bgt.n	80040c8 <printChannelData+0x54>
	}
	xSemaphoreGive(sDisplaySPI);
 800415e:	4b06      	ldr	r3, [pc, #24]	; (8004178 <printChannelData+0x104>)
 8004160:	6818      	ldr	r0, [r3, #0]
 8004162:	2300      	movs	r3, #0
 8004164:	2200      	movs	r2, #0
 8004166:	2100      	movs	r1, #0
 8004168:	f000 ff8e 	bl	8005088 <xQueueGenericSend>
 800416c:	e000      	b.n	8004170 <printChannelData+0xfc>
	if(dataStruct->cnt == 0) return;
 800416e:	bf00      	nop

}
 8004170:	3718      	adds	r7, #24
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	2000f100 	.word	0x2000f100
 800417c:	200006b0 	.word	0x200006b0

08004180 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004180:	b480      	push	{r7}
 8004182:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004184:	bf00      	nop
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
	...

08004190 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004190:	b480      	push	{r7}
 8004192:	b085      	sub	sp, #20
 8004194:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004196:	f3ef 8305 	mrs	r3, IPSR
 800419a:	60bb      	str	r3, [r7, #8]
  return(result);
 800419c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d10f      	bne.n	80041c2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041a2:	f3ef 8310 	mrs	r3, PRIMASK
 80041a6:	607b      	str	r3, [r7, #4]
  return(result);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d105      	bne.n	80041ba <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80041ae:	f3ef 8311 	mrs	r3, BASEPRI
 80041b2:	603b      	str	r3, [r7, #0]
  return(result);
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d007      	beq.n	80041ca <osKernelInitialize+0x3a>
 80041ba:	4b0e      	ldr	r3, [pc, #56]	; (80041f4 <osKernelInitialize+0x64>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d103      	bne.n	80041ca <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80041c2:	f06f 0305 	mvn.w	r3, #5
 80041c6:	60fb      	str	r3, [r7, #12]
 80041c8:	e00c      	b.n	80041e4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80041ca:	4b0a      	ldr	r3, [pc, #40]	; (80041f4 <osKernelInitialize+0x64>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d105      	bne.n	80041de <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80041d2:	4b08      	ldr	r3, [pc, #32]	; (80041f4 <osKernelInitialize+0x64>)
 80041d4:	2201      	movs	r2, #1
 80041d6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80041d8:	2300      	movs	r3, #0
 80041da:	60fb      	str	r3, [r7, #12]
 80041dc:	e002      	b.n	80041e4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80041de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80041e2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80041e4:	68fb      	ldr	r3, [r7, #12]
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3714      	adds	r7, #20
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	2000a6b4 	.word	0x2000a6b4

080041f8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041fe:	f3ef 8305 	mrs	r3, IPSR
 8004202:	60bb      	str	r3, [r7, #8]
  return(result);
 8004204:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10f      	bne.n	800422a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800420a:	f3ef 8310 	mrs	r3, PRIMASK
 800420e:	607b      	str	r3, [r7, #4]
  return(result);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d105      	bne.n	8004222 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004216:	f3ef 8311 	mrs	r3, BASEPRI
 800421a:	603b      	str	r3, [r7, #0]
  return(result);
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d007      	beq.n	8004232 <osKernelStart+0x3a>
 8004222:	4b0f      	ldr	r3, [pc, #60]	; (8004260 <osKernelStart+0x68>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2b02      	cmp	r3, #2
 8004228:	d103      	bne.n	8004232 <osKernelStart+0x3a>
    stat = osErrorISR;
 800422a:	f06f 0305 	mvn.w	r3, #5
 800422e:	60fb      	str	r3, [r7, #12]
 8004230:	e010      	b.n	8004254 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004232:	4b0b      	ldr	r3, [pc, #44]	; (8004260 <osKernelStart+0x68>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2b01      	cmp	r3, #1
 8004238:	d109      	bne.n	800424e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800423a:	f7ff ffa1 	bl	8004180 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800423e:	4b08      	ldr	r3, [pc, #32]	; (8004260 <osKernelStart+0x68>)
 8004240:	2202      	movs	r2, #2
 8004242:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004244:	f001 fe72 	bl	8005f2c <vTaskStartScheduler>
      stat = osOK;
 8004248:	2300      	movs	r3, #0
 800424a:	60fb      	str	r3, [r7, #12]
 800424c:	e002      	b.n	8004254 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800424e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004252:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004254:	68fb      	ldr	r3, [r7, #12]
}
 8004256:	4618      	mov	r0, r3
 8004258:	3710      	adds	r7, #16
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	2000a6b4 	.word	0x2000a6b4

08004264 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004264:	b580      	push	{r7, lr}
 8004266:	b090      	sub	sp, #64	; 0x40
 8004268:	af04      	add	r7, sp, #16
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004270:	2300      	movs	r3, #0
 8004272:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004274:	f3ef 8305 	mrs	r3, IPSR
 8004278:	61fb      	str	r3, [r7, #28]
  return(result);
 800427a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800427c:	2b00      	cmp	r3, #0
 800427e:	f040 808f 	bne.w	80043a0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004282:	f3ef 8310 	mrs	r3, PRIMASK
 8004286:	61bb      	str	r3, [r7, #24]
  return(result);
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d105      	bne.n	800429a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800428e:	f3ef 8311 	mrs	r3, BASEPRI
 8004292:	617b      	str	r3, [r7, #20]
  return(result);
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d003      	beq.n	80042a2 <osThreadNew+0x3e>
 800429a:	4b44      	ldr	r3, [pc, #272]	; (80043ac <osThreadNew+0x148>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d07e      	beq.n	80043a0 <osThreadNew+0x13c>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d07b      	beq.n	80043a0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80042a8:	2380      	movs	r3, #128	; 0x80
 80042aa:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80042ac:	2318      	movs	r3, #24
 80042ae:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80042b0:	2300      	movs	r3, #0
 80042b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80042b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80042b8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d045      	beq.n	800434c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d002      	beq.n	80042ce <osThreadNew+0x6a>
        name = attr->name;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d002      	beq.n	80042dc <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80042dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d008      	beq.n	80042f4 <osThreadNew+0x90>
 80042e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e4:	2b38      	cmp	r3, #56	; 0x38
 80042e6:	d805      	bhi.n	80042f4 <osThreadNew+0x90>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f003 0301 	and.w	r3, r3, #1
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d001      	beq.n	80042f8 <osThreadNew+0x94>
        return (NULL);
 80042f4:	2300      	movs	r3, #0
 80042f6:	e054      	b.n	80043a2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d003      	beq.n	8004308 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	089b      	lsrs	r3, r3, #2
 8004306:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00e      	beq.n	800432e <osThreadNew+0xca>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	2b5b      	cmp	r3, #91	; 0x5b
 8004316:	d90a      	bls.n	800432e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800431c:	2b00      	cmp	r3, #0
 800431e:	d006      	beq.n	800432e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	695b      	ldr	r3, [r3, #20]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d002      	beq.n	800432e <osThreadNew+0xca>
        mem = 1;
 8004328:	2301      	movs	r3, #1
 800432a:	623b      	str	r3, [r7, #32]
 800432c:	e010      	b.n	8004350 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d10c      	bne.n	8004350 <osThreadNew+0xec>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d108      	bne.n	8004350 <osThreadNew+0xec>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d104      	bne.n	8004350 <osThreadNew+0xec>
          mem = 0;
 8004346:	2300      	movs	r3, #0
 8004348:	623b      	str	r3, [r7, #32]
 800434a:	e001      	b.n	8004350 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800434c:	2300      	movs	r3, #0
 800434e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004350:	6a3b      	ldr	r3, [r7, #32]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d110      	bne.n	8004378 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800435e:	9202      	str	r2, [sp, #8]
 8004360:	9301      	str	r3, [sp, #4]
 8004362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004364:	9300      	str	r3, [sp, #0]
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800436a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f001 fc0b 	bl	8005b88 <xTaskCreateStatic>
 8004372:	4603      	mov	r3, r0
 8004374:	613b      	str	r3, [r7, #16]
 8004376:	e013      	b.n	80043a0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004378:	6a3b      	ldr	r3, [r7, #32]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d110      	bne.n	80043a0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800437e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004380:	b29a      	uxth	r2, r3
 8004382:	f107 0310 	add.w	r3, r7, #16
 8004386:	9301      	str	r3, [sp, #4]
 8004388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438a:	9300      	str	r3, [sp, #0]
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004390:	68f8      	ldr	r0, [r7, #12]
 8004392:	f001 fc53 	bl	8005c3c <xTaskCreate>
 8004396:	4603      	mov	r3, r0
 8004398:	2b01      	cmp	r3, #1
 800439a:	d001      	beq.n	80043a0 <osThreadNew+0x13c>
          hTask = NULL;
 800439c:	2300      	movs	r3, #0
 800439e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80043a0:	693b      	ldr	r3, [r7, #16]
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3730      	adds	r7, #48	; 0x30
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	2000a6b4 	.word	0x2000a6b4

080043b0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043b8:	f3ef 8305 	mrs	r3, IPSR
 80043bc:	613b      	str	r3, [r7, #16]
  return(result);
 80043be:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10f      	bne.n	80043e4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043c4:	f3ef 8310 	mrs	r3, PRIMASK
 80043c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d105      	bne.n	80043dc <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80043d0:	f3ef 8311 	mrs	r3, BASEPRI
 80043d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d007      	beq.n	80043ec <osDelay+0x3c>
 80043dc:	4b0a      	ldr	r3, [pc, #40]	; (8004408 <osDelay+0x58>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d103      	bne.n	80043ec <osDelay+0x3c>
    stat = osErrorISR;
 80043e4:	f06f 0305 	mvn.w	r3, #5
 80043e8:	617b      	str	r3, [r7, #20]
 80043ea:	e007      	b.n	80043fc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80043ec:	2300      	movs	r3, #0
 80043ee:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d002      	beq.n	80043fc <osDelay+0x4c>
      vTaskDelay(ticks);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f001 fd64 	bl	8005ec4 <vTaskDelay>
    }
  }

  return (stat);
 80043fc:	697b      	ldr	r3, [r7, #20]
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3718      	adds	r7, #24
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	2000a6b4 	.word	0x2000a6b4

0800440c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800440c:	b480      	push	{r7}
 800440e:	b085      	sub	sp, #20
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	4a07      	ldr	r2, [pc, #28]	; (8004438 <vApplicationGetIdleTaskMemory+0x2c>)
 800441c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	4a06      	ldr	r2, [pc, #24]	; (800443c <vApplicationGetIdleTaskMemory+0x30>)
 8004422:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2280      	movs	r2, #128	; 0x80
 8004428:	601a      	str	r2, [r3, #0]
}
 800442a:	bf00      	nop
 800442c:	3714      	adds	r7, #20
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	2000a6b8 	.word	0x2000a6b8
 800443c:	2000a714 	.word	0x2000a714

08004440 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	4a07      	ldr	r2, [pc, #28]	; (800446c <vApplicationGetTimerTaskMemory+0x2c>)
 8004450:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	4a06      	ldr	r2, [pc, #24]	; (8004470 <vApplicationGetTimerTaskMemory+0x30>)
 8004456:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800445e:	601a      	str	r2, [r3, #0]
}
 8004460:	bf00      	nop
 8004462:	3714      	adds	r7, #20
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr
 800446c:	2000a914 	.word	0x2000a914
 8004470:	2000a970 	.word	0x2000a970

08004474 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f103 0208 	add.w	r2, r3, #8
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800448c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f103 0208 	add.w	r2, r3, #8
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f103 0208 	add.w	r2, r3, #8
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80044a8:	bf00      	nop
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80044c2:	bf00      	nop
 80044c4:	370c      	adds	r7, #12
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr

080044ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80044ce:	b480      	push	{r7}
 80044d0:	b085      	sub	sp, #20
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
 80044d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	68fa      	ldr	r2, [r7, #12]
 80044e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	689a      	ldr	r2, [r3, #8]
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	683a      	ldr	r2, [r7, #0]
 80044f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	683a      	ldr	r2, [r7, #0]
 80044f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	1c5a      	adds	r2, r3, #1
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	601a      	str	r2, [r3, #0]
}
 800450a:	bf00      	nop
 800450c:	3714      	adds	r7, #20
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr

08004516 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004516:	b480      	push	{r7}
 8004518:	b085      	sub	sp, #20
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
 800451e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800452c:	d103      	bne.n	8004536 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	60fb      	str	r3, [r7, #12]
 8004534:	e00c      	b.n	8004550 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	3308      	adds	r3, #8
 800453a:	60fb      	str	r3, [r7, #12]
 800453c:	e002      	b.n	8004544 <vListInsert+0x2e>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	60fb      	str	r3, [r7, #12]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	429a      	cmp	r2, r3
 800454e:	d9f6      	bls.n	800453e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	685a      	ldr	r2, [r3, #4]
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	683a      	ldr	r2, [r7, #0]
 800455e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	683a      	ldr	r2, [r7, #0]
 800456a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	1c5a      	adds	r2, r3, #1
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	601a      	str	r2, [r3, #0]
}
 800457c:	bf00      	nop
 800457e:	3714      	adds	r7, #20
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004588:	b480      	push	{r7}
 800458a:	b085      	sub	sp, #20
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	6892      	ldr	r2, [r2, #8]
 800459e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	6852      	ldr	r2, [r2, #4]
 80045a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	685a      	ldr	r2, [r3, #4]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d103      	bne.n	80045bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689a      	ldr	r2, [r3, #8]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	1e5a      	subs	r2, r3, #1
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3714      	adds	r7, #20
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	3b04      	subs	r3, #4
 80045ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80045f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	3b04      	subs	r3, #4
 80045fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	f023 0201 	bic.w	r2, r3, #1
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	3b04      	subs	r3, #4
 800460a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800460c:	4a0c      	ldr	r2, [pc, #48]	; (8004640 <pxPortInitialiseStack+0x64>)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	3b14      	subs	r3, #20
 8004616:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	3b04      	subs	r3, #4
 8004622:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f06f 0202 	mvn.w	r2, #2
 800462a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	3b20      	subs	r3, #32
 8004630:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004632:	68fb      	ldr	r3, [r7, #12]
}
 8004634:	4618      	mov	r0, r3
 8004636:	3714      	adds	r7, #20
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr
 8004640:	08004645 	.word	0x08004645

08004644 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800464a:	2300      	movs	r3, #0
 800464c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800464e:	4b11      	ldr	r3, [pc, #68]	; (8004694 <prvTaskExitError+0x50>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004656:	d009      	beq.n	800466c <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465c:	f383 8811 	msr	BASEPRI, r3
 8004660:	f3bf 8f6f 	isb	sy
 8004664:	f3bf 8f4f 	dsb	sy
 8004668:	60fb      	str	r3, [r7, #12]
 800466a:	e7fe      	b.n	800466a <prvTaskExitError+0x26>
 800466c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004670:	f383 8811 	msr	BASEPRI, r3
 8004674:	f3bf 8f6f 	isb	sy
 8004678:	f3bf 8f4f 	dsb	sy
 800467c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800467e:	bf00      	nop
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d0fc      	beq.n	8004680 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004686:	bf00      	nop
 8004688:	3714      	adds	r7, #20
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	20000018 	.word	0x20000018
	...

080046a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80046a0:	4b07      	ldr	r3, [pc, #28]	; (80046c0 <pxCurrentTCBConst2>)
 80046a2:	6819      	ldr	r1, [r3, #0]
 80046a4:	6808      	ldr	r0, [r1, #0]
 80046a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046aa:	f380 8809 	msr	PSP, r0
 80046ae:	f3bf 8f6f 	isb	sy
 80046b2:	f04f 0000 	mov.w	r0, #0
 80046b6:	f380 8811 	msr	BASEPRI, r0
 80046ba:	4770      	bx	lr
 80046bc:	f3af 8000 	nop.w

080046c0 <pxCurrentTCBConst2>:
 80046c0:	2000e990 	.word	0x2000e990
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80046c4:	bf00      	nop
 80046c6:	bf00      	nop

080046c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80046c8:	4808      	ldr	r0, [pc, #32]	; (80046ec <prvPortStartFirstTask+0x24>)
 80046ca:	6800      	ldr	r0, [r0, #0]
 80046cc:	6800      	ldr	r0, [r0, #0]
 80046ce:	f380 8808 	msr	MSP, r0
 80046d2:	f04f 0000 	mov.w	r0, #0
 80046d6:	f380 8814 	msr	CONTROL, r0
 80046da:	b662      	cpsie	i
 80046dc:	b661      	cpsie	f
 80046de:	f3bf 8f4f 	dsb	sy
 80046e2:	f3bf 8f6f 	isb	sy
 80046e6:	df00      	svc	0
 80046e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80046ea:	bf00      	nop
 80046ec:	e000ed08 	.word	0xe000ed08

080046f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80046f6:	4b44      	ldr	r3, [pc, #272]	; (8004808 <xPortStartScheduler+0x118>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a44      	ldr	r2, [pc, #272]	; (800480c <xPortStartScheduler+0x11c>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d109      	bne.n	8004714 <xPortStartScheduler+0x24>
 8004700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004704:	f383 8811 	msr	BASEPRI, r3
 8004708:	f3bf 8f6f 	isb	sy
 800470c:	f3bf 8f4f 	dsb	sy
 8004710:	613b      	str	r3, [r7, #16]
 8004712:	e7fe      	b.n	8004712 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004714:	4b3c      	ldr	r3, [pc, #240]	; (8004808 <xPortStartScheduler+0x118>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a3d      	ldr	r2, [pc, #244]	; (8004810 <xPortStartScheduler+0x120>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d109      	bne.n	8004732 <xPortStartScheduler+0x42>
 800471e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004722:	f383 8811 	msr	BASEPRI, r3
 8004726:	f3bf 8f6f 	isb	sy
 800472a:	f3bf 8f4f 	dsb	sy
 800472e:	60fb      	str	r3, [r7, #12]
 8004730:	e7fe      	b.n	8004730 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004732:	4b38      	ldr	r3, [pc, #224]	; (8004814 <xPortStartScheduler+0x124>)
 8004734:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	b2db      	uxtb	r3, r3
 800473c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	22ff      	movs	r2, #255	; 0xff
 8004742:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	b2db      	uxtb	r3, r3
 800474a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800474c:	78fb      	ldrb	r3, [r7, #3]
 800474e:	b2db      	uxtb	r3, r3
 8004750:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004754:	b2da      	uxtb	r2, r3
 8004756:	4b30      	ldr	r3, [pc, #192]	; (8004818 <xPortStartScheduler+0x128>)
 8004758:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800475a:	4b30      	ldr	r3, [pc, #192]	; (800481c <xPortStartScheduler+0x12c>)
 800475c:	2207      	movs	r2, #7
 800475e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004760:	e009      	b.n	8004776 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004762:	4b2e      	ldr	r3, [pc, #184]	; (800481c <xPortStartScheduler+0x12c>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	3b01      	subs	r3, #1
 8004768:	4a2c      	ldr	r2, [pc, #176]	; (800481c <xPortStartScheduler+0x12c>)
 800476a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800476c:	78fb      	ldrb	r3, [r7, #3]
 800476e:	b2db      	uxtb	r3, r3
 8004770:	005b      	lsls	r3, r3, #1
 8004772:	b2db      	uxtb	r3, r3
 8004774:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004776:	78fb      	ldrb	r3, [r7, #3]
 8004778:	b2db      	uxtb	r3, r3
 800477a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800477e:	2b80      	cmp	r3, #128	; 0x80
 8004780:	d0ef      	beq.n	8004762 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004782:	4b26      	ldr	r3, [pc, #152]	; (800481c <xPortStartScheduler+0x12c>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f1c3 0307 	rsb	r3, r3, #7
 800478a:	2b04      	cmp	r3, #4
 800478c:	d009      	beq.n	80047a2 <xPortStartScheduler+0xb2>
 800478e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004792:	f383 8811 	msr	BASEPRI, r3
 8004796:	f3bf 8f6f 	isb	sy
 800479a:	f3bf 8f4f 	dsb	sy
 800479e:	60bb      	str	r3, [r7, #8]
 80047a0:	e7fe      	b.n	80047a0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80047a2:	4b1e      	ldr	r3, [pc, #120]	; (800481c <xPortStartScheduler+0x12c>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	021b      	lsls	r3, r3, #8
 80047a8:	4a1c      	ldr	r2, [pc, #112]	; (800481c <xPortStartScheduler+0x12c>)
 80047aa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80047ac:	4b1b      	ldr	r3, [pc, #108]	; (800481c <xPortStartScheduler+0x12c>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80047b4:	4a19      	ldr	r2, [pc, #100]	; (800481c <xPortStartScheduler+0x12c>)
 80047b6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	b2da      	uxtb	r2, r3
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80047c0:	4a17      	ldr	r2, [pc, #92]	; (8004820 <xPortStartScheduler+0x130>)
 80047c2:	4b17      	ldr	r3, [pc, #92]	; (8004820 <xPortStartScheduler+0x130>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80047ca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80047cc:	4a14      	ldr	r2, [pc, #80]	; (8004820 <xPortStartScheduler+0x130>)
 80047ce:	4b14      	ldr	r3, [pc, #80]	; (8004820 <xPortStartScheduler+0x130>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80047d6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80047d8:	f000 f8d6 	bl	8004988 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80047dc:	4b11      	ldr	r3, [pc, #68]	; (8004824 <xPortStartScheduler+0x134>)
 80047de:	2200      	movs	r2, #0
 80047e0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80047e2:	f000 f8f5 	bl	80049d0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80047e6:	4a10      	ldr	r2, [pc, #64]	; (8004828 <xPortStartScheduler+0x138>)
 80047e8:	4b0f      	ldr	r3, [pc, #60]	; (8004828 <xPortStartScheduler+0x138>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80047f0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80047f2:	f7ff ff69 	bl	80046c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80047f6:	f001 fd6f 	bl	80062d8 <vTaskSwitchContext>
	prvTaskExitError();
 80047fa:	f7ff ff23 	bl	8004644 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80047fe:	2300      	movs	r3, #0
}
 8004800:	4618      	mov	r0, r3
 8004802:	3718      	adds	r7, #24
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	e000ed00 	.word	0xe000ed00
 800480c:	410fc271 	.word	0x410fc271
 8004810:	410fc270 	.word	0x410fc270
 8004814:	e000e400 	.word	0xe000e400
 8004818:	2000ad70 	.word	0x2000ad70
 800481c:	2000ad74 	.word	0x2000ad74
 8004820:	e000ed20 	.word	0xe000ed20
 8004824:	20000018 	.word	0x20000018
 8004828:	e000ef34 	.word	0xe000ef34

0800482c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004836:	f383 8811 	msr	BASEPRI, r3
 800483a:	f3bf 8f6f 	isb	sy
 800483e:	f3bf 8f4f 	dsb	sy
 8004842:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004844:	4b0e      	ldr	r3, [pc, #56]	; (8004880 <vPortEnterCritical+0x54>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	3301      	adds	r3, #1
 800484a:	4a0d      	ldr	r2, [pc, #52]	; (8004880 <vPortEnterCritical+0x54>)
 800484c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800484e:	4b0c      	ldr	r3, [pc, #48]	; (8004880 <vPortEnterCritical+0x54>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2b01      	cmp	r3, #1
 8004854:	d10e      	bne.n	8004874 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004856:	4b0b      	ldr	r3, [pc, #44]	; (8004884 <vPortEnterCritical+0x58>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	b2db      	uxtb	r3, r3
 800485c:	2b00      	cmp	r3, #0
 800485e:	d009      	beq.n	8004874 <vPortEnterCritical+0x48>
 8004860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004864:	f383 8811 	msr	BASEPRI, r3
 8004868:	f3bf 8f6f 	isb	sy
 800486c:	f3bf 8f4f 	dsb	sy
 8004870:	603b      	str	r3, [r7, #0]
 8004872:	e7fe      	b.n	8004872 <vPortEnterCritical+0x46>
	}
}
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr
 8004880:	20000018 	.word	0x20000018
 8004884:	e000ed04 	.word	0xe000ed04

08004888 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800488e:	4b11      	ldr	r3, [pc, #68]	; (80048d4 <vPortExitCritical+0x4c>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d109      	bne.n	80048aa <vPortExitCritical+0x22>
 8004896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489a:	f383 8811 	msr	BASEPRI, r3
 800489e:	f3bf 8f6f 	isb	sy
 80048a2:	f3bf 8f4f 	dsb	sy
 80048a6:	607b      	str	r3, [r7, #4]
 80048a8:	e7fe      	b.n	80048a8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80048aa:	4b0a      	ldr	r3, [pc, #40]	; (80048d4 <vPortExitCritical+0x4c>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	3b01      	subs	r3, #1
 80048b0:	4a08      	ldr	r2, [pc, #32]	; (80048d4 <vPortExitCritical+0x4c>)
 80048b2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80048b4:	4b07      	ldr	r3, [pc, #28]	; (80048d4 <vPortExitCritical+0x4c>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d104      	bne.n	80048c6 <vPortExitCritical+0x3e>
 80048bc:	2300      	movs	r3, #0
 80048be:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80048c6:	bf00      	nop
 80048c8:	370c      	adds	r7, #12
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	20000018 	.word	0x20000018
	...

080048e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80048e0:	f3ef 8009 	mrs	r0, PSP
 80048e4:	f3bf 8f6f 	isb	sy
 80048e8:	4b15      	ldr	r3, [pc, #84]	; (8004940 <pxCurrentTCBConst>)
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	f01e 0f10 	tst.w	lr, #16
 80048f0:	bf08      	it	eq
 80048f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80048f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048fa:	6010      	str	r0, [r2, #0]
 80048fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004900:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004904:	f380 8811 	msr	BASEPRI, r0
 8004908:	f3bf 8f4f 	dsb	sy
 800490c:	f3bf 8f6f 	isb	sy
 8004910:	f001 fce2 	bl	80062d8 <vTaskSwitchContext>
 8004914:	f04f 0000 	mov.w	r0, #0
 8004918:	f380 8811 	msr	BASEPRI, r0
 800491c:	bc09      	pop	{r0, r3}
 800491e:	6819      	ldr	r1, [r3, #0]
 8004920:	6808      	ldr	r0, [r1, #0]
 8004922:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004926:	f01e 0f10 	tst.w	lr, #16
 800492a:	bf08      	it	eq
 800492c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004930:	f380 8809 	msr	PSP, r0
 8004934:	f3bf 8f6f 	isb	sy
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	f3af 8000 	nop.w

08004940 <pxCurrentTCBConst>:
 8004940:	2000e990 	.word	0x2000e990
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004944:	bf00      	nop
 8004946:	bf00      	nop

08004948 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
	__asm volatile
 800494e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004952:	f383 8811 	msr	BASEPRI, r3
 8004956:	f3bf 8f6f 	isb	sy
 800495a:	f3bf 8f4f 	dsb	sy
 800495e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004960:	f001 fc02 	bl	8006168 <xTaskIncrementTick>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d003      	beq.n	8004972 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800496a:	4b06      	ldr	r3, [pc, #24]	; (8004984 <SysTick_Handler+0x3c>)
 800496c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004970:	601a      	str	r2, [r3, #0]
 8004972:	2300      	movs	r3, #0
 8004974:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800497c:	bf00      	nop
 800497e:	3708      	adds	r7, #8
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	e000ed04 	.word	0xe000ed04

08004988 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004988:	b480      	push	{r7}
 800498a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800498c:	4b0b      	ldr	r3, [pc, #44]	; (80049bc <vPortSetupTimerInterrupt+0x34>)
 800498e:	2200      	movs	r2, #0
 8004990:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004992:	4b0b      	ldr	r3, [pc, #44]	; (80049c0 <vPortSetupTimerInterrupt+0x38>)
 8004994:	2200      	movs	r2, #0
 8004996:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004998:	4a0a      	ldr	r2, [pc, #40]	; (80049c4 <vPortSetupTimerInterrupt+0x3c>)
 800499a:	4b0b      	ldr	r3, [pc, #44]	; (80049c8 <vPortSetupTimerInterrupt+0x40>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	490b      	ldr	r1, [pc, #44]	; (80049cc <vPortSetupTimerInterrupt+0x44>)
 80049a0:	fba1 1303 	umull	r1, r3, r1, r3
 80049a4:	099b      	lsrs	r3, r3, #6
 80049a6:	3b01      	subs	r3, #1
 80049a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80049aa:	4b04      	ldr	r3, [pc, #16]	; (80049bc <vPortSetupTimerInterrupt+0x34>)
 80049ac:	2207      	movs	r2, #7
 80049ae:	601a      	str	r2, [r3, #0]
}
 80049b0:	bf00      	nop
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	e000e010 	.word	0xe000e010
 80049c0:	e000e018 	.word	0xe000e018
 80049c4:	e000e014 	.word	0xe000e014
 80049c8:	2000001c 	.word	0x2000001c
 80049cc:	10624dd3 	.word	0x10624dd3

080049d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80049d0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80049e0 <vPortEnableVFP+0x10>
 80049d4:	6801      	ldr	r1, [r0, #0]
 80049d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80049da:	6001      	str	r1, [r0, #0]
 80049dc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80049de:	bf00      	nop
 80049e0:	e000ed88 	.word	0xe000ed88

080049e4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80049ea:	f3ef 8305 	mrs	r3, IPSR
 80049ee:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2b0f      	cmp	r3, #15
 80049f4:	d913      	bls.n	8004a1e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80049f6:	4a16      	ldr	r2, [pc, #88]	; (8004a50 <vPortValidateInterruptPriority+0x6c>)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	4413      	add	r3, r2
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004a00:	4b14      	ldr	r3, [pc, #80]	; (8004a54 <vPortValidateInterruptPriority+0x70>)
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	7afa      	ldrb	r2, [r7, #11]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d209      	bcs.n	8004a1e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8004a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a0e:	f383 8811 	msr	BASEPRI, r3
 8004a12:	f3bf 8f6f 	isb	sy
 8004a16:	f3bf 8f4f 	dsb	sy
 8004a1a:	607b      	str	r3, [r7, #4]
 8004a1c:	e7fe      	b.n	8004a1c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004a1e:	4b0e      	ldr	r3, [pc, #56]	; (8004a58 <vPortValidateInterruptPriority+0x74>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a26:	4b0d      	ldr	r3, [pc, #52]	; (8004a5c <vPortValidateInterruptPriority+0x78>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d909      	bls.n	8004a42 <vPortValidateInterruptPriority+0x5e>
 8004a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a32:	f383 8811 	msr	BASEPRI, r3
 8004a36:	f3bf 8f6f 	isb	sy
 8004a3a:	f3bf 8f4f 	dsb	sy
 8004a3e:	603b      	str	r3, [r7, #0]
 8004a40:	e7fe      	b.n	8004a40 <vPortValidateInterruptPriority+0x5c>
	}
 8004a42:	bf00      	nop
 8004a44:	3714      	adds	r7, #20
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	e000e3f0 	.word	0xe000e3f0
 8004a54:	2000ad70 	.word	0x2000ad70
 8004a58:	e000ed0c 	.word	0xe000ed0c
 8004a5c:	2000ad74 	.word	0x2000ad74

08004a60 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b08a      	sub	sp, #40	; 0x28
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004a6c:	f001 fac2 	bl	8005ff4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004a70:	4b57      	ldr	r3, [pc, #348]	; (8004bd0 <pvPortMalloc+0x170>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d101      	bne.n	8004a7c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004a78:	f000 f90c 	bl	8004c94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004a7c:	4b55      	ldr	r3, [pc, #340]	; (8004bd4 <pvPortMalloc+0x174>)
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4013      	ands	r3, r2
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f040 808c 	bne.w	8004ba2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d01c      	beq.n	8004aca <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004a90:	2208      	movs	r2, #8
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4413      	add	r3, r2
 8004a96:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f003 0307 	and.w	r3, r3, #7
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d013      	beq.n	8004aca <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f023 0307 	bic.w	r3, r3, #7
 8004aa8:	3308      	adds	r3, #8
 8004aaa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f003 0307 	and.w	r3, r3, #7
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d009      	beq.n	8004aca <pvPortMalloc+0x6a>
 8004ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aba:	f383 8811 	msr	BASEPRI, r3
 8004abe:	f3bf 8f6f 	isb	sy
 8004ac2:	f3bf 8f4f 	dsb	sy
 8004ac6:	617b      	str	r3, [r7, #20]
 8004ac8:	e7fe      	b.n	8004ac8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d068      	beq.n	8004ba2 <pvPortMalloc+0x142>
 8004ad0:	4b41      	ldr	r3, [pc, #260]	; (8004bd8 <pvPortMalloc+0x178>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d863      	bhi.n	8004ba2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004ada:	4b40      	ldr	r3, [pc, #256]	; (8004bdc <pvPortMalloc+0x17c>)
 8004adc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004ade:	4b3f      	ldr	r3, [pc, #252]	; (8004bdc <pvPortMalloc+0x17c>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ae4:	e004      	b.n	8004af0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af2:	685a      	ldr	r2, [r3, #4]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d203      	bcs.n	8004b02 <pvPortMalloc+0xa2>
 8004afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1f1      	bne.n	8004ae6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004b02:	4b33      	ldr	r3, [pc, #204]	; (8004bd0 <pvPortMalloc+0x170>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d04a      	beq.n	8004ba2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004b0c:	6a3b      	ldr	r3, [r7, #32]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2208      	movs	r2, #8
 8004b12:	4413      	add	r3, r2
 8004b14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	6a3b      	ldr	r3, [r7, #32]
 8004b1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b20:	685a      	ldr	r2, [r3, #4]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	1ad2      	subs	r2, r2, r3
 8004b26:	2308      	movs	r3, #8
 8004b28:	005b      	lsls	r3, r3, #1
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d91e      	bls.n	8004b6c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4413      	add	r3, r2
 8004b34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	f003 0307 	and.w	r3, r3, #7
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d009      	beq.n	8004b54 <pvPortMalloc+0xf4>
 8004b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b44:	f383 8811 	msr	BASEPRI, r3
 8004b48:	f3bf 8f6f 	isb	sy
 8004b4c:	f3bf 8f4f 	dsb	sy
 8004b50:	613b      	str	r3, [r7, #16]
 8004b52:	e7fe      	b.n	8004b52 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b56:	685a      	ldr	r2, [r3, #4]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	1ad2      	subs	r2, r2, r3
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004b66:	69b8      	ldr	r0, [r7, #24]
 8004b68:	f000 f8f6 	bl	8004d58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b6c:	4b1a      	ldr	r3, [pc, #104]	; (8004bd8 <pvPortMalloc+0x178>)
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	4a18      	ldr	r2, [pc, #96]	; (8004bd8 <pvPortMalloc+0x178>)
 8004b78:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b7a:	4b17      	ldr	r3, [pc, #92]	; (8004bd8 <pvPortMalloc+0x178>)
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	4b18      	ldr	r3, [pc, #96]	; (8004be0 <pvPortMalloc+0x180>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d203      	bcs.n	8004b8e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b86:	4b14      	ldr	r3, [pc, #80]	; (8004bd8 <pvPortMalloc+0x178>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a15      	ldr	r2, [pc, #84]	; (8004be0 <pvPortMalloc+0x180>)
 8004b8c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b90:	685a      	ldr	r2, [r3, #4]
 8004b92:	4b10      	ldr	r3, [pc, #64]	; (8004bd4 <pvPortMalloc+0x174>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	431a      	orrs	r2, r3
 8004b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004ba2:	f001 fa35 	bl	8006010 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	f003 0307 	and.w	r3, r3, #7
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d009      	beq.n	8004bc4 <pvPortMalloc+0x164>
 8004bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb4:	f383 8811 	msr	BASEPRI, r3
 8004bb8:	f3bf 8f6f 	isb	sy
 8004bbc:	f3bf 8f4f 	dsb	sy
 8004bc0:	60fb      	str	r3, [r7, #12]
 8004bc2:	e7fe      	b.n	8004bc2 <pvPortMalloc+0x162>
	return pvReturn;
 8004bc4:	69fb      	ldr	r3, [r7, #28]
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3728      	adds	r7, #40	; 0x28
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	2000e980 	.word	0x2000e980
 8004bd4:	2000e98c 	.word	0x2000e98c
 8004bd8:	2000e984 	.word	0x2000e984
 8004bdc:	2000e978 	.word	0x2000e978
 8004be0:	2000e988 	.word	0x2000e988

08004be4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b086      	sub	sp, #24
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d046      	beq.n	8004c84 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004bf6:	2308      	movs	r3, #8
 8004bf8:	425b      	negs	r3, r3
 8004bfa:	697a      	ldr	r2, [r7, #20]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	685a      	ldr	r2, [r3, #4]
 8004c08:	4b20      	ldr	r3, [pc, #128]	; (8004c8c <vPortFree+0xa8>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d109      	bne.n	8004c26 <vPortFree+0x42>
 8004c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c16:	f383 8811 	msr	BASEPRI, r3
 8004c1a:	f3bf 8f6f 	isb	sy
 8004c1e:	f3bf 8f4f 	dsb	sy
 8004c22:	60fb      	str	r3, [r7, #12]
 8004c24:	e7fe      	b.n	8004c24 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d009      	beq.n	8004c42 <vPortFree+0x5e>
 8004c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c32:	f383 8811 	msr	BASEPRI, r3
 8004c36:	f3bf 8f6f 	isb	sy
 8004c3a:	f3bf 8f4f 	dsb	sy
 8004c3e:	60bb      	str	r3, [r7, #8]
 8004c40:	e7fe      	b.n	8004c40 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	685a      	ldr	r2, [r3, #4]
 8004c46:	4b11      	ldr	r3, [pc, #68]	; (8004c8c <vPortFree+0xa8>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d019      	beq.n	8004c84 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d115      	bne.n	8004c84 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	685a      	ldr	r2, [r3, #4]
 8004c5c:	4b0b      	ldr	r3, [pc, #44]	; (8004c8c <vPortFree+0xa8>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	43db      	mvns	r3, r3
 8004c62:	401a      	ands	r2, r3
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004c68:	f001 f9c4 	bl	8005ff4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	685a      	ldr	r2, [r3, #4]
 8004c70:	4b07      	ldr	r3, [pc, #28]	; (8004c90 <vPortFree+0xac>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4413      	add	r3, r2
 8004c76:	4a06      	ldr	r2, [pc, #24]	; (8004c90 <vPortFree+0xac>)
 8004c78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c7a:	6938      	ldr	r0, [r7, #16]
 8004c7c:	f000 f86c 	bl	8004d58 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004c80:	f001 f9c6 	bl	8006010 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004c84:	bf00      	nop
 8004c86:	3718      	adds	r7, #24
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	2000e98c 	.word	0x2000e98c
 8004c90:	2000e984 	.word	0x2000e984

08004c94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004c94:	b480      	push	{r7}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004c9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004c9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004ca0:	4b27      	ldr	r3, [pc, #156]	; (8004d40 <prvHeapInit+0xac>)
 8004ca2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f003 0307 	and.w	r3, r3, #7
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00c      	beq.n	8004cc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	3307      	adds	r3, #7
 8004cb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f023 0307 	bic.w	r3, r3, #7
 8004cba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004cbc:	68ba      	ldr	r2, [r7, #8]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	4a1f      	ldr	r2, [pc, #124]	; (8004d40 <prvHeapInit+0xac>)
 8004cc4:	4413      	add	r3, r2
 8004cc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004ccc:	4a1d      	ldr	r2, [pc, #116]	; (8004d44 <prvHeapInit+0xb0>)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004cd2:	4b1c      	ldr	r3, [pc, #112]	; (8004d44 <prvHeapInit+0xb0>)
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	4413      	add	r3, r2
 8004cde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004ce0:	2208      	movs	r2, #8
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	1a9b      	subs	r3, r3, r2
 8004ce6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f023 0307 	bic.w	r3, r3, #7
 8004cee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	4a15      	ldr	r2, [pc, #84]	; (8004d48 <prvHeapInit+0xb4>)
 8004cf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004cf6:	4b14      	ldr	r3, [pc, #80]	; (8004d48 <prvHeapInit+0xb4>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004cfe:	4b12      	ldr	r3, [pc, #72]	; (8004d48 <prvHeapInit+0xb4>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2200      	movs	r2, #0
 8004d04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	1ad2      	subs	r2, r2, r3
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004d14:	4b0c      	ldr	r3, [pc, #48]	; (8004d48 <prvHeapInit+0xb4>)
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	4a0a      	ldr	r2, [pc, #40]	; (8004d4c <prvHeapInit+0xb8>)
 8004d22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	4a09      	ldr	r2, [pc, #36]	; (8004d50 <prvHeapInit+0xbc>)
 8004d2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004d2c:	4b09      	ldr	r3, [pc, #36]	; (8004d54 <prvHeapInit+0xc0>)
 8004d2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004d32:	601a      	str	r2, [r3, #0]
}
 8004d34:	bf00      	nop
 8004d36:	3714      	adds	r7, #20
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr
 8004d40:	2000ad78 	.word	0x2000ad78
 8004d44:	2000e978 	.word	0x2000e978
 8004d48:	2000e980 	.word	0x2000e980
 8004d4c:	2000e988 	.word	0x2000e988
 8004d50:	2000e984 	.word	0x2000e984
 8004d54:	2000e98c 	.word	0x2000e98c

08004d58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d60:	4b28      	ldr	r3, [pc, #160]	; (8004e04 <prvInsertBlockIntoFreeList+0xac>)
 8004d62:	60fb      	str	r3, [r7, #12]
 8004d64:	e002      	b.n	8004d6c <prvInsertBlockIntoFreeList+0x14>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	60fb      	str	r3, [r7, #12]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d3f7      	bcc.n	8004d66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	68ba      	ldr	r2, [r7, #8]
 8004d80:	441a      	add	r2, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d108      	bne.n	8004d9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	685a      	ldr	r2, [r3, #4]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	441a      	add	r2, r3
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	441a      	add	r2, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d118      	bne.n	8004de0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	4b15      	ldr	r3, [pc, #84]	; (8004e08 <prvInsertBlockIntoFreeList+0xb0>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d00d      	beq.n	8004dd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685a      	ldr	r2, [r3, #4]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	441a      	add	r2, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	601a      	str	r2, [r3, #0]
 8004dd4:	e008      	b.n	8004de8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004dd6:	4b0c      	ldr	r3, [pc, #48]	; (8004e08 <prvInsertBlockIntoFreeList+0xb0>)
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	601a      	str	r2, [r3, #0]
 8004dde:	e003      	b.n	8004de8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d002      	beq.n	8004df6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004df6:	bf00      	nop
 8004df8:	3714      	adds	r7, #20
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	2000e978 	.word	0x2000e978
 8004e08:	2000e980 	.word	0x2000e980

08004e0c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d109      	bne.n	8004e34 <xQueueGenericReset+0x28>
 8004e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e24:	f383 8811 	msr	BASEPRI, r3
 8004e28:	f3bf 8f6f 	isb	sy
 8004e2c:	f3bf 8f4f 	dsb	sy
 8004e30:	60bb      	str	r3, [r7, #8]
 8004e32:	e7fe      	b.n	8004e32 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004e34:	f7ff fcfa 	bl	800482c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e40:	68f9      	ldr	r1, [r7, #12]
 8004e42:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004e44:	fb01 f303 	mul.w	r3, r1, r3
 8004e48:	441a      	add	r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2200      	movs	r2, #0
 8004e52:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e64:	3b01      	subs	r3, #1
 8004e66:	68f9      	ldr	r1, [r7, #12]
 8004e68:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004e6a:	fb01 f303 	mul.w	r3, r1, r3
 8004e6e:	441a      	add	r2, r3
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	22ff      	movs	r2, #255	; 0xff
 8004e78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	22ff      	movs	r2, #255	; 0xff
 8004e80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d114      	bne.n	8004eb4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d01a      	beq.n	8004ec8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	3310      	adds	r3, #16
 8004e96:	4618      	mov	r0, r3
 8004e98:	f001 fac8 	bl	800642c <xTaskRemoveFromEventList>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d012      	beq.n	8004ec8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004ea2:	4b0d      	ldr	r3, [pc, #52]	; (8004ed8 <xQueueGenericReset+0xcc>)
 8004ea4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ea8:	601a      	str	r2, [r3, #0]
 8004eaa:	f3bf 8f4f 	dsb	sy
 8004eae:	f3bf 8f6f 	isb	sy
 8004eb2:	e009      	b.n	8004ec8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	3310      	adds	r3, #16
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7ff fadb 	bl	8004474 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	3324      	adds	r3, #36	; 0x24
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7ff fad6 	bl	8004474 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004ec8:	f7ff fcde 	bl	8004888 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004ecc:	2301      	movs	r3, #1
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3710      	adds	r7, #16
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	e000ed04 	.word	0xe000ed04

08004edc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b08e      	sub	sp, #56	; 0x38
 8004ee0:	af02      	add	r7, sp, #8
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
 8004ee8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d109      	bne.n	8004f04 <xQueueGenericCreateStatic+0x28>
 8004ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef4:	f383 8811 	msr	BASEPRI, r3
 8004ef8:	f3bf 8f6f 	isb	sy
 8004efc:	f3bf 8f4f 	dsb	sy
 8004f00:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f02:	e7fe      	b.n	8004f02 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d109      	bne.n	8004f1e <xQueueGenericCreateStatic+0x42>
 8004f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f0e:	f383 8811 	msr	BASEPRI, r3
 8004f12:	f3bf 8f6f 	isb	sy
 8004f16:	f3bf 8f4f 	dsb	sy
 8004f1a:	627b      	str	r3, [r7, #36]	; 0x24
 8004f1c:	e7fe      	b.n	8004f1c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d002      	beq.n	8004f2a <xQueueGenericCreateStatic+0x4e>
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d001      	beq.n	8004f2e <xQueueGenericCreateStatic+0x52>
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e000      	b.n	8004f30 <xQueueGenericCreateStatic+0x54>
 8004f2e:	2300      	movs	r3, #0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d109      	bne.n	8004f48 <xQueueGenericCreateStatic+0x6c>
 8004f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f38:	f383 8811 	msr	BASEPRI, r3
 8004f3c:	f3bf 8f6f 	isb	sy
 8004f40:	f3bf 8f4f 	dsb	sy
 8004f44:	623b      	str	r3, [r7, #32]
 8004f46:	e7fe      	b.n	8004f46 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d102      	bne.n	8004f54 <xQueueGenericCreateStatic+0x78>
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d101      	bne.n	8004f58 <xQueueGenericCreateStatic+0x7c>
 8004f54:	2301      	movs	r3, #1
 8004f56:	e000      	b.n	8004f5a <xQueueGenericCreateStatic+0x7e>
 8004f58:	2300      	movs	r3, #0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d109      	bne.n	8004f72 <xQueueGenericCreateStatic+0x96>
 8004f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f62:	f383 8811 	msr	BASEPRI, r3
 8004f66:	f3bf 8f6f 	isb	sy
 8004f6a:	f3bf 8f4f 	dsb	sy
 8004f6e:	61fb      	str	r3, [r7, #28]
 8004f70:	e7fe      	b.n	8004f70 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004f72:	2350      	movs	r3, #80	; 0x50
 8004f74:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	2b50      	cmp	r3, #80	; 0x50
 8004f7a:	d009      	beq.n	8004f90 <xQueueGenericCreateStatic+0xb4>
 8004f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f80:	f383 8811 	msr	BASEPRI, r3
 8004f84:	f3bf 8f6f 	isb	sy
 8004f88:	f3bf 8f4f 	dsb	sy
 8004f8c:	61bb      	str	r3, [r7, #24]
 8004f8e:	e7fe      	b.n	8004f8e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004f90:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d00d      	beq.n	8004fb8 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004fa4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004faa:	9300      	str	r3, [sp, #0]
 8004fac:	4613      	mov	r3, r2
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	68b9      	ldr	r1, [r7, #8]
 8004fb2:	68f8      	ldr	r0, [r7, #12]
 8004fb4:	f000 f844 	bl	8005040 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3730      	adds	r7, #48	; 0x30
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}

08004fc2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	b08a      	sub	sp, #40	; 0x28
 8004fc6:	af02      	add	r7, sp, #8
 8004fc8:	60f8      	str	r0, [r7, #12]
 8004fca:	60b9      	str	r1, [r7, #8]
 8004fcc:	4613      	mov	r3, r2
 8004fce:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d109      	bne.n	8004fea <xQueueGenericCreate+0x28>
 8004fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fda:	f383 8811 	msr	BASEPRI, r3
 8004fde:	f3bf 8f6f 	isb	sy
 8004fe2:	f3bf 8f4f 	dsb	sy
 8004fe6:	613b      	str	r3, [r7, #16]
 8004fe8:	e7fe      	b.n	8004fe8 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d102      	bne.n	8004ff6 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	61fb      	str	r3, [r7, #28]
 8004ff4:	e004      	b.n	8005000 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	68ba      	ldr	r2, [r7, #8]
 8004ffa:	fb02 f303 	mul.w	r3, r2, r3
 8004ffe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	3350      	adds	r3, #80	; 0x50
 8005004:	4618      	mov	r0, r3
 8005006:	f7ff fd2b 	bl	8004a60 <pvPortMalloc>
 800500a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d011      	beq.n	8005036 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	3350      	adds	r3, #80	; 0x50
 800501a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	2200      	movs	r2, #0
 8005020:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005024:	79fa      	ldrb	r2, [r7, #7]
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	9300      	str	r3, [sp, #0]
 800502a:	4613      	mov	r3, r2
 800502c:	697a      	ldr	r2, [r7, #20]
 800502e:	68b9      	ldr	r1, [r7, #8]
 8005030:	68f8      	ldr	r0, [r7, #12]
 8005032:	f000 f805 	bl	8005040 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005036:	69bb      	ldr	r3, [r7, #24]
	}
 8005038:	4618      	mov	r0, r3
 800503a:	3720      	adds	r7, #32
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	607a      	str	r2, [r7, #4]
 800504c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d103      	bne.n	800505c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	69ba      	ldr	r2, [r7, #24]
 8005058:	601a      	str	r2, [r3, #0]
 800505a:	e002      	b.n	8005062 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	68ba      	ldr	r2, [r7, #8]
 800506c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800506e:	2101      	movs	r1, #1
 8005070:	69b8      	ldr	r0, [r7, #24]
 8005072:	f7ff fecb 	bl	8004e0c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	78fa      	ldrb	r2, [r7, #3]
 800507a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800507e:	bf00      	nop
 8005080:	3710      	adds	r7, #16
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
	...

08005088 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b08e      	sub	sp, #56	; 0x38
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	607a      	str	r2, [r7, #4]
 8005094:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005096:	2300      	movs	r3, #0
 8005098:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800509e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d109      	bne.n	80050b8 <xQueueGenericSend+0x30>
 80050a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a8:	f383 8811 	msr	BASEPRI, r3
 80050ac:	f3bf 8f6f 	isb	sy
 80050b0:	f3bf 8f4f 	dsb	sy
 80050b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80050b6:	e7fe      	b.n	80050b6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d103      	bne.n	80050c6 <xQueueGenericSend+0x3e>
 80050be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d101      	bne.n	80050ca <xQueueGenericSend+0x42>
 80050c6:	2301      	movs	r3, #1
 80050c8:	e000      	b.n	80050cc <xQueueGenericSend+0x44>
 80050ca:	2300      	movs	r3, #0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d109      	bne.n	80050e4 <xQueueGenericSend+0x5c>
 80050d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d4:	f383 8811 	msr	BASEPRI, r3
 80050d8:	f3bf 8f6f 	isb	sy
 80050dc:	f3bf 8f4f 	dsb	sy
 80050e0:	627b      	str	r3, [r7, #36]	; 0x24
 80050e2:	e7fe      	b.n	80050e2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d103      	bne.n	80050f2 <xQueueGenericSend+0x6a>
 80050ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d101      	bne.n	80050f6 <xQueueGenericSend+0x6e>
 80050f2:	2301      	movs	r3, #1
 80050f4:	e000      	b.n	80050f8 <xQueueGenericSend+0x70>
 80050f6:	2300      	movs	r3, #0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d109      	bne.n	8005110 <xQueueGenericSend+0x88>
 80050fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005100:	f383 8811 	msr	BASEPRI, r3
 8005104:	f3bf 8f6f 	isb	sy
 8005108:	f3bf 8f4f 	dsb	sy
 800510c:	623b      	str	r3, [r7, #32]
 800510e:	e7fe      	b.n	800510e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005110:	f001 fb42 	bl	8006798 <xTaskGetSchedulerState>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d102      	bne.n	8005120 <xQueueGenericSend+0x98>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d101      	bne.n	8005124 <xQueueGenericSend+0x9c>
 8005120:	2301      	movs	r3, #1
 8005122:	e000      	b.n	8005126 <xQueueGenericSend+0x9e>
 8005124:	2300      	movs	r3, #0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d109      	bne.n	800513e <xQueueGenericSend+0xb6>
 800512a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800512e:	f383 8811 	msr	BASEPRI, r3
 8005132:	f3bf 8f6f 	isb	sy
 8005136:	f3bf 8f4f 	dsb	sy
 800513a:	61fb      	str	r3, [r7, #28]
 800513c:	e7fe      	b.n	800513c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800513e:	f7ff fb75 	bl	800482c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005144:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800514a:	429a      	cmp	r2, r3
 800514c:	d302      	bcc.n	8005154 <xQueueGenericSend+0xcc>
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	2b02      	cmp	r3, #2
 8005152:	d129      	bne.n	80051a8 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005154:	683a      	ldr	r2, [r7, #0]
 8005156:	68b9      	ldr	r1, [r7, #8]
 8005158:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800515a:	f000 fba9 	bl	80058b0 <prvCopyDataToQueue>
 800515e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005164:	2b00      	cmp	r3, #0
 8005166:	d010      	beq.n	800518a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800516a:	3324      	adds	r3, #36	; 0x24
 800516c:	4618      	mov	r0, r3
 800516e:	f001 f95d 	bl	800642c <xTaskRemoveFromEventList>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d013      	beq.n	80051a0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005178:	4b3f      	ldr	r3, [pc, #252]	; (8005278 <xQueueGenericSend+0x1f0>)
 800517a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800517e:	601a      	str	r2, [r3, #0]
 8005180:	f3bf 8f4f 	dsb	sy
 8005184:	f3bf 8f6f 	isb	sy
 8005188:	e00a      	b.n	80051a0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800518a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800518c:	2b00      	cmp	r3, #0
 800518e:	d007      	beq.n	80051a0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005190:	4b39      	ldr	r3, [pc, #228]	; (8005278 <xQueueGenericSend+0x1f0>)
 8005192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005196:	601a      	str	r2, [r3, #0]
 8005198:	f3bf 8f4f 	dsb	sy
 800519c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80051a0:	f7ff fb72 	bl	8004888 <vPortExitCritical>
				return pdPASS;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e063      	b.n	8005270 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d103      	bne.n	80051b6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80051ae:	f7ff fb6b 	bl	8004888 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80051b2:	2300      	movs	r3, #0
 80051b4:	e05c      	b.n	8005270 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80051b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d106      	bne.n	80051ca <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80051bc:	f107 0314 	add.w	r3, r7, #20
 80051c0:	4618      	mov	r0, r3
 80051c2:	f001 f995 	bl	80064f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80051c6:	2301      	movs	r3, #1
 80051c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80051ca:	f7ff fb5d 	bl	8004888 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80051ce:	f000 ff11 	bl	8005ff4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80051d2:	f7ff fb2b 	bl	800482c <vPortEnterCritical>
 80051d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051dc:	b25b      	sxtb	r3, r3
 80051de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051e2:	d103      	bne.n	80051ec <xQueueGenericSend+0x164>
 80051e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051f2:	b25b      	sxtb	r3, r3
 80051f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051f8:	d103      	bne.n	8005202 <xQueueGenericSend+0x17a>
 80051fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005202:	f7ff fb41 	bl	8004888 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005206:	1d3a      	adds	r2, r7, #4
 8005208:	f107 0314 	add.w	r3, r7, #20
 800520c:	4611      	mov	r1, r2
 800520e:	4618      	mov	r0, r3
 8005210:	f001 f984 	bl	800651c <xTaskCheckForTimeOut>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d124      	bne.n	8005264 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800521a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800521c:	f000 fc40 	bl	8005aa0 <prvIsQueueFull>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d018      	beq.n	8005258 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005228:	3310      	adds	r3, #16
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	4611      	mov	r1, r2
 800522e:	4618      	mov	r0, r3
 8005230:	f001 f8ae 	bl	8006390 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005234:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005236:	f000 fbcb 	bl	80059d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800523a:	f000 fee9 	bl	8006010 <xTaskResumeAll>
 800523e:	4603      	mov	r3, r0
 8005240:	2b00      	cmp	r3, #0
 8005242:	f47f af7c 	bne.w	800513e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8005246:	4b0c      	ldr	r3, [pc, #48]	; (8005278 <xQueueGenericSend+0x1f0>)
 8005248:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800524c:	601a      	str	r2, [r3, #0]
 800524e:	f3bf 8f4f 	dsb	sy
 8005252:	f3bf 8f6f 	isb	sy
 8005256:	e772      	b.n	800513e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005258:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800525a:	f000 fbb9 	bl	80059d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800525e:	f000 fed7 	bl	8006010 <xTaskResumeAll>
 8005262:	e76c      	b.n	800513e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005264:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005266:	f000 fbb3 	bl	80059d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800526a:	f000 fed1 	bl	8006010 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800526e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005270:	4618      	mov	r0, r3
 8005272:	3738      	adds	r7, #56	; 0x38
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	e000ed04 	.word	0xe000ed04

0800527c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b08e      	sub	sp, #56	; 0x38
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	607a      	str	r2, [r7, #4]
 8005288:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800528e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005290:	2b00      	cmp	r3, #0
 8005292:	d109      	bne.n	80052a8 <xQueueGenericSendFromISR+0x2c>
 8005294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005298:	f383 8811 	msr	BASEPRI, r3
 800529c:	f3bf 8f6f 	isb	sy
 80052a0:	f3bf 8f4f 	dsb	sy
 80052a4:	627b      	str	r3, [r7, #36]	; 0x24
 80052a6:	e7fe      	b.n	80052a6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d103      	bne.n	80052b6 <xQueueGenericSendFromISR+0x3a>
 80052ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d101      	bne.n	80052ba <xQueueGenericSendFromISR+0x3e>
 80052b6:	2301      	movs	r3, #1
 80052b8:	e000      	b.n	80052bc <xQueueGenericSendFromISR+0x40>
 80052ba:	2300      	movs	r3, #0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d109      	bne.n	80052d4 <xQueueGenericSendFromISR+0x58>
 80052c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c4:	f383 8811 	msr	BASEPRI, r3
 80052c8:	f3bf 8f6f 	isb	sy
 80052cc:	f3bf 8f4f 	dsb	sy
 80052d0:	623b      	str	r3, [r7, #32]
 80052d2:	e7fe      	b.n	80052d2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d103      	bne.n	80052e2 <xQueueGenericSendFromISR+0x66>
 80052da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d101      	bne.n	80052e6 <xQueueGenericSendFromISR+0x6a>
 80052e2:	2301      	movs	r3, #1
 80052e4:	e000      	b.n	80052e8 <xQueueGenericSendFromISR+0x6c>
 80052e6:	2300      	movs	r3, #0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d109      	bne.n	8005300 <xQueueGenericSendFromISR+0x84>
 80052ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f0:	f383 8811 	msr	BASEPRI, r3
 80052f4:	f3bf 8f6f 	isb	sy
 80052f8:	f3bf 8f4f 	dsb	sy
 80052fc:	61fb      	str	r3, [r7, #28]
 80052fe:	e7fe      	b.n	80052fe <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005300:	f7ff fb70 	bl	80049e4 <vPortValidateInterruptPriority>
	__asm volatile
 8005304:	f3ef 8211 	mrs	r2, BASEPRI
 8005308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800530c:	f383 8811 	msr	BASEPRI, r3
 8005310:	f3bf 8f6f 	isb	sy
 8005314:	f3bf 8f4f 	dsb	sy
 8005318:	61ba      	str	r2, [r7, #24]
 800531a:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800531c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800531e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005322:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005328:	429a      	cmp	r2, r3
 800532a:	d302      	bcc.n	8005332 <xQueueGenericSendFromISR+0xb6>
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	2b02      	cmp	r3, #2
 8005330:	d12c      	bne.n	800538c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005334:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005338:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800533c:	683a      	ldr	r2, [r7, #0]
 800533e:	68b9      	ldr	r1, [r7, #8]
 8005340:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005342:	f000 fab5 	bl	80058b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005346:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800534a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800534e:	d112      	bne.n	8005376 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005354:	2b00      	cmp	r3, #0
 8005356:	d016      	beq.n	8005386 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535a:	3324      	adds	r3, #36	; 0x24
 800535c:	4618      	mov	r0, r3
 800535e:	f001 f865 	bl	800642c <xTaskRemoveFromEventList>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d00e      	beq.n	8005386 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00b      	beq.n	8005386 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2201      	movs	r2, #1
 8005372:	601a      	str	r2, [r3, #0]
 8005374:	e007      	b.n	8005386 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005376:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800537a:	3301      	adds	r3, #1
 800537c:	b2db      	uxtb	r3, r3
 800537e:	b25a      	sxtb	r2, r3
 8005380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005382:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005386:	2301      	movs	r3, #1
 8005388:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800538a:	e001      	b.n	8005390 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800538c:	2300      	movs	r3, #0
 800538e:	637b      	str	r3, [r7, #52]	; 0x34
 8005390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005392:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800539a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800539c:	4618      	mov	r0, r3
 800539e:	3738      	adds	r7, #56	; 0x38
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b08e      	sub	sp, #56	; 0x38
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80053b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d109      	bne.n	80053cc <xQueueGiveFromISR+0x28>
	__asm volatile
 80053b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053bc:	f383 8811 	msr	BASEPRI, r3
 80053c0:	f3bf 8f6f 	isb	sy
 80053c4:	f3bf 8f4f 	dsb	sy
 80053c8:	623b      	str	r3, [r7, #32]
 80053ca:	e7fe      	b.n	80053ca <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80053cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d009      	beq.n	80053e8 <xQueueGiveFromISR+0x44>
 80053d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d8:	f383 8811 	msr	BASEPRI, r3
 80053dc:	f3bf 8f6f 	isb	sy
 80053e0:	f3bf 8f4f 	dsb	sy
 80053e4:	61fb      	str	r3, [r7, #28]
 80053e6:	e7fe      	b.n	80053e6 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80053e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d103      	bne.n	80053f8 <xQueueGiveFromISR+0x54>
 80053f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d101      	bne.n	80053fc <xQueueGiveFromISR+0x58>
 80053f8:	2301      	movs	r3, #1
 80053fa:	e000      	b.n	80053fe <xQueueGiveFromISR+0x5a>
 80053fc:	2300      	movs	r3, #0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d109      	bne.n	8005416 <xQueueGiveFromISR+0x72>
 8005402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005406:	f383 8811 	msr	BASEPRI, r3
 800540a:	f3bf 8f6f 	isb	sy
 800540e:	f3bf 8f4f 	dsb	sy
 8005412:	61bb      	str	r3, [r7, #24]
 8005414:	e7fe      	b.n	8005414 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005416:	f7ff fae5 	bl	80049e4 <vPortValidateInterruptPriority>
	__asm volatile
 800541a:	f3ef 8211 	mrs	r2, BASEPRI
 800541e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005422:	f383 8811 	msr	BASEPRI, r3
 8005426:	f3bf 8f6f 	isb	sy
 800542a:	f3bf 8f4f 	dsb	sy
 800542e:	617a      	str	r2, [r7, #20]
 8005430:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005432:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005434:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800543a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800543c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800543e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005442:	429a      	cmp	r2, r3
 8005444:	d92b      	bls.n	800549e <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005448:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800544c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005452:	1c5a      	adds	r2, r3, #1
 8005454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005456:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005458:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800545c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005460:	d112      	bne.n	8005488 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005466:	2b00      	cmp	r3, #0
 8005468:	d016      	beq.n	8005498 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800546a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546c:	3324      	adds	r3, #36	; 0x24
 800546e:	4618      	mov	r0, r3
 8005470:	f000 ffdc 	bl	800642c <xTaskRemoveFromEventList>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00e      	beq.n	8005498 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00b      	beq.n	8005498 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	2201      	movs	r2, #1
 8005484:	601a      	str	r2, [r3, #0]
 8005486:	e007      	b.n	8005498 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005488:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800548c:	3301      	adds	r3, #1
 800548e:	b2db      	uxtb	r3, r3
 8005490:	b25a      	sxtb	r2, r3
 8005492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005494:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005498:	2301      	movs	r3, #1
 800549a:	637b      	str	r3, [r7, #52]	; 0x34
 800549c:	e001      	b.n	80054a2 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800549e:	2300      	movs	r3, #0
 80054a0:	637b      	str	r3, [r7, #52]	; 0x34
 80054a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80054ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3738      	adds	r7, #56	; 0x38
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
	...

080054b8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b08c      	sub	sp, #48	; 0x30
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80054c4:	2300      	movs	r3, #0
 80054c6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80054cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d109      	bne.n	80054e6 <xQueueReceive+0x2e>
	__asm volatile
 80054d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d6:	f383 8811 	msr	BASEPRI, r3
 80054da:	f3bf 8f6f 	isb	sy
 80054de:	f3bf 8f4f 	dsb	sy
 80054e2:	623b      	str	r3, [r7, #32]
 80054e4:	e7fe      	b.n	80054e4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d103      	bne.n	80054f4 <xQueueReceive+0x3c>
 80054ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d101      	bne.n	80054f8 <xQueueReceive+0x40>
 80054f4:	2301      	movs	r3, #1
 80054f6:	e000      	b.n	80054fa <xQueueReceive+0x42>
 80054f8:	2300      	movs	r3, #0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d109      	bne.n	8005512 <xQueueReceive+0x5a>
 80054fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005502:	f383 8811 	msr	BASEPRI, r3
 8005506:	f3bf 8f6f 	isb	sy
 800550a:	f3bf 8f4f 	dsb	sy
 800550e:	61fb      	str	r3, [r7, #28]
 8005510:	e7fe      	b.n	8005510 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005512:	f001 f941 	bl	8006798 <xTaskGetSchedulerState>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d102      	bne.n	8005522 <xQueueReceive+0x6a>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d101      	bne.n	8005526 <xQueueReceive+0x6e>
 8005522:	2301      	movs	r3, #1
 8005524:	e000      	b.n	8005528 <xQueueReceive+0x70>
 8005526:	2300      	movs	r3, #0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d109      	bne.n	8005540 <xQueueReceive+0x88>
 800552c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005530:	f383 8811 	msr	BASEPRI, r3
 8005534:	f3bf 8f6f 	isb	sy
 8005538:	f3bf 8f4f 	dsb	sy
 800553c:	61bb      	str	r3, [r7, #24]
 800553e:	e7fe      	b.n	800553e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005540:	f7ff f974 	bl	800482c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005548:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800554a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554c:	2b00      	cmp	r3, #0
 800554e:	d01f      	beq.n	8005590 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005550:	68b9      	ldr	r1, [r7, #8]
 8005552:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005554:	f000 fa16 	bl	8005984 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555a:	1e5a      	subs	r2, r3, #1
 800555c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005562:	691b      	ldr	r3, [r3, #16]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d00f      	beq.n	8005588 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556a:	3310      	adds	r3, #16
 800556c:	4618      	mov	r0, r3
 800556e:	f000 ff5d 	bl	800642c <xTaskRemoveFromEventList>
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d007      	beq.n	8005588 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005578:	4b3c      	ldr	r3, [pc, #240]	; (800566c <xQueueReceive+0x1b4>)
 800557a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800557e:	601a      	str	r2, [r3, #0]
 8005580:	f3bf 8f4f 	dsb	sy
 8005584:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005588:	f7ff f97e 	bl	8004888 <vPortExitCritical>
				return pdPASS;
 800558c:	2301      	movs	r3, #1
 800558e:	e069      	b.n	8005664 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d103      	bne.n	800559e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005596:	f7ff f977 	bl	8004888 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800559a:	2300      	movs	r3, #0
 800559c:	e062      	b.n	8005664 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800559e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d106      	bne.n	80055b2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80055a4:	f107 0310 	add.w	r3, r7, #16
 80055a8:	4618      	mov	r0, r3
 80055aa:	f000 ffa1 	bl	80064f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80055ae:	2301      	movs	r3, #1
 80055b0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80055b2:	f7ff f969 	bl	8004888 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80055b6:	f000 fd1d 	bl	8005ff4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80055ba:	f7ff f937 	bl	800482c <vPortEnterCritical>
 80055be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055c4:	b25b      	sxtb	r3, r3
 80055c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055ca:	d103      	bne.n	80055d4 <xQueueReceive+0x11c>
 80055cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055da:	b25b      	sxtb	r3, r3
 80055dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055e0:	d103      	bne.n	80055ea <xQueueReceive+0x132>
 80055e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e4:	2200      	movs	r2, #0
 80055e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055ea:	f7ff f94d 	bl	8004888 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80055ee:	1d3a      	adds	r2, r7, #4
 80055f0:	f107 0310 	add.w	r3, r7, #16
 80055f4:	4611      	mov	r1, r2
 80055f6:	4618      	mov	r0, r3
 80055f8:	f000 ff90 	bl	800651c <xTaskCheckForTimeOut>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d123      	bne.n	800564a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005602:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005604:	f000 fa36 	bl	8005a74 <prvIsQueueEmpty>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d017      	beq.n	800563e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800560e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005610:	3324      	adds	r3, #36	; 0x24
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	4611      	mov	r1, r2
 8005616:	4618      	mov	r0, r3
 8005618:	f000 feba 	bl	8006390 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800561c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800561e:	f000 f9d7 	bl	80059d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005622:	f000 fcf5 	bl	8006010 <xTaskResumeAll>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d189      	bne.n	8005540 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800562c:	4b0f      	ldr	r3, [pc, #60]	; (800566c <xQueueReceive+0x1b4>)
 800562e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005632:	601a      	str	r2, [r3, #0]
 8005634:	f3bf 8f4f 	dsb	sy
 8005638:	f3bf 8f6f 	isb	sy
 800563c:	e780      	b.n	8005540 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800563e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005640:	f000 f9c6 	bl	80059d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005644:	f000 fce4 	bl	8006010 <xTaskResumeAll>
 8005648:	e77a      	b.n	8005540 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800564a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800564c:	f000 f9c0 	bl	80059d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005650:	f000 fcde 	bl	8006010 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005654:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005656:	f000 fa0d 	bl	8005a74 <prvIsQueueEmpty>
 800565a:	4603      	mov	r3, r0
 800565c:	2b00      	cmp	r3, #0
 800565e:	f43f af6f 	beq.w	8005540 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005662:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005664:	4618      	mov	r0, r3
 8005666:	3730      	adds	r7, #48	; 0x30
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}
 800566c:	e000ed04 	.word	0xe000ed04

08005670 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b08e      	sub	sp, #56	; 0x38
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800567a:	2300      	movs	r3, #0
 800567c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005682:	2300      	movs	r3, #0
 8005684:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005688:	2b00      	cmp	r3, #0
 800568a:	d109      	bne.n	80056a0 <xQueueSemaphoreTake+0x30>
 800568c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005690:	f383 8811 	msr	BASEPRI, r3
 8005694:	f3bf 8f6f 	isb	sy
 8005698:	f3bf 8f4f 	dsb	sy
 800569c:	623b      	str	r3, [r7, #32]
 800569e:	e7fe      	b.n	800569e <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80056a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d009      	beq.n	80056bc <xQueueSemaphoreTake+0x4c>
 80056a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ac:	f383 8811 	msr	BASEPRI, r3
 80056b0:	f3bf 8f6f 	isb	sy
 80056b4:	f3bf 8f4f 	dsb	sy
 80056b8:	61fb      	str	r3, [r7, #28]
 80056ba:	e7fe      	b.n	80056ba <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80056bc:	f001 f86c 	bl	8006798 <xTaskGetSchedulerState>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d102      	bne.n	80056cc <xQueueSemaphoreTake+0x5c>
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d101      	bne.n	80056d0 <xQueueSemaphoreTake+0x60>
 80056cc:	2301      	movs	r3, #1
 80056ce:	e000      	b.n	80056d2 <xQueueSemaphoreTake+0x62>
 80056d0:	2300      	movs	r3, #0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d109      	bne.n	80056ea <xQueueSemaphoreTake+0x7a>
 80056d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056da:	f383 8811 	msr	BASEPRI, r3
 80056de:	f3bf 8f6f 	isb	sy
 80056e2:	f3bf 8f4f 	dsb	sy
 80056e6:	61bb      	str	r3, [r7, #24]
 80056e8:	e7fe      	b.n	80056e8 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80056ea:	f7ff f89f 	bl	800482c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80056ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f2:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80056f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d024      	beq.n	8005744 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80056fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fc:	1e5a      	subs	r2, r3, #1
 80056fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005700:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d104      	bne.n	8005714 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800570a:	f001 f9b7 	bl	8006a7c <pvTaskIncrementMutexHeldCount>
 800570e:	4602      	mov	r2, r0
 8005710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005712:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d00f      	beq.n	800573c <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800571c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800571e:	3310      	adds	r3, #16
 8005720:	4618      	mov	r0, r3
 8005722:	f000 fe83 	bl	800642c <xTaskRemoveFromEventList>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d007      	beq.n	800573c <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800572c:	4b53      	ldr	r3, [pc, #332]	; (800587c <xQueueSemaphoreTake+0x20c>)
 800572e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005732:	601a      	str	r2, [r3, #0]
 8005734:	f3bf 8f4f 	dsb	sy
 8005738:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800573c:	f7ff f8a4 	bl	8004888 <vPortExitCritical>
				return pdPASS;
 8005740:	2301      	movs	r3, #1
 8005742:	e096      	b.n	8005872 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d110      	bne.n	800576c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800574a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574c:	2b00      	cmp	r3, #0
 800574e:	d009      	beq.n	8005764 <xQueueSemaphoreTake+0xf4>
 8005750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005754:	f383 8811 	msr	BASEPRI, r3
 8005758:	f3bf 8f6f 	isb	sy
 800575c:	f3bf 8f4f 	dsb	sy
 8005760:	617b      	str	r3, [r7, #20]
 8005762:	e7fe      	b.n	8005762 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005764:	f7ff f890 	bl	8004888 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005768:	2300      	movs	r3, #0
 800576a:	e082      	b.n	8005872 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800576c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800576e:	2b00      	cmp	r3, #0
 8005770:	d106      	bne.n	8005780 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005772:	f107 030c 	add.w	r3, r7, #12
 8005776:	4618      	mov	r0, r3
 8005778:	f000 feba 	bl	80064f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800577c:	2301      	movs	r3, #1
 800577e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005780:	f7ff f882 	bl	8004888 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005784:	f000 fc36 	bl	8005ff4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005788:	f7ff f850 	bl	800482c <vPortEnterCritical>
 800578c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800578e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005792:	b25b      	sxtb	r3, r3
 8005794:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005798:	d103      	bne.n	80057a2 <xQueueSemaphoreTake+0x132>
 800579a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800579c:	2200      	movs	r2, #0
 800579e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057a8:	b25b      	sxtb	r3, r3
 80057aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057ae:	d103      	bne.n	80057b8 <xQueueSemaphoreTake+0x148>
 80057b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b2:	2200      	movs	r2, #0
 80057b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057b8:	f7ff f866 	bl	8004888 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057bc:	463a      	mov	r2, r7
 80057be:	f107 030c 	add.w	r3, r7, #12
 80057c2:	4611      	mov	r1, r2
 80057c4:	4618      	mov	r0, r3
 80057c6:	f000 fea9 	bl	800651c <xTaskCheckForTimeOut>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d132      	bne.n	8005836 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80057d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80057d2:	f000 f94f 	bl	8005a74 <prvIsQueueEmpty>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d026      	beq.n	800582a <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80057dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d109      	bne.n	80057f8 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 80057e4:	f7ff f822 	bl	800482c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80057e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	4618      	mov	r0, r3
 80057ee:	f000 fff1 	bl	80067d4 <xTaskPriorityInherit>
 80057f2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80057f4:	f7ff f848 	bl	8004888 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80057f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057fa:	3324      	adds	r3, #36	; 0x24
 80057fc:	683a      	ldr	r2, [r7, #0]
 80057fe:	4611      	mov	r1, r2
 8005800:	4618      	mov	r0, r3
 8005802:	f000 fdc5 	bl	8006390 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005806:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005808:	f000 f8e2 	bl	80059d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800580c:	f000 fc00 	bl	8006010 <xTaskResumeAll>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	f47f af69 	bne.w	80056ea <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8005818:	4b18      	ldr	r3, [pc, #96]	; (800587c <xQueueSemaphoreTake+0x20c>)
 800581a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800581e:	601a      	str	r2, [r3, #0]
 8005820:	f3bf 8f4f 	dsb	sy
 8005824:	f3bf 8f6f 	isb	sy
 8005828:	e75f      	b.n	80056ea <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800582a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800582c:	f000 f8d0 	bl	80059d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005830:	f000 fbee 	bl	8006010 <xTaskResumeAll>
 8005834:	e759      	b.n	80056ea <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005836:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005838:	f000 f8ca 	bl	80059d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800583c:	f000 fbe8 	bl	8006010 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005840:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005842:	f000 f917 	bl	8005a74 <prvIsQueueEmpty>
 8005846:	4603      	mov	r3, r0
 8005848:	2b00      	cmp	r3, #0
 800584a:	f43f af4e 	beq.w	80056ea <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800584e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005850:	2b00      	cmp	r3, #0
 8005852:	d00d      	beq.n	8005870 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8005854:	f7fe ffea 	bl	800482c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005858:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800585a:	f000 f811 	bl	8005880 <prvGetDisinheritPriorityAfterTimeout>
 800585e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005866:	4618      	mov	r0, r3
 8005868:	f001 f888 	bl	800697c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800586c:	f7ff f80c 	bl	8004888 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005870:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005872:	4618      	mov	r0, r3
 8005874:	3738      	adds	r7, #56	; 0x38
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	e000ed04 	.word	0xe000ed04

08005880 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005880:	b480      	push	{r7}
 8005882:	b085      	sub	sp, #20
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588c:	2b00      	cmp	r3, #0
 800588e:	d006      	beq.n	800589e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800589a:	60fb      	str	r3, [r7, #12]
 800589c:	e001      	b.n	80058a2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800589e:	2300      	movs	r3, #0
 80058a0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80058a2:	68fb      	ldr	r3, [r7, #12]
	}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3714      	adds	r7, #20
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b086      	sub	sp, #24
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80058bc:	2300      	movs	r3, #0
 80058be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d10d      	bne.n	80058ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d14d      	bne.n	8005972 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	4618      	mov	r0, r3
 80058dc:	f000 ffe2 	bl	80068a4 <xTaskPriorityDisinherit>
 80058e0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2200      	movs	r2, #0
 80058e6:	609a      	str	r2, [r3, #8]
 80058e8:	e043      	b.n	8005972 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d119      	bne.n	8005924 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6858      	ldr	r0, [r3, #4]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f8:	461a      	mov	r2, r3
 80058fa:	68b9      	ldr	r1, [r7, #8]
 80058fc:	f002 fa6e 	bl	8007ddc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	685a      	ldr	r2, [r3, #4]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005908:	441a      	add	r2, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	685a      	ldr	r2, [r3, #4]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	429a      	cmp	r2, r3
 8005918:	d32b      	bcc.n	8005972 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	605a      	str	r2, [r3, #4]
 8005922:	e026      	b.n	8005972 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	68d8      	ldr	r0, [r3, #12]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592c:	461a      	mov	r2, r3
 800592e:	68b9      	ldr	r1, [r7, #8]
 8005930:	f002 fa54 	bl	8007ddc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	68da      	ldr	r2, [r3, #12]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593c:	425b      	negs	r3, r3
 800593e:	441a      	add	r2, r3
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	68da      	ldr	r2, [r3, #12]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	429a      	cmp	r2, r3
 800594e:	d207      	bcs.n	8005960 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	689a      	ldr	r2, [r3, #8]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005958:	425b      	negs	r3, r3
 800595a:	441a      	add	r2, r3
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2b02      	cmp	r3, #2
 8005964:	d105      	bne.n	8005972 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d002      	beq.n	8005972 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	3b01      	subs	r3, #1
 8005970:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	1c5a      	adds	r2, r3, #1
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800597a:	697b      	ldr	r3, [r7, #20]
}
 800597c:	4618      	mov	r0, r3
 800597e:	3718      	adds	r7, #24
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b082      	sub	sp, #8
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005992:	2b00      	cmp	r3, #0
 8005994:	d018      	beq.n	80059c8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	68da      	ldr	r2, [r3, #12]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599e:	441a      	add	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	68da      	ldr	r2, [r3, #12]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d303      	bcc.n	80059b8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	68d9      	ldr	r1, [r3, #12]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c0:	461a      	mov	r2, r3
 80059c2:	6838      	ldr	r0, [r7, #0]
 80059c4:	f002 fa0a 	bl	8007ddc <memcpy>
	}
}
 80059c8:	bf00      	nop
 80059ca:	3708      	adds	r7, #8
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80059d8:	f7fe ff28 	bl	800482c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059e2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80059e4:	e011      	b.n	8005a0a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d012      	beq.n	8005a14 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	3324      	adds	r3, #36	; 0x24
 80059f2:	4618      	mov	r0, r3
 80059f4:	f000 fd1a 	bl	800642c <xTaskRemoveFromEventList>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d001      	beq.n	8005a02 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80059fe:	f000 fded 	bl	80065dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005a02:	7bfb      	ldrb	r3, [r7, #15]
 8005a04:	3b01      	subs	r3, #1
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	dce9      	bgt.n	80059e6 <prvUnlockQueue+0x16>
 8005a12:	e000      	b.n	8005a16 <prvUnlockQueue+0x46>
					break;
 8005a14:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	22ff      	movs	r2, #255	; 0xff
 8005a1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005a1e:	f7fe ff33 	bl	8004888 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005a22:	f7fe ff03 	bl	800482c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a2c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a2e:	e011      	b.n	8005a54 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d012      	beq.n	8005a5e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	3310      	adds	r3, #16
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f000 fcf5 	bl	800642c <xTaskRemoveFromEventList>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d001      	beq.n	8005a4c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005a48:	f000 fdc8 	bl	80065dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005a4c:	7bbb      	ldrb	r3, [r7, #14]
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	dce9      	bgt.n	8005a30 <prvUnlockQueue+0x60>
 8005a5c:	e000      	b.n	8005a60 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005a5e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	22ff      	movs	r2, #255	; 0xff
 8005a64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005a68:	f7fe ff0e 	bl	8004888 <vPortExitCritical>
}
 8005a6c:	bf00      	nop
 8005a6e:	3710      	adds	r7, #16
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005a7c:	f7fe fed6 	bl	800482c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d102      	bne.n	8005a8e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	60fb      	str	r3, [r7, #12]
 8005a8c:	e001      	b.n	8005a92 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005a92:	f7fe fef9 	bl	8004888 <vPortExitCritical>

	return xReturn;
 8005a96:	68fb      	ldr	r3, [r7, #12]
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3710      	adds	r7, #16
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005aa8:	f7fe fec0 	bl	800482c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d102      	bne.n	8005abe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	60fb      	str	r3, [r7, #12]
 8005abc:	e001      	b.n	8005ac2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005ac2:	f7fe fee1 	bl	8004888 <vPortExitCritical>

	return xReturn;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3710      	adds	r7, #16
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b085      	sub	sp, #20
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005ada:	2300      	movs	r3, #0
 8005adc:	60fb      	str	r3, [r7, #12]
 8005ade:	e014      	b.n	8005b0a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005ae0:	4a0e      	ldr	r2, [pc, #56]	; (8005b1c <vQueueAddToRegistry+0x4c>)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d10b      	bne.n	8005b04 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005aec:	490b      	ldr	r1, [pc, #44]	; (8005b1c <vQueueAddToRegistry+0x4c>)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	683a      	ldr	r2, [r7, #0]
 8005af2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005af6:	4a09      	ldr	r2, [pc, #36]	; (8005b1c <vQueueAddToRegistry+0x4c>)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	00db      	lsls	r3, r3, #3
 8005afc:	4413      	add	r3, r2
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005b02:	e005      	b.n	8005b10 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	3301      	adds	r3, #1
 8005b08:	60fb      	str	r3, [r7, #12]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2b07      	cmp	r3, #7
 8005b0e:	d9e7      	bls.n	8005ae0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005b10:	bf00      	nop
 8005b12:	3714      	adds	r7, #20
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr
 8005b1c:	2000effc 	.word	0x2000effc

08005b20 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b086      	sub	sp, #24
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	60f8      	str	r0, [r7, #12]
 8005b28:	60b9      	str	r1, [r7, #8]
 8005b2a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005b30:	f7fe fe7c 	bl	800482c <vPortEnterCritical>
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b3a:	b25b      	sxtb	r3, r3
 8005b3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b40:	d103      	bne.n	8005b4a <vQueueWaitForMessageRestricted+0x2a>
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b50:	b25b      	sxtb	r3, r3
 8005b52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b56:	d103      	bne.n	8005b60 <vQueueWaitForMessageRestricted+0x40>
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b60:	f7fe fe92 	bl	8004888 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d106      	bne.n	8005b7a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	3324      	adds	r3, #36	; 0x24
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	68b9      	ldr	r1, [r7, #8]
 8005b74:	4618      	mov	r0, r3
 8005b76:	f000 fc2f 	bl	80063d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005b7a:	6978      	ldr	r0, [r7, #20]
 8005b7c:	f7ff ff28 	bl	80059d0 <prvUnlockQueue>
	}
 8005b80:	bf00      	nop
 8005b82:	3718      	adds	r7, #24
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b08e      	sub	sp, #56	; 0x38
 8005b8c:	af04      	add	r7, sp, #16
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	607a      	str	r2, [r7, #4]
 8005b94:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d109      	bne.n	8005bb0 <xTaskCreateStatic+0x28>
 8005b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba0:	f383 8811 	msr	BASEPRI, r3
 8005ba4:	f3bf 8f6f 	isb	sy
 8005ba8:	f3bf 8f4f 	dsb	sy
 8005bac:	623b      	str	r3, [r7, #32]
 8005bae:	e7fe      	b.n	8005bae <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d109      	bne.n	8005bca <xTaskCreateStatic+0x42>
 8005bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bba:	f383 8811 	msr	BASEPRI, r3
 8005bbe:	f3bf 8f6f 	isb	sy
 8005bc2:	f3bf 8f4f 	dsb	sy
 8005bc6:	61fb      	str	r3, [r7, #28]
 8005bc8:	e7fe      	b.n	8005bc8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005bca:	235c      	movs	r3, #92	; 0x5c
 8005bcc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	2b5c      	cmp	r3, #92	; 0x5c
 8005bd2:	d009      	beq.n	8005be8 <xTaskCreateStatic+0x60>
 8005bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd8:	f383 8811 	msr	BASEPRI, r3
 8005bdc:	f3bf 8f6f 	isb	sy
 8005be0:	f3bf 8f4f 	dsb	sy
 8005be4:	61bb      	str	r3, [r7, #24]
 8005be6:	e7fe      	b.n	8005be6 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005be8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d01e      	beq.n	8005c2e <xTaskCreateStatic+0xa6>
 8005bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d01b      	beq.n	8005c2e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bfe:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c02:	2202      	movs	r2, #2
 8005c04:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005c08:	2300      	movs	r3, #0
 8005c0a:	9303      	str	r3, [sp, #12]
 8005c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0e:	9302      	str	r3, [sp, #8]
 8005c10:	f107 0314 	add.w	r3, r7, #20
 8005c14:	9301      	str	r3, [sp, #4]
 8005c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c18:	9300      	str	r3, [sp, #0]
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	68b9      	ldr	r1, [r7, #8]
 8005c20:	68f8      	ldr	r0, [r7, #12]
 8005c22:	f000 f850 	bl	8005cc6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c28:	f000 f8dc 	bl	8005de4 <prvAddNewTaskToReadyList>
 8005c2c:	e001      	b.n	8005c32 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005c32:	697b      	ldr	r3, [r7, #20]
	}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3728      	adds	r7, #40	; 0x28
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b08c      	sub	sp, #48	; 0x30
 8005c40:	af04      	add	r7, sp, #16
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	603b      	str	r3, [r7, #0]
 8005c48:	4613      	mov	r3, r2
 8005c4a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005c4c:	88fb      	ldrh	r3, [r7, #6]
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	4618      	mov	r0, r3
 8005c52:	f7fe ff05 	bl	8004a60 <pvPortMalloc>
 8005c56:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00e      	beq.n	8005c7c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005c5e:	205c      	movs	r0, #92	; 0x5c
 8005c60:	f7fe fefe 	bl	8004a60 <pvPortMalloc>
 8005c64:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d003      	beq.n	8005c74 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	697a      	ldr	r2, [r7, #20]
 8005c70:	631a      	str	r2, [r3, #48]	; 0x30
 8005c72:	e005      	b.n	8005c80 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005c74:	6978      	ldr	r0, [r7, #20]
 8005c76:	f7fe ffb5 	bl	8004be4 <vPortFree>
 8005c7a:	e001      	b.n	8005c80 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d017      	beq.n	8005cb6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005c8e:	88fa      	ldrh	r2, [r7, #6]
 8005c90:	2300      	movs	r3, #0
 8005c92:	9303      	str	r3, [sp, #12]
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	9302      	str	r3, [sp, #8]
 8005c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c9a:	9301      	str	r3, [sp, #4]
 8005c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c9e:	9300      	str	r3, [sp, #0]
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	68b9      	ldr	r1, [r7, #8]
 8005ca4:	68f8      	ldr	r0, [r7, #12]
 8005ca6:	f000 f80e 	bl	8005cc6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005caa:	69f8      	ldr	r0, [r7, #28]
 8005cac:	f000 f89a 	bl	8005de4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	61bb      	str	r3, [r7, #24]
 8005cb4:	e002      	b.n	8005cbc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005cb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005cba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005cbc:	69bb      	ldr	r3, [r7, #24]
	}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3720      	adds	r7, #32
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}

08005cc6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005cc6:	b580      	push	{r7, lr}
 8005cc8:	b088      	sub	sp, #32
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	60f8      	str	r0, [r7, #12]
 8005cce:	60b9      	str	r1, [r7, #8]
 8005cd0:	607a      	str	r2, [r7, #4]
 8005cd2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	461a      	mov	r2, r3
 8005cde:	21a5      	movs	r1, #165	; 0xa5
 8005ce0:	f002 f887 	bl	8007df2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005cee:	3b01      	subs	r3, #1
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	4413      	add	r3, r2
 8005cf4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	f023 0307 	bic.w	r3, r3, #7
 8005cfc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	f003 0307 	and.w	r3, r3, #7
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d009      	beq.n	8005d1c <prvInitialiseNewTask+0x56>
 8005d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d0c:	f383 8811 	msr	BASEPRI, r3
 8005d10:	f3bf 8f6f 	isb	sy
 8005d14:	f3bf 8f4f 	dsb	sy
 8005d18:	617b      	str	r3, [r7, #20]
 8005d1a:	e7fe      	b.n	8005d1a <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d01f      	beq.n	8005d62 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d22:	2300      	movs	r3, #0
 8005d24:	61fb      	str	r3, [r7, #28]
 8005d26:	e012      	b.n	8005d4e <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005d28:	68ba      	ldr	r2, [r7, #8]
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	7819      	ldrb	r1, [r3, #0]
 8005d30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	4413      	add	r3, r2
 8005d36:	3334      	adds	r3, #52	; 0x34
 8005d38:	460a      	mov	r2, r1
 8005d3a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005d3c:	68ba      	ldr	r2, [r7, #8]
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	4413      	add	r3, r2
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d006      	beq.n	8005d56 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	61fb      	str	r3, [r7, #28]
 8005d4e:	69fb      	ldr	r3, [r7, #28]
 8005d50:	2b0f      	cmp	r3, #15
 8005d52:	d9e9      	bls.n	8005d28 <prvInitialiseNewTask+0x62>
 8005d54:	e000      	b.n	8005d58 <prvInitialiseNewTask+0x92>
			{
				break;
 8005d56:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d60:	e003      	b.n	8005d6a <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d64:	2200      	movs	r2, #0
 8005d66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d6c:	2b37      	cmp	r3, #55	; 0x37
 8005d6e:	d901      	bls.n	8005d74 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005d70:	2337      	movs	r3, #55	; 0x37
 8005d72:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d78:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d7e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d82:	2200      	movs	r2, #0
 8005d84:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d88:	3304      	adds	r3, #4
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f7fe fb92 	bl	80044b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d92:	3318      	adds	r3, #24
 8005d94:	4618      	mov	r0, r3
 8005d96:	f7fe fb8d 	bl	80044b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d9e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db2:	2200      	movs	r2, #0
 8005db4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db8:	2200      	movs	r2, #0
 8005dba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005dbe:	683a      	ldr	r2, [r7, #0]
 8005dc0:	68f9      	ldr	r1, [r7, #12]
 8005dc2:	69b8      	ldr	r0, [r7, #24]
 8005dc4:	f7fe fc0a 	bl	80045dc <pxPortInitialiseStack>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dcc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d002      	beq.n	8005dda <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dd8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005dda:	bf00      	nop
 8005ddc:	3720      	adds	r7, #32
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
	...

08005de4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005dec:	f7fe fd1e 	bl	800482c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005df0:	4b2d      	ldr	r3, [pc, #180]	; (8005ea8 <prvAddNewTaskToReadyList+0xc4>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	3301      	adds	r3, #1
 8005df6:	4a2c      	ldr	r2, [pc, #176]	; (8005ea8 <prvAddNewTaskToReadyList+0xc4>)
 8005df8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005dfa:	4b2c      	ldr	r3, [pc, #176]	; (8005eac <prvAddNewTaskToReadyList+0xc8>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d109      	bne.n	8005e16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005e02:	4a2a      	ldr	r2, [pc, #168]	; (8005eac <prvAddNewTaskToReadyList+0xc8>)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005e08:	4b27      	ldr	r3, [pc, #156]	; (8005ea8 <prvAddNewTaskToReadyList+0xc4>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d110      	bne.n	8005e32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005e10:	f000 fc08 	bl	8006624 <prvInitialiseTaskLists>
 8005e14:	e00d      	b.n	8005e32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005e16:	4b26      	ldr	r3, [pc, #152]	; (8005eb0 <prvAddNewTaskToReadyList+0xcc>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d109      	bne.n	8005e32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005e1e:	4b23      	ldr	r3, [pc, #140]	; (8005eac <prvAddNewTaskToReadyList+0xc8>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d802      	bhi.n	8005e32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005e2c:	4a1f      	ldr	r2, [pc, #124]	; (8005eac <prvAddNewTaskToReadyList+0xc8>)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005e32:	4b20      	ldr	r3, [pc, #128]	; (8005eb4 <prvAddNewTaskToReadyList+0xd0>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	3301      	adds	r3, #1
 8005e38:	4a1e      	ldr	r2, [pc, #120]	; (8005eb4 <prvAddNewTaskToReadyList+0xd0>)
 8005e3a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005e3c:	4b1d      	ldr	r3, [pc, #116]	; (8005eb4 <prvAddNewTaskToReadyList+0xd0>)
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e48:	4b1b      	ldr	r3, [pc, #108]	; (8005eb8 <prvAddNewTaskToReadyList+0xd4>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d903      	bls.n	8005e58 <prvAddNewTaskToReadyList+0x74>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e54:	4a18      	ldr	r2, [pc, #96]	; (8005eb8 <prvAddNewTaskToReadyList+0xd4>)
 8005e56:	6013      	str	r3, [r2, #0]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e5c:	4613      	mov	r3, r2
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	4413      	add	r3, r2
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	4a15      	ldr	r2, [pc, #84]	; (8005ebc <prvAddNewTaskToReadyList+0xd8>)
 8005e66:	441a      	add	r2, r3
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	3304      	adds	r3, #4
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	4610      	mov	r0, r2
 8005e70:	f7fe fb2d 	bl	80044ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005e74:	f7fe fd08 	bl	8004888 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005e78:	4b0d      	ldr	r3, [pc, #52]	; (8005eb0 <prvAddNewTaskToReadyList+0xcc>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d00e      	beq.n	8005e9e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005e80:	4b0a      	ldr	r3, [pc, #40]	; (8005eac <prvAddNewTaskToReadyList+0xc8>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d207      	bcs.n	8005e9e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005e8e:	4b0c      	ldr	r3, [pc, #48]	; (8005ec0 <prvAddNewTaskToReadyList+0xdc>)
 8005e90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e94:	601a      	str	r2, [r3, #0]
 8005e96:	f3bf 8f4f 	dsb	sy
 8005e9a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e9e:	bf00      	nop
 8005ea0:	3708      	adds	r7, #8
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	bf00      	nop
 8005ea8:	2000ee64 	.word	0x2000ee64
 8005eac:	2000e990 	.word	0x2000e990
 8005eb0:	2000ee70 	.word	0x2000ee70
 8005eb4:	2000ee80 	.word	0x2000ee80
 8005eb8:	2000ee6c 	.word	0x2000ee6c
 8005ebc:	2000e994 	.word	0x2000e994
 8005ec0:	e000ed04 	.word	0xe000ed04

08005ec4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d016      	beq.n	8005f04 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005ed6:	4b13      	ldr	r3, [pc, #76]	; (8005f24 <vTaskDelay+0x60>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d009      	beq.n	8005ef2 <vTaskDelay+0x2e>
 8005ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee2:	f383 8811 	msr	BASEPRI, r3
 8005ee6:	f3bf 8f6f 	isb	sy
 8005eea:	f3bf 8f4f 	dsb	sy
 8005eee:	60bb      	str	r3, [r7, #8]
 8005ef0:	e7fe      	b.n	8005ef0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005ef2:	f000 f87f 	bl	8005ff4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005ef6:	2100      	movs	r1, #0
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 fdd3 	bl	8006aa4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005efe:	f000 f887 	bl	8006010 <xTaskResumeAll>
 8005f02:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d107      	bne.n	8005f1a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005f0a:	4b07      	ldr	r3, [pc, #28]	; (8005f28 <vTaskDelay+0x64>)
 8005f0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f10:	601a      	str	r2, [r3, #0]
 8005f12:	f3bf 8f4f 	dsb	sy
 8005f16:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005f1a:	bf00      	nop
 8005f1c:	3710      	adds	r7, #16
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop
 8005f24:	2000ee8c 	.word	0x2000ee8c
 8005f28:	e000ed04 	.word	0xe000ed04

08005f2c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b08a      	sub	sp, #40	; 0x28
 8005f30:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005f32:	2300      	movs	r3, #0
 8005f34:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005f36:	2300      	movs	r3, #0
 8005f38:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005f3a:	463a      	mov	r2, r7
 8005f3c:	1d39      	adds	r1, r7, #4
 8005f3e:	f107 0308 	add.w	r3, r7, #8
 8005f42:	4618      	mov	r0, r3
 8005f44:	f7fe fa62 	bl	800440c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005f48:	6839      	ldr	r1, [r7, #0]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	68ba      	ldr	r2, [r7, #8]
 8005f4e:	9202      	str	r2, [sp, #8]
 8005f50:	9301      	str	r3, [sp, #4]
 8005f52:	2300      	movs	r3, #0
 8005f54:	9300      	str	r3, [sp, #0]
 8005f56:	2300      	movs	r3, #0
 8005f58:	460a      	mov	r2, r1
 8005f5a:	4920      	ldr	r1, [pc, #128]	; (8005fdc <vTaskStartScheduler+0xb0>)
 8005f5c:	4820      	ldr	r0, [pc, #128]	; (8005fe0 <vTaskStartScheduler+0xb4>)
 8005f5e:	f7ff fe13 	bl	8005b88 <xTaskCreateStatic>
 8005f62:	4602      	mov	r2, r0
 8005f64:	4b1f      	ldr	r3, [pc, #124]	; (8005fe4 <vTaskStartScheduler+0xb8>)
 8005f66:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005f68:	4b1e      	ldr	r3, [pc, #120]	; (8005fe4 <vTaskStartScheduler+0xb8>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d002      	beq.n	8005f76 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005f70:	2301      	movs	r3, #1
 8005f72:	617b      	str	r3, [r7, #20]
 8005f74:	e001      	b.n	8005f7a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005f76:	2300      	movs	r3, #0
 8005f78:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d102      	bne.n	8005f86 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005f80:	f000 fde4 	bl	8006b4c <xTimerCreateTimerTask>
 8005f84:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d115      	bne.n	8005fb8 <vTaskStartScheduler+0x8c>
 8005f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f90:	f383 8811 	msr	BASEPRI, r3
 8005f94:	f3bf 8f6f 	isb	sy
 8005f98:	f3bf 8f4f 	dsb	sy
 8005f9c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005f9e:	4b12      	ldr	r3, [pc, #72]	; (8005fe8 <vTaskStartScheduler+0xbc>)
 8005fa0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005fa4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005fa6:	4b11      	ldr	r3, [pc, #68]	; (8005fec <vTaskStartScheduler+0xc0>)
 8005fa8:	2201      	movs	r2, #1
 8005faa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005fac:	4b10      	ldr	r3, [pc, #64]	; (8005ff0 <vTaskStartScheduler+0xc4>)
 8005fae:	2200      	movs	r2, #0
 8005fb0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005fb2:	f7fe fb9d 	bl	80046f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005fb6:	e00d      	b.n	8005fd4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fbe:	d109      	bne.n	8005fd4 <vTaskStartScheduler+0xa8>
 8005fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc4:	f383 8811 	msr	BASEPRI, r3
 8005fc8:	f3bf 8f6f 	isb	sy
 8005fcc:	f3bf 8f4f 	dsb	sy
 8005fd0:	60fb      	str	r3, [r7, #12]
 8005fd2:	e7fe      	b.n	8005fd2 <vTaskStartScheduler+0xa6>
}
 8005fd4:	bf00      	nop
 8005fd6:	3718      	adds	r7, #24
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}
 8005fdc:	0800abd0 	.word	0x0800abd0
 8005fe0:	080065f5 	.word	0x080065f5
 8005fe4:	2000ee88 	.word	0x2000ee88
 8005fe8:	2000ee84 	.word	0x2000ee84
 8005fec:	2000ee70 	.word	0x2000ee70
 8005ff0:	2000ee68 	.word	0x2000ee68

08005ff4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005ff8:	4b04      	ldr	r3, [pc, #16]	; (800600c <vTaskSuspendAll+0x18>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	4a03      	ldr	r2, [pc, #12]	; (800600c <vTaskSuspendAll+0x18>)
 8006000:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006002:	bf00      	nop
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr
 800600c:	2000ee8c 	.word	0x2000ee8c

08006010 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006016:	2300      	movs	r3, #0
 8006018:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800601a:	2300      	movs	r3, #0
 800601c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800601e:	4b41      	ldr	r3, [pc, #260]	; (8006124 <xTaskResumeAll+0x114>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d109      	bne.n	800603a <xTaskResumeAll+0x2a>
 8006026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602a:	f383 8811 	msr	BASEPRI, r3
 800602e:	f3bf 8f6f 	isb	sy
 8006032:	f3bf 8f4f 	dsb	sy
 8006036:	603b      	str	r3, [r7, #0]
 8006038:	e7fe      	b.n	8006038 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800603a:	f7fe fbf7 	bl	800482c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800603e:	4b39      	ldr	r3, [pc, #228]	; (8006124 <xTaskResumeAll+0x114>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	3b01      	subs	r3, #1
 8006044:	4a37      	ldr	r2, [pc, #220]	; (8006124 <xTaskResumeAll+0x114>)
 8006046:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006048:	4b36      	ldr	r3, [pc, #216]	; (8006124 <xTaskResumeAll+0x114>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d162      	bne.n	8006116 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006050:	4b35      	ldr	r3, [pc, #212]	; (8006128 <xTaskResumeAll+0x118>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d05e      	beq.n	8006116 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006058:	e02f      	b.n	80060ba <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800605a:	4b34      	ldr	r3, [pc, #208]	; (800612c <xTaskResumeAll+0x11c>)
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	3318      	adds	r3, #24
 8006066:	4618      	mov	r0, r3
 8006068:	f7fe fa8e 	bl	8004588 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	3304      	adds	r3, #4
 8006070:	4618      	mov	r0, r3
 8006072:	f7fe fa89 	bl	8004588 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800607a:	4b2d      	ldr	r3, [pc, #180]	; (8006130 <xTaskResumeAll+0x120>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	429a      	cmp	r2, r3
 8006080:	d903      	bls.n	800608a <xTaskResumeAll+0x7a>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006086:	4a2a      	ldr	r2, [pc, #168]	; (8006130 <xTaskResumeAll+0x120>)
 8006088:	6013      	str	r3, [r2, #0]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800608e:	4613      	mov	r3, r2
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	4413      	add	r3, r2
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	4a27      	ldr	r2, [pc, #156]	; (8006134 <xTaskResumeAll+0x124>)
 8006098:	441a      	add	r2, r3
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	3304      	adds	r3, #4
 800609e:	4619      	mov	r1, r3
 80060a0:	4610      	mov	r0, r2
 80060a2:	f7fe fa14 	bl	80044ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060aa:	4b23      	ldr	r3, [pc, #140]	; (8006138 <xTaskResumeAll+0x128>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d302      	bcc.n	80060ba <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80060b4:	4b21      	ldr	r3, [pc, #132]	; (800613c <xTaskResumeAll+0x12c>)
 80060b6:	2201      	movs	r2, #1
 80060b8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80060ba:	4b1c      	ldr	r3, [pc, #112]	; (800612c <xTaskResumeAll+0x11c>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d1cb      	bne.n	800605a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d001      	beq.n	80060cc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80060c8:	f000 fb46 	bl	8006758 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80060cc:	4b1c      	ldr	r3, [pc, #112]	; (8006140 <xTaskResumeAll+0x130>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d010      	beq.n	80060fa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80060d8:	f000 f846 	bl	8006168 <xTaskIncrementTick>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d002      	beq.n	80060e8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80060e2:	4b16      	ldr	r3, [pc, #88]	; (800613c <xTaskResumeAll+0x12c>)
 80060e4:	2201      	movs	r2, #1
 80060e6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	3b01      	subs	r3, #1
 80060ec:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d1f1      	bne.n	80060d8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80060f4:	4b12      	ldr	r3, [pc, #72]	; (8006140 <xTaskResumeAll+0x130>)
 80060f6:	2200      	movs	r2, #0
 80060f8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80060fa:	4b10      	ldr	r3, [pc, #64]	; (800613c <xTaskResumeAll+0x12c>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d009      	beq.n	8006116 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006102:	2301      	movs	r3, #1
 8006104:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006106:	4b0f      	ldr	r3, [pc, #60]	; (8006144 <xTaskResumeAll+0x134>)
 8006108:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800610c:	601a      	str	r2, [r3, #0]
 800610e:	f3bf 8f4f 	dsb	sy
 8006112:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006116:	f7fe fbb7 	bl	8004888 <vPortExitCritical>

	return xAlreadyYielded;
 800611a:	68bb      	ldr	r3, [r7, #8]
}
 800611c:	4618      	mov	r0, r3
 800611e:	3710      	adds	r7, #16
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}
 8006124:	2000ee8c 	.word	0x2000ee8c
 8006128:	2000ee64 	.word	0x2000ee64
 800612c:	2000ee24 	.word	0x2000ee24
 8006130:	2000ee6c 	.word	0x2000ee6c
 8006134:	2000e994 	.word	0x2000e994
 8006138:	2000e990 	.word	0x2000e990
 800613c:	2000ee78 	.word	0x2000ee78
 8006140:	2000ee74 	.word	0x2000ee74
 8006144:	e000ed04 	.word	0xe000ed04

08006148 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800614e:	4b05      	ldr	r3, [pc, #20]	; (8006164 <xTaskGetTickCount+0x1c>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006154:	687b      	ldr	r3, [r7, #4]
}
 8006156:	4618      	mov	r0, r3
 8006158:	370c      	adds	r7, #12
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr
 8006162:	bf00      	nop
 8006164:	2000ee68 	.word	0x2000ee68

08006168 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b086      	sub	sp, #24
 800616c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800616e:	2300      	movs	r3, #0
 8006170:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006172:	4b4e      	ldr	r3, [pc, #312]	; (80062ac <xTaskIncrementTick+0x144>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2b00      	cmp	r3, #0
 8006178:	f040 8088 	bne.w	800628c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800617c:	4b4c      	ldr	r3, [pc, #304]	; (80062b0 <xTaskIncrementTick+0x148>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	3301      	adds	r3, #1
 8006182:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006184:	4a4a      	ldr	r2, [pc, #296]	; (80062b0 <xTaskIncrementTick+0x148>)
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d11f      	bne.n	80061d0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006190:	4b48      	ldr	r3, [pc, #288]	; (80062b4 <xTaskIncrementTick+0x14c>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d009      	beq.n	80061ae <xTaskIncrementTick+0x46>
 800619a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619e:	f383 8811 	msr	BASEPRI, r3
 80061a2:	f3bf 8f6f 	isb	sy
 80061a6:	f3bf 8f4f 	dsb	sy
 80061aa:	603b      	str	r3, [r7, #0]
 80061ac:	e7fe      	b.n	80061ac <xTaskIncrementTick+0x44>
 80061ae:	4b41      	ldr	r3, [pc, #260]	; (80062b4 <xTaskIncrementTick+0x14c>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	60fb      	str	r3, [r7, #12]
 80061b4:	4b40      	ldr	r3, [pc, #256]	; (80062b8 <xTaskIncrementTick+0x150>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a3e      	ldr	r2, [pc, #248]	; (80062b4 <xTaskIncrementTick+0x14c>)
 80061ba:	6013      	str	r3, [r2, #0]
 80061bc:	4a3e      	ldr	r2, [pc, #248]	; (80062b8 <xTaskIncrementTick+0x150>)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	6013      	str	r3, [r2, #0]
 80061c2:	4b3e      	ldr	r3, [pc, #248]	; (80062bc <xTaskIncrementTick+0x154>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	3301      	adds	r3, #1
 80061c8:	4a3c      	ldr	r2, [pc, #240]	; (80062bc <xTaskIncrementTick+0x154>)
 80061ca:	6013      	str	r3, [r2, #0]
 80061cc:	f000 fac4 	bl	8006758 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80061d0:	4b3b      	ldr	r3, [pc, #236]	; (80062c0 <xTaskIncrementTick+0x158>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	693a      	ldr	r2, [r7, #16]
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d349      	bcc.n	800626e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061da:	4b36      	ldr	r3, [pc, #216]	; (80062b4 <xTaskIncrementTick+0x14c>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d104      	bne.n	80061ee <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061e4:	4b36      	ldr	r3, [pc, #216]	; (80062c0 <xTaskIncrementTick+0x158>)
 80061e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80061ea:	601a      	str	r2, [r3, #0]
					break;
 80061ec:	e03f      	b.n	800626e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061ee:	4b31      	ldr	r3, [pc, #196]	; (80062b4 <xTaskIncrementTick+0x14c>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80061fe:	693a      	ldr	r2, [r7, #16]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	429a      	cmp	r2, r3
 8006204:	d203      	bcs.n	800620e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006206:	4a2e      	ldr	r2, [pc, #184]	; (80062c0 <xTaskIncrementTick+0x158>)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800620c:	e02f      	b.n	800626e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	3304      	adds	r3, #4
 8006212:	4618      	mov	r0, r3
 8006214:	f7fe f9b8 	bl	8004588 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800621c:	2b00      	cmp	r3, #0
 800621e:	d004      	beq.n	800622a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	3318      	adds	r3, #24
 8006224:	4618      	mov	r0, r3
 8006226:	f7fe f9af 	bl	8004588 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800622e:	4b25      	ldr	r3, [pc, #148]	; (80062c4 <xTaskIncrementTick+0x15c>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	429a      	cmp	r2, r3
 8006234:	d903      	bls.n	800623e <xTaskIncrementTick+0xd6>
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800623a:	4a22      	ldr	r2, [pc, #136]	; (80062c4 <xTaskIncrementTick+0x15c>)
 800623c:	6013      	str	r3, [r2, #0]
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006242:	4613      	mov	r3, r2
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	4413      	add	r3, r2
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	4a1f      	ldr	r2, [pc, #124]	; (80062c8 <xTaskIncrementTick+0x160>)
 800624c:	441a      	add	r2, r3
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	3304      	adds	r3, #4
 8006252:	4619      	mov	r1, r3
 8006254:	4610      	mov	r0, r2
 8006256:	f7fe f93a 	bl	80044ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800625e:	4b1b      	ldr	r3, [pc, #108]	; (80062cc <xTaskIncrementTick+0x164>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006264:	429a      	cmp	r2, r3
 8006266:	d3b8      	bcc.n	80061da <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006268:	2301      	movs	r3, #1
 800626a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800626c:	e7b5      	b.n	80061da <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800626e:	4b17      	ldr	r3, [pc, #92]	; (80062cc <xTaskIncrementTick+0x164>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006274:	4914      	ldr	r1, [pc, #80]	; (80062c8 <xTaskIncrementTick+0x160>)
 8006276:	4613      	mov	r3, r2
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	4413      	add	r3, r2
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	440b      	add	r3, r1
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	2b01      	cmp	r3, #1
 8006284:	d907      	bls.n	8006296 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8006286:	2301      	movs	r3, #1
 8006288:	617b      	str	r3, [r7, #20]
 800628a:	e004      	b.n	8006296 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800628c:	4b10      	ldr	r3, [pc, #64]	; (80062d0 <xTaskIncrementTick+0x168>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	3301      	adds	r3, #1
 8006292:	4a0f      	ldr	r2, [pc, #60]	; (80062d0 <xTaskIncrementTick+0x168>)
 8006294:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006296:	4b0f      	ldr	r3, [pc, #60]	; (80062d4 <xTaskIncrementTick+0x16c>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d001      	beq.n	80062a2 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800629e:	2301      	movs	r3, #1
 80062a0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80062a2:	697b      	ldr	r3, [r7, #20]
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3718      	adds	r7, #24
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	2000ee8c 	.word	0x2000ee8c
 80062b0:	2000ee68 	.word	0x2000ee68
 80062b4:	2000ee1c 	.word	0x2000ee1c
 80062b8:	2000ee20 	.word	0x2000ee20
 80062bc:	2000ee7c 	.word	0x2000ee7c
 80062c0:	2000ee84 	.word	0x2000ee84
 80062c4:	2000ee6c 	.word	0x2000ee6c
 80062c8:	2000e994 	.word	0x2000e994
 80062cc:	2000e990 	.word	0x2000e990
 80062d0:	2000ee74 	.word	0x2000ee74
 80062d4:	2000ee78 	.word	0x2000ee78

080062d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80062d8:	b480      	push	{r7}
 80062da:	b085      	sub	sp, #20
 80062dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80062de:	4b27      	ldr	r3, [pc, #156]	; (800637c <vTaskSwitchContext+0xa4>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d003      	beq.n	80062ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80062e6:	4b26      	ldr	r3, [pc, #152]	; (8006380 <vTaskSwitchContext+0xa8>)
 80062e8:	2201      	movs	r2, #1
 80062ea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80062ec:	e040      	b.n	8006370 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80062ee:	4b24      	ldr	r3, [pc, #144]	; (8006380 <vTaskSwitchContext+0xa8>)
 80062f0:	2200      	movs	r2, #0
 80062f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062f4:	4b23      	ldr	r3, [pc, #140]	; (8006384 <vTaskSwitchContext+0xac>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	60fb      	str	r3, [r7, #12]
 80062fa:	e00f      	b.n	800631c <vTaskSwitchContext+0x44>
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d109      	bne.n	8006316 <vTaskSwitchContext+0x3e>
 8006302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006306:	f383 8811 	msr	BASEPRI, r3
 800630a:	f3bf 8f6f 	isb	sy
 800630e:	f3bf 8f4f 	dsb	sy
 8006312:	607b      	str	r3, [r7, #4]
 8006314:	e7fe      	b.n	8006314 <vTaskSwitchContext+0x3c>
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	3b01      	subs	r3, #1
 800631a:	60fb      	str	r3, [r7, #12]
 800631c:	491a      	ldr	r1, [pc, #104]	; (8006388 <vTaskSwitchContext+0xb0>)
 800631e:	68fa      	ldr	r2, [r7, #12]
 8006320:	4613      	mov	r3, r2
 8006322:	009b      	lsls	r3, r3, #2
 8006324:	4413      	add	r3, r2
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	440b      	add	r3, r1
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d0e5      	beq.n	80062fc <vTaskSwitchContext+0x24>
 8006330:	68fa      	ldr	r2, [r7, #12]
 8006332:	4613      	mov	r3, r2
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	4413      	add	r3, r2
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	4a13      	ldr	r2, [pc, #76]	; (8006388 <vTaskSwitchContext+0xb0>)
 800633c:	4413      	add	r3, r2
 800633e:	60bb      	str	r3, [r7, #8]
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	685a      	ldr	r2, [r3, #4]
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	605a      	str	r2, [r3, #4]
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	685a      	ldr	r2, [r3, #4]
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	3308      	adds	r3, #8
 8006352:	429a      	cmp	r2, r3
 8006354:	d104      	bne.n	8006360 <vTaskSwitchContext+0x88>
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	685a      	ldr	r2, [r3, #4]
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	605a      	str	r2, [r3, #4]
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	4a09      	ldr	r2, [pc, #36]	; (800638c <vTaskSwitchContext+0xb4>)
 8006368:	6013      	str	r3, [r2, #0]
 800636a:	4a06      	ldr	r2, [pc, #24]	; (8006384 <vTaskSwitchContext+0xac>)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6013      	str	r3, [r2, #0]
}
 8006370:	bf00      	nop
 8006372:	3714      	adds	r7, #20
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr
 800637c:	2000ee8c 	.word	0x2000ee8c
 8006380:	2000ee78 	.word	0x2000ee78
 8006384:	2000ee6c 	.word	0x2000ee6c
 8006388:	2000e994 	.word	0x2000e994
 800638c:	2000e990 	.word	0x2000e990

08006390 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d109      	bne.n	80063b4 <vTaskPlaceOnEventList+0x24>
 80063a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a4:	f383 8811 	msr	BASEPRI, r3
 80063a8:	f3bf 8f6f 	isb	sy
 80063ac:	f3bf 8f4f 	dsb	sy
 80063b0:	60fb      	str	r3, [r7, #12]
 80063b2:	e7fe      	b.n	80063b2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80063b4:	4b07      	ldr	r3, [pc, #28]	; (80063d4 <vTaskPlaceOnEventList+0x44>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	3318      	adds	r3, #24
 80063ba:	4619      	mov	r1, r3
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f7fe f8aa 	bl	8004516 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80063c2:	2101      	movs	r1, #1
 80063c4:	6838      	ldr	r0, [r7, #0]
 80063c6:	f000 fb6d 	bl	8006aa4 <prvAddCurrentTaskToDelayedList>
}
 80063ca:	bf00      	nop
 80063cc:	3710      	adds	r7, #16
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
 80063d2:	bf00      	nop
 80063d4:	2000e990 	.word	0x2000e990

080063d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b086      	sub	sp, #24
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d109      	bne.n	80063fe <vTaskPlaceOnEventListRestricted+0x26>
 80063ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ee:	f383 8811 	msr	BASEPRI, r3
 80063f2:	f3bf 8f6f 	isb	sy
 80063f6:	f3bf 8f4f 	dsb	sy
 80063fa:	617b      	str	r3, [r7, #20]
 80063fc:	e7fe      	b.n	80063fc <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80063fe:	4b0a      	ldr	r3, [pc, #40]	; (8006428 <vTaskPlaceOnEventListRestricted+0x50>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	3318      	adds	r3, #24
 8006404:	4619      	mov	r1, r3
 8006406:	68f8      	ldr	r0, [r7, #12]
 8006408:	f7fe f861 	bl	80044ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d002      	beq.n	8006418 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8006412:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006416:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006418:	6879      	ldr	r1, [r7, #4]
 800641a:	68b8      	ldr	r0, [r7, #8]
 800641c:	f000 fb42 	bl	8006aa4 <prvAddCurrentTaskToDelayedList>
	}
 8006420:	bf00      	nop
 8006422:	3718      	adds	r7, #24
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	2000e990 	.word	0x2000e990

0800642c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b086      	sub	sp, #24
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d109      	bne.n	8006456 <xTaskRemoveFromEventList+0x2a>
 8006442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006446:	f383 8811 	msr	BASEPRI, r3
 800644a:	f3bf 8f6f 	isb	sy
 800644e:	f3bf 8f4f 	dsb	sy
 8006452:	60fb      	str	r3, [r7, #12]
 8006454:	e7fe      	b.n	8006454 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	3318      	adds	r3, #24
 800645a:	4618      	mov	r0, r3
 800645c:	f7fe f894 	bl	8004588 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006460:	4b1d      	ldr	r3, [pc, #116]	; (80064d8 <xTaskRemoveFromEventList+0xac>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d11d      	bne.n	80064a4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	3304      	adds	r3, #4
 800646c:	4618      	mov	r0, r3
 800646e:	f7fe f88b 	bl	8004588 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006476:	4b19      	ldr	r3, [pc, #100]	; (80064dc <xTaskRemoveFromEventList+0xb0>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	429a      	cmp	r2, r3
 800647c:	d903      	bls.n	8006486 <xTaskRemoveFromEventList+0x5a>
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006482:	4a16      	ldr	r2, [pc, #88]	; (80064dc <xTaskRemoveFromEventList+0xb0>)
 8006484:	6013      	str	r3, [r2, #0]
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800648a:	4613      	mov	r3, r2
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	4413      	add	r3, r2
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	4a13      	ldr	r2, [pc, #76]	; (80064e0 <xTaskRemoveFromEventList+0xb4>)
 8006494:	441a      	add	r2, r3
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	3304      	adds	r3, #4
 800649a:	4619      	mov	r1, r3
 800649c:	4610      	mov	r0, r2
 800649e:	f7fe f816 	bl	80044ce <vListInsertEnd>
 80064a2:	e005      	b.n	80064b0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	3318      	adds	r3, #24
 80064a8:	4619      	mov	r1, r3
 80064aa:	480e      	ldr	r0, [pc, #56]	; (80064e4 <xTaskRemoveFromEventList+0xb8>)
 80064ac:	f7fe f80f 	bl	80044ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064b4:	4b0c      	ldr	r3, [pc, #48]	; (80064e8 <xTaskRemoveFromEventList+0xbc>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d905      	bls.n	80064ca <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80064be:	2301      	movs	r3, #1
 80064c0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80064c2:	4b0a      	ldr	r3, [pc, #40]	; (80064ec <xTaskRemoveFromEventList+0xc0>)
 80064c4:	2201      	movs	r2, #1
 80064c6:	601a      	str	r2, [r3, #0]
 80064c8:	e001      	b.n	80064ce <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80064ca:	2300      	movs	r3, #0
 80064cc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80064ce:	697b      	ldr	r3, [r7, #20]
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3718      	adds	r7, #24
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	2000ee8c 	.word	0x2000ee8c
 80064dc:	2000ee6c 	.word	0x2000ee6c
 80064e0:	2000e994 	.word	0x2000e994
 80064e4:	2000ee24 	.word	0x2000ee24
 80064e8:	2000e990 	.word	0x2000e990
 80064ec:	2000ee78 	.word	0x2000ee78

080064f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80064f8:	4b06      	ldr	r3, [pc, #24]	; (8006514 <vTaskInternalSetTimeOutState+0x24>)
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006500:	4b05      	ldr	r3, [pc, #20]	; (8006518 <vTaskInternalSetTimeOutState+0x28>)
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	605a      	str	r2, [r3, #4]
}
 8006508:	bf00      	nop
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr
 8006514:	2000ee7c 	.word	0x2000ee7c
 8006518:	2000ee68 	.word	0x2000ee68

0800651c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b088      	sub	sp, #32
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d109      	bne.n	8006540 <xTaskCheckForTimeOut+0x24>
 800652c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006530:	f383 8811 	msr	BASEPRI, r3
 8006534:	f3bf 8f6f 	isb	sy
 8006538:	f3bf 8f4f 	dsb	sy
 800653c:	613b      	str	r3, [r7, #16]
 800653e:	e7fe      	b.n	800653e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d109      	bne.n	800655a <xTaskCheckForTimeOut+0x3e>
 8006546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800654a:	f383 8811 	msr	BASEPRI, r3
 800654e:	f3bf 8f6f 	isb	sy
 8006552:	f3bf 8f4f 	dsb	sy
 8006556:	60fb      	str	r3, [r7, #12]
 8006558:	e7fe      	b.n	8006558 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800655a:	f7fe f967 	bl	800482c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800655e:	4b1d      	ldr	r3, [pc, #116]	; (80065d4 <xTaskCheckForTimeOut+0xb8>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	69ba      	ldr	r2, [r7, #24]
 800656a:	1ad3      	subs	r3, r2, r3
 800656c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006576:	d102      	bne.n	800657e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006578:	2300      	movs	r3, #0
 800657a:	61fb      	str	r3, [r7, #28]
 800657c:	e023      	b.n	80065c6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	4b15      	ldr	r3, [pc, #84]	; (80065d8 <xTaskCheckForTimeOut+0xbc>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	429a      	cmp	r2, r3
 8006588:	d007      	beq.n	800659a <xTaskCheckForTimeOut+0x7e>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	685a      	ldr	r2, [r3, #4]
 800658e:	69bb      	ldr	r3, [r7, #24]
 8006590:	429a      	cmp	r2, r3
 8006592:	d802      	bhi.n	800659a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006594:	2301      	movs	r3, #1
 8006596:	61fb      	str	r3, [r7, #28]
 8006598:	e015      	b.n	80065c6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d90b      	bls.n	80065bc <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	1ad2      	subs	r2, r2, r3
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f7ff ff9d 	bl	80064f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80065b6:	2300      	movs	r3, #0
 80065b8:	61fb      	str	r3, [r7, #28]
 80065ba:	e004      	b.n	80065c6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	2200      	movs	r2, #0
 80065c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80065c2:	2301      	movs	r3, #1
 80065c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80065c6:	f7fe f95f 	bl	8004888 <vPortExitCritical>

	return xReturn;
 80065ca:	69fb      	ldr	r3, [r7, #28]
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3720      	adds	r7, #32
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	2000ee68 	.word	0x2000ee68
 80065d8:	2000ee7c 	.word	0x2000ee7c

080065dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80065dc:	b480      	push	{r7}
 80065de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80065e0:	4b03      	ldr	r3, [pc, #12]	; (80065f0 <vTaskMissedYield+0x14>)
 80065e2:	2201      	movs	r2, #1
 80065e4:	601a      	str	r2, [r3, #0]
}
 80065e6:	bf00      	nop
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr
 80065f0:	2000ee78 	.word	0x2000ee78

080065f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b082      	sub	sp, #8
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80065fc:	f000 f852 	bl	80066a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006600:	4b06      	ldr	r3, [pc, #24]	; (800661c <prvIdleTask+0x28>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	2b01      	cmp	r3, #1
 8006606:	d9f9      	bls.n	80065fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8006608:	4b05      	ldr	r3, [pc, #20]	; (8006620 <prvIdleTask+0x2c>)
 800660a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800660e:	601a      	str	r2, [r3, #0]
 8006610:	f3bf 8f4f 	dsb	sy
 8006614:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006618:	e7f0      	b.n	80065fc <prvIdleTask+0x8>
 800661a:	bf00      	nop
 800661c:	2000e994 	.word	0x2000e994
 8006620:	e000ed04 	.word	0xe000ed04

08006624 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b082      	sub	sp, #8
 8006628:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800662a:	2300      	movs	r3, #0
 800662c:	607b      	str	r3, [r7, #4]
 800662e:	e00c      	b.n	800664a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	4613      	mov	r3, r2
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	4413      	add	r3, r2
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	4a12      	ldr	r2, [pc, #72]	; (8006684 <prvInitialiseTaskLists+0x60>)
 800663c:	4413      	add	r3, r2
 800663e:	4618      	mov	r0, r3
 8006640:	f7fd ff18 	bl	8004474 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	3301      	adds	r3, #1
 8006648:	607b      	str	r3, [r7, #4]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2b37      	cmp	r3, #55	; 0x37
 800664e:	d9ef      	bls.n	8006630 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006650:	480d      	ldr	r0, [pc, #52]	; (8006688 <prvInitialiseTaskLists+0x64>)
 8006652:	f7fd ff0f 	bl	8004474 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006656:	480d      	ldr	r0, [pc, #52]	; (800668c <prvInitialiseTaskLists+0x68>)
 8006658:	f7fd ff0c 	bl	8004474 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800665c:	480c      	ldr	r0, [pc, #48]	; (8006690 <prvInitialiseTaskLists+0x6c>)
 800665e:	f7fd ff09 	bl	8004474 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006662:	480c      	ldr	r0, [pc, #48]	; (8006694 <prvInitialiseTaskLists+0x70>)
 8006664:	f7fd ff06 	bl	8004474 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006668:	480b      	ldr	r0, [pc, #44]	; (8006698 <prvInitialiseTaskLists+0x74>)
 800666a:	f7fd ff03 	bl	8004474 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800666e:	4b0b      	ldr	r3, [pc, #44]	; (800669c <prvInitialiseTaskLists+0x78>)
 8006670:	4a05      	ldr	r2, [pc, #20]	; (8006688 <prvInitialiseTaskLists+0x64>)
 8006672:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006674:	4b0a      	ldr	r3, [pc, #40]	; (80066a0 <prvInitialiseTaskLists+0x7c>)
 8006676:	4a05      	ldr	r2, [pc, #20]	; (800668c <prvInitialiseTaskLists+0x68>)
 8006678:	601a      	str	r2, [r3, #0]
}
 800667a:	bf00      	nop
 800667c:	3708      	adds	r7, #8
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
 8006682:	bf00      	nop
 8006684:	2000e994 	.word	0x2000e994
 8006688:	2000edf4 	.word	0x2000edf4
 800668c:	2000ee08 	.word	0x2000ee08
 8006690:	2000ee24 	.word	0x2000ee24
 8006694:	2000ee38 	.word	0x2000ee38
 8006698:	2000ee50 	.word	0x2000ee50
 800669c:	2000ee1c 	.word	0x2000ee1c
 80066a0:	2000ee20 	.word	0x2000ee20

080066a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b082      	sub	sp, #8
 80066a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80066aa:	e019      	b.n	80066e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80066ac:	f7fe f8be 	bl	800482c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066b0:	4b0f      	ldr	r3, [pc, #60]	; (80066f0 <prvCheckTasksWaitingTermination+0x4c>)
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	3304      	adds	r3, #4
 80066bc:	4618      	mov	r0, r3
 80066be:	f7fd ff63 	bl	8004588 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80066c2:	4b0c      	ldr	r3, [pc, #48]	; (80066f4 <prvCheckTasksWaitingTermination+0x50>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	3b01      	subs	r3, #1
 80066c8:	4a0a      	ldr	r2, [pc, #40]	; (80066f4 <prvCheckTasksWaitingTermination+0x50>)
 80066ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80066cc:	4b0a      	ldr	r3, [pc, #40]	; (80066f8 <prvCheckTasksWaitingTermination+0x54>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	3b01      	subs	r3, #1
 80066d2:	4a09      	ldr	r2, [pc, #36]	; (80066f8 <prvCheckTasksWaitingTermination+0x54>)
 80066d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80066d6:	f7fe f8d7 	bl	8004888 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 f80e 	bl	80066fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80066e0:	4b05      	ldr	r3, [pc, #20]	; (80066f8 <prvCheckTasksWaitingTermination+0x54>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d1e1      	bne.n	80066ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80066e8:	bf00      	nop
 80066ea:	3708      	adds	r7, #8
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}
 80066f0:	2000ee38 	.word	0x2000ee38
 80066f4:	2000ee64 	.word	0x2000ee64
 80066f8:	2000ee4c 	.word	0x2000ee4c

080066fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b084      	sub	sp, #16
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800670a:	2b00      	cmp	r3, #0
 800670c:	d108      	bne.n	8006720 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006712:	4618      	mov	r0, r3
 8006714:	f7fe fa66 	bl	8004be4 <vPortFree>
				vPortFree( pxTCB );
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f7fe fa63 	bl	8004be4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800671e:	e017      	b.n	8006750 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006726:	2b01      	cmp	r3, #1
 8006728:	d103      	bne.n	8006732 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f7fe fa5a 	bl	8004be4 <vPortFree>
	}
 8006730:	e00e      	b.n	8006750 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006738:	2b02      	cmp	r3, #2
 800673a:	d009      	beq.n	8006750 <prvDeleteTCB+0x54>
 800673c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006740:	f383 8811 	msr	BASEPRI, r3
 8006744:	f3bf 8f6f 	isb	sy
 8006748:	f3bf 8f4f 	dsb	sy
 800674c:	60fb      	str	r3, [r7, #12]
 800674e:	e7fe      	b.n	800674e <prvDeleteTCB+0x52>
	}
 8006750:	bf00      	nop
 8006752:	3710      	adds	r7, #16
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006758:	b480      	push	{r7}
 800675a:	b083      	sub	sp, #12
 800675c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800675e:	4b0c      	ldr	r3, [pc, #48]	; (8006790 <prvResetNextTaskUnblockTime+0x38>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d104      	bne.n	8006772 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006768:	4b0a      	ldr	r3, [pc, #40]	; (8006794 <prvResetNextTaskUnblockTime+0x3c>)
 800676a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800676e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006770:	e008      	b.n	8006784 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006772:	4b07      	ldr	r3, [pc, #28]	; (8006790 <prvResetNextTaskUnblockTime+0x38>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	4a04      	ldr	r2, [pc, #16]	; (8006794 <prvResetNextTaskUnblockTime+0x3c>)
 8006782:	6013      	str	r3, [r2, #0]
}
 8006784:	bf00      	nop
 8006786:	370c      	adds	r7, #12
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr
 8006790:	2000ee1c 	.word	0x2000ee1c
 8006794:	2000ee84 	.word	0x2000ee84

08006798 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800679e:	4b0b      	ldr	r3, [pc, #44]	; (80067cc <xTaskGetSchedulerState+0x34>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d102      	bne.n	80067ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80067a6:	2301      	movs	r3, #1
 80067a8:	607b      	str	r3, [r7, #4]
 80067aa:	e008      	b.n	80067be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067ac:	4b08      	ldr	r3, [pc, #32]	; (80067d0 <xTaskGetSchedulerState+0x38>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d102      	bne.n	80067ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80067b4:	2302      	movs	r3, #2
 80067b6:	607b      	str	r3, [r7, #4]
 80067b8:	e001      	b.n	80067be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80067ba:	2300      	movs	r3, #0
 80067bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80067be:	687b      	ldr	r3, [r7, #4]
	}
 80067c0:	4618      	mov	r0, r3
 80067c2:	370c      	adds	r7, #12
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr
 80067cc:	2000ee70 	.word	0x2000ee70
 80067d0:	2000ee8c 	.word	0x2000ee8c

080067d4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80067e0:	2300      	movs	r3, #0
 80067e2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d051      	beq.n	800688e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067ee:	4b2a      	ldr	r3, [pc, #168]	; (8006898 <xTaskPriorityInherit+0xc4>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d241      	bcs.n	800687c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	699b      	ldr	r3, [r3, #24]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	db06      	blt.n	800680e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006800:	4b25      	ldr	r3, [pc, #148]	; (8006898 <xTaskPriorityInherit+0xc4>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006806:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	6959      	ldr	r1, [r3, #20]
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006816:	4613      	mov	r3, r2
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	4413      	add	r3, r2
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	4a1f      	ldr	r2, [pc, #124]	; (800689c <xTaskPriorityInherit+0xc8>)
 8006820:	4413      	add	r3, r2
 8006822:	4299      	cmp	r1, r3
 8006824:	d122      	bne.n	800686c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	3304      	adds	r3, #4
 800682a:	4618      	mov	r0, r3
 800682c:	f7fd feac 	bl	8004588 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006830:	4b19      	ldr	r3, [pc, #100]	; (8006898 <xTaskPriorityInherit+0xc4>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800683e:	4b18      	ldr	r3, [pc, #96]	; (80068a0 <xTaskPriorityInherit+0xcc>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	429a      	cmp	r2, r3
 8006844:	d903      	bls.n	800684e <xTaskPriorityInherit+0x7a>
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800684a:	4a15      	ldr	r2, [pc, #84]	; (80068a0 <xTaskPriorityInherit+0xcc>)
 800684c:	6013      	str	r3, [r2, #0]
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006852:	4613      	mov	r3, r2
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	4413      	add	r3, r2
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	4a10      	ldr	r2, [pc, #64]	; (800689c <xTaskPriorityInherit+0xc8>)
 800685c:	441a      	add	r2, r3
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	3304      	adds	r3, #4
 8006862:	4619      	mov	r1, r3
 8006864:	4610      	mov	r0, r2
 8006866:	f7fd fe32 	bl	80044ce <vListInsertEnd>
 800686a:	e004      	b.n	8006876 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800686c:	4b0a      	ldr	r3, [pc, #40]	; (8006898 <xTaskPriorityInherit+0xc4>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006876:	2301      	movs	r3, #1
 8006878:	60fb      	str	r3, [r7, #12]
 800687a:	e008      	b.n	800688e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006880:	4b05      	ldr	r3, [pc, #20]	; (8006898 <xTaskPriorityInherit+0xc4>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006886:	429a      	cmp	r2, r3
 8006888:	d201      	bcs.n	800688e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800688a:	2301      	movs	r3, #1
 800688c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800688e:	68fb      	ldr	r3, [r7, #12]
	}
 8006890:	4618      	mov	r0, r3
 8006892:	3710      	adds	r7, #16
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}
 8006898:	2000e990 	.word	0x2000e990
 800689c:	2000e994 	.word	0x2000e994
 80068a0:	2000ee6c 	.word	0x2000ee6c

080068a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b086      	sub	sp, #24
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80068b0:	2300      	movs	r3, #0
 80068b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d054      	beq.n	8006964 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80068ba:	4b2d      	ldr	r3, [pc, #180]	; (8006970 <xTaskPriorityDisinherit+0xcc>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	693a      	ldr	r2, [r7, #16]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d009      	beq.n	80068d8 <xTaskPriorityDisinherit+0x34>
 80068c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c8:	f383 8811 	msr	BASEPRI, r3
 80068cc:	f3bf 8f6f 	isb	sy
 80068d0:	f3bf 8f4f 	dsb	sy
 80068d4:	60fb      	str	r3, [r7, #12]
 80068d6:	e7fe      	b.n	80068d6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d109      	bne.n	80068f4 <xTaskPriorityDisinherit+0x50>
 80068e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e4:	f383 8811 	msr	BASEPRI, r3
 80068e8:	f3bf 8f6f 	isb	sy
 80068ec:	f3bf 8f4f 	dsb	sy
 80068f0:	60bb      	str	r3, [r7, #8]
 80068f2:	e7fe      	b.n	80068f2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068f8:	1e5a      	subs	r2, r3, #1
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006906:	429a      	cmp	r2, r3
 8006908:	d02c      	beq.n	8006964 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800690e:	2b00      	cmp	r3, #0
 8006910:	d128      	bne.n	8006964 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	3304      	adds	r3, #4
 8006916:	4618      	mov	r0, r3
 8006918:	f7fd fe36 	bl	8004588 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006928:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006934:	4b0f      	ldr	r3, [pc, #60]	; (8006974 <xTaskPriorityDisinherit+0xd0>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	429a      	cmp	r2, r3
 800693a:	d903      	bls.n	8006944 <xTaskPriorityDisinherit+0xa0>
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006940:	4a0c      	ldr	r2, [pc, #48]	; (8006974 <xTaskPriorityDisinherit+0xd0>)
 8006942:	6013      	str	r3, [r2, #0]
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006948:	4613      	mov	r3, r2
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	4413      	add	r3, r2
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	4a09      	ldr	r2, [pc, #36]	; (8006978 <xTaskPriorityDisinherit+0xd4>)
 8006952:	441a      	add	r2, r3
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	3304      	adds	r3, #4
 8006958:	4619      	mov	r1, r3
 800695a:	4610      	mov	r0, r2
 800695c:	f7fd fdb7 	bl	80044ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006960:	2301      	movs	r3, #1
 8006962:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006964:	697b      	ldr	r3, [r7, #20]
	}
 8006966:	4618      	mov	r0, r3
 8006968:	3718      	adds	r7, #24
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop
 8006970:	2000e990 	.word	0x2000e990
 8006974:	2000ee6c 	.word	0x2000ee6c
 8006978:	2000e994 	.word	0x2000e994

0800697c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800697c:	b580      	push	{r7, lr}
 800697e:	b088      	sub	sp, #32
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800698a:	2301      	movs	r3, #1
 800698c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d068      	beq.n	8006a66 <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006994:	69bb      	ldr	r3, [r7, #24]
 8006996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006998:	2b00      	cmp	r3, #0
 800699a:	d109      	bne.n	80069b0 <vTaskPriorityDisinheritAfterTimeout+0x34>
 800699c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a0:	f383 8811 	msr	BASEPRI, r3
 80069a4:	f3bf 8f6f 	isb	sy
 80069a8:	f3bf 8f4f 	dsb	sy
 80069ac:	60fb      	str	r3, [r7, #12]
 80069ae:	e7fe      	b.n	80069ae <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80069b0:	69bb      	ldr	r3, [r7, #24]
 80069b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d202      	bcs.n	80069c0 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	61fb      	str	r3, [r7, #28]
 80069be:	e002      	b.n	80069c6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80069c0:	69bb      	ldr	r3, [r7, #24]
 80069c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069c4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80069c6:	69bb      	ldr	r3, [r7, #24]
 80069c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069ca:	69fb      	ldr	r3, [r7, #28]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d04a      	beq.n	8006a66 <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80069d0:	69bb      	ldr	r3, [r7, #24]
 80069d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d145      	bne.n	8006a66 <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80069da:	4b25      	ldr	r3, [pc, #148]	; (8006a70 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	69ba      	ldr	r2, [r7, #24]
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d109      	bne.n	80069f8 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 80069e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e8:	f383 8811 	msr	BASEPRI, r3
 80069ec:	f3bf 8f6f 	isb	sy
 80069f0:	f3bf 8f4f 	dsb	sy
 80069f4:	60bb      	str	r3, [r7, #8]
 80069f6:	e7fe      	b.n	80069f6 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80069f8:	69bb      	ldr	r3, [r7, #24]
 80069fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069fc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80069fe:	69bb      	ldr	r3, [r7, #24]
 8006a00:	69fa      	ldr	r2, [r7, #28]
 8006a02:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006a04:	69bb      	ldr	r3, [r7, #24]
 8006a06:	699b      	ldr	r3, [r3, #24]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	db04      	blt.n	8006a16 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a0c:	69fb      	ldr	r3, [r7, #28]
 8006a0e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	6959      	ldr	r1, [r3, #20]
 8006a1a:	693a      	ldr	r2, [r7, #16]
 8006a1c:	4613      	mov	r3, r2
 8006a1e:	009b      	lsls	r3, r3, #2
 8006a20:	4413      	add	r3, r2
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	4a13      	ldr	r2, [pc, #76]	; (8006a74 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8006a26:	4413      	add	r3, r2
 8006a28:	4299      	cmp	r1, r3
 8006a2a:	d11c      	bne.n	8006a66 <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a2c:	69bb      	ldr	r3, [r7, #24]
 8006a2e:	3304      	adds	r3, #4
 8006a30:	4618      	mov	r0, r3
 8006a32:	f7fd fda9 	bl	8004588 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a3a:	4b0f      	ldr	r3, [pc, #60]	; (8006a78 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d903      	bls.n	8006a4a <vTaskPriorityDisinheritAfterTimeout+0xce>
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a46:	4a0c      	ldr	r2, [pc, #48]	; (8006a78 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006a48:	6013      	str	r3, [r2, #0]
 8006a4a:	69bb      	ldr	r3, [r7, #24]
 8006a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a4e:	4613      	mov	r3, r2
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	4413      	add	r3, r2
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	4a07      	ldr	r2, [pc, #28]	; (8006a74 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8006a58:	441a      	add	r2, r3
 8006a5a:	69bb      	ldr	r3, [r7, #24]
 8006a5c:	3304      	adds	r3, #4
 8006a5e:	4619      	mov	r1, r3
 8006a60:	4610      	mov	r0, r2
 8006a62:	f7fd fd34 	bl	80044ce <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006a66:	bf00      	nop
 8006a68:	3720      	adds	r7, #32
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	bf00      	nop
 8006a70:	2000e990 	.word	0x2000e990
 8006a74:	2000e994 	.word	0x2000e994
 8006a78:	2000ee6c 	.word	0x2000ee6c

08006a7c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006a7c:	b480      	push	{r7}
 8006a7e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006a80:	4b07      	ldr	r3, [pc, #28]	; (8006aa0 <pvTaskIncrementMutexHeldCount+0x24>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d004      	beq.n	8006a92 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006a88:	4b05      	ldr	r3, [pc, #20]	; (8006aa0 <pvTaskIncrementMutexHeldCount+0x24>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006a8e:	3201      	adds	r2, #1
 8006a90:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8006a92:	4b03      	ldr	r3, [pc, #12]	; (8006aa0 <pvTaskIncrementMutexHeldCount+0x24>)
 8006a94:	681b      	ldr	r3, [r3, #0]
	}
 8006a96:	4618      	mov	r0, r3
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr
 8006aa0:	2000e990 	.word	0x2000e990

08006aa4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b084      	sub	sp, #16
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006aae:	4b21      	ldr	r3, [pc, #132]	; (8006b34 <prvAddCurrentTaskToDelayedList+0x90>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ab4:	4b20      	ldr	r3, [pc, #128]	; (8006b38 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	3304      	adds	r3, #4
 8006aba:	4618      	mov	r0, r3
 8006abc:	f7fd fd64 	bl	8004588 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ac6:	d10a      	bne.n	8006ade <prvAddCurrentTaskToDelayedList+0x3a>
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d007      	beq.n	8006ade <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ace:	4b1a      	ldr	r3, [pc, #104]	; (8006b38 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	3304      	adds	r3, #4
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	4819      	ldr	r0, [pc, #100]	; (8006b3c <prvAddCurrentTaskToDelayedList+0x98>)
 8006ad8:	f7fd fcf9 	bl	80044ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006adc:	e026      	b.n	8006b2c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006ade:	68fa      	ldr	r2, [r7, #12]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4413      	add	r3, r2
 8006ae4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006ae6:	4b14      	ldr	r3, [pc, #80]	; (8006b38 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	68ba      	ldr	r2, [r7, #8]
 8006aec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006aee:	68ba      	ldr	r2, [r7, #8]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d209      	bcs.n	8006b0a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006af6:	4b12      	ldr	r3, [pc, #72]	; (8006b40 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	4b0f      	ldr	r3, [pc, #60]	; (8006b38 <prvAddCurrentTaskToDelayedList+0x94>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	3304      	adds	r3, #4
 8006b00:	4619      	mov	r1, r3
 8006b02:	4610      	mov	r0, r2
 8006b04:	f7fd fd07 	bl	8004516 <vListInsert>
}
 8006b08:	e010      	b.n	8006b2c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b0a:	4b0e      	ldr	r3, [pc, #56]	; (8006b44 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	4b0a      	ldr	r3, [pc, #40]	; (8006b38 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	3304      	adds	r3, #4
 8006b14:	4619      	mov	r1, r3
 8006b16:	4610      	mov	r0, r2
 8006b18:	f7fd fcfd 	bl	8004516 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006b1c:	4b0a      	ldr	r3, [pc, #40]	; (8006b48 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68ba      	ldr	r2, [r7, #8]
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d202      	bcs.n	8006b2c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006b26:	4a08      	ldr	r2, [pc, #32]	; (8006b48 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	6013      	str	r3, [r2, #0]
}
 8006b2c:	bf00      	nop
 8006b2e:	3710      	adds	r7, #16
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	2000ee68 	.word	0x2000ee68
 8006b38:	2000e990 	.word	0x2000e990
 8006b3c:	2000ee50 	.word	0x2000ee50
 8006b40:	2000ee20 	.word	0x2000ee20
 8006b44:	2000ee1c 	.word	0x2000ee1c
 8006b48:	2000ee84 	.word	0x2000ee84

08006b4c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b08a      	sub	sp, #40	; 0x28
 8006b50:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006b52:	2300      	movs	r3, #0
 8006b54:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006b56:	f000 faff 	bl	8007158 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006b5a:	4b1c      	ldr	r3, [pc, #112]	; (8006bcc <xTimerCreateTimerTask+0x80>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d021      	beq.n	8006ba6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006b62:	2300      	movs	r3, #0
 8006b64:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006b66:	2300      	movs	r3, #0
 8006b68:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006b6a:	1d3a      	adds	r2, r7, #4
 8006b6c:	f107 0108 	add.w	r1, r7, #8
 8006b70:	f107 030c 	add.w	r3, r7, #12
 8006b74:	4618      	mov	r0, r3
 8006b76:	f7fd fc63 	bl	8004440 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006b7a:	6879      	ldr	r1, [r7, #4]
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	68fa      	ldr	r2, [r7, #12]
 8006b80:	9202      	str	r2, [sp, #8]
 8006b82:	9301      	str	r3, [sp, #4]
 8006b84:	2302      	movs	r3, #2
 8006b86:	9300      	str	r3, [sp, #0]
 8006b88:	2300      	movs	r3, #0
 8006b8a:	460a      	mov	r2, r1
 8006b8c:	4910      	ldr	r1, [pc, #64]	; (8006bd0 <xTimerCreateTimerTask+0x84>)
 8006b8e:	4811      	ldr	r0, [pc, #68]	; (8006bd4 <xTimerCreateTimerTask+0x88>)
 8006b90:	f7fe fffa 	bl	8005b88 <xTaskCreateStatic>
 8006b94:	4602      	mov	r2, r0
 8006b96:	4b10      	ldr	r3, [pc, #64]	; (8006bd8 <xTimerCreateTimerTask+0x8c>)
 8006b98:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006b9a:	4b0f      	ldr	r3, [pc, #60]	; (8006bd8 <xTimerCreateTimerTask+0x8c>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d001      	beq.n	8006ba6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d109      	bne.n	8006bc0 <xTimerCreateTimerTask+0x74>
 8006bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb0:	f383 8811 	msr	BASEPRI, r3
 8006bb4:	f3bf 8f6f 	isb	sy
 8006bb8:	f3bf 8f4f 	dsb	sy
 8006bbc:	613b      	str	r3, [r7, #16]
 8006bbe:	e7fe      	b.n	8006bbe <xTimerCreateTimerTask+0x72>
	return xReturn;
 8006bc0:	697b      	ldr	r3, [r7, #20]
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3718      	adds	r7, #24
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	2000eec0 	.word	0x2000eec0
 8006bd0:	0800abd8 	.word	0x0800abd8
 8006bd4:	08006d0d 	.word	0x08006d0d
 8006bd8:	2000eec4 	.word	0x2000eec4

08006bdc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b08a      	sub	sp, #40	; 0x28
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	60f8      	str	r0, [r7, #12]
 8006be4:	60b9      	str	r1, [r7, #8]
 8006be6:	607a      	str	r2, [r7, #4]
 8006be8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006bea:	2300      	movs	r3, #0
 8006bec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d109      	bne.n	8006c08 <xTimerGenericCommand+0x2c>
 8006bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf8:	f383 8811 	msr	BASEPRI, r3
 8006bfc:	f3bf 8f6f 	isb	sy
 8006c00:	f3bf 8f4f 	dsb	sy
 8006c04:	623b      	str	r3, [r7, #32]
 8006c06:	e7fe      	b.n	8006c06 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006c08:	4b19      	ldr	r3, [pc, #100]	; (8006c70 <xTimerGenericCommand+0x94>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d02a      	beq.n	8006c66 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	2b05      	cmp	r3, #5
 8006c20:	dc18      	bgt.n	8006c54 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006c22:	f7ff fdb9 	bl	8006798 <xTaskGetSchedulerState>
 8006c26:	4603      	mov	r3, r0
 8006c28:	2b02      	cmp	r3, #2
 8006c2a:	d109      	bne.n	8006c40 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006c2c:	4b10      	ldr	r3, [pc, #64]	; (8006c70 <xTimerGenericCommand+0x94>)
 8006c2e:	6818      	ldr	r0, [r3, #0]
 8006c30:	f107 0110 	add.w	r1, r7, #16
 8006c34:	2300      	movs	r3, #0
 8006c36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c38:	f7fe fa26 	bl	8005088 <xQueueGenericSend>
 8006c3c:	6278      	str	r0, [r7, #36]	; 0x24
 8006c3e:	e012      	b.n	8006c66 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006c40:	4b0b      	ldr	r3, [pc, #44]	; (8006c70 <xTimerGenericCommand+0x94>)
 8006c42:	6818      	ldr	r0, [r3, #0]
 8006c44:	f107 0110 	add.w	r1, r7, #16
 8006c48:	2300      	movs	r3, #0
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f7fe fa1c 	bl	8005088 <xQueueGenericSend>
 8006c50:	6278      	str	r0, [r7, #36]	; 0x24
 8006c52:	e008      	b.n	8006c66 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006c54:	4b06      	ldr	r3, [pc, #24]	; (8006c70 <xTimerGenericCommand+0x94>)
 8006c56:	6818      	ldr	r0, [r3, #0]
 8006c58:	f107 0110 	add.w	r1, r7, #16
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	683a      	ldr	r2, [r7, #0]
 8006c60:	f7fe fb0c 	bl	800527c <xQueueGenericSendFromISR>
 8006c64:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3728      	adds	r7, #40	; 0x28
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}
 8006c70:	2000eec0 	.word	0x2000eec0

08006c74 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b088      	sub	sp, #32
 8006c78:	af02      	add	r7, sp, #8
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c7e:	4b22      	ldr	r3, [pc, #136]	; (8006d08 <prvProcessExpiredTimer+0x94>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	68db      	ldr	r3, [r3, #12]
 8006c84:	68db      	ldr	r3, [r3, #12]
 8006c86:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	3304      	adds	r3, #4
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f7fd fc7b 	bl	8004588 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c98:	f003 0304 	and.w	r3, r3, #4
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d021      	beq.n	8006ce4 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	699a      	ldr	r2, [r3, #24]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	18d1      	adds	r1, r2, r3
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	683a      	ldr	r2, [r7, #0]
 8006cac:	6978      	ldr	r0, [r7, #20]
 8006cae:	f000 f8d1 	bl	8006e54 <prvInsertTimerInActiveList>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d01e      	beq.n	8006cf6 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006cb8:	2300      	movs	r3, #0
 8006cba:	9300      	str	r3, [sp, #0]
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	2100      	movs	r1, #0
 8006cc2:	6978      	ldr	r0, [r7, #20]
 8006cc4:	f7ff ff8a 	bl	8006bdc <xTimerGenericCommand>
 8006cc8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d112      	bne.n	8006cf6 <prvProcessExpiredTimer+0x82>
 8006cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd4:	f383 8811 	msr	BASEPRI, r3
 8006cd8:	f3bf 8f6f 	isb	sy
 8006cdc:	f3bf 8f4f 	dsb	sy
 8006ce0:	60fb      	str	r3, [r7, #12]
 8006ce2:	e7fe      	b.n	8006ce2 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cea:	f023 0301 	bic.w	r3, r3, #1
 8006cee:	b2da      	uxtb	r2, r3
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	6a1b      	ldr	r3, [r3, #32]
 8006cfa:	6978      	ldr	r0, [r7, #20]
 8006cfc:	4798      	blx	r3
}
 8006cfe:	bf00      	nop
 8006d00:	3718      	adds	r7, #24
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	2000eeb8 	.word	0x2000eeb8

08006d0c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006d14:	f107 0308 	add.w	r3, r7, #8
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f000 f857 	bl	8006dcc <prvGetNextExpireTime>
 8006d1e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	4619      	mov	r1, r3
 8006d24:	68f8      	ldr	r0, [r7, #12]
 8006d26:	f000 f803 	bl	8006d30 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006d2a:	f000 f8d5 	bl	8006ed8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006d2e:	e7f1      	b.n	8006d14 <prvTimerTask+0x8>

08006d30 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006d3a:	f7ff f95b 	bl	8005ff4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006d3e:	f107 0308 	add.w	r3, r7, #8
 8006d42:	4618      	mov	r0, r3
 8006d44:	f000 f866 	bl	8006e14 <prvSampleTimeNow>
 8006d48:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d130      	bne.n	8006db2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d10a      	bne.n	8006d6c <prvProcessTimerOrBlockTask+0x3c>
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d806      	bhi.n	8006d6c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006d5e:	f7ff f957 	bl	8006010 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006d62:	68f9      	ldr	r1, [r7, #12]
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f7ff ff85 	bl	8006c74 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006d6a:	e024      	b.n	8006db6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d008      	beq.n	8006d84 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006d72:	4b13      	ldr	r3, [pc, #76]	; (8006dc0 <prvProcessTimerOrBlockTask+0x90>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d101      	bne.n	8006d80 <prvProcessTimerOrBlockTask+0x50>
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e000      	b.n	8006d82 <prvProcessTimerOrBlockTask+0x52>
 8006d80:	2300      	movs	r3, #0
 8006d82:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006d84:	4b0f      	ldr	r3, [pc, #60]	; (8006dc4 <prvProcessTimerOrBlockTask+0x94>)
 8006d86:	6818      	ldr	r0, [r3, #0]
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	1ad3      	subs	r3, r2, r3
 8006d8e:	683a      	ldr	r2, [r7, #0]
 8006d90:	4619      	mov	r1, r3
 8006d92:	f7fe fec5 	bl	8005b20 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006d96:	f7ff f93b 	bl	8006010 <xTaskResumeAll>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d10a      	bne.n	8006db6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006da0:	4b09      	ldr	r3, [pc, #36]	; (8006dc8 <prvProcessTimerOrBlockTask+0x98>)
 8006da2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006da6:	601a      	str	r2, [r3, #0]
 8006da8:	f3bf 8f4f 	dsb	sy
 8006dac:	f3bf 8f6f 	isb	sy
}
 8006db0:	e001      	b.n	8006db6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006db2:	f7ff f92d 	bl	8006010 <xTaskResumeAll>
}
 8006db6:	bf00      	nop
 8006db8:	3710      	adds	r7, #16
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop
 8006dc0:	2000eebc 	.word	0x2000eebc
 8006dc4:	2000eec0 	.word	0x2000eec0
 8006dc8:	e000ed04 	.word	0xe000ed04

08006dcc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b085      	sub	sp, #20
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006dd4:	4b0e      	ldr	r3, [pc, #56]	; (8006e10 <prvGetNextExpireTime+0x44>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d101      	bne.n	8006de2 <prvGetNextExpireTime+0x16>
 8006dde:	2201      	movs	r2, #1
 8006de0:	e000      	b.n	8006de4 <prvGetNextExpireTime+0x18>
 8006de2:	2200      	movs	r2, #0
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d105      	bne.n	8006dfc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006df0:	4b07      	ldr	r3, [pc, #28]	; (8006e10 <prvGetNextExpireTime+0x44>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	60fb      	str	r3, [r7, #12]
 8006dfa:	e001      	b.n	8006e00 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006e00:	68fb      	ldr	r3, [r7, #12]
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3714      	adds	r7, #20
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr
 8006e0e:	bf00      	nop
 8006e10:	2000eeb8 	.word	0x2000eeb8

08006e14 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006e1c:	f7ff f994 	bl	8006148 <xTaskGetTickCount>
 8006e20:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006e22:	4b0b      	ldr	r3, [pc, #44]	; (8006e50 <prvSampleTimeNow+0x3c>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	68fa      	ldr	r2, [r7, #12]
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d205      	bcs.n	8006e38 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006e2c:	f000 f930 	bl	8007090 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2201      	movs	r2, #1
 8006e34:	601a      	str	r2, [r3, #0]
 8006e36:	e002      	b.n	8006e3e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006e3e:	4a04      	ldr	r2, [pc, #16]	; (8006e50 <prvSampleTimeNow+0x3c>)
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006e44:	68fb      	ldr	r3, [r7, #12]
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3710      	adds	r7, #16
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop
 8006e50:	2000eec8 	.word	0x2000eec8

08006e54 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b086      	sub	sp, #24
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	60f8      	str	r0, [r7, #12]
 8006e5c:	60b9      	str	r1, [r7, #8]
 8006e5e:	607a      	str	r2, [r7, #4]
 8006e60:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006e62:	2300      	movs	r3, #0
 8006e64:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	68ba      	ldr	r2, [r7, #8]
 8006e6a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	68fa      	ldr	r2, [r7, #12]
 8006e70:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006e72:	68ba      	ldr	r2, [r7, #8]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d812      	bhi.n	8006ea0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	1ad2      	subs	r2, r2, r3
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	699b      	ldr	r3, [r3, #24]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d302      	bcc.n	8006e8e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	617b      	str	r3, [r7, #20]
 8006e8c:	e01b      	b.n	8006ec6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006e8e:	4b10      	ldr	r3, [pc, #64]	; (8006ed0 <prvInsertTimerInActiveList+0x7c>)
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	3304      	adds	r3, #4
 8006e96:	4619      	mov	r1, r3
 8006e98:	4610      	mov	r0, r2
 8006e9a:	f7fd fb3c 	bl	8004516 <vListInsert>
 8006e9e:	e012      	b.n	8006ec6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d206      	bcs.n	8006eb6 <prvInsertTimerInActiveList+0x62>
 8006ea8:	68ba      	ldr	r2, [r7, #8]
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d302      	bcc.n	8006eb6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	617b      	str	r3, [r7, #20]
 8006eb4:	e007      	b.n	8006ec6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006eb6:	4b07      	ldr	r3, [pc, #28]	; (8006ed4 <prvInsertTimerInActiveList+0x80>)
 8006eb8:	681a      	ldr	r2, [r3, #0]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	3304      	adds	r3, #4
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	4610      	mov	r0, r2
 8006ec2:	f7fd fb28 	bl	8004516 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006ec6:	697b      	ldr	r3, [r7, #20]
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3718      	adds	r7, #24
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}
 8006ed0:	2000eebc 	.word	0x2000eebc
 8006ed4:	2000eeb8 	.word	0x2000eeb8

08006ed8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b08e      	sub	sp, #56	; 0x38
 8006edc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006ede:	e0c6      	b.n	800706e <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	da17      	bge.n	8006f16 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006ee6:	1d3b      	adds	r3, r7, #4
 8006ee8:	3304      	adds	r3, #4
 8006eea:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d109      	bne.n	8006f06 <prvProcessReceivedCommands+0x2e>
 8006ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef6:	f383 8811 	msr	BASEPRI, r3
 8006efa:	f3bf 8f6f 	isb	sy
 8006efe:	f3bf 8f4f 	dsb	sy
 8006f02:	61fb      	str	r3, [r7, #28]
 8006f04:	e7fe      	b.n	8006f04 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f0c:	6850      	ldr	r0, [r2, #4]
 8006f0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f10:	6892      	ldr	r2, [r2, #8]
 8006f12:	4611      	mov	r1, r2
 8006f14:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	f2c0 80a8 	blt.w	800706e <prvProcessReceivedCommands+0x196>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f24:	695b      	ldr	r3, [r3, #20]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d004      	beq.n	8006f34 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f2c:	3304      	adds	r3, #4
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f7fd fb2a 	bl	8004588 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f34:	463b      	mov	r3, r7
 8006f36:	4618      	mov	r0, r3
 8006f38:	f7ff ff6c 	bl	8006e14 <prvSampleTimeNow>
 8006f3c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2b09      	cmp	r3, #9
 8006f42:	f200 8093 	bhi.w	800706c <prvProcessReceivedCommands+0x194>
 8006f46:	a201      	add	r2, pc, #4	; (adr r2, 8006f4c <prvProcessReceivedCommands+0x74>)
 8006f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f4c:	08006f75 	.word	0x08006f75
 8006f50:	08006f75 	.word	0x08006f75
 8006f54:	08006f75 	.word	0x08006f75
 8006f58:	08006fe7 	.word	0x08006fe7
 8006f5c:	08006ffb 	.word	0x08006ffb
 8006f60:	08007043 	.word	0x08007043
 8006f64:	08006f75 	.word	0x08006f75
 8006f68:	08006f75 	.word	0x08006f75
 8006f6c:	08006fe7 	.word	0x08006fe7
 8006f70:	08006ffb 	.word	0x08006ffb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f7a:	f043 0301 	orr.w	r3, r3, #1
 8006f7e:	b2da      	uxtb	r2, r3
 8006f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006f86:	68ba      	ldr	r2, [r7, #8]
 8006f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f8a:	699b      	ldr	r3, [r3, #24]
 8006f8c:	18d1      	adds	r1, r2, r3
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f94:	f7ff ff5e 	bl	8006e54 <prvInsertTimerInActiveList>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d067      	beq.n	800706e <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa0:	6a1b      	ldr	r3, [r3, #32]
 8006fa2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fa4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006fac:	f003 0304 	and.w	r3, r3, #4
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d05c      	beq.n	800706e <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006fb4:	68ba      	ldr	r2, [r7, #8]
 8006fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb8:	699b      	ldr	r3, [r3, #24]
 8006fba:	441a      	add	r2, r3
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	9300      	str	r3, [sp, #0]
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	2100      	movs	r1, #0
 8006fc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fc6:	f7ff fe09 	bl	8006bdc <xTimerGenericCommand>
 8006fca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006fcc:	6a3b      	ldr	r3, [r7, #32]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d14d      	bne.n	800706e <prvProcessReceivedCommands+0x196>
 8006fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd6:	f383 8811 	msr	BASEPRI, r3
 8006fda:	f3bf 8f6f 	isb	sy
 8006fde:	f3bf 8f4f 	dsb	sy
 8006fe2:	61bb      	str	r3, [r7, #24]
 8006fe4:	e7fe      	b.n	8006fe4 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006fec:	f023 0301 	bic.w	r3, r3, #1
 8006ff0:	b2da      	uxtb	r2, r3
 8006ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006ff8:	e039      	b.n	800706e <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ffc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007000:	f043 0301 	orr.w	r3, r3, #1
 8007004:	b2da      	uxtb	r2, r3
 8007006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007008:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800700c:	68ba      	ldr	r2, [r7, #8]
 800700e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007010:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007014:	699b      	ldr	r3, [r3, #24]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d109      	bne.n	800702e <prvProcessReceivedCommands+0x156>
 800701a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800701e:	f383 8811 	msr	BASEPRI, r3
 8007022:	f3bf 8f6f 	isb	sy
 8007026:	f3bf 8f4f 	dsb	sy
 800702a:	617b      	str	r3, [r7, #20]
 800702c:	e7fe      	b.n	800702c <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800702e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007030:	699a      	ldr	r2, [r3, #24]
 8007032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007034:	18d1      	adds	r1, r2, r3
 8007036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800703a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800703c:	f7ff ff0a 	bl	8006e54 <prvInsertTimerInActiveList>
					break;
 8007040:	e015      	b.n	800706e <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007044:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007048:	f003 0302 	and.w	r3, r3, #2
 800704c:	2b00      	cmp	r3, #0
 800704e:	d103      	bne.n	8007058 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8007050:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007052:	f7fd fdc7 	bl	8004be4 <vPortFree>
 8007056:	e00a      	b.n	800706e <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800705a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800705e:	f023 0301 	bic.w	r3, r3, #1
 8007062:	b2da      	uxtb	r2, r3
 8007064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007066:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800706a:	e000      	b.n	800706e <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
 800706c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800706e:	4b07      	ldr	r3, [pc, #28]	; (800708c <prvProcessReceivedCommands+0x1b4>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	1d39      	adds	r1, r7, #4
 8007074:	2200      	movs	r2, #0
 8007076:	4618      	mov	r0, r3
 8007078:	f7fe fa1e 	bl	80054b8 <xQueueReceive>
 800707c:	4603      	mov	r3, r0
 800707e:	2b00      	cmp	r3, #0
 8007080:	f47f af2e 	bne.w	8006ee0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007084:	bf00      	nop
 8007086:	3730      	adds	r7, #48	; 0x30
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}
 800708c:	2000eec0 	.word	0x2000eec0

08007090 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b088      	sub	sp, #32
 8007094:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007096:	e047      	b.n	8007128 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007098:	4b2d      	ldr	r3, [pc, #180]	; (8007150 <prvSwitchTimerLists+0xc0>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	68db      	ldr	r3, [r3, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070a2:	4b2b      	ldr	r3, [pc, #172]	; (8007150 <prvSwitchTimerLists+0xc0>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	68db      	ldr	r3, [r3, #12]
 80070a8:	68db      	ldr	r3, [r3, #12]
 80070aa:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	3304      	adds	r3, #4
 80070b0:	4618      	mov	r0, r3
 80070b2:	f7fd fa69 	bl	8004588 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	6a1b      	ldr	r3, [r3, #32]
 80070ba:	6938      	ldr	r0, [r7, #16]
 80070bc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070c4:	f003 0304 	and.w	r3, r3, #4
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d02d      	beq.n	8007128 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	699a      	ldr	r2, [r3, #24]
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	4413      	add	r3, r2
 80070d4:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 80070d6:	68fa      	ldr	r2, [r7, #12]
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	429a      	cmp	r2, r3
 80070dc:	d90e      	bls.n	80070fc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	68fa      	ldr	r2, [r7, #12]
 80070e2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	693a      	ldr	r2, [r7, #16]
 80070e8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80070ea:	4b19      	ldr	r3, [pc, #100]	; (8007150 <prvSwitchTimerLists+0xc0>)
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	3304      	adds	r3, #4
 80070f2:	4619      	mov	r1, r3
 80070f4:	4610      	mov	r0, r2
 80070f6:	f7fd fa0e 	bl	8004516 <vListInsert>
 80070fa:	e015      	b.n	8007128 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80070fc:	2300      	movs	r3, #0
 80070fe:	9300      	str	r3, [sp, #0]
 8007100:	2300      	movs	r3, #0
 8007102:	697a      	ldr	r2, [r7, #20]
 8007104:	2100      	movs	r1, #0
 8007106:	6938      	ldr	r0, [r7, #16]
 8007108:	f7ff fd68 	bl	8006bdc <xTimerGenericCommand>
 800710c:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d109      	bne.n	8007128 <prvSwitchTimerLists+0x98>
 8007114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007118:	f383 8811 	msr	BASEPRI, r3
 800711c:	f3bf 8f6f 	isb	sy
 8007120:	f3bf 8f4f 	dsb	sy
 8007124:	603b      	str	r3, [r7, #0]
 8007126:	e7fe      	b.n	8007126 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007128:	4b09      	ldr	r3, [pc, #36]	; (8007150 <prvSwitchTimerLists+0xc0>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d1b2      	bne.n	8007098 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007132:	4b07      	ldr	r3, [pc, #28]	; (8007150 <prvSwitchTimerLists+0xc0>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 8007138:	4b06      	ldr	r3, [pc, #24]	; (8007154 <prvSwitchTimerLists+0xc4>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a04      	ldr	r2, [pc, #16]	; (8007150 <prvSwitchTimerLists+0xc0>)
 800713e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007140:	4a04      	ldr	r2, [pc, #16]	; (8007154 <prvSwitchTimerLists+0xc4>)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6013      	str	r3, [r2, #0]
}
 8007146:	bf00      	nop
 8007148:	3718      	adds	r7, #24
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop
 8007150:	2000eeb8 	.word	0x2000eeb8
 8007154:	2000eebc 	.word	0x2000eebc

08007158 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800715e:	f7fd fb65 	bl	800482c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007162:	4b15      	ldr	r3, [pc, #84]	; (80071b8 <prvCheckForValidListAndQueue+0x60>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d120      	bne.n	80071ac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800716a:	4814      	ldr	r0, [pc, #80]	; (80071bc <prvCheckForValidListAndQueue+0x64>)
 800716c:	f7fd f982 	bl	8004474 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007170:	4813      	ldr	r0, [pc, #76]	; (80071c0 <prvCheckForValidListAndQueue+0x68>)
 8007172:	f7fd f97f 	bl	8004474 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007176:	4b13      	ldr	r3, [pc, #76]	; (80071c4 <prvCheckForValidListAndQueue+0x6c>)
 8007178:	4a10      	ldr	r2, [pc, #64]	; (80071bc <prvCheckForValidListAndQueue+0x64>)
 800717a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800717c:	4b12      	ldr	r3, [pc, #72]	; (80071c8 <prvCheckForValidListAndQueue+0x70>)
 800717e:	4a10      	ldr	r2, [pc, #64]	; (80071c0 <prvCheckForValidListAndQueue+0x68>)
 8007180:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007182:	2300      	movs	r3, #0
 8007184:	9300      	str	r3, [sp, #0]
 8007186:	4b11      	ldr	r3, [pc, #68]	; (80071cc <prvCheckForValidListAndQueue+0x74>)
 8007188:	4a11      	ldr	r2, [pc, #68]	; (80071d0 <prvCheckForValidListAndQueue+0x78>)
 800718a:	2110      	movs	r1, #16
 800718c:	200a      	movs	r0, #10
 800718e:	f7fd fea5 	bl	8004edc <xQueueGenericCreateStatic>
 8007192:	4602      	mov	r2, r0
 8007194:	4b08      	ldr	r3, [pc, #32]	; (80071b8 <prvCheckForValidListAndQueue+0x60>)
 8007196:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007198:	4b07      	ldr	r3, [pc, #28]	; (80071b8 <prvCheckForValidListAndQueue+0x60>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d005      	beq.n	80071ac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80071a0:	4b05      	ldr	r3, [pc, #20]	; (80071b8 <prvCheckForValidListAndQueue+0x60>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	490b      	ldr	r1, [pc, #44]	; (80071d4 <prvCheckForValidListAndQueue+0x7c>)
 80071a6:	4618      	mov	r0, r3
 80071a8:	f7fe fc92 	bl	8005ad0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80071ac:	f7fd fb6c 	bl	8004888 <vPortExitCritical>
}
 80071b0:	bf00      	nop
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	bf00      	nop
 80071b8:	2000eec0 	.word	0x2000eec0
 80071bc:	2000ee90 	.word	0x2000ee90
 80071c0:	2000eea4 	.word	0x2000eea4
 80071c4:	2000eeb8 	.word	0x2000eeb8
 80071c8:	2000eebc 	.word	0x2000eebc
 80071cc:	2000ef6c 	.word	0x2000ef6c
 80071d0:	2000eecc 	.word	0x2000eecc
 80071d4:	0800abe0 	.word	0x0800abe0

080071d8 <vTaskDisplayTest>:
static int8_t out_z = 0;
char str_x[4];
char str_y[4];
char str_z[4];

void vTaskDisplayTest(void * displayTestParam) {
 80071d8:	b580      	push	{r7, lr}
 80071da:	b0ea      	sub	sp, #424	; 0x1a8
 80071dc:	af04      	add	r7, sp, #16
 80071de:	1d3b      	adds	r3, r7, #4
 80071e0:	6018      	str	r0, [r3, #0]
	const uint32_t delay_ticks = delay_ms / portTICK_PERIOD_MS;
 80071e2:	233f      	movs	r3, #63	; 0x3f
 80071e4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
    ST7735_Init();
 80071e8:	f7fc fcc6 	bl	8003b78 <ST7735_Init>
    LIS302DL_Init();
 80071ec:	f7f9 fe78 	bl	8000ee0 <LIS302DL_Init>

	ST7735_AddFill(ST7735_BLACK);
 80071f0:	2000      	movs	r0, #0
 80071f2:	f7fc fe23 	bl	8003e3c <ST7735_AddFill>

	ST7735_AddHorLine(38, 0, ST7735_WIDTH-1, 1, ST7735_YELLOW, SOLID);
 80071f6:	2300      	movs	r3, #0
 80071f8:	9301      	str	r3, [sp, #4]
 80071fa:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80071fe:	9300      	str	r3, [sp, #0]
 8007200:	2301      	movs	r3, #1
 8007202:	229f      	movs	r2, #159	; 0x9f
 8007204:	2100      	movs	r1, #0
 8007206:	2026      	movs	r0, #38	; 0x26
 8007208:	f7fc fcde 	bl	8003bc8 <ST7735_AddHorLine>
	ST7735_AddHorLine(77, 0, ST7735_WIDTH-1, 1, ST7735_YELLOW, SOLID);
 800720c:	2300      	movs	r3, #0
 800720e:	9301      	str	r3, [sp, #4]
 8007210:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8007214:	9300      	str	r3, [sp, #0]
 8007216:	2301      	movs	r3, #1
 8007218:	229f      	movs	r2, #159	; 0x9f
 800721a:	2100      	movs	r1, #0
 800721c:	204d      	movs	r0, #77	; 0x4d
 800721e:	f7fc fcd3 	bl	8003bc8 <ST7735_AddHorLine>
	ST7735_AddHorLine(116, 0, ST7735_WIDTH-1, 1, ST7735_YELLOW, SOLID);
 8007222:	2300      	movs	r3, #0
 8007224:	9301      	str	r3, [sp, #4]
 8007226:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800722a:	9300      	str	r3, [sp, #0]
 800722c:	2301      	movs	r3, #1
 800722e:	229f      	movs	r2, #159	; 0x9f
 8007230:	2100      	movs	r1, #0
 8007232:	2074      	movs	r0, #116	; 0x74
 8007234:	f7fc fcc8 	bl	8003bc8 <ST7735_AddHorLine>

	ST7735_AddVerLine(31, 0, 127, 1, ST7735_YELLOW, SOLID);
 8007238:	2300      	movs	r3, #0
 800723a:	9301      	str	r3, [sp, #4]
 800723c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8007240:	9300      	str	r3, [sp, #0]
 8007242:	2301      	movs	r3, #1
 8007244:	227f      	movs	r2, #127	; 0x7f
 8007246:	2100      	movs	r1, #0
 8007248:	201f      	movs	r0, #31
 800724a:	f7fc fd33 	bl	8003cb4 <ST7735_AddVerLine>

	ST7735_AddString(6, 2, "X", Font_16x26, ST7735_WHITE, ST7735_BLACK);
 800724e:	4bbe      	ldr	r3, [pc, #760]	; (8007548 <vTaskDisplayTest+0x370>)
 8007250:	2200      	movs	r2, #0
 8007252:	9202      	str	r2, [sp, #8]
 8007254:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007258:	9201      	str	r2, [sp, #4]
 800725a:	685a      	ldr	r2, [r3, #4]
 800725c:	9200      	str	r2, [sp, #0]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4aba      	ldr	r2, [pc, #744]	; (800754c <vTaskDisplayTest+0x374>)
 8007262:	2102      	movs	r1, #2
 8007264:	2006      	movs	r0, #6
 8007266:	f7fc fe6d 	bl	8003f44 <ST7735_AddString>
	ST7735_AddString(1, 27, str_x, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800726a:	4bb9      	ldr	r3, [pc, #740]	; (8007550 <vTaskDisplayTest+0x378>)
 800726c:	2200      	movs	r2, #0
 800726e:	9202      	str	r2, [sp, #8]
 8007270:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007274:	9201      	str	r2, [sp, #4]
 8007276:	685a      	ldr	r2, [r3, #4]
 8007278:	9200      	str	r2, [sp, #0]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4ab5      	ldr	r2, [pc, #724]	; (8007554 <vTaskDisplayTest+0x37c>)
 800727e:	211b      	movs	r1, #27
 8007280:	2001      	movs	r0, #1
 8007282:	f7fc fe5f 	bl	8003f44 <ST7735_AddString>
	ST7735_AddString(6, 41, "Y", Font_16x26, ST7735_WHITE, ST7735_BLACK);
 8007286:	4bb0      	ldr	r3, [pc, #704]	; (8007548 <vTaskDisplayTest+0x370>)
 8007288:	2200      	movs	r2, #0
 800728a:	9202      	str	r2, [sp, #8]
 800728c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007290:	9201      	str	r2, [sp, #4]
 8007292:	685a      	ldr	r2, [r3, #4]
 8007294:	9200      	str	r2, [sp, #0]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4aaf      	ldr	r2, [pc, #700]	; (8007558 <vTaskDisplayTest+0x380>)
 800729a:	2129      	movs	r1, #41	; 0x29
 800729c:	2006      	movs	r0, #6
 800729e:	f7fc fe51 	bl	8003f44 <ST7735_AddString>
	ST7735_AddString(1, 66, str_y, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80072a2:	4bab      	ldr	r3, [pc, #684]	; (8007550 <vTaskDisplayTest+0x378>)
 80072a4:	2200      	movs	r2, #0
 80072a6:	9202      	str	r2, [sp, #8]
 80072a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80072ac:	9201      	str	r2, [sp, #4]
 80072ae:	685a      	ldr	r2, [r3, #4]
 80072b0:	9200      	str	r2, [sp, #0]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4aa9      	ldr	r2, [pc, #676]	; (800755c <vTaskDisplayTest+0x384>)
 80072b6:	2142      	movs	r1, #66	; 0x42
 80072b8:	2001      	movs	r0, #1
 80072ba:	f7fc fe43 	bl	8003f44 <ST7735_AddString>
	ST7735_AddString(6, 80, "Z", Font_16x26, ST7735_WHITE, ST7735_BLACK);
 80072be:	4ba2      	ldr	r3, [pc, #648]	; (8007548 <vTaskDisplayTest+0x370>)
 80072c0:	2200      	movs	r2, #0
 80072c2:	9202      	str	r2, [sp, #8]
 80072c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80072c8:	9201      	str	r2, [sp, #4]
 80072ca:	685a      	ldr	r2, [r3, #4]
 80072cc:	9200      	str	r2, [sp, #0]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4aa3      	ldr	r2, [pc, #652]	; (8007560 <vTaskDisplayTest+0x388>)
 80072d2:	2150      	movs	r1, #80	; 0x50
 80072d4:	2006      	movs	r0, #6
 80072d6:	f7fc fe35 	bl	8003f44 <ST7735_AddString>
	ST7735_AddString(1, 105, str_z, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80072da:	4b9d      	ldr	r3, [pc, #628]	; (8007550 <vTaskDisplayTest+0x378>)
 80072dc:	2200      	movs	r2, #0
 80072de:	9202      	str	r2, [sp, #8]
 80072e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80072e4:	9201      	str	r2, [sp, #4]
 80072e6:	685a      	ldr	r2, [r3, #4]
 80072e8:	9200      	str	r2, [sp, #0]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a9d      	ldr	r2, [pc, #628]	; (8007564 <vTaskDisplayTest+0x38c>)
 80072ee:	2169      	movs	r1, #105	; 0x69
 80072f0:	2001      	movs	r0, #1
 80072f2:	f7fc fe27 	bl	8003f44 <ST7735_AddString>
	ST7735_AddString(1, 118, "Time", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80072f6:	4b96      	ldr	r3, [pc, #600]	; (8007550 <vTaskDisplayTest+0x378>)
 80072f8:	2200      	movs	r2, #0
 80072fa:	9202      	str	r2, [sp, #8]
 80072fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007300:	9201      	str	r2, [sp, #4]
 8007302:	685a      	ldr	r2, [r3, #4]
 8007304:	9200      	str	r2, [sp, #0]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a97      	ldr	r2, [pc, #604]	; (8007568 <vTaskDisplayTest+0x390>)
 800730a:	2176      	movs	r1, #118	; 0x76
 800730c:	2001      	movs	r0, #1
 800730e:	f7fc fe19 	bl	8003f44 <ST7735_AddString>

	ChannelData_t data_x;
	ChannelData_t data_y;
	ChannelData_t data_z;
	data_x.head = 0;
 8007312:	2300      	movs	r3, #0
 8007314:	f887 3190 	strb.w	r3, [r7, #400]	; 0x190
	data_x.cnt = 0;
 8007318:	2300      	movs	r3, #0
 800731a:	f887 3191 	strb.w	r3, [r7, #401]	; 0x191
	data_y.head = 0;
 800731e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8007322:	2200      	movs	r2, #0
 8007324:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	data_y.cnt = 0;
 8007328:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800732c:	2200      	movs	r2, #0
 800732e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	data_z.head = 0;
 8007332:	f107 0308 	add.w	r3, r7, #8
 8007336:	2200      	movs	r2, #0
 8007338:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	data_z.cnt = 0;
 800733c:	f107 0308 	add.w	r3, r7, #8
 8007340:	2200      	movs	r2, #0
 8007342:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

	while(1) {

		out_x = LIS302DL_GetX();
 8007346:	f7f9 fde3 	bl	8000f10 <LIS302DL_GetX>
 800734a:	4603      	mov	r3, r0
 800734c:	461a      	mov	r2, r3
 800734e:	4b87      	ldr	r3, [pc, #540]	; (800756c <vTaskDisplayTest+0x394>)
 8007350:	701a      	strb	r2, [r3, #0]
		out_y = LIS302DL_GetY();
 8007352:	f7f9 fdff 	bl	8000f54 <LIS302DL_GetY>
 8007356:	4603      	mov	r3, r0
 8007358:	461a      	mov	r2, r3
 800735a:	4b85      	ldr	r3, [pc, #532]	; (8007570 <vTaskDisplayTest+0x398>)
 800735c:	701a      	strb	r2, [r3, #0]
		out_z = LIS302DL_GetZ();
 800735e:	f7f9 fe1b 	bl	8000f98 <LIS302DL_GetZ>
 8007362:	4603      	mov	r3, r0
 8007364:	461a      	mov	r2, r3
 8007366:	4b83      	ldr	r3, [pc, #524]	; (8007574 <vTaskDisplayTest+0x39c>)
 8007368:	701a      	strb	r2, [r3, #0]
		pushChannelData(out_x, &data_x);
 800736a:	4b80      	ldr	r3, [pc, #512]	; (800756c <vTaskDisplayTest+0x394>)
 800736c:	f993 3000 	ldrsb.w	r3, [r3]
 8007370:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8007374:	4611      	mov	r1, r2
 8007376:	4618      	mov	r0, r3
 8007378:	f7fc fe4a 	bl	8004010 <pushChannelData>
		pushChannelData(out_y, &data_y);
 800737c:	4b7c      	ldr	r3, [pc, #496]	; (8007570 <vTaskDisplayTest+0x398>)
 800737e:	f993 3000 	ldrsb.w	r3, [r3]
 8007382:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8007386:	4611      	mov	r1, r2
 8007388:	4618      	mov	r0, r3
 800738a:	f7fc fe41 	bl	8004010 <pushChannelData>
		pushChannelData(out_z, &data_z);
 800738e:	4b79      	ldr	r3, [pc, #484]	; (8007574 <vTaskDisplayTest+0x39c>)
 8007390:	f993 3000 	ldrsb.w	r3, [r3]
 8007394:	f107 0208 	add.w	r2, r7, #8
 8007398:	4611      	mov	r1, r2
 800739a:	4618      	mov	r0, r3
 800739c:	f7fc fe38 	bl	8004010 <pushChannelData>
		sprintf(str_x, "%d", out_x);
 80073a0:	4b72      	ldr	r3, [pc, #456]	; (800756c <vTaskDisplayTest+0x394>)
 80073a2:	f993 3000 	ldrsb.w	r3, [r3]
 80073a6:	461a      	mov	r2, r3
 80073a8:	4973      	ldr	r1, [pc, #460]	; (8007578 <vTaskDisplayTest+0x3a0>)
 80073aa:	486a      	ldr	r0, [pc, #424]	; (8007554 <vTaskDisplayTest+0x37c>)
 80073ac:	f000 fd2a 	bl	8007e04 <sprintf>
		sprintf(str_y, "%d", out_y);
 80073b0:	4b6f      	ldr	r3, [pc, #444]	; (8007570 <vTaskDisplayTest+0x398>)
 80073b2:	f993 3000 	ldrsb.w	r3, [r3]
 80073b6:	461a      	mov	r2, r3
 80073b8:	496f      	ldr	r1, [pc, #444]	; (8007578 <vTaskDisplayTest+0x3a0>)
 80073ba:	4868      	ldr	r0, [pc, #416]	; (800755c <vTaskDisplayTest+0x384>)
 80073bc:	f000 fd22 	bl	8007e04 <sprintf>
		sprintf(str_z, "%d", out_z);
 80073c0:	4b6c      	ldr	r3, [pc, #432]	; (8007574 <vTaskDisplayTest+0x39c>)
 80073c2:	f993 3000 	ldrsb.w	r3, [r3]
 80073c6:	461a      	mov	r2, r3
 80073c8:	496b      	ldr	r1, [pc, #428]	; (8007578 <vTaskDisplayTest+0x3a0>)
 80073ca:	4866      	ldr	r0, [pc, #408]	; (8007564 <vTaskDisplayTest+0x38c>)
 80073cc:	f000 fd1a 	bl	8007e04 <sprintf>
		printChannelData(32, 19, &data_x, ST7735_WHITE);
 80073d0:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80073d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80073d8:	2113      	movs	r1, #19
 80073da:	2020      	movs	r0, #32
 80073dc:	f7fc fe4a 	bl	8004074 <printChannelData>
		printChannelData(32, 58, &data_y, ST7735_WHITE);
 80073e0:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80073e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80073e8:	213a      	movs	r1, #58	; 0x3a
 80073ea:	2020      	movs	r0, #32
 80073ec:	f7fc fe42 	bl	8004074 <printChannelData>
		printChannelData(32, 96, &data_z, ST7735_WHITE);
 80073f0:	f107 0208 	add.w	r2, r7, #8
 80073f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80073f8:	2160      	movs	r1, #96	; 0x60
 80073fa:	2020      	movs	r0, #32
 80073fc:	f7fc fe3a 	bl	8004074 <printChannelData>

		ST7735_AddHorLine(19, 31, ST7735_WIDTH-1, 1, ST7735_GRAY, DOTTED);
 8007400:	2301      	movs	r3, #1
 8007402:	9301      	str	r3, [sp, #4]
 8007404:	f645 23eb 	movw	r3, #23275	; 0x5aeb
 8007408:	9300      	str	r3, [sp, #0]
 800740a:	2301      	movs	r3, #1
 800740c:	229f      	movs	r2, #159	; 0x9f
 800740e:	211f      	movs	r1, #31
 8007410:	2013      	movs	r0, #19
 8007412:	f7fc fbd9 	bl	8003bc8 <ST7735_AddHorLine>
		ST7735_AddHorLine(58, 31, ST7735_WIDTH-1, 1, ST7735_GRAY, DOTTED);
 8007416:	2301      	movs	r3, #1
 8007418:	9301      	str	r3, [sp, #4]
 800741a:	f645 23eb 	movw	r3, #23275	; 0x5aeb
 800741e:	9300      	str	r3, [sp, #0]
 8007420:	2301      	movs	r3, #1
 8007422:	229f      	movs	r2, #159	; 0x9f
 8007424:	211f      	movs	r1, #31
 8007426:	203a      	movs	r0, #58	; 0x3a
 8007428:	f7fc fbce 	bl	8003bc8 <ST7735_AddHorLine>
		ST7735_AddHorLine(96, 31, ST7735_WIDTH-1, 1, ST7735_GRAY, DOTTED);
 800742c:	2301      	movs	r3, #1
 800742e:	9301      	str	r3, [sp, #4]
 8007430:	f645 23eb 	movw	r3, #23275	; 0x5aeb
 8007434:	9300      	str	r3, [sp, #0]
 8007436:	2301      	movs	r3, #1
 8007438:	229f      	movs	r2, #159	; 0x9f
 800743a:	211f      	movs	r1, #31
 800743c:	2060      	movs	r0, #96	; 0x60
 800743e:	f7fc fbc3 	bl	8003bc8 <ST7735_AddHorLine>

		ST7735_AddVerLine(ST7735_WIDTH - 32, 0, 116, 1, ST7735_GRAY, DOTTED);
 8007442:	2301      	movs	r3, #1
 8007444:	9301      	str	r3, [sp, #4]
 8007446:	f645 23eb 	movw	r3, #23275	; 0x5aeb
 800744a:	9300      	str	r3, [sp, #0]
 800744c:	2301      	movs	r3, #1
 800744e:	2274      	movs	r2, #116	; 0x74
 8007450:	2100      	movs	r1, #0
 8007452:	2080      	movs	r0, #128	; 0x80
 8007454:	f7fc fc2e 	bl	8003cb4 <ST7735_AddVerLine>
		ST7735_AddVerLine(ST7735_WIDTH - 64, 0, 116, 1, ST7735_GRAY, DOTTED);
 8007458:	2301      	movs	r3, #1
 800745a:	9301      	str	r3, [sp, #4]
 800745c:	f645 23eb 	movw	r3, #23275	; 0x5aeb
 8007460:	9300      	str	r3, [sp, #0]
 8007462:	2301      	movs	r3, #1
 8007464:	2274      	movs	r2, #116	; 0x74
 8007466:	2100      	movs	r1, #0
 8007468:	2060      	movs	r0, #96	; 0x60
 800746a:	f7fc fc23 	bl	8003cb4 <ST7735_AddVerLine>
		ST7735_AddVerLine(ST7735_WIDTH - 96, 0, 116, 1, ST7735_GRAY, DOTTED);
 800746e:	2301      	movs	r3, #1
 8007470:	9301      	str	r3, [sp, #4]
 8007472:	f645 23eb 	movw	r3, #23275	; 0x5aeb
 8007476:	9300      	str	r3, [sp, #0]
 8007478:	2301      	movs	r3, #1
 800747a:	2274      	movs	r2, #116	; 0x74
 800747c:	2100      	movs	r1, #0
 800747e:	2040      	movs	r0, #64	; 0x40
 8007480:	f7fc fc18 	bl	8003cb4 <ST7735_AddVerLine>

		ST7735_AddString(1, 27, str_x, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8007484:	4b32      	ldr	r3, [pc, #200]	; (8007550 <vTaskDisplayTest+0x378>)
 8007486:	2200      	movs	r2, #0
 8007488:	9202      	str	r2, [sp, #8]
 800748a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800748e:	9201      	str	r2, [sp, #4]
 8007490:	685a      	ldr	r2, [r3, #4]
 8007492:	9200      	str	r2, [sp, #0]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a2f      	ldr	r2, [pc, #188]	; (8007554 <vTaskDisplayTest+0x37c>)
 8007498:	211b      	movs	r1, #27
 800749a:	2001      	movs	r0, #1
 800749c:	f7fc fd52 	bl	8003f44 <ST7735_AddString>
		ST7735_AddString(1, 66, str_y, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80074a0:	4b2b      	ldr	r3, [pc, #172]	; (8007550 <vTaskDisplayTest+0x378>)
 80074a2:	2200      	movs	r2, #0
 80074a4:	9202      	str	r2, [sp, #8]
 80074a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80074aa:	9201      	str	r2, [sp, #4]
 80074ac:	685a      	ldr	r2, [r3, #4]
 80074ae:	9200      	str	r2, [sp, #0]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a2a      	ldr	r2, [pc, #168]	; (800755c <vTaskDisplayTest+0x384>)
 80074b4:	2142      	movs	r1, #66	; 0x42
 80074b6:	2001      	movs	r0, #1
 80074b8:	f7fc fd44 	bl	8003f44 <ST7735_AddString>
		ST7735_AddString(1, 105, str_z, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80074bc:	4b24      	ldr	r3, [pc, #144]	; (8007550 <vTaskDisplayTest+0x378>)
 80074be:	2200      	movs	r2, #0
 80074c0:	9202      	str	r2, [sp, #8]
 80074c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80074c6:	9201      	str	r2, [sp, #4]
 80074c8:	685a      	ldr	r2, [r3, #4]
 80074ca:	9200      	str	r2, [sp, #0]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a25      	ldr	r2, [pc, #148]	; (8007564 <vTaskDisplayTest+0x38c>)
 80074d0:	2169      	movs	r1, #105	; 0x69
 80074d2:	2001      	movs	r0, #1
 80074d4:	f7fc fd36 	bl	8003f44 <ST7735_AddString>
		ST7735_Refresh();
 80074d8:	f7fc fb64 	bl	8003ba4 <ST7735_Refresh>
		vTaskDelay(delay_ticks);
 80074dc:	f8d7 0194 	ldr.w	r0, [r7, #404]	; 0x194
 80074e0:	f7fe fcf0 	bl	8005ec4 <vTaskDelay>
		ST7735_AddRectangle(1, 27, 30, 37, ST7735_BLACK);
 80074e4:	2300      	movs	r3, #0
 80074e6:	9300      	str	r3, [sp, #0]
 80074e8:	2325      	movs	r3, #37	; 0x25
 80074ea:	221e      	movs	r2, #30
 80074ec:	211b      	movs	r1, #27
 80074ee:	2001      	movs	r0, #1
 80074f0:	f7fc fc56 	bl	8003da0 <ST7735_AddRectangle>
		ST7735_AddRectangle(1, 66, 30, 76, ST7735_BLACK);
 80074f4:	2300      	movs	r3, #0
 80074f6:	9300      	str	r3, [sp, #0]
 80074f8:	234c      	movs	r3, #76	; 0x4c
 80074fa:	221e      	movs	r2, #30
 80074fc:	2142      	movs	r1, #66	; 0x42
 80074fe:	2001      	movs	r0, #1
 8007500:	f7fc fc4e 	bl	8003da0 <ST7735_AddRectangle>
		ST7735_AddRectangle(1, 105, 30, 115, ST7735_BLACK);
 8007504:	2300      	movs	r3, #0
 8007506:	9300      	str	r3, [sp, #0]
 8007508:	2373      	movs	r3, #115	; 0x73
 800750a:	221e      	movs	r2, #30
 800750c:	2169      	movs	r1, #105	; 0x69
 800750e:	2001      	movs	r0, #1
 8007510:	f7fc fc46 	bl	8003da0 <ST7735_AddRectangle>

		ST7735_AddRectangle(32, 1, 159, 37, ST7735_BLACK);
 8007514:	2300      	movs	r3, #0
 8007516:	9300      	str	r3, [sp, #0]
 8007518:	2325      	movs	r3, #37	; 0x25
 800751a:	229f      	movs	r2, #159	; 0x9f
 800751c:	2101      	movs	r1, #1
 800751e:	2020      	movs	r0, #32
 8007520:	f7fc fc3e 	bl	8003da0 <ST7735_AddRectangle>
		ST7735_AddRectangle(32, 40, 159, 75, ST7735_BLACK);
 8007524:	2300      	movs	r3, #0
 8007526:	9300      	str	r3, [sp, #0]
 8007528:	234b      	movs	r3, #75	; 0x4b
 800752a:	229f      	movs	r2, #159	; 0x9f
 800752c:	2128      	movs	r1, #40	; 0x28
 800752e:	2020      	movs	r0, #32
 8007530:	f7fc fc36 	bl	8003da0 <ST7735_AddRectangle>
		ST7735_AddRectangle(32, 78, 159, 115, ST7735_BLACK);
 8007534:	2300      	movs	r3, #0
 8007536:	9300      	str	r3, [sp, #0]
 8007538:	2373      	movs	r3, #115	; 0x73
 800753a:	229f      	movs	r2, #159	; 0x9f
 800753c:	214e      	movs	r1, #78	; 0x4e
 800753e:	2020      	movs	r0, #32
 8007540:	f7fc fc2e 	bl	8003da0 <ST7735_AddRectangle>
		out_x = LIS302DL_GetX();
 8007544:	e6ff      	b.n	8007346 <vTaskDisplayTest+0x16e>
 8007546:	bf00      	nop
 8007548:	20000010 	.word	0x20000010
 800754c:	0800abf4 	.word	0x0800abf4
 8007550:	20000008 	.word	0x20000008
 8007554:	2000f040 	.word	0x2000f040
 8007558:	0800abf8 	.word	0x0800abf8
 800755c:	2000f0fc 	.word	0x2000f0fc
 8007560:	0800abfc 	.word	0x0800abfc
 8007564:	2000f104 	.word	0x2000f104
 8007568:	0800ac00 	.word	0x0800ac00
 800756c:	2000efbc 	.word	0x2000efbc
 8007570:	2000efbd 	.word	0x2000efbd
 8007574:	2000efbe 	.word	0x2000efbe
 8007578:	0800ac08 	.word	0x0800ac08

0800757c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b082      	sub	sp, #8
 8007580:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007582:	f7f9 fd2b 	bl	8000fdc <HAL_Init>

  /* USER CODE BEGIN Init */
  sDisplaySPI = xSemaphoreCreateBinary();
 8007586:	2203      	movs	r2, #3
 8007588:	2100      	movs	r1, #0
 800758a:	2001      	movs	r0, #1
 800758c:	f7fd fd19 	bl	8004fc2 <xQueueGenericCreate>
 8007590:	4602      	mov	r2, r0
 8007592:	4b16      	ldr	r3, [pc, #88]	; (80075ec <main+0x70>)
 8007594:	601a      	str	r2, [r3, #0]
  xSemaphoreGive(sDisplaySPI);
 8007596:	4b15      	ldr	r3, [pc, #84]	; (80075ec <main+0x70>)
 8007598:	6818      	ldr	r0, [r3, #0]
 800759a:	2300      	movs	r3, #0
 800759c:	2200      	movs	r2, #0
 800759e:	2100      	movs	r1, #0
 80075a0:	f7fd fd72 	bl	8005088 <xQueueGenericSend>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80075a4:	f000 f82e 	bl	8007604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80075a8:	f000 f930 	bl	800780c <MX_GPIO_Init>
  MX_DMA_Init();
 80075ac:	f000 f914 	bl	80077d8 <MX_DMA_Init>
  MX_SPI3_Init();
 80075b0:	f000 f8dc 	bl	800776c <MX_SPI3_Init>
  MX_SPI1_Init();
 80075b4:	f000 f8a4 	bl	8007700 <MX_SPI1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80075b8:	f000 f88e 	bl	80076d8 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80075bc:	f7fc fde8 	bl	8004190 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80075c0:	4a0b      	ldr	r2, [pc, #44]	; (80075f0 <main+0x74>)
 80075c2:	2100      	movs	r1, #0
 80075c4:	480b      	ldr	r0, [pc, #44]	; (80075f4 <main+0x78>)
 80075c6:	f7fc fe4d 	bl	8004264 <osThreadNew>
 80075ca:	4602      	mov	r2, r0
 80075cc:	4b0a      	ldr	r3, [pc, #40]	; (80075f8 <main+0x7c>)
 80075ce:	601a      	str	r2, [r3, #0]
//  							const configSTACK_DEPTH_TYPE usStackDepth,
//  							void * const pvParameters,
//  							UBaseType_t uxPriority,
//  							TaskHandle_t * const pxCreatedTask ) PRIVILEGED_FUNCTION;

  xTaskCreate(
 80075d0:	2300      	movs	r3, #0
 80075d2:	9301      	str	r3, [sp, #4]
 80075d4:	2302      	movs	r3, #2
 80075d6:	9300      	str	r3, [sp, #0]
 80075d8:	2300      	movs	r3, #0
 80075da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80075de:	4907      	ldr	r1, [pc, #28]	; (80075fc <main+0x80>)
 80075e0:	4807      	ldr	r0, [pc, #28]	; (8007600 <main+0x84>)
 80075e2:	f7fe fb2b 	bl	8005c3c <xTaskCreate>
//    );

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80075e6:	f7fc fe07 	bl	80041f8 <osKernelStart>
//  uint32_t cnt = 0;
//  HAL_GPIO_WritePin (GPIOA, GPIO_PIN_4, GPIO_PIN_SET);  	// Set CS (no transmission)
//  HAL_GPIO_WritePin(GPIOD,  GPIO_PIN_1, GPIO_PIN_SET); 		// No reset
//  HAL_GPIO_WritePin (GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);

  while (1)
 80075ea:	e7fe      	b.n	80075ea <main+0x6e>
 80075ec:	2000f100 	.word	0x2000f100
 80075f0:	0800c750 	.word	0x0800c750
 80075f4:	08007991 	.word	0x08007991
 80075f8:	2000f03c 	.word	0x2000f03c
 80075fc:	0800ac0c 	.word	0x0800ac0c
 8007600:	080071d9 	.word	0x080071d9

08007604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b094      	sub	sp, #80	; 0x50
 8007608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800760a:	f107 0320 	add.w	r3, r7, #32
 800760e:	2230      	movs	r2, #48	; 0x30
 8007610:	2100      	movs	r1, #0
 8007612:	4618      	mov	r0, r3
 8007614:	f000 fbed 	bl	8007df2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007618:	f107 030c 	add.w	r3, r7, #12
 800761c:	2200      	movs	r2, #0
 800761e:	601a      	str	r2, [r3, #0]
 8007620:	605a      	str	r2, [r3, #4]
 8007622:	609a      	str	r2, [r3, #8]
 8007624:	60da      	str	r2, [r3, #12]
 8007626:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007628:	2300      	movs	r3, #0
 800762a:	60bb      	str	r3, [r7, #8]
 800762c:	4a28      	ldr	r2, [pc, #160]	; (80076d0 <SystemClock_Config+0xcc>)
 800762e:	4b28      	ldr	r3, [pc, #160]	; (80076d0 <SystemClock_Config+0xcc>)
 8007630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007636:	6413      	str	r3, [r2, #64]	; 0x40
 8007638:	4b25      	ldr	r3, [pc, #148]	; (80076d0 <SystemClock_Config+0xcc>)
 800763a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800763c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007640:	60bb      	str	r3, [r7, #8]
 8007642:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007644:	2300      	movs	r3, #0
 8007646:	607b      	str	r3, [r7, #4]
 8007648:	4a22      	ldr	r2, [pc, #136]	; (80076d4 <SystemClock_Config+0xd0>)
 800764a:	4b22      	ldr	r3, [pc, #136]	; (80076d4 <SystemClock_Config+0xd0>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007652:	6013      	str	r3, [r2, #0]
 8007654:	4b1f      	ldr	r3, [pc, #124]	; (80076d4 <SystemClock_Config+0xd0>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800765c:	607b      	str	r3, [r7, #4]
 800765e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007660:	2302      	movs	r3, #2
 8007662:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007664:	2301      	movs	r3, #1
 8007666:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007668:	2310      	movs	r3, #16
 800766a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800766c:	2302      	movs	r3, #2
 800766e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007670:	2300      	movs	r3, #0
 8007672:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8007674:	2308      	movs	r3, #8
 8007676:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8007678:	2364      	movs	r3, #100	; 0x64
 800767a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800767c:	2302      	movs	r3, #2
 800767e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8007680:	2304      	movs	r3, #4
 8007682:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007684:	f107 0320 	add.w	r3, r7, #32
 8007688:	4618      	mov	r0, r3
 800768a:	f7fa fb2f 	bl	8001cec <HAL_RCC_OscConfig>
 800768e:	4603      	mov	r3, r0
 8007690:	2b00      	cmp	r3, #0
 8007692:	d001      	beq.n	8007698 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8007694:	f000 f996 	bl	80079c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007698:	230f      	movs	r3, #15
 800769a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800769c:	2302      	movs	r3, #2
 800769e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80076a0:	2300      	movs	r3, #0
 80076a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80076a4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80076a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80076aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80076ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80076b0:	f107 030c 	add.w	r3, r7, #12
 80076b4:	2103      	movs	r1, #3
 80076b6:	4618      	mov	r0, r3
 80076b8:	f7fa fd88 	bl	80021cc <HAL_RCC_ClockConfig>
 80076bc:	4603      	mov	r3, r0
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d001      	beq.n	80076c6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80076c2:	f000 f97f 	bl	80079c4 <Error_Handler>
  }
}
 80076c6:	bf00      	nop
 80076c8:	3750      	adds	r7, #80	; 0x50
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	bf00      	nop
 80076d0:	40023800 	.word	0x40023800
 80076d4:	40007000 	.word	0x40007000

080076d8 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	af00      	add	r7, sp, #0
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 80076dc:	2200      	movs	r2, #0
 80076de:	2105      	movs	r1, #5
 80076e0:	202f      	movs	r0, #47	; 0x2f
 80076e2:	f7f9 fd95 	bl	8001210 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80076e6:	202f      	movs	r0, #47	; 0x2f
 80076e8:	f7f9 fdae 	bl	8001248 <HAL_NVIC_EnableIRQ>
  /* SPI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 80076ec:	2200      	movs	r2, #0
 80076ee:	2105      	movs	r1, #5
 80076f0:	2033      	movs	r0, #51	; 0x33
 80076f2:	f7f9 fd8d 	bl	8001210 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80076f6:	2033      	movs	r0, #51	; 0x33
 80076f8:	f7f9 fda6 	bl	8001248 <HAL_NVIC_EnableIRQ>
}
 80076fc:	bf00      	nop
 80076fe:	bd80      	pop	{r7, pc}

08007700 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8007704:	4b17      	ldr	r3, [pc, #92]	; (8007764 <MX_SPI1_Init+0x64>)
 8007706:	4a18      	ldr	r2, [pc, #96]	; (8007768 <MX_SPI1_Init+0x68>)
 8007708:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800770a:	4b16      	ldr	r3, [pc, #88]	; (8007764 <MX_SPI1_Init+0x64>)
 800770c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007710:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8007712:	4b14      	ldr	r3, [pc, #80]	; (8007764 <MX_SPI1_Init+0x64>)
 8007714:	2200      	movs	r2, #0
 8007716:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8007718:	4b12      	ldr	r3, [pc, #72]	; (8007764 <MX_SPI1_Init+0x64>)
 800771a:	2200      	movs	r2, #0
 800771c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800771e:	4b11      	ldr	r3, [pc, #68]	; (8007764 <MX_SPI1_Init+0x64>)
 8007720:	2202      	movs	r2, #2
 8007722:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8007724:	4b0f      	ldr	r3, [pc, #60]	; (8007764 <MX_SPI1_Init+0x64>)
 8007726:	2201      	movs	r2, #1
 8007728:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800772a:	4b0e      	ldr	r3, [pc, #56]	; (8007764 <MX_SPI1_Init+0x64>)
 800772c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007730:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8007732:	4b0c      	ldr	r3, [pc, #48]	; (8007764 <MX_SPI1_Init+0x64>)
 8007734:	2228      	movs	r2, #40	; 0x28
 8007736:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007738:	4b0a      	ldr	r3, [pc, #40]	; (8007764 <MX_SPI1_Init+0x64>)
 800773a:	2200      	movs	r2, #0
 800773c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800773e:	4b09      	ldr	r3, [pc, #36]	; (8007764 <MX_SPI1_Init+0x64>)
 8007740:	2200      	movs	r2, #0
 8007742:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007744:	4b07      	ldr	r3, [pc, #28]	; (8007764 <MX_SPI1_Init+0x64>)
 8007746:	2200      	movs	r2, #0
 8007748:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800774a:	4b06      	ldr	r3, [pc, #24]	; (8007764 <MX_SPI1_Init+0x64>)
 800774c:	220a      	movs	r2, #10
 800774e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8007750:	4804      	ldr	r0, [pc, #16]	; (8007764 <MX_SPI1_Init+0x64>)
 8007752:	f7fa ff29 	bl	80025a8 <HAL_SPI_Init>
 8007756:	4603      	mov	r3, r0
 8007758:	2b00      	cmp	r3, #0
 800775a:	d001      	beq.n	8007760 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800775c:	f000 f932 	bl	80079c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8007760:	bf00      	nop
 8007762:	bd80      	pop	{r7, pc}
 8007764:	2000f108 	.word	0x2000f108
 8007768:	40013000 	.word	0x40013000

0800776c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8007770:	4b17      	ldr	r3, [pc, #92]	; (80077d0 <MX_SPI3_Init+0x64>)
 8007772:	4a18      	ldr	r2, [pc, #96]	; (80077d4 <MX_SPI3_Init+0x68>)
 8007774:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8007776:	4b16      	ldr	r3, [pc, #88]	; (80077d0 <MX_SPI3_Init+0x64>)
 8007778:	f44f 7282 	mov.w	r2, #260	; 0x104
 800777c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800777e:	4b14      	ldr	r3, [pc, #80]	; (80077d0 <MX_SPI3_Init+0x64>)
 8007780:	2200      	movs	r2, #0
 8007782:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8007784:	4b12      	ldr	r3, [pc, #72]	; (80077d0 <MX_SPI3_Init+0x64>)
 8007786:	2200      	movs	r2, #0
 8007788:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800778a:	4b11      	ldr	r3, [pc, #68]	; (80077d0 <MX_SPI3_Init+0x64>)
 800778c:	2200      	movs	r2, #0
 800778e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007790:	4b0f      	ldr	r3, [pc, #60]	; (80077d0 <MX_SPI3_Init+0x64>)
 8007792:	2200      	movs	r2, #0
 8007794:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8007796:	4b0e      	ldr	r3, [pc, #56]	; (80077d0 <MX_SPI3_Init+0x64>)
 8007798:	f44f 7200 	mov.w	r2, #512	; 0x200
 800779c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800779e:	4b0c      	ldr	r3, [pc, #48]	; (80077d0 <MX_SPI3_Init+0x64>)
 80077a0:	2200      	movs	r2, #0
 80077a2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80077a4:	4b0a      	ldr	r3, [pc, #40]	; (80077d0 <MX_SPI3_Init+0x64>)
 80077a6:	2200      	movs	r2, #0
 80077a8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80077aa:	4b09      	ldr	r3, [pc, #36]	; (80077d0 <MX_SPI3_Init+0x64>)
 80077ac:	2200      	movs	r2, #0
 80077ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80077b0:	4b07      	ldr	r3, [pc, #28]	; (80077d0 <MX_SPI3_Init+0x64>)
 80077b2:	2200      	movs	r2, #0
 80077b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80077b6:	4b06      	ldr	r3, [pc, #24]	; (80077d0 <MX_SPI3_Init+0x64>)
 80077b8:	220a      	movs	r2, #10
 80077ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80077bc:	4804      	ldr	r0, [pc, #16]	; (80077d0 <MX_SPI3_Init+0x64>)
 80077be:	f7fa fef3 	bl	80025a8 <HAL_SPI_Init>
 80077c2:	4603      	mov	r3, r0
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d001      	beq.n	80077cc <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80077c8:	f000 f8fc 	bl	80079c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80077cc:	bf00      	nop
 80077ce:	bd80      	pop	{r7, pc}
 80077d0:	2000f044 	.word	0x2000f044
 80077d4:	40003c00 	.word	0x40003c00

080077d8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80077d8:	b480      	push	{r7}
 80077da:	b083      	sub	sp, #12
 80077dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80077de:	2300      	movs	r3, #0
 80077e0:	607b      	str	r3, [r7, #4]
 80077e2:	4a09      	ldr	r2, [pc, #36]	; (8007808 <MX_DMA_Init+0x30>)
 80077e4:	4b08      	ldr	r3, [pc, #32]	; (8007808 <MX_DMA_Init+0x30>)
 80077e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80077ec:	6313      	str	r3, [r2, #48]	; 0x30
 80077ee:	4b06      	ldr	r3, [pc, #24]	; (8007808 <MX_DMA_Init+0x30>)
 80077f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80077f6:	607b      	str	r3, [r7, #4]
 80077f8:	687b      	ldr	r3, [r7, #4]

}
 80077fa:	bf00      	nop
 80077fc:	370c      	adds	r7, #12
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr
 8007806:	bf00      	nop
 8007808:	40023800 	.word	0x40023800

0800780c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b08a      	sub	sp, #40	; 0x28
 8007810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007812:	f107 0314 	add.w	r3, r7, #20
 8007816:	2200      	movs	r2, #0
 8007818:	601a      	str	r2, [r3, #0]
 800781a:	605a      	str	r2, [r3, #4]
 800781c:	609a      	str	r2, [r3, #8]
 800781e:	60da      	str	r2, [r3, #12]
 8007820:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007822:	2300      	movs	r3, #0
 8007824:	613b      	str	r3, [r7, #16]
 8007826:	4a4c      	ldr	r2, [pc, #304]	; (8007958 <MX_GPIO_Init+0x14c>)
 8007828:	4b4b      	ldr	r3, [pc, #300]	; (8007958 <MX_GPIO_Init+0x14c>)
 800782a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800782c:	f043 0310 	orr.w	r3, r3, #16
 8007830:	6313      	str	r3, [r2, #48]	; 0x30
 8007832:	4b49      	ldr	r3, [pc, #292]	; (8007958 <MX_GPIO_Init+0x14c>)
 8007834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007836:	f003 0310 	and.w	r3, r3, #16
 800783a:	613b      	str	r3, [r7, #16]
 800783c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800783e:	2300      	movs	r3, #0
 8007840:	60fb      	str	r3, [r7, #12]
 8007842:	4a45      	ldr	r2, [pc, #276]	; (8007958 <MX_GPIO_Init+0x14c>)
 8007844:	4b44      	ldr	r3, [pc, #272]	; (8007958 <MX_GPIO_Init+0x14c>)
 8007846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007848:	f043 0301 	orr.w	r3, r3, #1
 800784c:	6313      	str	r3, [r2, #48]	; 0x30
 800784e:	4b42      	ldr	r3, [pc, #264]	; (8007958 <MX_GPIO_Init+0x14c>)
 8007850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007852:	f003 0301 	and.w	r3, r3, #1
 8007856:	60fb      	str	r3, [r7, #12]
 8007858:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800785a:	2300      	movs	r3, #0
 800785c:	60bb      	str	r3, [r7, #8]
 800785e:	4a3e      	ldr	r2, [pc, #248]	; (8007958 <MX_GPIO_Init+0x14c>)
 8007860:	4b3d      	ldr	r3, [pc, #244]	; (8007958 <MX_GPIO_Init+0x14c>)
 8007862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007864:	f043 0308 	orr.w	r3, r3, #8
 8007868:	6313      	str	r3, [r2, #48]	; 0x30
 800786a:	4b3b      	ldr	r3, [pc, #236]	; (8007958 <MX_GPIO_Init+0x14c>)
 800786c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800786e:	f003 0308 	and.w	r3, r3, #8
 8007872:	60bb      	str	r3, [r7, #8]
 8007874:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007876:	2300      	movs	r3, #0
 8007878:	607b      	str	r3, [r7, #4]
 800787a:	4a37      	ldr	r2, [pc, #220]	; (8007958 <MX_GPIO_Init+0x14c>)
 800787c:	4b36      	ldr	r3, [pc, #216]	; (8007958 <MX_GPIO_Init+0x14c>)
 800787e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007880:	f043 0304 	orr.w	r3, r3, #4
 8007884:	6313      	str	r3, [r2, #48]	; 0x30
 8007886:	4b34      	ldr	r3, [pc, #208]	; (8007958 <MX_GPIO_Init+0x14c>)
 8007888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800788a:	f003 0304 	and.w	r3, r3, #4
 800788e:	607b      	str	r3, [r7, #4]
 8007890:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8007892:	2201      	movs	r2, #1
 8007894:	2108      	movs	r1, #8
 8007896:	4831      	ldr	r0, [pc, #196]	; (800795c <MX_GPIO_Init+0x150>)
 8007898:	f7fa fa0e 	bl	8001cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800789c:	2201      	movs	r2, #1
 800789e:	2110      	movs	r1, #16
 80078a0:	482f      	ldr	r0, [pc, #188]	; (8007960 <MX_GPIO_Init+0x154>)
 80078a2:	f7fa fa09 	bl	8001cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 80078a6:	2200      	movs	r2, #0
 80078a8:	f24f 0102 	movw	r1, #61442	; 0xf002
 80078ac:	482d      	ldr	r0, [pc, #180]	; (8007964 <MX_GPIO_Init+0x158>)
 80078ae:	f7fa fa03 	bl	8001cb8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80078b2:	2200      	movs	r2, #0
 80078b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80078b8:	482b      	ldr	r0, [pc, #172]	; (8007968 <MX_GPIO_Init+0x15c>)
 80078ba:	f7fa f9fd 	bl	8001cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80078be:	2308      	movs	r3, #8
 80078c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80078c2:	2301      	movs	r3, #1
 80078c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078c6:	2300      	movs	r3, #0
 80078c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80078ca:	2303      	movs	r3, #3
 80078cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80078ce:	f107 0314 	add.w	r3, r7, #20
 80078d2:	4619      	mov	r1, r3
 80078d4:	4821      	ldr	r0, [pc, #132]	; (800795c <MX_GPIO_Init+0x150>)
 80078d6:	f7fa f855 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80078da:	2310      	movs	r3, #16
 80078dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80078de:	2301      	movs	r3, #1
 80078e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078e2:	2300      	movs	r3, #0
 80078e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80078e6:	2303      	movs	r3, #3
 80078e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078ea:	f107 0314 	add.w	r3, r7, #20
 80078ee:	4619      	mov	r1, r3
 80078f0:	481b      	ldr	r0, [pc, #108]	; (8007960 <MX_GPIO_Init+0x154>)
 80078f2:	f7fa f847 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80078f6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80078fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80078fc:	2301      	movs	r3, #1
 80078fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007900:	2300      	movs	r3, #0
 8007902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007904:	2300      	movs	r3, #0
 8007906:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007908:	f107 0314 	add.w	r3, r7, #20
 800790c:	4619      	mov	r1, r3
 800790e:	4815      	ldr	r0, [pc, #84]	; (8007964 <MX_GPIO_Init+0x158>)
 8007910:	f7fa f838 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007914:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007918:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800791a:	2301      	movs	r3, #1
 800791c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800791e:	2300      	movs	r3, #0
 8007920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007922:	2303      	movs	r3, #3
 8007924:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007926:	f107 0314 	add.w	r3, r7, #20
 800792a:	4619      	mov	r1, r3
 800792c:	480e      	ldr	r0, [pc, #56]	; (8007968 <MX_GPIO_Init+0x15c>)
 800792e:	f7fa f829 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8007932:	2302      	movs	r3, #2
 8007934:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007936:	2301      	movs	r3, #1
 8007938:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800793a:	2300      	movs	r3, #0
 800793c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800793e:	2302      	movs	r3, #2
 8007940:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007942:	f107 0314 	add.w	r3, r7, #20
 8007946:	4619      	mov	r1, r3
 8007948:	4806      	ldr	r0, [pc, #24]	; (8007964 <MX_GPIO_Init+0x158>)
 800794a:	f7fa f81b 	bl	8001984 <HAL_GPIO_Init>

}
 800794e:	bf00      	nop
 8007950:	3728      	adds	r7, #40	; 0x28
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
 8007956:	bf00      	nop
 8007958:	40023800 	.word	0x40023800
 800795c:	40021000 	.word	0x40021000
 8007960:	40020000 	.word	0x40020000
 8007964:	40020c00 	.word	0x40020c00
 8007968:	40020800 	.word	0x40020800

0800796c <HAL_SPI_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 800796c:	b580      	push	{r7, lr}
 800796e:	b082      	sub	sp, #8
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
	ST7735_Unselect();
 8007974:	f7fb fffe 	bl	8003974 <ST7735_Unselect>
	xSemaphoreGiveFromISR(sDisplaySPI, NULL);
 8007978:	4b04      	ldr	r3, [pc, #16]	; (800798c <HAL_SPI_TxCpltCallback+0x20>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	2100      	movs	r1, #0
 800797e:	4618      	mov	r0, r3
 8007980:	f7fd fd10 	bl	80053a4 <xQueueGiveFromISR>
}
 8007984:	bf00      	nop
 8007986:	3708      	adds	r7, #8
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}
 800798c:	2000f100 	.word	0x2000f100

08007990 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b082      	sub	sp, #8
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8007998:	2001      	movs	r0, #1
 800799a:	f7fc fd09 	bl	80043b0 <osDelay>
 800799e:	e7fb      	b.n	8007998 <StartDefaultTask+0x8>

080079a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b082      	sub	sp, #8
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a04      	ldr	r2, [pc, #16]	; (80079c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d101      	bne.n	80079b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80079b2:	f7f9 fb35 	bl	8001020 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80079b6:	bf00      	nop
 80079b8:	3708      	adds	r7, #8
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop
 80079c0:	40014400 	.word	0x40014400

080079c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80079c4:	b480      	push	{r7}
 80079c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80079c8:	bf00      	nop
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr
	...

080079d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b082      	sub	sp, #8
 80079d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80079da:	2300      	movs	r3, #0
 80079dc:	607b      	str	r3, [r7, #4]
 80079de:	4a12      	ldr	r2, [pc, #72]	; (8007a28 <HAL_MspInit+0x54>)
 80079e0:	4b11      	ldr	r3, [pc, #68]	; (8007a28 <HAL_MspInit+0x54>)
 80079e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80079e8:	6453      	str	r3, [r2, #68]	; 0x44
 80079ea:	4b0f      	ldr	r3, [pc, #60]	; (8007a28 <HAL_MspInit+0x54>)
 80079ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079f2:	607b      	str	r3, [r7, #4]
 80079f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80079f6:	2300      	movs	r3, #0
 80079f8:	603b      	str	r3, [r7, #0]
 80079fa:	4a0b      	ldr	r2, [pc, #44]	; (8007a28 <HAL_MspInit+0x54>)
 80079fc:	4b0a      	ldr	r3, [pc, #40]	; (8007a28 <HAL_MspInit+0x54>)
 80079fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a04:	6413      	str	r3, [r2, #64]	; 0x40
 8007a06:	4b08      	ldr	r3, [pc, #32]	; (8007a28 <HAL_MspInit+0x54>)
 8007a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a0e:	603b      	str	r3, [r7, #0]
 8007a10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007a12:	2200      	movs	r2, #0
 8007a14:	210f      	movs	r1, #15
 8007a16:	f06f 0001 	mvn.w	r0, #1
 8007a1a:	f7f9 fbf9 	bl	8001210 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007a1e:	bf00      	nop
 8007a20:	3708      	adds	r7, #8
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	40023800 	.word	0x40023800

08007a2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b08c      	sub	sp, #48	; 0x30
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a34:	f107 031c 	add.w	r3, r7, #28
 8007a38:	2200      	movs	r2, #0
 8007a3a:	601a      	str	r2, [r3, #0]
 8007a3c:	605a      	str	r2, [r3, #4]
 8007a3e:	609a      	str	r2, [r3, #8]
 8007a40:	60da      	str	r2, [r3, #12]
 8007a42:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a49      	ldr	r2, [pc, #292]	; (8007b70 <HAL_SPI_MspInit+0x144>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d12c      	bne.n	8007aa8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007a4e:	2300      	movs	r3, #0
 8007a50:	61bb      	str	r3, [r7, #24]
 8007a52:	4a48      	ldr	r2, [pc, #288]	; (8007b74 <HAL_SPI_MspInit+0x148>)
 8007a54:	4b47      	ldr	r3, [pc, #284]	; (8007b74 <HAL_SPI_MspInit+0x148>)
 8007a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8007a5e:	4b45      	ldr	r3, [pc, #276]	; (8007b74 <HAL_SPI_MspInit+0x148>)
 8007a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007a66:	61bb      	str	r3, [r7, #24]
 8007a68:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	617b      	str	r3, [r7, #20]
 8007a6e:	4a41      	ldr	r2, [pc, #260]	; (8007b74 <HAL_SPI_MspInit+0x148>)
 8007a70:	4b40      	ldr	r3, [pc, #256]	; (8007b74 <HAL_SPI_MspInit+0x148>)
 8007a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a74:	f043 0301 	orr.w	r3, r3, #1
 8007a78:	6313      	str	r3, [r2, #48]	; 0x30
 8007a7a:	4b3e      	ldr	r3, [pc, #248]	; (8007b74 <HAL_SPI_MspInit+0x148>)
 8007a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a7e:	f003 0301 	and.w	r3, r3, #1
 8007a82:	617b      	str	r3, [r7, #20]
 8007a84:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8007a86:	23e0      	movs	r3, #224	; 0xe0
 8007a88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a8a:	2302      	movs	r3, #2
 8007a8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a92:	2303      	movs	r3, #3
 8007a94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007a96:	2305      	movs	r3, #5
 8007a98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a9a:	f107 031c 	add.w	r3, r7, #28
 8007a9e:	4619      	mov	r1, r3
 8007aa0:	4835      	ldr	r0, [pc, #212]	; (8007b78 <HAL_SPI_MspInit+0x14c>)
 8007aa2:	f7f9 ff6f 	bl	8001984 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8007aa6:	e05f      	b.n	8007b68 <HAL_SPI_MspInit+0x13c>
  else if(hspi->Instance==SPI3)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a33      	ldr	r2, [pc, #204]	; (8007b7c <HAL_SPI_MspInit+0x150>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d15a      	bne.n	8007b68 <HAL_SPI_MspInit+0x13c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	613b      	str	r3, [r7, #16]
 8007ab6:	4a2f      	ldr	r2, [pc, #188]	; (8007b74 <HAL_SPI_MspInit+0x148>)
 8007ab8:	4b2e      	ldr	r3, [pc, #184]	; (8007b74 <HAL_SPI_MspInit+0x148>)
 8007aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007abc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8007ac2:	4b2c      	ldr	r3, [pc, #176]	; (8007b74 <HAL_SPI_MspInit+0x148>)
 8007ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007aca:	613b      	str	r3, [r7, #16]
 8007acc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007ace:	2300      	movs	r3, #0
 8007ad0:	60fb      	str	r3, [r7, #12]
 8007ad2:	4a28      	ldr	r2, [pc, #160]	; (8007b74 <HAL_SPI_MspInit+0x148>)
 8007ad4:	4b27      	ldr	r3, [pc, #156]	; (8007b74 <HAL_SPI_MspInit+0x148>)
 8007ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ad8:	f043 0304 	orr.w	r3, r3, #4
 8007adc:	6313      	str	r3, [r2, #48]	; 0x30
 8007ade:	4b25      	ldr	r3, [pc, #148]	; (8007b74 <HAL_SPI_MspInit+0x148>)
 8007ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ae2:	f003 0304 	and.w	r3, r3, #4
 8007ae6:	60fb      	str	r3, [r7, #12]
 8007ae8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8007aea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007aee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007af0:	2302      	movs	r3, #2
 8007af2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007af4:	2300      	movs	r3, #0
 8007af6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007af8:	2303      	movs	r3, #3
 8007afa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007afc:	2306      	movs	r3, #6
 8007afe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007b00:	f107 031c 	add.w	r3, r7, #28
 8007b04:	4619      	mov	r1, r3
 8007b06:	481e      	ldr	r0, [pc, #120]	; (8007b80 <HAL_SPI_MspInit+0x154>)
 8007b08:	f7f9 ff3c 	bl	8001984 <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream7;
 8007b0c:	4b1d      	ldr	r3, [pc, #116]	; (8007b84 <HAL_SPI_MspInit+0x158>)
 8007b0e:	4a1e      	ldr	r2, [pc, #120]	; (8007b88 <HAL_SPI_MspInit+0x15c>)
 8007b10:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8007b12:	4b1c      	ldr	r3, [pc, #112]	; (8007b84 <HAL_SPI_MspInit+0x158>)
 8007b14:	2200      	movs	r2, #0
 8007b16:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007b18:	4b1a      	ldr	r3, [pc, #104]	; (8007b84 <HAL_SPI_MspInit+0x158>)
 8007b1a:	2240      	movs	r2, #64	; 0x40
 8007b1c:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007b1e:	4b19      	ldr	r3, [pc, #100]	; (8007b84 <HAL_SPI_MspInit+0x158>)
 8007b20:	2200      	movs	r2, #0
 8007b22:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007b24:	4b17      	ldr	r3, [pc, #92]	; (8007b84 <HAL_SPI_MspInit+0x158>)
 8007b26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007b2a:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007b2c:	4b15      	ldr	r3, [pc, #84]	; (8007b84 <HAL_SPI_MspInit+0x158>)
 8007b2e:	2200      	movs	r2, #0
 8007b30:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007b32:	4b14      	ldr	r3, [pc, #80]	; (8007b84 <HAL_SPI_MspInit+0x158>)
 8007b34:	2200      	movs	r2, #0
 8007b36:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8007b38:	4b12      	ldr	r3, [pc, #72]	; (8007b84 <HAL_SPI_MspInit+0x158>)
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8007b3e:	4b11      	ldr	r3, [pc, #68]	; (8007b84 <HAL_SPI_MspInit+0x158>)
 8007b40:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007b44:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007b46:	4b0f      	ldr	r3, [pc, #60]	; (8007b84 <HAL_SPI_MspInit+0x158>)
 8007b48:	2200      	movs	r2, #0
 8007b4a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8007b4c:	480d      	ldr	r0, [pc, #52]	; (8007b84 <HAL_SPI_MspInit+0x158>)
 8007b4e:	f7f9 fb89 	bl	8001264 <HAL_DMA_Init>
 8007b52:	4603      	mov	r3, r0
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d001      	beq.n	8007b5c <HAL_SPI_MspInit+0x130>
      Error_Handler();
 8007b58:	f7ff ff34 	bl	80079c4 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	4a09      	ldr	r2, [pc, #36]	; (8007b84 <HAL_SPI_MspInit+0x158>)
 8007b60:	649a      	str	r2, [r3, #72]	; 0x48
 8007b62:	4a08      	ldr	r2, [pc, #32]	; (8007b84 <HAL_SPI_MspInit+0x158>)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6393      	str	r3, [r2, #56]	; 0x38
}
 8007b68:	bf00      	nop
 8007b6a:	3730      	adds	r7, #48	; 0x30
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}
 8007b70:	40013000 	.word	0x40013000
 8007b74:	40023800 	.word	0x40023800
 8007b78:	40020000 	.word	0x40020000
 8007b7c:	40003c00 	.word	0x40003c00
 8007b80:	40020800 	.word	0x40020800
 8007b84:	2000f09c 	.word	0x2000f09c
 8007b88:	400260b8 	.word	0x400260b8

08007b8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b08c      	sub	sp, #48	; 0x30
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8007b94:	2300      	movs	r3, #0
 8007b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	6879      	ldr	r1, [r7, #4]
 8007ba0:	2019      	movs	r0, #25
 8007ba2:	f7f9 fb35 	bl	8001210 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8007ba6:	2019      	movs	r0, #25
 8007ba8:	f7f9 fb4e 	bl	8001248 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8007bac:	2300      	movs	r3, #0
 8007bae:	60fb      	str	r3, [r7, #12]
 8007bb0:	4a1f      	ldr	r2, [pc, #124]	; (8007c30 <HAL_InitTick+0xa4>)
 8007bb2:	4b1f      	ldr	r3, [pc, #124]	; (8007c30 <HAL_InitTick+0xa4>)
 8007bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bba:	6453      	str	r3, [r2, #68]	; 0x44
 8007bbc:	4b1c      	ldr	r3, [pc, #112]	; (8007c30 <HAL_InitTick+0xa4>)
 8007bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bc4:	60fb      	str	r3, [r7, #12]
 8007bc6:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007bc8:	f107 0210 	add.w	r2, r7, #16
 8007bcc:	f107 0314 	add.w	r3, r7, #20
 8007bd0:	4611      	mov	r1, r2
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f7fa fcb6 	bl	8002544 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM10 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8007bd8:	f7fa fca0 	bl	800251c <HAL_RCC_GetPCLK2Freq>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	005b      	lsls	r3, r3, #1
 8007be0:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8007be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be4:	4a13      	ldr	r2, [pc, #76]	; (8007c34 <HAL_InitTick+0xa8>)
 8007be6:	fba2 2303 	umull	r2, r3, r2, r3
 8007bea:	0c9b      	lsrs	r3, r3, #18
 8007bec:	3b01      	subs	r3, #1
 8007bee:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8007bf0:	4b11      	ldr	r3, [pc, #68]	; (8007c38 <HAL_InitTick+0xac>)
 8007bf2:	4a12      	ldr	r2, [pc, #72]	; (8007c3c <HAL_InitTick+0xb0>)
 8007bf4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000 / 1000) - 1;
 8007bf6:	4b10      	ldr	r3, [pc, #64]	; (8007c38 <HAL_InitTick+0xac>)
 8007bf8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007bfc:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8007bfe:	4a0e      	ldr	r2, [pc, #56]	; (8007c38 <HAL_InitTick+0xac>)
 8007c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c02:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8007c04:	4b0c      	ldr	r3, [pc, #48]	; (8007c38 <HAL_InitTick+0xac>)
 8007c06:	2200      	movs	r2, #0
 8007c08:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007c0a:	4b0b      	ldr	r3, [pc, #44]	; (8007c38 <HAL_InitTick+0xac>)
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8007c10:	4809      	ldr	r0, [pc, #36]	; (8007c38 <HAL_InitTick+0xac>)
 8007c12:	f7fb fc65 	bl	80034e0 <HAL_TIM_Base_Init>
 8007c16:	4603      	mov	r3, r0
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d104      	bne.n	8007c26 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 8007c1c:	4806      	ldr	r0, [pc, #24]	; (8007c38 <HAL_InitTick+0xac>)
 8007c1e:	f7fb fc94 	bl	800354a <HAL_TIM_Base_Start_IT>
 8007c22:	4603      	mov	r3, r0
 8007c24:	e000      	b.n	8007c28 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8007c26:	2301      	movs	r3, #1
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3730      	adds	r7, #48	; 0x30
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}
 8007c30:	40023800 	.word	0x40023800
 8007c34:	431bde83 	.word	0x431bde83
 8007c38:	2000f160 	.word	0x2000f160
 8007c3c:	40014400 	.word	0x40014400

08007c40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007c40:	b480      	push	{r7}
 8007c42:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007c44:	bf00      	nop
 8007c46:	46bd      	mov	sp, r7
 8007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4c:	4770      	bx	lr

08007c4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007c4e:	b480      	push	{r7}
 8007c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007c52:	e7fe      	b.n	8007c52 <HardFault_Handler+0x4>

08007c54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007c54:	b480      	push	{r7}
 8007c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007c58:	e7fe      	b.n	8007c58 <MemManage_Handler+0x4>

08007c5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007c5a:	b480      	push	{r7}
 8007c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007c5e:	e7fe      	b.n	8007c5e <BusFault_Handler+0x4>

08007c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007c60:	b480      	push	{r7}
 8007c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007c64:	e7fe      	b.n	8007c64 <UsageFault_Handler+0x4>

08007c66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007c66:	b480      	push	{r7}
 8007c68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007c6a:	bf00      	nop
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8007c78:	4802      	ldr	r0, [pc, #8]	; (8007c84 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8007c7a:	f7fb fc8a 	bl	8003592 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8007c7e:	bf00      	nop
 8007c80:	bd80      	pop	{r7, pc}
 8007c82:	bf00      	nop
 8007c84:	2000f160 	.word	0x2000f160

08007c88 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */
	//while(1);
  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8007c8c:	4802      	ldr	r0, [pc, #8]	; (8007c98 <DMA1_Stream7_IRQHandler+0x10>)
 8007c8e:	f7f9 fc11 	bl	80014b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8007c92:	bf00      	nop
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop
 8007c98:	2000f09c 	.word	0x2000f09c

08007c9c <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8007ca0:	4802      	ldr	r0, [pc, #8]	; (8007cac <SPI3_IRQHandler+0x10>)
 8007ca2:	f7fb f96b 	bl	8002f7c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8007ca6:	bf00      	nop
 8007ca8:	bd80      	pop	{r7, pc}
 8007caa:	bf00      	nop
 8007cac:	2000f044 	.word	0x2000f044

08007cb0 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b084      	sub	sp, #16
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007cb8:	4b11      	ldr	r3, [pc, #68]	; (8007d00 <_sbrk+0x50>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d102      	bne.n	8007cc6 <_sbrk+0x16>
		heap_end = &end;
 8007cc0:	4b0f      	ldr	r3, [pc, #60]	; (8007d00 <_sbrk+0x50>)
 8007cc2:	4a10      	ldr	r2, [pc, #64]	; (8007d04 <_sbrk+0x54>)
 8007cc4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007cc6:	4b0e      	ldr	r3, [pc, #56]	; (8007d00 <_sbrk+0x50>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007ccc:	4b0c      	ldr	r3, [pc, #48]	; (8007d00 <_sbrk+0x50>)
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	4413      	add	r3, r2
 8007cd4:	466a      	mov	r2, sp
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d907      	bls.n	8007cea <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8007cda:	f000 f855 	bl	8007d88 <__errno>
 8007cde:	4602      	mov	r2, r0
 8007ce0:	230c      	movs	r3, #12
 8007ce2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007ce4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ce8:	e006      	b.n	8007cf8 <_sbrk+0x48>
	}

	heap_end += incr;
 8007cea:	4b05      	ldr	r3, [pc, #20]	; (8007d00 <_sbrk+0x50>)
 8007cec:	681a      	ldr	r2, [r3, #0]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	4413      	add	r3, r2
 8007cf2:	4a03      	ldr	r2, [pc, #12]	; (8007d00 <_sbrk+0x50>)
 8007cf4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3710      	adds	r7, #16
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}
 8007d00:	2000efc0 	.word	0x2000efc0
 8007d04:	2000f1b0 	.word	0x2000f1b0

08007d08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007d0c:	4a08      	ldr	r2, [pc, #32]	; (8007d30 <SystemInit+0x28>)
 8007d0e:	4b08      	ldr	r3, [pc, #32]	; (8007d30 <SystemInit+0x28>)
 8007d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007d18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007d1c:	4b04      	ldr	r3, [pc, #16]	; (8007d30 <SystemInit+0x28>)
 8007d1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007d22:	609a      	str	r2, [r3, #8]
#endif
}
 8007d24:	bf00      	nop
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr
 8007d2e:	bf00      	nop
 8007d30:	e000ed00 	.word	0xe000ed00

08007d34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8007d34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007d6c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007d38:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007d3a:	e003      	b.n	8007d44 <LoopCopyDataInit>

08007d3c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007d3c:	4b0c      	ldr	r3, [pc, #48]	; (8007d70 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007d3e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007d40:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007d42:	3104      	adds	r1, #4

08007d44 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007d44:	480b      	ldr	r0, [pc, #44]	; (8007d74 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007d46:	4b0c      	ldr	r3, [pc, #48]	; (8007d78 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007d48:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007d4a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007d4c:	d3f6      	bcc.n	8007d3c <CopyDataInit>
  ldr  r2, =_sbss
 8007d4e:	4a0b      	ldr	r2, [pc, #44]	; (8007d7c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007d50:	e002      	b.n	8007d58 <LoopFillZerobss>

08007d52 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007d52:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007d54:	f842 3b04 	str.w	r3, [r2], #4

08007d58 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007d58:	4b09      	ldr	r3, [pc, #36]	; (8007d80 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007d5a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007d5c:	d3f9      	bcc.n	8007d52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007d5e:	f7ff ffd3 	bl	8007d08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007d62:	f000 f817 	bl	8007d94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007d66:	f7ff fc09 	bl	800757c <main>
  bx  lr    
 8007d6a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8007d6c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8007d70:	0800ca08 	.word	0x0800ca08
  ldr  r0, =_sdata
 8007d74:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007d78:	20000690 	.word	0x20000690
  ldr  r2, =_sbss
 8007d7c:	20000690 	.word	0x20000690
  ldr  r3, = _ebss
 8007d80:	2000f1b0 	.word	0x2000f1b0

08007d84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007d84:	e7fe      	b.n	8007d84 <ADC_IRQHandler>
	...

08007d88 <__errno>:
 8007d88:	4b01      	ldr	r3, [pc, #4]	; (8007d90 <__errno+0x8>)
 8007d8a:	6818      	ldr	r0, [r3, #0]
 8007d8c:	4770      	bx	lr
 8007d8e:	bf00      	nop
 8007d90:	20000020 	.word	0x20000020

08007d94 <__libc_init_array>:
 8007d94:	b570      	push	{r4, r5, r6, lr}
 8007d96:	4e0d      	ldr	r6, [pc, #52]	; (8007dcc <__libc_init_array+0x38>)
 8007d98:	4c0d      	ldr	r4, [pc, #52]	; (8007dd0 <__libc_init_array+0x3c>)
 8007d9a:	1ba4      	subs	r4, r4, r6
 8007d9c:	10a4      	asrs	r4, r4, #2
 8007d9e:	2500      	movs	r5, #0
 8007da0:	42a5      	cmp	r5, r4
 8007da2:	d109      	bne.n	8007db8 <__libc_init_array+0x24>
 8007da4:	4e0b      	ldr	r6, [pc, #44]	; (8007dd4 <__libc_init_array+0x40>)
 8007da6:	4c0c      	ldr	r4, [pc, #48]	; (8007dd8 <__libc_init_array+0x44>)
 8007da8:	f002 ff06 	bl	800abb8 <_init>
 8007dac:	1ba4      	subs	r4, r4, r6
 8007dae:	10a4      	asrs	r4, r4, #2
 8007db0:	2500      	movs	r5, #0
 8007db2:	42a5      	cmp	r5, r4
 8007db4:	d105      	bne.n	8007dc2 <__libc_init_array+0x2e>
 8007db6:	bd70      	pop	{r4, r5, r6, pc}
 8007db8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007dbc:	4798      	blx	r3
 8007dbe:	3501      	adds	r5, #1
 8007dc0:	e7ee      	b.n	8007da0 <__libc_init_array+0xc>
 8007dc2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007dc6:	4798      	blx	r3
 8007dc8:	3501      	adds	r5, #1
 8007dca:	e7f2      	b.n	8007db2 <__libc_init_array+0x1e>
 8007dcc:	0800ca00 	.word	0x0800ca00
 8007dd0:	0800ca00 	.word	0x0800ca00
 8007dd4:	0800ca00 	.word	0x0800ca00
 8007dd8:	0800ca04 	.word	0x0800ca04

08007ddc <memcpy>:
 8007ddc:	b510      	push	{r4, lr}
 8007dde:	1e43      	subs	r3, r0, #1
 8007de0:	440a      	add	r2, r1
 8007de2:	4291      	cmp	r1, r2
 8007de4:	d100      	bne.n	8007de8 <memcpy+0xc>
 8007de6:	bd10      	pop	{r4, pc}
 8007de8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007dec:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007df0:	e7f7      	b.n	8007de2 <memcpy+0x6>

08007df2 <memset>:
 8007df2:	4402      	add	r2, r0
 8007df4:	4603      	mov	r3, r0
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d100      	bne.n	8007dfc <memset+0xa>
 8007dfa:	4770      	bx	lr
 8007dfc:	f803 1b01 	strb.w	r1, [r3], #1
 8007e00:	e7f9      	b.n	8007df6 <memset+0x4>
	...

08007e04 <sprintf>:
 8007e04:	b40e      	push	{r1, r2, r3}
 8007e06:	b500      	push	{lr}
 8007e08:	b09c      	sub	sp, #112	; 0x70
 8007e0a:	f44f 7102 	mov.w	r1, #520	; 0x208
 8007e0e:	ab1d      	add	r3, sp, #116	; 0x74
 8007e10:	f8ad 1014 	strh.w	r1, [sp, #20]
 8007e14:	9002      	str	r0, [sp, #8]
 8007e16:	9006      	str	r0, [sp, #24]
 8007e18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007e1c:	480a      	ldr	r0, [pc, #40]	; (8007e48 <sprintf+0x44>)
 8007e1e:	9104      	str	r1, [sp, #16]
 8007e20:	9107      	str	r1, [sp, #28]
 8007e22:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007e26:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e2a:	f8ad 1016 	strh.w	r1, [sp, #22]
 8007e2e:	6800      	ldr	r0, [r0, #0]
 8007e30:	9301      	str	r3, [sp, #4]
 8007e32:	a902      	add	r1, sp, #8
 8007e34:	f000 f80c 	bl	8007e50 <_svfprintf_r>
 8007e38:	9b02      	ldr	r3, [sp, #8]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	701a      	strb	r2, [r3, #0]
 8007e3e:	b01c      	add	sp, #112	; 0x70
 8007e40:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e44:	b003      	add	sp, #12
 8007e46:	4770      	bx	lr
 8007e48:	20000020 	.word	0x20000020
 8007e4c:	00000000 	.word	0x00000000

08007e50 <_svfprintf_r>:
 8007e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e54:	b0bd      	sub	sp, #244	; 0xf4
 8007e56:	468a      	mov	sl, r1
 8007e58:	4615      	mov	r5, r2
 8007e5a:	461f      	mov	r7, r3
 8007e5c:	4683      	mov	fp, r0
 8007e5e:	f001 fe25 	bl	8009aac <_localeconv_r>
 8007e62:	6803      	ldr	r3, [r0, #0]
 8007e64:	930d      	str	r3, [sp, #52]	; 0x34
 8007e66:	4618      	mov	r0, r3
 8007e68:	f7f8 fa02 	bl	8000270 <strlen>
 8007e6c:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8007e70:	9008      	str	r0, [sp, #32]
 8007e72:	061b      	lsls	r3, r3, #24
 8007e74:	d518      	bpl.n	8007ea8 <_svfprintf_r+0x58>
 8007e76:	f8da 3010 	ldr.w	r3, [sl, #16]
 8007e7a:	b9ab      	cbnz	r3, 8007ea8 <_svfprintf_r+0x58>
 8007e7c:	2140      	movs	r1, #64	; 0x40
 8007e7e:	4658      	mov	r0, fp
 8007e80:	f001 fe2a 	bl	8009ad8 <_malloc_r>
 8007e84:	f8ca 0000 	str.w	r0, [sl]
 8007e88:	f8ca 0010 	str.w	r0, [sl, #16]
 8007e8c:	b948      	cbnz	r0, 8007ea2 <_svfprintf_r+0x52>
 8007e8e:	230c      	movs	r3, #12
 8007e90:	f8cb 3000 	str.w	r3, [fp]
 8007e94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007e98:	9309      	str	r3, [sp, #36]	; 0x24
 8007e9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e9c:	b03d      	add	sp, #244	; 0xf4
 8007e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ea2:	2340      	movs	r3, #64	; 0x40
 8007ea4:	f8ca 3014 	str.w	r3, [sl, #20]
 8007ea8:	ed9f 7b99 	vldr	d7, [pc, #612]	; 8008110 <_svfprintf_r+0x2c0>
 8007eac:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	ac2c      	add	r4, sp, #176	; 0xb0
 8007eb4:	941f      	str	r4, [sp, #124]	; 0x7c
 8007eb6:	9321      	str	r3, [sp, #132]	; 0x84
 8007eb8:	9320      	str	r3, [sp, #128]	; 0x80
 8007eba:	9505      	str	r5, [sp, #20]
 8007ebc:	9303      	str	r3, [sp, #12]
 8007ebe:	9311      	str	r3, [sp, #68]	; 0x44
 8007ec0:	9310      	str	r3, [sp, #64]	; 0x40
 8007ec2:	9309      	str	r3, [sp, #36]	; 0x24
 8007ec4:	9d05      	ldr	r5, [sp, #20]
 8007ec6:	462b      	mov	r3, r5
 8007ec8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ecc:	b112      	cbz	r2, 8007ed4 <_svfprintf_r+0x84>
 8007ece:	2a25      	cmp	r2, #37	; 0x25
 8007ed0:	f040 8083 	bne.w	8007fda <_svfprintf_r+0x18a>
 8007ed4:	9b05      	ldr	r3, [sp, #20]
 8007ed6:	1aee      	subs	r6, r5, r3
 8007ed8:	d00d      	beq.n	8007ef6 <_svfprintf_r+0xa6>
 8007eda:	e884 0048 	stmia.w	r4, {r3, r6}
 8007ede:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ee0:	4433      	add	r3, r6
 8007ee2:	9321      	str	r3, [sp, #132]	; 0x84
 8007ee4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	2b07      	cmp	r3, #7
 8007eea:	9320      	str	r3, [sp, #128]	; 0x80
 8007eec:	dc77      	bgt.n	8007fde <_svfprintf_r+0x18e>
 8007eee:	3408      	adds	r4, #8
 8007ef0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ef2:	4433      	add	r3, r6
 8007ef4:	9309      	str	r3, [sp, #36]	; 0x24
 8007ef6:	782b      	ldrb	r3, [r5, #0]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	f000 8729 	beq.w	8008d50 <_svfprintf_r+0xf00>
 8007efe:	2300      	movs	r3, #0
 8007f00:	1c69      	adds	r1, r5, #1
 8007f02:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8007f06:	461a      	mov	r2, r3
 8007f08:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8007f0c:	930a      	str	r3, [sp, #40]	; 0x28
 8007f0e:	461d      	mov	r5, r3
 8007f10:	200a      	movs	r0, #10
 8007f12:	1c4e      	adds	r6, r1, #1
 8007f14:	7809      	ldrb	r1, [r1, #0]
 8007f16:	9605      	str	r6, [sp, #20]
 8007f18:	9102      	str	r1, [sp, #8]
 8007f1a:	9902      	ldr	r1, [sp, #8]
 8007f1c:	3920      	subs	r1, #32
 8007f1e:	2958      	cmp	r1, #88	; 0x58
 8007f20:	f200 8418 	bhi.w	8008754 <_svfprintf_r+0x904>
 8007f24:	e8df f011 	tbh	[pc, r1, lsl #1]
 8007f28:	041600a6 	.word	0x041600a6
 8007f2c:	00ab0416 	.word	0x00ab0416
 8007f30:	04160416 	.word	0x04160416
 8007f34:	04160416 	.word	0x04160416
 8007f38:	04160416 	.word	0x04160416
 8007f3c:	006500ae 	.word	0x006500ae
 8007f40:	00b70416 	.word	0x00b70416
 8007f44:	041600ba 	.word	0x041600ba
 8007f48:	00da00d7 	.word	0x00da00d7
 8007f4c:	00da00da 	.word	0x00da00da
 8007f50:	00da00da 	.word	0x00da00da
 8007f54:	00da00da 	.word	0x00da00da
 8007f58:	00da00da 	.word	0x00da00da
 8007f5c:	04160416 	.word	0x04160416
 8007f60:	04160416 	.word	0x04160416
 8007f64:	04160416 	.word	0x04160416
 8007f68:	04160416 	.word	0x04160416
 8007f6c:	04160416 	.word	0x04160416
 8007f70:	012b0115 	.word	0x012b0115
 8007f74:	012b0416 	.word	0x012b0416
 8007f78:	04160416 	.word	0x04160416
 8007f7c:	04160416 	.word	0x04160416
 8007f80:	041600ed 	.word	0x041600ed
 8007f84:	03400416 	.word	0x03400416
 8007f88:	04160416 	.word	0x04160416
 8007f8c:	04160416 	.word	0x04160416
 8007f90:	03a80416 	.word	0x03a80416
 8007f94:	04160416 	.word	0x04160416
 8007f98:	04160086 	.word	0x04160086
 8007f9c:	04160416 	.word	0x04160416
 8007fa0:	04160416 	.word	0x04160416
 8007fa4:	04160416 	.word	0x04160416
 8007fa8:	04160416 	.word	0x04160416
 8007fac:	01070416 	.word	0x01070416
 8007fb0:	012b006b 	.word	0x012b006b
 8007fb4:	012b012b 	.word	0x012b012b
 8007fb8:	006b00f0 	.word	0x006b00f0
 8007fbc:	04160416 	.word	0x04160416
 8007fc0:	041600fa 	.word	0x041600fa
 8007fc4:	03420322 	.word	0x03420322
 8007fc8:	01010376 	.word	0x01010376
 8007fcc:	03870416 	.word	0x03870416
 8007fd0:	03aa0416 	.word	0x03aa0416
 8007fd4:	04160416 	.word	0x04160416
 8007fd8:	03c2      	.short	0x03c2
 8007fda:	461d      	mov	r5, r3
 8007fdc:	e773      	b.n	8007ec6 <_svfprintf_r+0x76>
 8007fde:	aa1f      	add	r2, sp, #124	; 0x7c
 8007fe0:	4651      	mov	r1, sl
 8007fe2:	4658      	mov	r0, fp
 8007fe4:	f002 fa72 	bl	800a4cc <__ssprint_r>
 8007fe8:	2800      	cmp	r0, #0
 8007fea:	f040 8692 	bne.w	8008d12 <_svfprintf_r+0xec2>
 8007fee:	ac2c      	add	r4, sp, #176	; 0xb0
 8007ff0:	e77e      	b.n	8007ef0 <_svfprintf_r+0xa0>
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	222b      	movs	r2, #43	; 0x2b
 8007ff6:	9905      	ldr	r1, [sp, #20]
 8007ff8:	e78b      	b.n	8007f12 <_svfprintf_r+0xc2>
 8007ffa:	460f      	mov	r7, r1
 8007ffc:	e7fb      	b.n	8007ff6 <_svfprintf_r+0x1a6>
 8007ffe:	b10b      	cbz	r3, 8008004 <_svfprintf_r+0x1b4>
 8008000:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8008004:	06ae      	lsls	r6, r5, #26
 8008006:	f140 80aa 	bpl.w	800815e <_svfprintf_r+0x30e>
 800800a:	3707      	adds	r7, #7
 800800c:	f027 0707 	bic.w	r7, r7, #7
 8008010:	f107 0308 	add.w	r3, r7, #8
 8008014:	e9d7 6700 	ldrd	r6, r7, [r7]
 8008018:	9304      	str	r3, [sp, #16]
 800801a:	2e00      	cmp	r6, #0
 800801c:	f177 0300 	sbcs.w	r3, r7, #0
 8008020:	da06      	bge.n	8008030 <_svfprintf_r+0x1e0>
 8008022:	4276      	negs	r6, r6
 8008024:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8008028:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800802c:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8008030:	2301      	movs	r3, #1
 8008032:	e2ca      	b.n	80085ca <_svfprintf_r+0x77a>
 8008034:	b10b      	cbz	r3, 800803a <_svfprintf_r+0x1ea>
 8008036:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800803a:	4b37      	ldr	r3, [pc, #220]	; (8008118 <_svfprintf_r+0x2c8>)
 800803c:	9311      	str	r3, [sp, #68]	; 0x44
 800803e:	06ab      	lsls	r3, r5, #26
 8008040:	f140 8339 	bpl.w	80086b6 <_svfprintf_r+0x866>
 8008044:	3707      	adds	r7, #7
 8008046:	f027 0707 	bic.w	r7, r7, #7
 800804a:	f107 0308 	add.w	r3, r7, #8
 800804e:	e9d7 6700 	ldrd	r6, r7, [r7]
 8008052:	9304      	str	r3, [sp, #16]
 8008054:	07e8      	lsls	r0, r5, #31
 8008056:	d50b      	bpl.n	8008070 <_svfprintf_r+0x220>
 8008058:	ea56 0307 	orrs.w	r3, r6, r7
 800805c:	d008      	beq.n	8008070 <_svfprintf_r+0x220>
 800805e:	2330      	movs	r3, #48	; 0x30
 8008060:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8008064:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8008068:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 800806c:	f045 0502 	orr.w	r5, r5, #2
 8008070:	2302      	movs	r3, #2
 8008072:	e2a7      	b.n	80085c4 <_svfprintf_r+0x774>
 8008074:	2a00      	cmp	r2, #0
 8008076:	d1be      	bne.n	8007ff6 <_svfprintf_r+0x1a6>
 8008078:	2301      	movs	r3, #1
 800807a:	2220      	movs	r2, #32
 800807c:	e7bb      	b.n	8007ff6 <_svfprintf_r+0x1a6>
 800807e:	f045 0501 	orr.w	r5, r5, #1
 8008082:	e7b8      	b.n	8007ff6 <_svfprintf_r+0x1a6>
 8008084:	683e      	ldr	r6, [r7, #0]
 8008086:	960a      	str	r6, [sp, #40]	; 0x28
 8008088:	2e00      	cmp	r6, #0
 800808a:	f107 0104 	add.w	r1, r7, #4
 800808e:	dab4      	bge.n	8007ffa <_svfprintf_r+0x1aa>
 8008090:	4276      	negs	r6, r6
 8008092:	960a      	str	r6, [sp, #40]	; 0x28
 8008094:	460f      	mov	r7, r1
 8008096:	f045 0504 	orr.w	r5, r5, #4
 800809a:	e7ac      	b.n	8007ff6 <_svfprintf_r+0x1a6>
 800809c:	9905      	ldr	r1, [sp, #20]
 800809e:	1c4e      	adds	r6, r1, #1
 80080a0:	7809      	ldrb	r1, [r1, #0]
 80080a2:	9102      	str	r1, [sp, #8]
 80080a4:	292a      	cmp	r1, #42	; 0x2a
 80080a6:	d010      	beq.n	80080ca <_svfprintf_r+0x27a>
 80080a8:	f04f 0900 	mov.w	r9, #0
 80080ac:	9605      	str	r6, [sp, #20]
 80080ae:	9902      	ldr	r1, [sp, #8]
 80080b0:	3930      	subs	r1, #48	; 0x30
 80080b2:	2909      	cmp	r1, #9
 80080b4:	f63f af31 	bhi.w	8007f1a <_svfprintf_r+0xca>
 80080b8:	fb00 1909 	mla	r9, r0, r9, r1
 80080bc:	9905      	ldr	r1, [sp, #20]
 80080be:	460e      	mov	r6, r1
 80080c0:	f816 1b01 	ldrb.w	r1, [r6], #1
 80080c4:	9102      	str	r1, [sp, #8]
 80080c6:	9605      	str	r6, [sp, #20]
 80080c8:	e7f1      	b.n	80080ae <_svfprintf_r+0x25e>
 80080ca:	6839      	ldr	r1, [r7, #0]
 80080cc:	9605      	str	r6, [sp, #20]
 80080ce:	ea41 79e1 	orr.w	r9, r1, r1, asr #31
 80080d2:	3704      	adds	r7, #4
 80080d4:	e78f      	b.n	8007ff6 <_svfprintf_r+0x1a6>
 80080d6:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80080da:	e78c      	b.n	8007ff6 <_svfprintf_r+0x1a6>
 80080dc:	2100      	movs	r1, #0
 80080de:	910a      	str	r1, [sp, #40]	; 0x28
 80080e0:	9902      	ldr	r1, [sp, #8]
 80080e2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80080e4:	3930      	subs	r1, #48	; 0x30
 80080e6:	fb00 1106 	mla	r1, r0, r6, r1
 80080ea:	910a      	str	r1, [sp, #40]	; 0x28
 80080ec:	9905      	ldr	r1, [sp, #20]
 80080ee:	460e      	mov	r6, r1
 80080f0:	f816 1b01 	ldrb.w	r1, [r6], #1
 80080f4:	9102      	str	r1, [sp, #8]
 80080f6:	9902      	ldr	r1, [sp, #8]
 80080f8:	9605      	str	r6, [sp, #20]
 80080fa:	3930      	subs	r1, #48	; 0x30
 80080fc:	2909      	cmp	r1, #9
 80080fe:	d9ef      	bls.n	80080e0 <_svfprintf_r+0x290>
 8008100:	e70b      	b.n	8007f1a <_svfprintf_r+0xca>
 8008102:	f045 0508 	orr.w	r5, r5, #8
 8008106:	e776      	b.n	8007ff6 <_svfprintf_r+0x1a6>
 8008108:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 800810c:	e773      	b.n	8007ff6 <_svfprintf_r+0x1a6>
 800810e:	bf00      	nop
	...
 8008118:	0800c79c 	.word	0x0800c79c
 800811c:	9905      	ldr	r1, [sp, #20]
 800811e:	7809      	ldrb	r1, [r1, #0]
 8008120:	296c      	cmp	r1, #108	; 0x6c
 8008122:	d105      	bne.n	8008130 <_svfprintf_r+0x2e0>
 8008124:	9905      	ldr	r1, [sp, #20]
 8008126:	3101      	adds	r1, #1
 8008128:	9105      	str	r1, [sp, #20]
 800812a:	f045 0520 	orr.w	r5, r5, #32
 800812e:	e762      	b.n	8007ff6 <_svfprintf_r+0x1a6>
 8008130:	f045 0510 	orr.w	r5, r5, #16
 8008134:	e75f      	b.n	8007ff6 <_svfprintf_r+0x1a6>
 8008136:	1d3b      	adds	r3, r7, #4
 8008138:	9304      	str	r3, [sp, #16]
 800813a:	2600      	movs	r6, #0
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8008142:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8008146:	f04f 0901 	mov.w	r9, #1
 800814a:	4637      	mov	r7, r6
 800814c:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8008150:	e11b      	b.n	800838a <_svfprintf_r+0x53a>
 8008152:	b10b      	cbz	r3, 8008158 <_svfprintf_r+0x308>
 8008154:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8008158:	f045 0510 	orr.w	r5, r5, #16
 800815c:	e752      	b.n	8008004 <_svfprintf_r+0x1b4>
 800815e:	f015 0f10 	tst.w	r5, #16
 8008162:	f107 0304 	add.w	r3, r7, #4
 8008166:	d003      	beq.n	8008170 <_svfprintf_r+0x320>
 8008168:	683e      	ldr	r6, [r7, #0]
 800816a:	9304      	str	r3, [sp, #16]
 800816c:	17f7      	asrs	r7, r6, #31
 800816e:	e754      	b.n	800801a <_svfprintf_r+0x1ca>
 8008170:	683e      	ldr	r6, [r7, #0]
 8008172:	9304      	str	r3, [sp, #16]
 8008174:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008178:	bf18      	it	ne
 800817a:	b236      	sxthne	r6, r6
 800817c:	e7f6      	b.n	800816c <_svfprintf_r+0x31c>
 800817e:	b10b      	cbz	r3, 8008184 <_svfprintf_r+0x334>
 8008180:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8008184:	3707      	adds	r7, #7
 8008186:	f027 0707 	bic.w	r7, r7, #7
 800818a:	f107 0308 	add.w	r3, r7, #8
 800818e:	9304      	str	r3, [sp, #16]
 8008190:	ed97 7b00 	vldr	d7, [r7]
 8008194:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008198:	9b06      	ldr	r3, [sp, #24]
 800819a:	9312      	str	r3, [sp, #72]	; 0x48
 800819c:	9b07      	ldr	r3, [sp, #28]
 800819e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80081a2:	9313      	str	r3, [sp, #76]	; 0x4c
 80081a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80081a8:	4b4a      	ldr	r3, [pc, #296]	; (80082d4 <_svfprintf_r+0x484>)
 80081aa:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80081ae:	f7f8 fcb9 	bl	8000b24 <__aeabi_dcmpun>
 80081b2:	2800      	cmp	r0, #0
 80081b4:	f040 85d5 	bne.w	8008d62 <_svfprintf_r+0xf12>
 80081b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80081bc:	4b45      	ldr	r3, [pc, #276]	; (80082d4 <_svfprintf_r+0x484>)
 80081be:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80081c2:	f7f8 fc91 	bl	8000ae8 <__aeabi_dcmple>
 80081c6:	2800      	cmp	r0, #0
 80081c8:	f040 85cb 	bne.w	8008d62 <_svfprintf_r+0xf12>
 80081cc:	2200      	movs	r2, #0
 80081ce:	2300      	movs	r3, #0
 80081d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80081d4:	f7f8 fc7e 	bl	8000ad4 <__aeabi_dcmplt>
 80081d8:	b110      	cbz	r0, 80081e0 <_svfprintf_r+0x390>
 80081da:	232d      	movs	r3, #45	; 0x2d
 80081dc:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80081e0:	4b3d      	ldr	r3, [pc, #244]	; (80082d8 <_svfprintf_r+0x488>)
 80081e2:	4a3e      	ldr	r2, [pc, #248]	; (80082dc <_svfprintf_r+0x48c>)
 80081e4:	9902      	ldr	r1, [sp, #8]
 80081e6:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 80081ea:	2947      	cmp	r1, #71	; 0x47
 80081ec:	bfcc      	ite	gt
 80081ee:	4690      	movgt	r8, r2
 80081f0:	4698      	movle	r8, r3
 80081f2:	f04f 0903 	mov.w	r9, #3
 80081f6:	2600      	movs	r6, #0
 80081f8:	4637      	mov	r7, r6
 80081fa:	e0c6      	b.n	800838a <_svfprintf_r+0x53a>
 80081fc:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8008200:	d022      	beq.n	8008248 <_svfprintf_r+0x3f8>
 8008202:	9b02      	ldr	r3, [sp, #8]
 8008204:	f023 0320 	bic.w	r3, r3, #32
 8008208:	2b47      	cmp	r3, #71	; 0x47
 800820a:	d104      	bne.n	8008216 <_svfprintf_r+0x3c6>
 800820c:	f1b9 0f00 	cmp.w	r9, #0
 8008210:	bf08      	it	eq
 8008212:	f04f 0901 	moveq.w	r9, #1
 8008216:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 800821a:	930c      	str	r3, [sp, #48]	; 0x30
 800821c:	9b07      	ldr	r3, [sp, #28]
 800821e:	2b00      	cmp	r3, #0
 8008220:	da15      	bge.n	800824e <_svfprintf_r+0x3fe>
 8008222:	9b06      	ldr	r3, [sp, #24]
 8008224:	930e      	str	r3, [sp, #56]	; 0x38
 8008226:	9b07      	ldr	r3, [sp, #28]
 8008228:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800822c:	930f      	str	r3, [sp, #60]	; 0x3c
 800822e:	232d      	movs	r3, #45	; 0x2d
 8008230:	930b      	str	r3, [sp, #44]	; 0x2c
 8008232:	9b02      	ldr	r3, [sp, #8]
 8008234:	f023 0720 	bic.w	r7, r3, #32
 8008238:	2f46      	cmp	r7, #70	; 0x46
 800823a:	d00e      	beq.n	800825a <_svfprintf_r+0x40a>
 800823c:	2f45      	cmp	r7, #69	; 0x45
 800823e:	d146      	bne.n	80082ce <_svfprintf_r+0x47e>
 8008240:	f109 0601 	add.w	r6, r9, #1
 8008244:	2102      	movs	r1, #2
 8008246:	e00a      	b.n	800825e <_svfprintf_r+0x40e>
 8008248:	f04f 0906 	mov.w	r9, #6
 800824c:	e7e3      	b.n	8008216 <_svfprintf_r+0x3c6>
 800824e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8008252:	2300      	movs	r3, #0
 8008254:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8008258:	e7ea      	b.n	8008230 <_svfprintf_r+0x3e0>
 800825a:	464e      	mov	r6, r9
 800825c:	2103      	movs	r1, #3
 800825e:	ab1d      	add	r3, sp, #116	; 0x74
 8008260:	9301      	str	r3, [sp, #4]
 8008262:	ab1a      	add	r3, sp, #104	; 0x68
 8008264:	9300      	str	r3, [sp, #0]
 8008266:	4632      	mov	r2, r6
 8008268:	ab19      	add	r3, sp, #100	; 0x64
 800826a:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 800826e:	4658      	mov	r0, fp
 8008270:	f000 fe4e 	bl	8008f10 <_dtoa_r>
 8008274:	2f47      	cmp	r7, #71	; 0x47
 8008276:	4680      	mov	r8, r0
 8008278:	d102      	bne.n	8008280 <_svfprintf_r+0x430>
 800827a:	07e8      	lsls	r0, r5, #31
 800827c:	f140 857e 	bpl.w	8008d7c <_svfprintf_r+0xf2c>
 8008280:	eb08 0306 	add.w	r3, r8, r6
 8008284:	2f46      	cmp	r7, #70	; 0x46
 8008286:	9303      	str	r3, [sp, #12]
 8008288:	d111      	bne.n	80082ae <_svfprintf_r+0x45e>
 800828a:	f898 3000 	ldrb.w	r3, [r8]
 800828e:	2b30      	cmp	r3, #48	; 0x30
 8008290:	d109      	bne.n	80082a6 <_svfprintf_r+0x456>
 8008292:	2200      	movs	r2, #0
 8008294:	2300      	movs	r3, #0
 8008296:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800829a:	f7f8 fc11 	bl	8000ac0 <__aeabi_dcmpeq>
 800829e:	b910      	cbnz	r0, 80082a6 <_svfprintf_r+0x456>
 80082a0:	f1c6 0601 	rsb	r6, r6, #1
 80082a4:	9619      	str	r6, [sp, #100]	; 0x64
 80082a6:	9a03      	ldr	r2, [sp, #12]
 80082a8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80082aa:	441a      	add	r2, r3
 80082ac:	9203      	str	r2, [sp, #12]
 80082ae:	2200      	movs	r2, #0
 80082b0:	2300      	movs	r3, #0
 80082b2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80082b6:	f7f8 fc03 	bl	8000ac0 <__aeabi_dcmpeq>
 80082ba:	b988      	cbnz	r0, 80082e0 <_svfprintf_r+0x490>
 80082bc:	2230      	movs	r2, #48	; 0x30
 80082be:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80082c0:	9903      	ldr	r1, [sp, #12]
 80082c2:	4299      	cmp	r1, r3
 80082c4:	d90e      	bls.n	80082e4 <_svfprintf_r+0x494>
 80082c6:	1c59      	adds	r1, r3, #1
 80082c8:	911d      	str	r1, [sp, #116]	; 0x74
 80082ca:	701a      	strb	r2, [r3, #0]
 80082cc:	e7f7      	b.n	80082be <_svfprintf_r+0x46e>
 80082ce:	464e      	mov	r6, r9
 80082d0:	e7b8      	b.n	8008244 <_svfprintf_r+0x3f4>
 80082d2:	bf00      	nop
 80082d4:	7fefffff 	.word	0x7fefffff
 80082d8:	0800c78c 	.word	0x0800c78c
 80082dc:	0800c790 	.word	0x0800c790
 80082e0:	9b03      	ldr	r3, [sp, #12]
 80082e2:	931d      	str	r3, [sp, #116]	; 0x74
 80082e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80082e6:	2f47      	cmp	r7, #71	; 0x47
 80082e8:	eba3 0308 	sub.w	r3, r3, r8
 80082ec:	9303      	str	r3, [sp, #12]
 80082ee:	f040 80fa 	bne.w	80084e6 <_svfprintf_r+0x696>
 80082f2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80082f4:	1cd9      	adds	r1, r3, #3
 80082f6:	db02      	blt.n	80082fe <_svfprintf_r+0x4ae>
 80082f8:	4599      	cmp	r9, r3
 80082fa:	f280 8120 	bge.w	800853e <_svfprintf_r+0x6ee>
 80082fe:	9b02      	ldr	r3, [sp, #8]
 8008300:	3b02      	subs	r3, #2
 8008302:	9302      	str	r3, [sp, #8]
 8008304:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008306:	f89d 1008 	ldrb.w	r1, [sp, #8]
 800830a:	f88d 106c 	strb.w	r1, [sp, #108]	; 0x6c
 800830e:	1e53      	subs	r3, r2, #1
 8008310:	2b00      	cmp	r3, #0
 8008312:	9319      	str	r3, [sp, #100]	; 0x64
 8008314:	bfb6      	itet	lt
 8008316:	f1c2 0301 	rsblt	r3, r2, #1
 800831a:	222b      	movge	r2, #43	; 0x2b
 800831c:	222d      	movlt	r2, #45	; 0x2d
 800831e:	2b09      	cmp	r3, #9
 8008320:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8008324:	f340 80fb 	ble.w	800851e <_svfprintf_r+0x6ce>
 8008328:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 800832c:	260a      	movs	r6, #10
 800832e:	fb93 f0f6 	sdiv	r0, r3, r6
 8008332:	fb06 3310 	mls	r3, r6, r0, r3
 8008336:	3330      	adds	r3, #48	; 0x30
 8008338:	2809      	cmp	r0, #9
 800833a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800833e:	f102 31ff 	add.w	r1, r2, #4294967295	; 0xffffffff
 8008342:	4603      	mov	r3, r0
 8008344:	f300 80e4 	bgt.w	8008510 <_svfprintf_r+0x6c0>
 8008348:	3330      	adds	r3, #48	; 0x30
 800834a:	f801 3c01 	strb.w	r3, [r1, #-1]
 800834e:	3a02      	subs	r2, #2
 8008350:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 8008354:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 8008358:	4282      	cmp	r2, r0
 800835a:	4619      	mov	r1, r3
 800835c:	f0c0 80da 	bcc.w	8008514 <_svfprintf_r+0x6c4>
 8008360:	9a03      	ldr	r2, [sp, #12]
 8008362:	ab1b      	add	r3, sp, #108	; 0x6c
 8008364:	1acb      	subs	r3, r1, r3
 8008366:	2a01      	cmp	r2, #1
 8008368:	9310      	str	r3, [sp, #64]	; 0x40
 800836a:	eb03 0902 	add.w	r9, r3, r2
 800836e:	dc02      	bgt.n	8008376 <_svfprintf_r+0x526>
 8008370:	f015 0701 	ands.w	r7, r5, #1
 8008374:	d002      	beq.n	800837c <_svfprintf_r+0x52c>
 8008376:	9b08      	ldr	r3, [sp, #32]
 8008378:	2700      	movs	r7, #0
 800837a:	4499      	add	r9, r3
 800837c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800837e:	b113      	cbz	r3, 8008386 <_svfprintf_r+0x536>
 8008380:	232d      	movs	r3, #45	; 0x2d
 8008382:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8008386:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008388:	2600      	movs	r6, #0
 800838a:	454e      	cmp	r6, r9
 800838c:	4633      	mov	r3, r6
 800838e:	bfb8      	it	lt
 8008390:	464b      	movlt	r3, r9
 8008392:	930b      	str	r3, [sp, #44]	; 0x2c
 8008394:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8008398:	b113      	cbz	r3, 80083a0 <_svfprintf_r+0x550>
 800839a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800839c:	3301      	adds	r3, #1
 800839e:	930b      	str	r3, [sp, #44]	; 0x2c
 80083a0:	f015 0302 	ands.w	r3, r5, #2
 80083a4:	9314      	str	r3, [sp, #80]	; 0x50
 80083a6:	bf1e      	ittt	ne
 80083a8:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 80083aa:	3302      	addne	r3, #2
 80083ac:	930b      	strne	r3, [sp, #44]	; 0x2c
 80083ae:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 80083b2:	9315      	str	r3, [sp, #84]	; 0x54
 80083b4:	d118      	bne.n	80083e8 <_svfprintf_r+0x598>
 80083b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80083ba:	1a9b      	subs	r3, r3, r2
 80083bc:	2b00      	cmp	r3, #0
 80083be:	930c      	str	r3, [sp, #48]	; 0x30
 80083c0:	dd12      	ble.n	80083e8 <_svfprintf_r+0x598>
 80083c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80083c4:	2b10      	cmp	r3, #16
 80083c6:	4ba9      	ldr	r3, [pc, #676]	; (800866c <_svfprintf_r+0x81c>)
 80083c8:	6023      	str	r3, [r4, #0]
 80083ca:	f300 81d5 	bgt.w	8008778 <_svfprintf_r+0x928>
 80083ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80083d0:	6063      	str	r3, [r4, #4]
 80083d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80083d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083d6:	4413      	add	r3, r2
 80083d8:	9321      	str	r3, [sp, #132]	; 0x84
 80083da:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80083dc:	3301      	adds	r3, #1
 80083de:	2b07      	cmp	r3, #7
 80083e0:	9320      	str	r3, [sp, #128]	; 0x80
 80083e2:	f300 81e2 	bgt.w	80087aa <_svfprintf_r+0x95a>
 80083e6:	3408      	adds	r4, #8
 80083e8:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 80083ec:	b173      	cbz	r3, 800840c <_svfprintf_r+0x5bc>
 80083ee:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 80083f2:	6023      	str	r3, [r4, #0]
 80083f4:	2301      	movs	r3, #1
 80083f6:	6063      	str	r3, [r4, #4]
 80083f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083fa:	3301      	adds	r3, #1
 80083fc:	9321      	str	r3, [sp, #132]	; 0x84
 80083fe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008400:	3301      	adds	r3, #1
 8008402:	2b07      	cmp	r3, #7
 8008404:	9320      	str	r3, [sp, #128]	; 0x80
 8008406:	f300 81da 	bgt.w	80087be <_svfprintf_r+0x96e>
 800840a:	3408      	adds	r4, #8
 800840c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800840e:	b16b      	cbz	r3, 800842c <_svfprintf_r+0x5dc>
 8008410:	ab18      	add	r3, sp, #96	; 0x60
 8008412:	6023      	str	r3, [r4, #0]
 8008414:	2302      	movs	r3, #2
 8008416:	6063      	str	r3, [r4, #4]
 8008418:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800841a:	3302      	adds	r3, #2
 800841c:	9321      	str	r3, [sp, #132]	; 0x84
 800841e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008420:	3301      	adds	r3, #1
 8008422:	2b07      	cmp	r3, #7
 8008424:	9320      	str	r3, [sp, #128]	; 0x80
 8008426:	f300 81d4 	bgt.w	80087d2 <_svfprintf_r+0x982>
 800842a:	3408      	adds	r4, #8
 800842c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800842e:	2b80      	cmp	r3, #128	; 0x80
 8008430:	d114      	bne.n	800845c <_svfprintf_r+0x60c>
 8008432:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008434:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008436:	1a9b      	subs	r3, r3, r2
 8008438:	2b00      	cmp	r3, #0
 800843a:	dd0f      	ble.n	800845c <_svfprintf_r+0x60c>
 800843c:	4a8c      	ldr	r2, [pc, #560]	; (8008670 <_svfprintf_r+0x820>)
 800843e:	6022      	str	r2, [r4, #0]
 8008440:	2b10      	cmp	r3, #16
 8008442:	f300 81d0 	bgt.w	80087e6 <_svfprintf_r+0x996>
 8008446:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008448:	6063      	str	r3, [r4, #4]
 800844a:	4413      	add	r3, r2
 800844c:	9321      	str	r3, [sp, #132]	; 0x84
 800844e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008450:	3301      	adds	r3, #1
 8008452:	2b07      	cmp	r3, #7
 8008454:	9320      	str	r3, [sp, #128]	; 0x80
 8008456:	f300 81df 	bgt.w	8008818 <_svfprintf_r+0x9c8>
 800845a:	3408      	adds	r4, #8
 800845c:	eba6 0609 	sub.w	r6, r6, r9
 8008460:	2e00      	cmp	r6, #0
 8008462:	dd0f      	ble.n	8008484 <_svfprintf_r+0x634>
 8008464:	4b82      	ldr	r3, [pc, #520]	; (8008670 <_svfprintf_r+0x820>)
 8008466:	6023      	str	r3, [r4, #0]
 8008468:	2e10      	cmp	r6, #16
 800846a:	f300 81df 	bgt.w	800882c <_svfprintf_r+0x9dc>
 800846e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008470:	9821      	ldr	r0, [sp, #132]	; 0x84
 8008472:	6066      	str	r6, [r4, #4]
 8008474:	3301      	adds	r3, #1
 8008476:	4406      	add	r6, r0
 8008478:	2b07      	cmp	r3, #7
 800847a:	9621      	str	r6, [sp, #132]	; 0x84
 800847c:	9320      	str	r3, [sp, #128]	; 0x80
 800847e:	f300 81ec 	bgt.w	800885a <_svfprintf_r+0xa0a>
 8008482:	3408      	adds	r4, #8
 8008484:	05eb      	lsls	r3, r5, #23
 8008486:	f100 81f2 	bmi.w	800886e <_svfprintf_r+0xa1e>
 800848a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800848c:	e884 0300 	stmia.w	r4, {r8, r9}
 8008490:	444b      	add	r3, r9
 8008492:	9321      	str	r3, [sp, #132]	; 0x84
 8008494:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008496:	3301      	adds	r3, #1
 8008498:	2b07      	cmp	r3, #7
 800849a:	9320      	str	r3, [sp, #128]	; 0x80
 800849c:	f340 8419 	ble.w	8008cd2 <_svfprintf_r+0xe82>
 80084a0:	aa1f      	add	r2, sp, #124	; 0x7c
 80084a2:	4651      	mov	r1, sl
 80084a4:	4658      	mov	r0, fp
 80084a6:	f002 f811 	bl	800a4cc <__ssprint_r>
 80084aa:	2800      	cmp	r0, #0
 80084ac:	f040 8431 	bne.w	8008d12 <_svfprintf_r+0xec2>
 80084b0:	ac2c      	add	r4, sp, #176	; 0xb0
 80084b2:	076b      	lsls	r3, r5, #29
 80084b4:	f100 8410 	bmi.w	8008cd8 <_svfprintf_r+0xe88>
 80084b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80084be:	428a      	cmp	r2, r1
 80084c0:	bfac      	ite	ge
 80084c2:	189b      	addge	r3, r3, r2
 80084c4:	185b      	addlt	r3, r3, r1
 80084c6:	9309      	str	r3, [sp, #36]	; 0x24
 80084c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80084ca:	b13b      	cbz	r3, 80084dc <_svfprintf_r+0x68c>
 80084cc:	aa1f      	add	r2, sp, #124	; 0x7c
 80084ce:	4651      	mov	r1, sl
 80084d0:	4658      	mov	r0, fp
 80084d2:	f001 fffb 	bl	800a4cc <__ssprint_r>
 80084d6:	2800      	cmp	r0, #0
 80084d8:	f040 841b 	bne.w	8008d12 <_svfprintf_r+0xec2>
 80084dc:	2300      	movs	r3, #0
 80084de:	9320      	str	r3, [sp, #128]	; 0x80
 80084e0:	9f04      	ldr	r7, [sp, #16]
 80084e2:	ac2c      	add	r4, sp, #176	; 0xb0
 80084e4:	e4ee      	b.n	8007ec4 <_svfprintf_r+0x74>
 80084e6:	9b02      	ldr	r3, [sp, #8]
 80084e8:	2b65      	cmp	r3, #101	; 0x65
 80084ea:	f77f af0b 	ble.w	8008304 <_svfprintf_r+0x4b4>
 80084ee:	9b02      	ldr	r3, [sp, #8]
 80084f0:	2b66      	cmp	r3, #102	; 0x66
 80084f2:	d124      	bne.n	800853e <_svfprintf_r+0x6ee>
 80084f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	dd19      	ble.n	800852e <_svfprintf_r+0x6de>
 80084fa:	f1b9 0f00 	cmp.w	r9, #0
 80084fe:	d101      	bne.n	8008504 <_svfprintf_r+0x6b4>
 8008500:	07ea      	lsls	r2, r5, #31
 8008502:	d502      	bpl.n	800850a <_svfprintf_r+0x6ba>
 8008504:	9a08      	ldr	r2, [sp, #32]
 8008506:	4413      	add	r3, r2
 8008508:	444b      	add	r3, r9
 800850a:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800850c:	4699      	mov	r9, r3
 800850e:	e735      	b.n	800837c <_svfprintf_r+0x52c>
 8008510:	460a      	mov	r2, r1
 8008512:	e70c      	b.n	800832e <_svfprintf_r+0x4de>
 8008514:	f812 1b01 	ldrb.w	r1, [r2], #1
 8008518:	f803 1b01 	strb.w	r1, [r3], #1
 800851c:	e71c      	b.n	8008358 <_svfprintf_r+0x508>
 800851e:	2230      	movs	r2, #48	; 0x30
 8008520:	4413      	add	r3, r2
 8008522:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 8008526:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800852a:	a91c      	add	r1, sp, #112	; 0x70
 800852c:	e718      	b.n	8008360 <_svfprintf_r+0x510>
 800852e:	f1b9 0f00 	cmp.w	r9, #0
 8008532:	d101      	bne.n	8008538 <_svfprintf_r+0x6e8>
 8008534:	07eb      	lsls	r3, r5, #31
 8008536:	d515      	bpl.n	8008564 <_svfprintf_r+0x714>
 8008538:	9b08      	ldr	r3, [sp, #32]
 800853a:	3301      	adds	r3, #1
 800853c:	e7e4      	b.n	8008508 <_svfprintf_r+0x6b8>
 800853e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008540:	9b03      	ldr	r3, [sp, #12]
 8008542:	429a      	cmp	r2, r3
 8008544:	db06      	blt.n	8008554 <_svfprintf_r+0x704>
 8008546:	07ef      	lsls	r7, r5, #31
 8008548:	d50e      	bpl.n	8008568 <_svfprintf_r+0x718>
 800854a:	9b08      	ldr	r3, [sp, #32]
 800854c:	4413      	add	r3, r2
 800854e:	2267      	movs	r2, #103	; 0x67
 8008550:	9202      	str	r2, [sp, #8]
 8008552:	e7da      	b.n	800850a <_svfprintf_r+0x6ba>
 8008554:	9b03      	ldr	r3, [sp, #12]
 8008556:	9908      	ldr	r1, [sp, #32]
 8008558:	2a00      	cmp	r2, #0
 800855a:	440b      	add	r3, r1
 800855c:	dcf7      	bgt.n	800854e <_svfprintf_r+0x6fe>
 800855e:	f1c2 0201 	rsb	r2, r2, #1
 8008562:	e7f3      	b.n	800854c <_svfprintf_r+0x6fc>
 8008564:	2301      	movs	r3, #1
 8008566:	e7d0      	b.n	800850a <_svfprintf_r+0x6ba>
 8008568:	4613      	mov	r3, r2
 800856a:	e7f0      	b.n	800854e <_svfprintf_r+0x6fe>
 800856c:	b10b      	cbz	r3, 8008572 <_svfprintf_r+0x722>
 800856e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8008572:	f015 0f20 	tst.w	r5, #32
 8008576:	f107 0304 	add.w	r3, r7, #4
 800857a:	d008      	beq.n	800858e <_svfprintf_r+0x73e>
 800857c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800857e:	683a      	ldr	r2, [r7, #0]
 8008580:	17ce      	asrs	r6, r1, #31
 8008582:	4608      	mov	r0, r1
 8008584:	4631      	mov	r1, r6
 8008586:	e9c2 0100 	strd	r0, r1, [r2]
 800858a:	461f      	mov	r7, r3
 800858c:	e49a      	b.n	8007ec4 <_svfprintf_r+0x74>
 800858e:	06ee      	lsls	r6, r5, #27
 8008590:	d503      	bpl.n	800859a <_svfprintf_r+0x74a>
 8008592:	683a      	ldr	r2, [r7, #0]
 8008594:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008596:	6011      	str	r1, [r2, #0]
 8008598:	e7f7      	b.n	800858a <_svfprintf_r+0x73a>
 800859a:	0668      	lsls	r0, r5, #25
 800859c:	d5f9      	bpl.n	8008592 <_svfprintf_r+0x742>
 800859e:	683a      	ldr	r2, [r7, #0]
 80085a0:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 80085a4:	8011      	strh	r1, [r2, #0]
 80085a6:	e7f0      	b.n	800858a <_svfprintf_r+0x73a>
 80085a8:	f045 0510 	orr.w	r5, r5, #16
 80085ac:	f015 0320 	ands.w	r3, r5, #32
 80085b0:	d022      	beq.n	80085f8 <_svfprintf_r+0x7a8>
 80085b2:	3707      	adds	r7, #7
 80085b4:	f027 0707 	bic.w	r7, r7, #7
 80085b8:	f107 0308 	add.w	r3, r7, #8
 80085bc:	e9d7 6700 	ldrd	r6, r7, [r7]
 80085c0:	9304      	str	r3, [sp, #16]
 80085c2:	2300      	movs	r3, #0
 80085c4:	2200      	movs	r2, #0
 80085c6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80085ca:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 80085ce:	f000 83db 	beq.w	8008d88 <_svfprintf_r+0xf38>
 80085d2:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 80085d6:	920b      	str	r2, [sp, #44]	; 0x2c
 80085d8:	ea56 0207 	orrs.w	r2, r6, r7
 80085dc:	f040 83d9 	bne.w	8008d92 <_svfprintf_r+0xf42>
 80085e0:	f1b9 0f00 	cmp.w	r9, #0
 80085e4:	f000 80aa 	beq.w	800873c <_svfprintf_r+0x8ec>
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d076      	beq.n	80086da <_svfprintf_r+0x88a>
 80085ec:	2b02      	cmp	r3, #2
 80085ee:	f000 8091 	beq.w	8008714 <_svfprintf_r+0x8c4>
 80085f2:	2600      	movs	r6, #0
 80085f4:	2700      	movs	r7, #0
 80085f6:	e3d2      	b.n	8008d9e <_svfprintf_r+0xf4e>
 80085f8:	1d3a      	adds	r2, r7, #4
 80085fa:	f015 0110 	ands.w	r1, r5, #16
 80085fe:	9204      	str	r2, [sp, #16]
 8008600:	d002      	beq.n	8008608 <_svfprintf_r+0x7b8>
 8008602:	683e      	ldr	r6, [r7, #0]
 8008604:	2700      	movs	r7, #0
 8008606:	e7dd      	b.n	80085c4 <_svfprintf_r+0x774>
 8008608:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 800860c:	d0f9      	beq.n	8008602 <_svfprintf_r+0x7b2>
 800860e:	883e      	ldrh	r6, [r7, #0]
 8008610:	2700      	movs	r7, #0
 8008612:	e7d6      	b.n	80085c2 <_svfprintf_r+0x772>
 8008614:	1d3b      	adds	r3, r7, #4
 8008616:	9304      	str	r3, [sp, #16]
 8008618:	2330      	movs	r3, #48	; 0x30
 800861a:	2278      	movs	r2, #120	; 0x78
 800861c:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8008620:	4b14      	ldr	r3, [pc, #80]	; (8008674 <_svfprintf_r+0x824>)
 8008622:	683e      	ldr	r6, [r7, #0]
 8008624:	9311      	str	r3, [sp, #68]	; 0x44
 8008626:	2700      	movs	r7, #0
 8008628:	f045 0502 	orr.w	r5, r5, #2
 800862c:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8008630:	2302      	movs	r3, #2
 8008632:	9202      	str	r2, [sp, #8]
 8008634:	e7c6      	b.n	80085c4 <_svfprintf_r+0x774>
 8008636:	1d3b      	adds	r3, r7, #4
 8008638:	2600      	movs	r6, #0
 800863a:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 800863e:	9304      	str	r3, [sp, #16]
 8008640:	f8d7 8000 	ldr.w	r8, [r7]
 8008644:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8008648:	d00a      	beq.n	8008660 <_svfprintf_r+0x810>
 800864a:	464a      	mov	r2, r9
 800864c:	4631      	mov	r1, r6
 800864e:	4640      	mov	r0, r8
 8008650:	f7f7 fdbe 	bl	80001d0 <memchr>
 8008654:	2800      	cmp	r0, #0
 8008656:	f000 808d 	beq.w	8008774 <_svfprintf_r+0x924>
 800865a:	eba0 0908 	sub.w	r9, r0, r8
 800865e:	e5cb      	b.n	80081f8 <_svfprintf_r+0x3a8>
 8008660:	4640      	mov	r0, r8
 8008662:	f7f7 fe05 	bl	8000270 <strlen>
 8008666:	4681      	mov	r9, r0
 8008668:	e5c6      	b.n	80081f8 <_svfprintf_r+0x3a8>
 800866a:	bf00      	nop
 800866c:	0800c7c0 	.word	0x0800c7c0
 8008670:	0800c7d0 	.word	0x0800c7d0
 8008674:	0800c7ad 	.word	0x0800c7ad
 8008678:	f045 0510 	orr.w	r5, r5, #16
 800867c:	06a9      	lsls	r1, r5, #26
 800867e:	d509      	bpl.n	8008694 <_svfprintf_r+0x844>
 8008680:	3707      	adds	r7, #7
 8008682:	f027 0707 	bic.w	r7, r7, #7
 8008686:	f107 0308 	add.w	r3, r7, #8
 800868a:	e9d7 6700 	ldrd	r6, r7, [r7]
 800868e:	9304      	str	r3, [sp, #16]
 8008690:	2301      	movs	r3, #1
 8008692:	e797      	b.n	80085c4 <_svfprintf_r+0x774>
 8008694:	1d3b      	adds	r3, r7, #4
 8008696:	f015 0f10 	tst.w	r5, #16
 800869a:	9304      	str	r3, [sp, #16]
 800869c:	d001      	beq.n	80086a2 <_svfprintf_r+0x852>
 800869e:	683e      	ldr	r6, [r7, #0]
 80086a0:	e002      	b.n	80086a8 <_svfprintf_r+0x858>
 80086a2:	066a      	lsls	r2, r5, #25
 80086a4:	d5fb      	bpl.n	800869e <_svfprintf_r+0x84e>
 80086a6:	883e      	ldrh	r6, [r7, #0]
 80086a8:	2700      	movs	r7, #0
 80086aa:	e7f1      	b.n	8008690 <_svfprintf_r+0x840>
 80086ac:	b10b      	cbz	r3, 80086b2 <_svfprintf_r+0x862>
 80086ae:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80086b2:	4ba3      	ldr	r3, [pc, #652]	; (8008940 <_svfprintf_r+0xaf0>)
 80086b4:	e4c2      	b.n	800803c <_svfprintf_r+0x1ec>
 80086b6:	1d3b      	adds	r3, r7, #4
 80086b8:	f015 0f10 	tst.w	r5, #16
 80086bc:	9304      	str	r3, [sp, #16]
 80086be:	d001      	beq.n	80086c4 <_svfprintf_r+0x874>
 80086c0:	683e      	ldr	r6, [r7, #0]
 80086c2:	e002      	b.n	80086ca <_svfprintf_r+0x87a>
 80086c4:	066e      	lsls	r6, r5, #25
 80086c6:	d5fb      	bpl.n	80086c0 <_svfprintf_r+0x870>
 80086c8:	883e      	ldrh	r6, [r7, #0]
 80086ca:	2700      	movs	r7, #0
 80086cc:	e4c2      	b.n	8008054 <_svfprintf_r+0x204>
 80086ce:	4643      	mov	r3, r8
 80086d0:	e366      	b.n	8008da0 <_svfprintf_r+0xf50>
 80086d2:	2f00      	cmp	r7, #0
 80086d4:	bf08      	it	eq
 80086d6:	2e0a      	cmpeq	r6, #10
 80086d8:	d205      	bcs.n	80086e6 <_svfprintf_r+0x896>
 80086da:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 80086de:	3630      	adds	r6, #48	; 0x30
 80086e0:	f808 6d41 	strb.w	r6, [r8, #-65]!
 80086e4:	e377      	b.n	8008dd6 <_svfprintf_r+0xf86>
 80086e6:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 80086ea:	4630      	mov	r0, r6
 80086ec:	4639      	mov	r1, r7
 80086ee:	220a      	movs	r2, #10
 80086f0:	2300      	movs	r3, #0
 80086f2:	f7f8 fa55 	bl	8000ba0 <__aeabi_uldivmod>
 80086f6:	3230      	adds	r2, #48	; 0x30
 80086f8:	f808 2d01 	strb.w	r2, [r8, #-1]!
 80086fc:	2300      	movs	r3, #0
 80086fe:	4630      	mov	r0, r6
 8008700:	4639      	mov	r1, r7
 8008702:	220a      	movs	r2, #10
 8008704:	f7f8 fa4c 	bl	8000ba0 <__aeabi_uldivmod>
 8008708:	4606      	mov	r6, r0
 800870a:	460f      	mov	r7, r1
 800870c:	ea56 0307 	orrs.w	r3, r6, r7
 8008710:	d1eb      	bne.n	80086ea <_svfprintf_r+0x89a>
 8008712:	e360      	b.n	8008dd6 <_svfprintf_r+0xf86>
 8008714:	2600      	movs	r6, #0
 8008716:	2700      	movs	r7, #0
 8008718:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800871c:	f006 030f 	and.w	r3, r6, #15
 8008720:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008722:	5cd3      	ldrb	r3, [r2, r3]
 8008724:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8008728:	0933      	lsrs	r3, r6, #4
 800872a:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 800872e:	093a      	lsrs	r2, r7, #4
 8008730:	461e      	mov	r6, r3
 8008732:	4617      	mov	r7, r2
 8008734:	ea56 0307 	orrs.w	r3, r6, r7
 8008738:	d1f0      	bne.n	800871c <_svfprintf_r+0x8cc>
 800873a:	e34c      	b.n	8008dd6 <_svfprintf_r+0xf86>
 800873c:	b93b      	cbnz	r3, 800874e <_svfprintf_r+0x8fe>
 800873e:	07ea      	lsls	r2, r5, #31
 8008740:	d505      	bpl.n	800874e <_svfprintf_r+0x8fe>
 8008742:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8008746:	2330      	movs	r3, #48	; 0x30
 8008748:	f808 3d41 	strb.w	r3, [r8, #-65]!
 800874c:	e343      	b.n	8008dd6 <_svfprintf_r+0xf86>
 800874e:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8008752:	e340      	b.n	8008dd6 <_svfprintf_r+0xf86>
 8008754:	b10b      	cbz	r3, 800875a <_svfprintf_r+0x90a>
 8008756:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800875a:	9b02      	ldr	r3, [sp, #8]
 800875c:	2b00      	cmp	r3, #0
 800875e:	f000 82f7 	beq.w	8008d50 <_svfprintf_r+0xf00>
 8008762:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8008766:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 800876a:	2600      	movs	r6, #0
 800876c:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8008770:	9704      	str	r7, [sp, #16]
 8008772:	e4e8      	b.n	8008146 <_svfprintf_r+0x2f6>
 8008774:	4606      	mov	r6, r0
 8008776:	e53f      	b.n	80081f8 <_svfprintf_r+0x3a8>
 8008778:	2310      	movs	r3, #16
 800877a:	6063      	str	r3, [r4, #4]
 800877c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800877e:	3310      	adds	r3, #16
 8008780:	9321      	str	r3, [sp, #132]	; 0x84
 8008782:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008784:	3301      	adds	r3, #1
 8008786:	2b07      	cmp	r3, #7
 8008788:	9320      	str	r3, [sp, #128]	; 0x80
 800878a:	dc04      	bgt.n	8008796 <_svfprintf_r+0x946>
 800878c:	3408      	adds	r4, #8
 800878e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008790:	3b10      	subs	r3, #16
 8008792:	930c      	str	r3, [sp, #48]	; 0x30
 8008794:	e615      	b.n	80083c2 <_svfprintf_r+0x572>
 8008796:	aa1f      	add	r2, sp, #124	; 0x7c
 8008798:	4651      	mov	r1, sl
 800879a:	4658      	mov	r0, fp
 800879c:	f001 fe96 	bl	800a4cc <__ssprint_r>
 80087a0:	2800      	cmp	r0, #0
 80087a2:	f040 82b6 	bne.w	8008d12 <_svfprintf_r+0xec2>
 80087a6:	ac2c      	add	r4, sp, #176	; 0xb0
 80087a8:	e7f1      	b.n	800878e <_svfprintf_r+0x93e>
 80087aa:	aa1f      	add	r2, sp, #124	; 0x7c
 80087ac:	4651      	mov	r1, sl
 80087ae:	4658      	mov	r0, fp
 80087b0:	f001 fe8c 	bl	800a4cc <__ssprint_r>
 80087b4:	2800      	cmp	r0, #0
 80087b6:	f040 82ac 	bne.w	8008d12 <_svfprintf_r+0xec2>
 80087ba:	ac2c      	add	r4, sp, #176	; 0xb0
 80087bc:	e614      	b.n	80083e8 <_svfprintf_r+0x598>
 80087be:	aa1f      	add	r2, sp, #124	; 0x7c
 80087c0:	4651      	mov	r1, sl
 80087c2:	4658      	mov	r0, fp
 80087c4:	f001 fe82 	bl	800a4cc <__ssprint_r>
 80087c8:	2800      	cmp	r0, #0
 80087ca:	f040 82a2 	bne.w	8008d12 <_svfprintf_r+0xec2>
 80087ce:	ac2c      	add	r4, sp, #176	; 0xb0
 80087d0:	e61c      	b.n	800840c <_svfprintf_r+0x5bc>
 80087d2:	aa1f      	add	r2, sp, #124	; 0x7c
 80087d4:	4651      	mov	r1, sl
 80087d6:	4658      	mov	r0, fp
 80087d8:	f001 fe78 	bl	800a4cc <__ssprint_r>
 80087dc:	2800      	cmp	r0, #0
 80087de:	f040 8298 	bne.w	8008d12 <_svfprintf_r+0xec2>
 80087e2:	ac2c      	add	r4, sp, #176	; 0xb0
 80087e4:	e622      	b.n	800842c <_svfprintf_r+0x5dc>
 80087e6:	2210      	movs	r2, #16
 80087e8:	6062      	str	r2, [r4, #4]
 80087ea:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80087ec:	3210      	adds	r2, #16
 80087ee:	9221      	str	r2, [sp, #132]	; 0x84
 80087f0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80087f2:	3201      	adds	r2, #1
 80087f4:	2a07      	cmp	r2, #7
 80087f6:	9220      	str	r2, [sp, #128]	; 0x80
 80087f8:	dc02      	bgt.n	8008800 <_svfprintf_r+0x9b0>
 80087fa:	3408      	adds	r4, #8
 80087fc:	3b10      	subs	r3, #16
 80087fe:	e61d      	b.n	800843c <_svfprintf_r+0x5ec>
 8008800:	aa1f      	add	r2, sp, #124	; 0x7c
 8008802:	4651      	mov	r1, sl
 8008804:	4658      	mov	r0, fp
 8008806:	930c      	str	r3, [sp, #48]	; 0x30
 8008808:	f001 fe60 	bl	800a4cc <__ssprint_r>
 800880c:	2800      	cmp	r0, #0
 800880e:	f040 8280 	bne.w	8008d12 <_svfprintf_r+0xec2>
 8008812:	ac2c      	add	r4, sp, #176	; 0xb0
 8008814:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008816:	e7f1      	b.n	80087fc <_svfprintf_r+0x9ac>
 8008818:	aa1f      	add	r2, sp, #124	; 0x7c
 800881a:	4651      	mov	r1, sl
 800881c:	4658      	mov	r0, fp
 800881e:	f001 fe55 	bl	800a4cc <__ssprint_r>
 8008822:	2800      	cmp	r0, #0
 8008824:	f040 8275 	bne.w	8008d12 <_svfprintf_r+0xec2>
 8008828:	ac2c      	add	r4, sp, #176	; 0xb0
 800882a:	e617      	b.n	800845c <_svfprintf_r+0x60c>
 800882c:	2310      	movs	r3, #16
 800882e:	6063      	str	r3, [r4, #4]
 8008830:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008832:	3310      	adds	r3, #16
 8008834:	9321      	str	r3, [sp, #132]	; 0x84
 8008836:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008838:	3301      	adds	r3, #1
 800883a:	2b07      	cmp	r3, #7
 800883c:	9320      	str	r3, [sp, #128]	; 0x80
 800883e:	dc02      	bgt.n	8008846 <_svfprintf_r+0x9f6>
 8008840:	3408      	adds	r4, #8
 8008842:	3e10      	subs	r6, #16
 8008844:	e60e      	b.n	8008464 <_svfprintf_r+0x614>
 8008846:	aa1f      	add	r2, sp, #124	; 0x7c
 8008848:	4651      	mov	r1, sl
 800884a:	4658      	mov	r0, fp
 800884c:	f001 fe3e 	bl	800a4cc <__ssprint_r>
 8008850:	2800      	cmp	r0, #0
 8008852:	f040 825e 	bne.w	8008d12 <_svfprintf_r+0xec2>
 8008856:	ac2c      	add	r4, sp, #176	; 0xb0
 8008858:	e7f3      	b.n	8008842 <_svfprintf_r+0x9f2>
 800885a:	aa1f      	add	r2, sp, #124	; 0x7c
 800885c:	4651      	mov	r1, sl
 800885e:	4658      	mov	r0, fp
 8008860:	f001 fe34 	bl	800a4cc <__ssprint_r>
 8008864:	2800      	cmp	r0, #0
 8008866:	f040 8254 	bne.w	8008d12 <_svfprintf_r+0xec2>
 800886a:	ac2c      	add	r4, sp, #176	; 0xb0
 800886c:	e60a      	b.n	8008484 <_svfprintf_r+0x634>
 800886e:	9b02      	ldr	r3, [sp, #8]
 8008870:	2b65      	cmp	r3, #101	; 0x65
 8008872:	f340 81a9 	ble.w	8008bc8 <_svfprintf_r+0xd78>
 8008876:	2200      	movs	r2, #0
 8008878:	2300      	movs	r3, #0
 800887a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800887e:	f7f8 f91f 	bl	8000ac0 <__aeabi_dcmpeq>
 8008882:	2800      	cmp	r0, #0
 8008884:	d062      	beq.n	800894c <_svfprintf_r+0xafc>
 8008886:	4b2f      	ldr	r3, [pc, #188]	; (8008944 <_svfprintf_r+0xaf4>)
 8008888:	6023      	str	r3, [r4, #0]
 800888a:	2301      	movs	r3, #1
 800888c:	6063      	str	r3, [r4, #4]
 800888e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008890:	3301      	adds	r3, #1
 8008892:	9321      	str	r3, [sp, #132]	; 0x84
 8008894:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008896:	3301      	adds	r3, #1
 8008898:	2b07      	cmp	r3, #7
 800889a:	9320      	str	r3, [sp, #128]	; 0x80
 800889c:	dc25      	bgt.n	80088ea <_svfprintf_r+0xa9a>
 800889e:	3408      	adds	r4, #8
 80088a0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80088a2:	9a03      	ldr	r2, [sp, #12]
 80088a4:	4293      	cmp	r3, r2
 80088a6:	db02      	blt.n	80088ae <_svfprintf_r+0xa5e>
 80088a8:	07ee      	lsls	r6, r5, #31
 80088aa:	f57f ae02 	bpl.w	80084b2 <_svfprintf_r+0x662>
 80088ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088b0:	6023      	str	r3, [r4, #0]
 80088b2:	9b08      	ldr	r3, [sp, #32]
 80088b4:	6063      	str	r3, [r4, #4]
 80088b6:	9a08      	ldr	r2, [sp, #32]
 80088b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80088ba:	4413      	add	r3, r2
 80088bc:	9321      	str	r3, [sp, #132]	; 0x84
 80088be:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80088c0:	3301      	adds	r3, #1
 80088c2:	2b07      	cmp	r3, #7
 80088c4:	9320      	str	r3, [sp, #128]	; 0x80
 80088c6:	dc1a      	bgt.n	80088fe <_svfprintf_r+0xaae>
 80088c8:	3408      	adds	r4, #8
 80088ca:	9b03      	ldr	r3, [sp, #12]
 80088cc:	1e5e      	subs	r6, r3, #1
 80088ce:	2e00      	cmp	r6, #0
 80088d0:	f77f adef 	ble.w	80084b2 <_svfprintf_r+0x662>
 80088d4:	4f1c      	ldr	r7, [pc, #112]	; (8008948 <_svfprintf_r+0xaf8>)
 80088d6:	f04f 0810 	mov.w	r8, #16
 80088da:	2e10      	cmp	r6, #16
 80088dc:	6027      	str	r7, [r4, #0]
 80088de:	dc18      	bgt.n	8008912 <_svfprintf_r+0xac2>
 80088e0:	6066      	str	r6, [r4, #4]
 80088e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80088e4:	441e      	add	r6, r3
 80088e6:	9621      	str	r6, [sp, #132]	; 0x84
 80088e8:	e5d4      	b.n	8008494 <_svfprintf_r+0x644>
 80088ea:	aa1f      	add	r2, sp, #124	; 0x7c
 80088ec:	4651      	mov	r1, sl
 80088ee:	4658      	mov	r0, fp
 80088f0:	f001 fdec 	bl	800a4cc <__ssprint_r>
 80088f4:	2800      	cmp	r0, #0
 80088f6:	f040 820c 	bne.w	8008d12 <_svfprintf_r+0xec2>
 80088fa:	ac2c      	add	r4, sp, #176	; 0xb0
 80088fc:	e7d0      	b.n	80088a0 <_svfprintf_r+0xa50>
 80088fe:	aa1f      	add	r2, sp, #124	; 0x7c
 8008900:	4651      	mov	r1, sl
 8008902:	4658      	mov	r0, fp
 8008904:	f001 fde2 	bl	800a4cc <__ssprint_r>
 8008908:	2800      	cmp	r0, #0
 800890a:	f040 8202 	bne.w	8008d12 <_svfprintf_r+0xec2>
 800890e:	ac2c      	add	r4, sp, #176	; 0xb0
 8008910:	e7db      	b.n	80088ca <_svfprintf_r+0xa7a>
 8008912:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008914:	f8c4 8004 	str.w	r8, [r4, #4]
 8008918:	3310      	adds	r3, #16
 800891a:	9321      	str	r3, [sp, #132]	; 0x84
 800891c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800891e:	3301      	adds	r3, #1
 8008920:	2b07      	cmp	r3, #7
 8008922:	9320      	str	r3, [sp, #128]	; 0x80
 8008924:	dc02      	bgt.n	800892c <_svfprintf_r+0xadc>
 8008926:	3408      	adds	r4, #8
 8008928:	3e10      	subs	r6, #16
 800892a:	e7d6      	b.n	80088da <_svfprintf_r+0xa8a>
 800892c:	aa1f      	add	r2, sp, #124	; 0x7c
 800892e:	4651      	mov	r1, sl
 8008930:	4658      	mov	r0, fp
 8008932:	f001 fdcb 	bl	800a4cc <__ssprint_r>
 8008936:	2800      	cmp	r0, #0
 8008938:	f040 81eb 	bne.w	8008d12 <_svfprintf_r+0xec2>
 800893c:	ac2c      	add	r4, sp, #176	; 0xb0
 800893e:	e7f3      	b.n	8008928 <_svfprintf_r+0xad8>
 8008940:	0800c7ad 	.word	0x0800c7ad
 8008944:	0800c7be 	.word	0x0800c7be
 8008948:	0800c7d0 	.word	0x0800c7d0
 800894c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800894e:	2b00      	cmp	r3, #0
 8008950:	dc7a      	bgt.n	8008a48 <_svfprintf_r+0xbf8>
 8008952:	4b9b      	ldr	r3, [pc, #620]	; (8008bc0 <_svfprintf_r+0xd70>)
 8008954:	6023      	str	r3, [r4, #0]
 8008956:	2301      	movs	r3, #1
 8008958:	6063      	str	r3, [r4, #4]
 800895a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800895c:	3301      	adds	r3, #1
 800895e:	9321      	str	r3, [sp, #132]	; 0x84
 8008960:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008962:	3301      	adds	r3, #1
 8008964:	2b07      	cmp	r3, #7
 8008966:	9320      	str	r3, [sp, #128]	; 0x80
 8008968:	dc44      	bgt.n	80089f4 <_svfprintf_r+0xba4>
 800896a:	3408      	adds	r4, #8
 800896c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800896e:	b923      	cbnz	r3, 800897a <_svfprintf_r+0xb2a>
 8008970:	9b03      	ldr	r3, [sp, #12]
 8008972:	b913      	cbnz	r3, 800897a <_svfprintf_r+0xb2a>
 8008974:	07e8      	lsls	r0, r5, #31
 8008976:	f57f ad9c 	bpl.w	80084b2 <_svfprintf_r+0x662>
 800897a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800897c:	6023      	str	r3, [r4, #0]
 800897e:	9b08      	ldr	r3, [sp, #32]
 8008980:	6063      	str	r3, [r4, #4]
 8008982:	9a08      	ldr	r2, [sp, #32]
 8008984:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008986:	4413      	add	r3, r2
 8008988:	9321      	str	r3, [sp, #132]	; 0x84
 800898a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800898c:	3301      	adds	r3, #1
 800898e:	2b07      	cmp	r3, #7
 8008990:	9320      	str	r3, [sp, #128]	; 0x80
 8008992:	dc39      	bgt.n	8008a08 <_svfprintf_r+0xbb8>
 8008994:	f104 0308 	add.w	r3, r4, #8
 8008998:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800899a:	2e00      	cmp	r6, #0
 800899c:	da19      	bge.n	80089d2 <_svfprintf_r+0xb82>
 800899e:	4f89      	ldr	r7, [pc, #548]	; (8008bc4 <_svfprintf_r+0xd74>)
 80089a0:	4276      	negs	r6, r6
 80089a2:	2410      	movs	r4, #16
 80089a4:	2e10      	cmp	r6, #16
 80089a6:	601f      	str	r7, [r3, #0]
 80089a8:	dc38      	bgt.n	8008a1c <_svfprintf_r+0xbcc>
 80089aa:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80089ac:	605e      	str	r6, [r3, #4]
 80089ae:	4416      	add	r6, r2
 80089b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80089b2:	9621      	str	r6, [sp, #132]	; 0x84
 80089b4:	3201      	adds	r2, #1
 80089b6:	2a07      	cmp	r2, #7
 80089b8:	f103 0308 	add.w	r3, r3, #8
 80089bc:	9220      	str	r2, [sp, #128]	; 0x80
 80089be:	dd08      	ble.n	80089d2 <_svfprintf_r+0xb82>
 80089c0:	aa1f      	add	r2, sp, #124	; 0x7c
 80089c2:	4651      	mov	r1, sl
 80089c4:	4658      	mov	r0, fp
 80089c6:	f001 fd81 	bl	800a4cc <__ssprint_r>
 80089ca:	2800      	cmp	r0, #0
 80089cc:	f040 81a1 	bne.w	8008d12 <_svfprintf_r+0xec2>
 80089d0:	ab2c      	add	r3, sp, #176	; 0xb0
 80089d2:	9a03      	ldr	r2, [sp, #12]
 80089d4:	605a      	str	r2, [r3, #4]
 80089d6:	9903      	ldr	r1, [sp, #12]
 80089d8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80089da:	f8c3 8000 	str.w	r8, [r3]
 80089de:	440a      	add	r2, r1
 80089e0:	9221      	str	r2, [sp, #132]	; 0x84
 80089e2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80089e4:	3201      	adds	r2, #1
 80089e6:	2a07      	cmp	r2, #7
 80089e8:	9220      	str	r2, [sp, #128]	; 0x80
 80089ea:	f73f ad59 	bgt.w	80084a0 <_svfprintf_r+0x650>
 80089ee:	f103 0408 	add.w	r4, r3, #8
 80089f2:	e55e      	b.n	80084b2 <_svfprintf_r+0x662>
 80089f4:	aa1f      	add	r2, sp, #124	; 0x7c
 80089f6:	4651      	mov	r1, sl
 80089f8:	4658      	mov	r0, fp
 80089fa:	f001 fd67 	bl	800a4cc <__ssprint_r>
 80089fe:	2800      	cmp	r0, #0
 8008a00:	f040 8187 	bne.w	8008d12 <_svfprintf_r+0xec2>
 8008a04:	ac2c      	add	r4, sp, #176	; 0xb0
 8008a06:	e7b1      	b.n	800896c <_svfprintf_r+0xb1c>
 8008a08:	aa1f      	add	r2, sp, #124	; 0x7c
 8008a0a:	4651      	mov	r1, sl
 8008a0c:	4658      	mov	r0, fp
 8008a0e:	f001 fd5d 	bl	800a4cc <__ssprint_r>
 8008a12:	2800      	cmp	r0, #0
 8008a14:	f040 817d 	bne.w	8008d12 <_svfprintf_r+0xec2>
 8008a18:	ab2c      	add	r3, sp, #176	; 0xb0
 8008a1a:	e7bd      	b.n	8008998 <_svfprintf_r+0xb48>
 8008a1c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008a1e:	605c      	str	r4, [r3, #4]
 8008a20:	3210      	adds	r2, #16
 8008a22:	9221      	str	r2, [sp, #132]	; 0x84
 8008a24:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008a26:	3201      	adds	r2, #1
 8008a28:	2a07      	cmp	r2, #7
 8008a2a:	9220      	str	r2, [sp, #128]	; 0x80
 8008a2c:	dc02      	bgt.n	8008a34 <_svfprintf_r+0xbe4>
 8008a2e:	3308      	adds	r3, #8
 8008a30:	3e10      	subs	r6, #16
 8008a32:	e7b7      	b.n	80089a4 <_svfprintf_r+0xb54>
 8008a34:	aa1f      	add	r2, sp, #124	; 0x7c
 8008a36:	4651      	mov	r1, sl
 8008a38:	4658      	mov	r0, fp
 8008a3a:	f001 fd47 	bl	800a4cc <__ssprint_r>
 8008a3e:	2800      	cmp	r0, #0
 8008a40:	f040 8167 	bne.w	8008d12 <_svfprintf_r+0xec2>
 8008a44:	ab2c      	add	r3, sp, #176	; 0xb0
 8008a46:	e7f3      	b.n	8008a30 <_svfprintf_r+0xbe0>
 8008a48:	9b03      	ldr	r3, [sp, #12]
 8008a4a:	42bb      	cmp	r3, r7
 8008a4c:	bfa8      	it	ge
 8008a4e:	463b      	movge	r3, r7
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	461e      	mov	r6, r3
 8008a54:	dd0b      	ble.n	8008a6e <_svfprintf_r+0xc1e>
 8008a56:	6063      	str	r3, [r4, #4]
 8008a58:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a5a:	f8c4 8000 	str.w	r8, [r4]
 8008a5e:	4433      	add	r3, r6
 8008a60:	9321      	str	r3, [sp, #132]	; 0x84
 8008a62:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008a64:	3301      	adds	r3, #1
 8008a66:	2b07      	cmp	r3, #7
 8008a68:	9320      	str	r3, [sp, #128]	; 0x80
 8008a6a:	dc5f      	bgt.n	8008b2c <_svfprintf_r+0xcdc>
 8008a6c:	3408      	adds	r4, #8
 8008a6e:	2e00      	cmp	r6, #0
 8008a70:	bfac      	ite	ge
 8008a72:	1bbe      	subge	r6, r7, r6
 8008a74:	463e      	movlt	r6, r7
 8008a76:	2e00      	cmp	r6, #0
 8008a78:	dd0f      	ble.n	8008a9a <_svfprintf_r+0xc4a>
 8008a7a:	f8df 9148 	ldr.w	r9, [pc, #328]	; 8008bc4 <_svfprintf_r+0xd74>
 8008a7e:	f8c4 9000 	str.w	r9, [r4]
 8008a82:	2e10      	cmp	r6, #16
 8008a84:	dc5c      	bgt.n	8008b40 <_svfprintf_r+0xcf0>
 8008a86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a88:	6066      	str	r6, [r4, #4]
 8008a8a:	441e      	add	r6, r3
 8008a8c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008a8e:	9621      	str	r6, [sp, #132]	; 0x84
 8008a90:	3301      	adds	r3, #1
 8008a92:	2b07      	cmp	r3, #7
 8008a94:	9320      	str	r3, [sp, #128]	; 0x80
 8008a96:	dc6a      	bgt.n	8008b6e <_svfprintf_r+0xd1e>
 8008a98:	3408      	adds	r4, #8
 8008a9a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008a9c:	9a03      	ldr	r2, [sp, #12]
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	db01      	blt.n	8008aa6 <_svfprintf_r+0xc56>
 8008aa2:	07e9      	lsls	r1, r5, #31
 8008aa4:	d50d      	bpl.n	8008ac2 <_svfprintf_r+0xc72>
 8008aa6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008aa8:	6023      	str	r3, [r4, #0]
 8008aaa:	9b08      	ldr	r3, [sp, #32]
 8008aac:	6063      	str	r3, [r4, #4]
 8008aae:	9a08      	ldr	r2, [sp, #32]
 8008ab0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ab2:	4413      	add	r3, r2
 8008ab4:	9321      	str	r3, [sp, #132]	; 0x84
 8008ab6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008ab8:	3301      	adds	r3, #1
 8008aba:	2b07      	cmp	r3, #7
 8008abc:	9320      	str	r3, [sp, #128]	; 0x80
 8008abe:	dc60      	bgt.n	8008b82 <_svfprintf_r+0xd32>
 8008ac0:	3408      	adds	r4, #8
 8008ac2:	9b03      	ldr	r3, [sp, #12]
 8008ac4:	9a03      	ldr	r2, [sp, #12]
 8008ac6:	1bde      	subs	r6, r3, r7
 8008ac8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008aca:	1ad3      	subs	r3, r2, r3
 8008acc:	429e      	cmp	r6, r3
 8008ace:	bfa8      	it	ge
 8008ad0:	461e      	movge	r6, r3
 8008ad2:	2e00      	cmp	r6, #0
 8008ad4:	dd0b      	ble.n	8008aee <_svfprintf_r+0xc9e>
 8008ad6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ad8:	6066      	str	r6, [r4, #4]
 8008ada:	4433      	add	r3, r6
 8008adc:	9321      	str	r3, [sp, #132]	; 0x84
 8008ade:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	4447      	add	r7, r8
 8008ae4:	2b07      	cmp	r3, #7
 8008ae6:	6027      	str	r7, [r4, #0]
 8008ae8:	9320      	str	r3, [sp, #128]	; 0x80
 8008aea:	dc54      	bgt.n	8008b96 <_svfprintf_r+0xd46>
 8008aec:	3408      	adds	r4, #8
 8008aee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008af0:	9a03      	ldr	r2, [sp, #12]
 8008af2:	2e00      	cmp	r6, #0
 8008af4:	eba2 0303 	sub.w	r3, r2, r3
 8008af8:	bfac      	ite	ge
 8008afa:	1b9e      	subge	r6, r3, r6
 8008afc:	461e      	movlt	r6, r3
 8008afe:	2e00      	cmp	r6, #0
 8008b00:	f77f acd7 	ble.w	80084b2 <_svfprintf_r+0x662>
 8008b04:	4f2f      	ldr	r7, [pc, #188]	; (8008bc4 <_svfprintf_r+0xd74>)
 8008b06:	f04f 0810 	mov.w	r8, #16
 8008b0a:	2e10      	cmp	r6, #16
 8008b0c:	6027      	str	r7, [r4, #0]
 8008b0e:	f77f aee7 	ble.w	80088e0 <_svfprintf_r+0xa90>
 8008b12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b14:	f8c4 8004 	str.w	r8, [r4, #4]
 8008b18:	3310      	adds	r3, #16
 8008b1a:	9321      	str	r3, [sp, #132]	; 0x84
 8008b1c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008b1e:	3301      	adds	r3, #1
 8008b20:	2b07      	cmp	r3, #7
 8008b22:	9320      	str	r3, [sp, #128]	; 0x80
 8008b24:	dc41      	bgt.n	8008baa <_svfprintf_r+0xd5a>
 8008b26:	3408      	adds	r4, #8
 8008b28:	3e10      	subs	r6, #16
 8008b2a:	e7ee      	b.n	8008b0a <_svfprintf_r+0xcba>
 8008b2c:	aa1f      	add	r2, sp, #124	; 0x7c
 8008b2e:	4651      	mov	r1, sl
 8008b30:	4658      	mov	r0, fp
 8008b32:	f001 fccb 	bl	800a4cc <__ssprint_r>
 8008b36:	2800      	cmp	r0, #0
 8008b38:	f040 80eb 	bne.w	8008d12 <_svfprintf_r+0xec2>
 8008b3c:	ac2c      	add	r4, sp, #176	; 0xb0
 8008b3e:	e796      	b.n	8008a6e <_svfprintf_r+0xc1e>
 8008b40:	2310      	movs	r3, #16
 8008b42:	6063      	str	r3, [r4, #4]
 8008b44:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b46:	3310      	adds	r3, #16
 8008b48:	9321      	str	r3, [sp, #132]	; 0x84
 8008b4a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008b4c:	3301      	adds	r3, #1
 8008b4e:	2b07      	cmp	r3, #7
 8008b50:	9320      	str	r3, [sp, #128]	; 0x80
 8008b52:	dc02      	bgt.n	8008b5a <_svfprintf_r+0xd0a>
 8008b54:	3408      	adds	r4, #8
 8008b56:	3e10      	subs	r6, #16
 8008b58:	e791      	b.n	8008a7e <_svfprintf_r+0xc2e>
 8008b5a:	aa1f      	add	r2, sp, #124	; 0x7c
 8008b5c:	4651      	mov	r1, sl
 8008b5e:	4658      	mov	r0, fp
 8008b60:	f001 fcb4 	bl	800a4cc <__ssprint_r>
 8008b64:	2800      	cmp	r0, #0
 8008b66:	f040 80d4 	bne.w	8008d12 <_svfprintf_r+0xec2>
 8008b6a:	ac2c      	add	r4, sp, #176	; 0xb0
 8008b6c:	e7f3      	b.n	8008b56 <_svfprintf_r+0xd06>
 8008b6e:	aa1f      	add	r2, sp, #124	; 0x7c
 8008b70:	4651      	mov	r1, sl
 8008b72:	4658      	mov	r0, fp
 8008b74:	f001 fcaa 	bl	800a4cc <__ssprint_r>
 8008b78:	2800      	cmp	r0, #0
 8008b7a:	f040 80ca 	bne.w	8008d12 <_svfprintf_r+0xec2>
 8008b7e:	ac2c      	add	r4, sp, #176	; 0xb0
 8008b80:	e78b      	b.n	8008a9a <_svfprintf_r+0xc4a>
 8008b82:	aa1f      	add	r2, sp, #124	; 0x7c
 8008b84:	4651      	mov	r1, sl
 8008b86:	4658      	mov	r0, fp
 8008b88:	f001 fca0 	bl	800a4cc <__ssprint_r>
 8008b8c:	2800      	cmp	r0, #0
 8008b8e:	f040 80c0 	bne.w	8008d12 <_svfprintf_r+0xec2>
 8008b92:	ac2c      	add	r4, sp, #176	; 0xb0
 8008b94:	e795      	b.n	8008ac2 <_svfprintf_r+0xc72>
 8008b96:	aa1f      	add	r2, sp, #124	; 0x7c
 8008b98:	4651      	mov	r1, sl
 8008b9a:	4658      	mov	r0, fp
 8008b9c:	f001 fc96 	bl	800a4cc <__ssprint_r>
 8008ba0:	2800      	cmp	r0, #0
 8008ba2:	f040 80b6 	bne.w	8008d12 <_svfprintf_r+0xec2>
 8008ba6:	ac2c      	add	r4, sp, #176	; 0xb0
 8008ba8:	e7a1      	b.n	8008aee <_svfprintf_r+0xc9e>
 8008baa:	aa1f      	add	r2, sp, #124	; 0x7c
 8008bac:	4651      	mov	r1, sl
 8008bae:	4658      	mov	r0, fp
 8008bb0:	f001 fc8c 	bl	800a4cc <__ssprint_r>
 8008bb4:	2800      	cmp	r0, #0
 8008bb6:	f040 80ac 	bne.w	8008d12 <_svfprintf_r+0xec2>
 8008bba:	ac2c      	add	r4, sp, #176	; 0xb0
 8008bbc:	e7b4      	b.n	8008b28 <_svfprintf_r+0xcd8>
 8008bbe:	bf00      	nop
 8008bc0:	0800c7be 	.word	0x0800c7be
 8008bc4:	0800c7d0 	.word	0x0800c7d0
 8008bc8:	9b03      	ldr	r3, [sp, #12]
 8008bca:	2b01      	cmp	r3, #1
 8008bcc:	dc01      	bgt.n	8008bd2 <_svfprintf_r+0xd82>
 8008bce:	07ea      	lsls	r2, r5, #31
 8008bd0:	d576      	bpl.n	8008cc0 <_svfprintf_r+0xe70>
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	6063      	str	r3, [r4, #4]
 8008bd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008bd8:	f8c4 8000 	str.w	r8, [r4]
 8008bdc:	3301      	adds	r3, #1
 8008bde:	9321      	str	r3, [sp, #132]	; 0x84
 8008be0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008be2:	3301      	adds	r3, #1
 8008be4:	2b07      	cmp	r3, #7
 8008be6:	9320      	str	r3, [sp, #128]	; 0x80
 8008be8:	dc36      	bgt.n	8008c58 <_svfprintf_r+0xe08>
 8008bea:	3408      	adds	r4, #8
 8008bec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008bee:	6023      	str	r3, [r4, #0]
 8008bf0:	9b08      	ldr	r3, [sp, #32]
 8008bf2:	6063      	str	r3, [r4, #4]
 8008bf4:	9a08      	ldr	r2, [sp, #32]
 8008bf6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008bf8:	4413      	add	r3, r2
 8008bfa:	9321      	str	r3, [sp, #132]	; 0x84
 8008bfc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008bfe:	3301      	adds	r3, #1
 8008c00:	2b07      	cmp	r3, #7
 8008c02:	9320      	str	r3, [sp, #128]	; 0x80
 8008c04:	dc31      	bgt.n	8008c6a <_svfprintf_r+0xe1a>
 8008c06:	3408      	adds	r4, #8
 8008c08:	2300      	movs	r3, #0
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c10:	f7f7 ff56 	bl	8000ac0 <__aeabi_dcmpeq>
 8008c14:	9b03      	ldr	r3, [sp, #12]
 8008c16:	1e5e      	subs	r6, r3, #1
 8008c18:	2800      	cmp	r0, #0
 8008c1a:	d12f      	bne.n	8008c7c <_svfprintf_r+0xe2c>
 8008c1c:	f108 0301 	add.w	r3, r8, #1
 8008c20:	e884 0048 	stmia.w	r4, {r3, r6}
 8008c24:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c26:	9a03      	ldr	r2, [sp, #12]
 8008c28:	3b01      	subs	r3, #1
 8008c2a:	4413      	add	r3, r2
 8008c2c:	9321      	str	r3, [sp, #132]	; 0x84
 8008c2e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008c30:	3301      	adds	r3, #1
 8008c32:	2b07      	cmp	r3, #7
 8008c34:	9320      	str	r3, [sp, #128]	; 0x80
 8008c36:	dd4a      	ble.n	8008cce <_svfprintf_r+0xe7e>
 8008c38:	aa1f      	add	r2, sp, #124	; 0x7c
 8008c3a:	4651      	mov	r1, sl
 8008c3c:	4658      	mov	r0, fp
 8008c3e:	f001 fc45 	bl	800a4cc <__ssprint_r>
 8008c42:	2800      	cmp	r0, #0
 8008c44:	d165      	bne.n	8008d12 <_svfprintf_r+0xec2>
 8008c46:	ac2c      	add	r4, sp, #176	; 0xb0
 8008c48:	ab1b      	add	r3, sp, #108	; 0x6c
 8008c4a:	6023      	str	r3, [r4, #0]
 8008c4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008c4e:	6063      	str	r3, [r4, #4]
 8008c50:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008c52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c54:	4413      	add	r3, r2
 8008c56:	e41c      	b.n	8008492 <_svfprintf_r+0x642>
 8008c58:	aa1f      	add	r2, sp, #124	; 0x7c
 8008c5a:	4651      	mov	r1, sl
 8008c5c:	4658      	mov	r0, fp
 8008c5e:	f001 fc35 	bl	800a4cc <__ssprint_r>
 8008c62:	2800      	cmp	r0, #0
 8008c64:	d155      	bne.n	8008d12 <_svfprintf_r+0xec2>
 8008c66:	ac2c      	add	r4, sp, #176	; 0xb0
 8008c68:	e7c0      	b.n	8008bec <_svfprintf_r+0xd9c>
 8008c6a:	aa1f      	add	r2, sp, #124	; 0x7c
 8008c6c:	4651      	mov	r1, sl
 8008c6e:	4658      	mov	r0, fp
 8008c70:	f001 fc2c 	bl	800a4cc <__ssprint_r>
 8008c74:	2800      	cmp	r0, #0
 8008c76:	d14c      	bne.n	8008d12 <_svfprintf_r+0xec2>
 8008c78:	ac2c      	add	r4, sp, #176	; 0xb0
 8008c7a:	e7c5      	b.n	8008c08 <_svfprintf_r+0xdb8>
 8008c7c:	2e00      	cmp	r6, #0
 8008c7e:	dde3      	ble.n	8008c48 <_svfprintf_r+0xdf8>
 8008c80:	4f59      	ldr	r7, [pc, #356]	; (8008de8 <_svfprintf_r+0xf98>)
 8008c82:	f04f 0810 	mov.w	r8, #16
 8008c86:	2e10      	cmp	r6, #16
 8008c88:	6027      	str	r7, [r4, #0]
 8008c8a:	dc04      	bgt.n	8008c96 <_svfprintf_r+0xe46>
 8008c8c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c8e:	6066      	str	r6, [r4, #4]
 8008c90:	441e      	add	r6, r3
 8008c92:	9621      	str	r6, [sp, #132]	; 0x84
 8008c94:	e7cb      	b.n	8008c2e <_svfprintf_r+0xdde>
 8008c96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c98:	f8c4 8004 	str.w	r8, [r4, #4]
 8008c9c:	3310      	adds	r3, #16
 8008c9e:	9321      	str	r3, [sp, #132]	; 0x84
 8008ca0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	2b07      	cmp	r3, #7
 8008ca6:	9320      	str	r3, [sp, #128]	; 0x80
 8008ca8:	dc02      	bgt.n	8008cb0 <_svfprintf_r+0xe60>
 8008caa:	3408      	adds	r4, #8
 8008cac:	3e10      	subs	r6, #16
 8008cae:	e7ea      	b.n	8008c86 <_svfprintf_r+0xe36>
 8008cb0:	aa1f      	add	r2, sp, #124	; 0x7c
 8008cb2:	4651      	mov	r1, sl
 8008cb4:	4658      	mov	r0, fp
 8008cb6:	f001 fc09 	bl	800a4cc <__ssprint_r>
 8008cba:	bb50      	cbnz	r0, 8008d12 <_svfprintf_r+0xec2>
 8008cbc:	ac2c      	add	r4, sp, #176	; 0xb0
 8008cbe:	e7f5      	b.n	8008cac <_svfprintf_r+0xe5c>
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	6063      	str	r3, [r4, #4]
 8008cc4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008cc6:	f8c4 8000 	str.w	r8, [r4]
 8008cca:	3301      	adds	r3, #1
 8008ccc:	e7ae      	b.n	8008c2c <_svfprintf_r+0xddc>
 8008cce:	3408      	adds	r4, #8
 8008cd0:	e7ba      	b.n	8008c48 <_svfprintf_r+0xdf8>
 8008cd2:	3408      	adds	r4, #8
 8008cd4:	f7ff bbed 	b.w	80084b2 <_svfprintf_r+0x662>
 8008cd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cda:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008cdc:	1a9d      	subs	r5, r3, r2
 8008cde:	2d00      	cmp	r5, #0
 8008ce0:	f77f abea 	ble.w	80084b8 <_svfprintf_r+0x668>
 8008ce4:	2610      	movs	r6, #16
 8008ce6:	4b41      	ldr	r3, [pc, #260]	; (8008dec <_svfprintf_r+0xf9c>)
 8008ce8:	6023      	str	r3, [r4, #0]
 8008cea:	2d10      	cmp	r5, #16
 8008cec:	dc1b      	bgt.n	8008d26 <_svfprintf_r+0xed6>
 8008cee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008cf0:	6065      	str	r5, [r4, #4]
 8008cf2:	441d      	add	r5, r3
 8008cf4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008cf6:	9521      	str	r5, [sp, #132]	; 0x84
 8008cf8:	3301      	adds	r3, #1
 8008cfa:	2b07      	cmp	r3, #7
 8008cfc:	9320      	str	r3, [sp, #128]	; 0x80
 8008cfe:	f77f abdb 	ble.w	80084b8 <_svfprintf_r+0x668>
 8008d02:	aa1f      	add	r2, sp, #124	; 0x7c
 8008d04:	4651      	mov	r1, sl
 8008d06:	4658      	mov	r0, fp
 8008d08:	f001 fbe0 	bl	800a4cc <__ssprint_r>
 8008d0c:	2800      	cmp	r0, #0
 8008d0e:	f43f abd3 	beq.w	80084b8 <_svfprintf_r+0x668>
 8008d12:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8008d16:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008d1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d1c:	bf18      	it	ne
 8008d1e:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8008d22:	f7ff b8b9 	b.w	8007e98 <_svfprintf_r+0x48>
 8008d26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d28:	6066      	str	r6, [r4, #4]
 8008d2a:	3310      	adds	r3, #16
 8008d2c:	9321      	str	r3, [sp, #132]	; 0x84
 8008d2e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008d30:	3301      	adds	r3, #1
 8008d32:	2b07      	cmp	r3, #7
 8008d34:	9320      	str	r3, [sp, #128]	; 0x80
 8008d36:	dc02      	bgt.n	8008d3e <_svfprintf_r+0xeee>
 8008d38:	3408      	adds	r4, #8
 8008d3a:	3d10      	subs	r5, #16
 8008d3c:	e7d3      	b.n	8008ce6 <_svfprintf_r+0xe96>
 8008d3e:	aa1f      	add	r2, sp, #124	; 0x7c
 8008d40:	4651      	mov	r1, sl
 8008d42:	4658      	mov	r0, fp
 8008d44:	f001 fbc2 	bl	800a4cc <__ssprint_r>
 8008d48:	2800      	cmp	r0, #0
 8008d4a:	d1e2      	bne.n	8008d12 <_svfprintf_r+0xec2>
 8008d4c:	ac2c      	add	r4, sp, #176	; 0xb0
 8008d4e:	e7f4      	b.n	8008d3a <_svfprintf_r+0xeea>
 8008d50:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d0dd      	beq.n	8008d12 <_svfprintf_r+0xec2>
 8008d56:	aa1f      	add	r2, sp, #124	; 0x7c
 8008d58:	4651      	mov	r1, sl
 8008d5a:	4658      	mov	r0, fp
 8008d5c:	f001 fbb6 	bl	800a4cc <__ssprint_r>
 8008d60:	e7d7      	b.n	8008d12 <_svfprintf_r+0xec2>
 8008d62:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008d66:	4610      	mov	r0, r2
 8008d68:	4619      	mov	r1, r3
 8008d6a:	f7f7 fedb 	bl	8000b24 <__aeabi_dcmpun>
 8008d6e:	2800      	cmp	r0, #0
 8008d70:	f43f aa44 	beq.w	80081fc <_svfprintf_r+0x3ac>
 8008d74:	4b1e      	ldr	r3, [pc, #120]	; (8008df0 <_svfprintf_r+0xfa0>)
 8008d76:	4a1f      	ldr	r2, [pc, #124]	; (8008df4 <_svfprintf_r+0xfa4>)
 8008d78:	f7ff ba34 	b.w	80081e4 <_svfprintf_r+0x394>
 8008d7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008d7e:	eba3 0308 	sub.w	r3, r3, r8
 8008d82:	9303      	str	r3, [sp, #12]
 8008d84:	f7ff bab5 	b.w	80082f2 <_svfprintf_r+0x4a2>
 8008d88:	ea56 0207 	orrs.w	r2, r6, r7
 8008d8c:	950b      	str	r5, [sp, #44]	; 0x2c
 8008d8e:	f43f ac2b 	beq.w	80085e8 <_svfprintf_r+0x798>
 8008d92:	2b01      	cmp	r3, #1
 8008d94:	f43f ac9d 	beq.w	80086d2 <_svfprintf_r+0x882>
 8008d98:	2b02      	cmp	r3, #2
 8008d9a:	f43f acbd 	beq.w	8008718 <_svfprintf_r+0x8c8>
 8008d9e:	ab2c      	add	r3, sp, #176	; 0xb0
 8008da0:	08f1      	lsrs	r1, r6, #3
 8008da2:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 8008da6:	08f8      	lsrs	r0, r7, #3
 8008da8:	f006 0207 	and.w	r2, r6, #7
 8008dac:	4607      	mov	r7, r0
 8008dae:	460e      	mov	r6, r1
 8008db0:	3230      	adds	r2, #48	; 0x30
 8008db2:	ea56 0107 	orrs.w	r1, r6, r7
 8008db6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8008dba:	f803 2c01 	strb.w	r2, [r3, #-1]
 8008dbe:	f47f ac86 	bne.w	80086ce <_svfprintf_r+0x87e>
 8008dc2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008dc4:	07c9      	lsls	r1, r1, #31
 8008dc6:	d506      	bpl.n	8008dd6 <_svfprintf_r+0xf86>
 8008dc8:	2a30      	cmp	r2, #48	; 0x30
 8008dca:	d004      	beq.n	8008dd6 <_svfprintf_r+0xf86>
 8008dcc:	2230      	movs	r2, #48	; 0x30
 8008dce:	f808 2c01 	strb.w	r2, [r8, #-1]
 8008dd2:	f1a3 0802 	sub.w	r8, r3, #2
 8008dd6:	464e      	mov	r6, r9
 8008dd8:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8008ddc:	eba9 0908 	sub.w	r9, r9, r8
 8008de0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008de2:	2700      	movs	r7, #0
 8008de4:	f7ff bad1 	b.w	800838a <_svfprintf_r+0x53a>
 8008de8:	0800c7d0 	.word	0x0800c7d0
 8008dec:	0800c7c0 	.word	0x0800c7c0
 8008df0:	0800c794 	.word	0x0800c794
 8008df4:	0800c798 	.word	0x0800c798

08008df8 <quorem>:
 8008df8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dfc:	6903      	ldr	r3, [r0, #16]
 8008dfe:	690c      	ldr	r4, [r1, #16]
 8008e00:	429c      	cmp	r4, r3
 8008e02:	4680      	mov	r8, r0
 8008e04:	f300 8082 	bgt.w	8008f0c <quorem+0x114>
 8008e08:	3c01      	subs	r4, #1
 8008e0a:	f101 0714 	add.w	r7, r1, #20
 8008e0e:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8008e12:	f100 0614 	add.w	r6, r0, #20
 8008e16:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008e1a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8008e1e:	eb06 030e 	add.w	r3, r6, lr
 8008e22:	3501      	adds	r5, #1
 8008e24:	eb07 090e 	add.w	r9, r7, lr
 8008e28:	9301      	str	r3, [sp, #4]
 8008e2a:	fbb0 f5f5 	udiv	r5, r0, r5
 8008e2e:	b395      	cbz	r5, 8008e96 <quorem+0x9e>
 8008e30:	f04f 0a00 	mov.w	sl, #0
 8008e34:	4638      	mov	r0, r7
 8008e36:	46b4      	mov	ip, r6
 8008e38:	46d3      	mov	fp, sl
 8008e3a:	f850 2b04 	ldr.w	r2, [r0], #4
 8008e3e:	b293      	uxth	r3, r2
 8008e40:	fb05 a303 	mla	r3, r5, r3, sl
 8008e44:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008e48:	b29b      	uxth	r3, r3
 8008e4a:	ebab 0303 	sub.w	r3, fp, r3
 8008e4e:	0c12      	lsrs	r2, r2, #16
 8008e50:	f8bc b000 	ldrh.w	fp, [ip]
 8008e54:	fb05 a202 	mla	r2, r5, r2, sl
 8008e58:	fa13 f38b 	uxtah	r3, r3, fp
 8008e5c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008e60:	fa1f fb82 	uxth.w	fp, r2
 8008e64:	f8dc 2000 	ldr.w	r2, [ip]
 8008e68:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008e6c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e76:	4581      	cmp	r9, r0
 8008e78:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008e7c:	f84c 3b04 	str.w	r3, [ip], #4
 8008e80:	d2db      	bcs.n	8008e3a <quorem+0x42>
 8008e82:	f856 300e 	ldr.w	r3, [r6, lr]
 8008e86:	b933      	cbnz	r3, 8008e96 <quorem+0x9e>
 8008e88:	9b01      	ldr	r3, [sp, #4]
 8008e8a:	3b04      	subs	r3, #4
 8008e8c:	429e      	cmp	r6, r3
 8008e8e:	461a      	mov	r2, r3
 8008e90:	d330      	bcc.n	8008ef4 <quorem+0xfc>
 8008e92:	f8c8 4010 	str.w	r4, [r8, #16]
 8008e96:	4640      	mov	r0, r8
 8008e98:	f001 fa41 	bl	800a31e <__mcmp>
 8008e9c:	2800      	cmp	r0, #0
 8008e9e:	db25      	blt.n	8008eec <quorem+0xf4>
 8008ea0:	3501      	adds	r5, #1
 8008ea2:	4630      	mov	r0, r6
 8008ea4:	f04f 0e00 	mov.w	lr, #0
 8008ea8:	f857 2b04 	ldr.w	r2, [r7], #4
 8008eac:	f8d0 c000 	ldr.w	ip, [r0]
 8008eb0:	b293      	uxth	r3, r2
 8008eb2:	ebae 0303 	sub.w	r3, lr, r3
 8008eb6:	0c12      	lsrs	r2, r2, #16
 8008eb8:	fa13 f38c 	uxtah	r3, r3, ip
 8008ebc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008ec0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008ec4:	b29b      	uxth	r3, r3
 8008ec6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008eca:	45b9      	cmp	r9, r7
 8008ecc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8008ed0:	f840 3b04 	str.w	r3, [r0], #4
 8008ed4:	d2e8      	bcs.n	8008ea8 <quorem+0xb0>
 8008ed6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008eda:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8008ede:	b92a      	cbnz	r2, 8008eec <quorem+0xf4>
 8008ee0:	3b04      	subs	r3, #4
 8008ee2:	429e      	cmp	r6, r3
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	d30b      	bcc.n	8008f00 <quorem+0x108>
 8008ee8:	f8c8 4010 	str.w	r4, [r8, #16]
 8008eec:	4628      	mov	r0, r5
 8008eee:	b003      	add	sp, #12
 8008ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ef4:	6812      	ldr	r2, [r2, #0]
 8008ef6:	3b04      	subs	r3, #4
 8008ef8:	2a00      	cmp	r2, #0
 8008efa:	d1ca      	bne.n	8008e92 <quorem+0x9a>
 8008efc:	3c01      	subs	r4, #1
 8008efe:	e7c5      	b.n	8008e8c <quorem+0x94>
 8008f00:	6812      	ldr	r2, [r2, #0]
 8008f02:	3b04      	subs	r3, #4
 8008f04:	2a00      	cmp	r2, #0
 8008f06:	d1ef      	bne.n	8008ee8 <quorem+0xf0>
 8008f08:	3c01      	subs	r4, #1
 8008f0a:	e7ea      	b.n	8008ee2 <quorem+0xea>
 8008f0c:	2000      	movs	r0, #0
 8008f0e:	e7ee      	b.n	8008eee <quorem+0xf6>

08008f10 <_dtoa_r>:
 8008f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f14:	ec57 6b10 	vmov	r6, r7, d0
 8008f18:	b097      	sub	sp, #92	; 0x5c
 8008f1a:	e9cd 6700 	strd	r6, r7, [sp]
 8008f1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008f20:	9107      	str	r1, [sp, #28]
 8008f22:	4604      	mov	r4, r0
 8008f24:	920a      	str	r2, [sp, #40]	; 0x28
 8008f26:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f28:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8008f2a:	b93e      	cbnz	r6, 8008f3c <_dtoa_r+0x2c>
 8008f2c:	2010      	movs	r0, #16
 8008f2e:	f000 fdcb 	bl	8009ac8 <malloc>
 8008f32:	6260      	str	r0, [r4, #36]	; 0x24
 8008f34:	6046      	str	r6, [r0, #4]
 8008f36:	6086      	str	r6, [r0, #8]
 8008f38:	6006      	str	r6, [r0, #0]
 8008f3a:	60c6      	str	r6, [r0, #12]
 8008f3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f3e:	6819      	ldr	r1, [r3, #0]
 8008f40:	b151      	cbz	r1, 8008f58 <_dtoa_r+0x48>
 8008f42:	685a      	ldr	r2, [r3, #4]
 8008f44:	604a      	str	r2, [r1, #4]
 8008f46:	2301      	movs	r3, #1
 8008f48:	4093      	lsls	r3, r2
 8008f4a:	608b      	str	r3, [r1, #8]
 8008f4c:	4620      	mov	r0, r4
 8008f4e:	f001 f811 	bl	8009f74 <_Bfree>
 8008f52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f54:	2200      	movs	r2, #0
 8008f56:	601a      	str	r2, [r3, #0]
 8008f58:	9b01      	ldr	r3, [sp, #4]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	bfbf      	itttt	lt
 8008f5e:	2301      	movlt	r3, #1
 8008f60:	602b      	strlt	r3, [r5, #0]
 8008f62:	9b01      	ldrlt	r3, [sp, #4]
 8008f64:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008f68:	bfb2      	itee	lt
 8008f6a:	9301      	strlt	r3, [sp, #4]
 8008f6c:	2300      	movge	r3, #0
 8008f6e:	602b      	strge	r3, [r5, #0]
 8008f70:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008f74:	4ba8      	ldr	r3, [pc, #672]	; (8009218 <_dtoa_r+0x308>)
 8008f76:	ea33 0308 	bics.w	r3, r3, r8
 8008f7a:	d11b      	bne.n	8008fb4 <_dtoa_r+0xa4>
 8008f7c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008f7e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008f82:	6013      	str	r3, [r2, #0]
 8008f84:	9b00      	ldr	r3, [sp, #0]
 8008f86:	b923      	cbnz	r3, 8008f92 <_dtoa_r+0x82>
 8008f88:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008f8c:	2800      	cmp	r0, #0
 8008f8e:	f000 8578 	beq.w	8009a82 <_dtoa_r+0xb72>
 8008f92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f94:	b953      	cbnz	r3, 8008fac <_dtoa_r+0x9c>
 8008f96:	4ba1      	ldr	r3, [pc, #644]	; (800921c <_dtoa_r+0x30c>)
 8008f98:	e021      	b.n	8008fde <_dtoa_r+0xce>
 8008f9a:	4ba1      	ldr	r3, [pc, #644]	; (8009220 <_dtoa_r+0x310>)
 8008f9c:	9302      	str	r3, [sp, #8]
 8008f9e:	3308      	adds	r3, #8
 8008fa0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008fa2:	6013      	str	r3, [r2, #0]
 8008fa4:	9802      	ldr	r0, [sp, #8]
 8008fa6:	b017      	add	sp, #92	; 0x5c
 8008fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fac:	4b9b      	ldr	r3, [pc, #620]	; (800921c <_dtoa_r+0x30c>)
 8008fae:	9302      	str	r3, [sp, #8]
 8008fb0:	3303      	adds	r3, #3
 8008fb2:	e7f5      	b.n	8008fa0 <_dtoa_r+0x90>
 8008fb4:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	2300      	movs	r3, #0
 8008fbc:	4630      	mov	r0, r6
 8008fbe:	4639      	mov	r1, r7
 8008fc0:	f7f7 fd7e 	bl	8000ac0 <__aeabi_dcmpeq>
 8008fc4:	4681      	mov	r9, r0
 8008fc6:	b160      	cbz	r0, 8008fe2 <_dtoa_r+0xd2>
 8008fc8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008fca:	2301      	movs	r3, #1
 8008fcc:	6013      	str	r3, [r2, #0]
 8008fce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	f000 8553 	beq.w	8009a7c <_dtoa_r+0xb6c>
 8008fd6:	4b93      	ldr	r3, [pc, #588]	; (8009224 <_dtoa_r+0x314>)
 8008fd8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008fda:	6013      	str	r3, [r2, #0]
 8008fdc:	3b01      	subs	r3, #1
 8008fde:	9302      	str	r3, [sp, #8]
 8008fe0:	e7e0      	b.n	8008fa4 <_dtoa_r+0x94>
 8008fe2:	aa14      	add	r2, sp, #80	; 0x50
 8008fe4:	a915      	add	r1, sp, #84	; 0x54
 8008fe6:	ec47 6b10 	vmov	d0, r6, r7
 8008fea:	4620      	mov	r0, r4
 8008fec:	f001 fa0f 	bl	800a40e <__d2b>
 8008ff0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008ff4:	4682      	mov	sl, r0
 8008ff6:	2d00      	cmp	r5, #0
 8008ff8:	d07e      	beq.n	80090f8 <_dtoa_r+0x1e8>
 8008ffa:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008ffe:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8009002:	4630      	mov	r0, r6
 8009004:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8009008:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800900c:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8009010:	2200      	movs	r2, #0
 8009012:	4b85      	ldr	r3, [pc, #532]	; (8009228 <_dtoa_r+0x318>)
 8009014:	f7f7 f938 	bl	8000288 <__aeabi_dsub>
 8009018:	a379      	add	r3, pc, #484	; (adr r3, 8009200 <_dtoa_r+0x2f0>)
 800901a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800901e:	f7f7 fae7 	bl	80005f0 <__aeabi_dmul>
 8009022:	a379      	add	r3, pc, #484	; (adr r3, 8009208 <_dtoa_r+0x2f8>)
 8009024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009028:	f7f7 f930 	bl	800028c <__adddf3>
 800902c:	4606      	mov	r6, r0
 800902e:	4628      	mov	r0, r5
 8009030:	460f      	mov	r7, r1
 8009032:	f7f7 fa77 	bl	8000524 <__aeabi_i2d>
 8009036:	a376      	add	r3, pc, #472	; (adr r3, 8009210 <_dtoa_r+0x300>)
 8009038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800903c:	f7f7 fad8 	bl	80005f0 <__aeabi_dmul>
 8009040:	4602      	mov	r2, r0
 8009042:	460b      	mov	r3, r1
 8009044:	4630      	mov	r0, r6
 8009046:	4639      	mov	r1, r7
 8009048:	f7f7 f920 	bl	800028c <__adddf3>
 800904c:	4606      	mov	r6, r0
 800904e:	460f      	mov	r7, r1
 8009050:	f7f7 fd7e 	bl	8000b50 <__aeabi_d2iz>
 8009054:	2200      	movs	r2, #0
 8009056:	4683      	mov	fp, r0
 8009058:	2300      	movs	r3, #0
 800905a:	4630      	mov	r0, r6
 800905c:	4639      	mov	r1, r7
 800905e:	f7f7 fd39 	bl	8000ad4 <__aeabi_dcmplt>
 8009062:	b158      	cbz	r0, 800907c <_dtoa_r+0x16c>
 8009064:	4658      	mov	r0, fp
 8009066:	f7f7 fa5d 	bl	8000524 <__aeabi_i2d>
 800906a:	4602      	mov	r2, r0
 800906c:	460b      	mov	r3, r1
 800906e:	4630      	mov	r0, r6
 8009070:	4639      	mov	r1, r7
 8009072:	f7f7 fd25 	bl	8000ac0 <__aeabi_dcmpeq>
 8009076:	b908      	cbnz	r0, 800907c <_dtoa_r+0x16c>
 8009078:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800907c:	f1bb 0f16 	cmp.w	fp, #22
 8009080:	d859      	bhi.n	8009136 <_dtoa_r+0x226>
 8009082:	496a      	ldr	r1, [pc, #424]	; (800922c <_dtoa_r+0x31c>)
 8009084:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8009088:	e9dd 2300 	ldrd	r2, r3, [sp]
 800908c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009090:	f7f7 fd3e 	bl	8000b10 <__aeabi_dcmpgt>
 8009094:	2800      	cmp	r0, #0
 8009096:	d050      	beq.n	800913a <_dtoa_r+0x22a>
 8009098:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800909c:	2300      	movs	r3, #0
 800909e:	930e      	str	r3, [sp, #56]	; 0x38
 80090a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80090a2:	1b5d      	subs	r5, r3, r5
 80090a4:	1e6b      	subs	r3, r5, #1
 80090a6:	9306      	str	r3, [sp, #24]
 80090a8:	bf45      	ittet	mi
 80090aa:	f1c5 0301 	rsbmi	r3, r5, #1
 80090ae:	9305      	strmi	r3, [sp, #20]
 80090b0:	2300      	movpl	r3, #0
 80090b2:	2300      	movmi	r3, #0
 80090b4:	bf4c      	ite	mi
 80090b6:	9306      	strmi	r3, [sp, #24]
 80090b8:	9305      	strpl	r3, [sp, #20]
 80090ba:	f1bb 0f00 	cmp.w	fp, #0
 80090be:	db3e      	blt.n	800913e <_dtoa_r+0x22e>
 80090c0:	9b06      	ldr	r3, [sp, #24]
 80090c2:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80090c6:	445b      	add	r3, fp
 80090c8:	9306      	str	r3, [sp, #24]
 80090ca:	2300      	movs	r3, #0
 80090cc:	9308      	str	r3, [sp, #32]
 80090ce:	9b07      	ldr	r3, [sp, #28]
 80090d0:	2b09      	cmp	r3, #9
 80090d2:	f200 80af 	bhi.w	8009234 <_dtoa_r+0x324>
 80090d6:	2b05      	cmp	r3, #5
 80090d8:	bfc4      	itt	gt
 80090da:	3b04      	subgt	r3, #4
 80090dc:	9307      	strgt	r3, [sp, #28]
 80090de:	9b07      	ldr	r3, [sp, #28]
 80090e0:	f1a3 0302 	sub.w	r3, r3, #2
 80090e4:	bfcc      	ite	gt
 80090e6:	2600      	movgt	r6, #0
 80090e8:	2601      	movle	r6, #1
 80090ea:	2b03      	cmp	r3, #3
 80090ec:	f200 80ae 	bhi.w	800924c <_dtoa_r+0x33c>
 80090f0:	e8df f003 	tbb	[pc, r3]
 80090f4:	772f8482 	.word	0x772f8482
 80090f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80090fa:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80090fc:	441d      	add	r5, r3
 80090fe:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009102:	2b20      	cmp	r3, #32
 8009104:	dd11      	ble.n	800912a <_dtoa_r+0x21a>
 8009106:	9a00      	ldr	r2, [sp, #0]
 8009108:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800910c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8009110:	fa22 f000 	lsr.w	r0, r2, r0
 8009114:	fa08 f303 	lsl.w	r3, r8, r3
 8009118:	4318      	orrs	r0, r3
 800911a:	f7f7 f9f3 	bl	8000504 <__aeabi_ui2d>
 800911e:	2301      	movs	r3, #1
 8009120:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8009124:	3d01      	subs	r5, #1
 8009126:	9312      	str	r3, [sp, #72]	; 0x48
 8009128:	e772      	b.n	8009010 <_dtoa_r+0x100>
 800912a:	f1c3 0020 	rsb	r0, r3, #32
 800912e:	9b00      	ldr	r3, [sp, #0]
 8009130:	fa03 f000 	lsl.w	r0, r3, r0
 8009134:	e7f1      	b.n	800911a <_dtoa_r+0x20a>
 8009136:	2301      	movs	r3, #1
 8009138:	e7b1      	b.n	800909e <_dtoa_r+0x18e>
 800913a:	900e      	str	r0, [sp, #56]	; 0x38
 800913c:	e7b0      	b.n	80090a0 <_dtoa_r+0x190>
 800913e:	9b05      	ldr	r3, [sp, #20]
 8009140:	eba3 030b 	sub.w	r3, r3, fp
 8009144:	9305      	str	r3, [sp, #20]
 8009146:	f1cb 0300 	rsb	r3, fp, #0
 800914a:	9308      	str	r3, [sp, #32]
 800914c:	2300      	movs	r3, #0
 800914e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009150:	e7bd      	b.n	80090ce <_dtoa_r+0x1be>
 8009152:	2301      	movs	r3, #1
 8009154:	9309      	str	r3, [sp, #36]	; 0x24
 8009156:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009158:	2b00      	cmp	r3, #0
 800915a:	dd7a      	ble.n	8009252 <_dtoa_r+0x342>
 800915c:	9304      	str	r3, [sp, #16]
 800915e:	9303      	str	r3, [sp, #12]
 8009160:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009162:	2200      	movs	r2, #0
 8009164:	606a      	str	r2, [r5, #4]
 8009166:	2104      	movs	r1, #4
 8009168:	f101 0214 	add.w	r2, r1, #20
 800916c:	429a      	cmp	r2, r3
 800916e:	d975      	bls.n	800925c <_dtoa_r+0x34c>
 8009170:	6869      	ldr	r1, [r5, #4]
 8009172:	4620      	mov	r0, r4
 8009174:	f000 feca 	bl	8009f0c <_Balloc>
 8009178:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800917a:	6028      	str	r0, [r5, #0]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	9302      	str	r3, [sp, #8]
 8009180:	9b03      	ldr	r3, [sp, #12]
 8009182:	2b0e      	cmp	r3, #14
 8009184:	f200 80e5 	bhi.w	8009352 <_dtoa_r+0x442>
 8009188:	2e00      	cmp	r6, #0
 800918a:	f000 80e2 	beq.w	8009352 <_dtoa_r+0x442>
 800918e:	ed9d 7b00 	vldr	d7, [sp]
 8009192:	f1bb 0f00 	cmp.w	fp, #0
 8009196:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800919a:	dd74      	ble.n	8009286 <_dtoa_r+0x376>
 800919c:	4a23      	ldr	r2, [pc, #140]	; (800922c <_dtoa_r+0x31c>)
 800919e:	f00b 030f 	and.w	r3, fp, #15
 80091a2:	ea4f 162b 	mov.w	r6, fp, asr #4
 80091a6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80091aa:	06f0      	lsls	r0, r6, #27
 80091ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80091b0:	d559      	bpl.n	8009266 <_dtoa_r+0x356>
 80091b2:	4b1f      	ldr	r3, [pc, #124]	; (8009230 <_dtoa_r+0x320>)
 80091b4:	ec51 0b17 	vmov	r0, r1, d7
 80091b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80091bc:	f7f7 fb42 	bl	8000844 <__aeabi_ddiv>
 80091c0:	e9cd 0100 	strd	r0, r1, [sp]
 80091c4:	f006 060f 	and.w	r6, r6, #15
 80091c8:	2503      	movs	r5, #3
 80091ca:	4f19      	ldr	r7, [pc, #100]	; (8009230 <_dtoa_r+0x320>)
 80091cc:	2e00      	cmp	r6, #0
 80091ce:	d14c      	bne.n	800926a <_dtoa_r+0x35a>
 80091d0:	4642      	mov	r2, r8
 80091d2:	464b      	mov	r3, r9
 80091d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80091d8:	f7f7 fb34 	bl	8000844 <__aeabi_ddiv>
 80091dc:	e9cd 0100 	strd	r0, r1, [sp]
 80091e0:	e06a      	b.n	80092b8 <_dtoa_r+0x3a8>
 80091e2:	2301      	movs	r3, #1
 80091e4:	9309      	str	r3, [sp, #36]	; 0x24
 80091e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091e8:	445b      	add	r3, fp
 80091ea:	9304      	str	r3, [sp, #16]
 80091ec:	3301      	adds	r3, #1
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	9303      	str	r3, [sp, #12]
 80091f2:	bfb8      	it	lt
 80091f4:	2301      	movlt	r3, #1
 80091f6:	e7b3      	b.n	8009160 <_dtoa_r+0x250>
 80091f8:	2300      	movs	r3, #0
 80091fa:	e7ab      	b.n	8009154 <_dtoa_r+0x244>
 80091fc:	2300      	movs	r3, #0
 80091fe:	e7f1      	b.n	80091e4 <_dtoa_r+0x2d4>
 8009200:	636f4361 	.word	0x636f4361
 8009204:	3fd287a7 	.word	0x3fd287a7
 8009208:	8b60c8b3 	.word	0x8b60c8b3
 800920c:	3fc68a28 	.word	0x3fc68a28
 8009210:	509f79fb 	.word	0x509f79fb
 8009214:	3fd34413 	.word	0x3fd34413
 8009218:	7ff00000 	.word	0x7ff00000
 800921c:	0800c7e9 	.word	0x0800c7e9
 8009220:	0800c7e0 	.word	0x0800c7e0
 8009224:	0800c7bf 	.word	0x0800c7bf
 8009228:	3ff80000 	.word	0x3ff80000
 800922c:	0800c818 	.word	0x0800c818
 8009230:	0800c7f0 	.word	0x0800c7f0
 8009234:	2601      	movs	r6, #1
 8009236:	2300      	movs	r3, #0
 8009238:	9307      	str	r3, [sp, #28]
 800923a:	9609      	str	r6, [sp, #36]	; 0x24
 800923c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009240:	9304      	str	r3, [sp, #16]
 8009242:	9303      	str	r3, [sp, #12]
 8009244:	2200      	movs	r2, #0
 8009246:	2312      	movs	r3, #18
 8009248:	920a      	str	r2, [sp, #40]	; 0x28
 800924a:	e789      	b.n	8009160 <_dtoa_r+0x250>
 800924c:	2301      	movs	r3, #1
 800924e:	9309      	str	r3, [sp, #36]	; 0x24
 8009250:	e7f4      	b.n	800923c <_dtoa_r+0x32c>
 8009252:	2301      	movs	r3, #1
 8009254:	9304      	str	r3, [sp, #16]
 8009256:	9303      	str	r3, [sp, #12]
 8009258:	461a      	mov	r2, r3
 800925a:	e7f5      	b.n	8009248 <_dtoa_r+0x338>
 800925c:	686a      	ldr	r2, [r5, #4]
 800925e:	3201      	adds	r2, #1
 8009260:	606a      	str	r2, [r5, #4]
 8009262:	0049      	lsls	r1, r1, #1
 8009264:	e780      	b.n	8009168 <_dtoa_r+0x258>
 8009266:	2502      	movs	r5, #2
 8009268:	e7af      	b.n	80091ca <_dtoa_r+0x2ba>
 800926a:	07f1      	lsls	r1, r6, #31
 800926c:	d508      	bpl.n	8009280 <_dtoa_r+0x370>
 800926e:	4640      	mov	r0, r8
 8009270:	4649      	mov	r1, r9
 8009272:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009276:	f7f7 f9bb 	bl	80005f0 <__aeabi_dmul>
 800927a:	3501      	adds	r5, #1
 800927c:	4680      	mov	r8, r0
 800927e:	4689      	mov	r9, r1
 8009280:	1076      	asrs	r6, r6, #1
 8009282:	3708      	adds	r7, #8
 8009284:	e7a2      	b.n	80091cc <_dtoa_r+0x2bc>
 8009286:	f000 809d 	beq.w	80093c4 <_dtoa_r+0x4b4>
 800928a:	f1cb 0600 	rsb	r6, fp, #0
 800928e:	4b9f      	ldr	r3, [pc, #636]	; (800950c <_dtoa_r+0x5fc>)
 8009290:	4f9f      	ldr	r7, [pc, #636]	; (8009510 <_dtoa_r+0x600>)
 8009292:	f006 020f 	and.w	r2, r6, #15
 8009296:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800929a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800929e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80092a2:	f7f7 f9a5 	bl	80005f0 <__aeabi_dmul>
 80092a6:	e9cd 0100 	strd	r0, r1, [sp]
 80092aa:	1136      	asrs	r6, r6, #4
 80092ac:	2300      	movs	r3, #0
 80092ae:	2502      	movs	r5, #2
 80092b0:	2e00      	cmp	r6, #0
 80092b2:	d17c      	bne.n	80093ae <_dtoa_r+0x49e>
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d191      	bne.n	80091dc <_dtoa_r+0x2cc>
 80092b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	f000 8084 	beq.w	80093c8 <_dtoa_r+0x4b8>
 80092c0:	e9dd 8900 	ldrd	r8, r9, [sp]
 80092c4:	2200      	movs	r2, #0
 80092c6:	4b93      	ldr	r3, [pc, #588]	; (8009514 <_dtoa_r+0x604>)
 80092c8:	4640      	mov	r0, r8
 80092ca:	4649      	mov	r1, r9
 80092cc:	f7f7 fc02 	bl	8000ad4 <__aeabi_dcmplt>
 80092d0:	2800      	cmp	r0, #0
 80092d2:	d079      	beq.n	80093c8 <_dtoa_r+0x4b8>
 80092d4:	9b03      	ldr	r3, [sp, #12]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d076      	beq.n	80093c8 <_dtoa_r+0x4b8>
 80092da:	9b04      	ldr	r3, [sp, #16]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	dd34      	ble.n	800934a <_dtoa_r+0x43a>
 80092e0:	2200      	movs	r2, #0
 80092e2:	4b8d      	ldr	r3, [pc, #564]	; (8009518 <_dtoa_r+0x608>)
 80092e4:	4640      	mov	r0, r8
 80092e6:	4649      	mov	r1, r9
 80092e8:	f7f7 f982 	bl	80005f0 <__aeabi_dmul>
 80092ec:	e9cd 0100 	strd	r0, r1, [sp]
 80092f0:	9e04      	ldr	r6, [sp, #16]
 80092f2:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 80092f6:	3501      	adds	r5, #1
 80092f8:	4628      	mov	r0, r5
 80092fa:	f7f7 f913 	bl	8000524 <__aeabi_i2d>
 80092fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009302:	f7f7 f975 	bl	80005f0 <__aeabi_dmul>
 8009306:	2200      	movs	r2, #0
 8009308:	4b84      	ldr	r3, [pc, #528]	; (800951c <_dtoa_r+0x60c>)
 800930a:	f7f6 ffbf 	bl	800028c <__adddf3>
 800930e:	4680      	mov	r8, r0
 8009310:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8009314:	2e00      	cmp	r6, #0
 8009316:	d15a      	bne.n	80093ce <_dtoa_r+0x4be>
 8009318:	2200      	movs	r2, #0
 800931a:	4b81      	ldr	r3, [pc, #516]	; (8009520 <_dtoa_r+0x610>)
 800931c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009320:	f7f6 ffb2 	bl	8000288 <__aeabi_dsub>
 8009324:	4642      	mov	r2, r8
 8009326:	464b      	mov	r3, r9
 8009328:	e9cd 0100 	strd	r0, r1, [sp]
 800932c:	f7f7 fbf0 	bl	8000b10 <__aeabi_dcmpgt>
 8009330:	2800      	cmp	r0, #0
 8009332:	f040 829b 	bne.w	800986c <_dtoa_r+0x95c>
 8009336:	4642      	mov	r2, r8
 8009338:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800933c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009340:	f7f7 fbc8 	bl	8000ad4 <__aeabi_dcmplt>
 8009344:	2800      	cmp	r0, #0
 8009346:	f040 828f 	bne.w	8009868 <_dtoa_r+0x958>
 800934a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800934e:	e9cd 2300 	strd	r2, r3, [sp]
 8009352:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009354:	2b00      	cmp	r3, #0
 8009356:	f2c0 8150 	blt.w	80095fa <_dtoa_r+0x6ea>
 800935a:	f1bb 0f0e 	cmp.w	fp, #14
 800935e:	f300 814c 	bgt.w	80095fa <_dtoa_r+0x6ea>
 8009362:	4b6a      	ldr	r3, [pc, #424]	; (800950c <_dtoa_r+0x5fc>)
 8009364:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009368:	e9d3 8900 	ldrd	r8, r9, [r3]
 800936c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800936e:	2b00      	cmp	r3, #0
 8009370:	f280 80da 	bge.w	8009528 <_dtoa_r+0x618>
 8009374:	9b03      	ldr	r3, [sp, #12]
 8009376:	2b00      	cmp	r3, #0
 8009378:	f300 80d6 	bgt.w	8009528 <_dtoa_r+0x618>
 800937c:	f040 8273 	bne.w	8009866 <_dtoa_r+0x956>
 8009380:	2200      	movs	r2, #0
 8009382:	4b67      	ldr	r3, [pc, #412]	; (8009520 <_dtoa_r+0x610>)
 8009384:	4640      	mov	r0, r8
 8009386:	4649      	mov	r1, r9
 8009388:	f7f7 f932 	bl	80005f0 <__aeabi_dmul>
 800938c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009390:	f7f7 fbb4 	bl	8000afc <__aeabi_dcmpge>
 8009394:	9e03      	ldr	r6, [sp, #12]
 8009396:	4637      	mov	r7, r6
 8009398:	2800      	cmp	r0, #0
 800939a:	f040 824a 	bne.w	8009832 <_dtoa_r+0x922>
 800939e:	9b02      	ldr	r3, [sp, #8]
 80093a0:	9a02      	ldr	r2, [sp, #8]
 80093a2:	1c5d      	adds	r5, r3, #1
 80093a4:	2331      	movs	r3, #49	; 0x31
 80093a6:	7013      	strb	r3, [r2, #0]
 80093a8:	f10b 0b01 	add.w	fp, fp, #1
 80093ac:	e245      	b.n	800983a <_dtoa_r+0x92a>
 80093ae:	07f2      	lsls	r2, r6, #31
 80093b0:	d505      	bpl.n	80093be <_dtoa_r+0x4ae>
 80093b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093b6:	f7f7 f91b 	bl	80005f0 <__aeabi_dmul>
 80093ba:	3501      	adds	r5, #1
 80093bc:	2301      	movs	r3, #1
 80093be:	1076      	asrs	r6, r6, #1
 80093c0:	3708      	adds	r7, #8
 80093c2:	e775      	b.n	80092b0 <_dtoa_r+0x3a0>
 80093c4:	2502      	movs	r5, #2
 80093c6:	e777      	b.n	80092b8 <_dtoa_r+0x3a8>
 80093c8:	465f      	mov	r7, fp
 80093ca:	9e03      	ldr	r6, [sp, #12]
 80093cc:	e794      	b.n	80092f8 <_dtoa_r+0x3e8>
 80093ce:	9a02      	ldr	r2, [sp, #8]
 80093d0:	4b4e      	ldr	r3, [pc, #312]	; (800950c <_dtoa_r+0x5fc>)
 80093d2:	4432      	add	r2, r6
 80093d4:	9213      	str	r2, [sp, #76]	; 0x4c
 80093d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093d8:	1e71      	subs	r1, r6, #1
 80093da:	2a00      	cmp	r2, #0
 80093dc:	d048      	beq.n	8009470 <_dtoa_r+0x560>
 80093de:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80093e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e6:	2000      	movs	r0, #0
 80093e8:	494e      	ldr	r1, [pc, #312]	; (8009524 <_dtoa_r+0x614>)
 80093ea:	f7f7 fa2b 	bl	8000844 <__aeabi_ddiv>
 80093ee:	4642      	mov	r2, r8
 80093f0:	464b      	mov	r3, r9
 80093f2:	f7f6 ff49 	bl	8000288 <__aeabi_dsub>
 80093f6:	9d02      	ldr	r5, [sp, #8]
 80093f8:	4680      	mov	r8, r0
 80093fa:	4689      	mov	r9, r1
 80093fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009400:	f7f7 fba6 	bl	8000b50 <__aeabi_d2iz>
 8009404:	4606      	mov	r6, r0
 8009406:	f7f7 f88d 	bl	8000524 <__aeabi_i2d>
 800940a:	4602      	mov	r2, r0
 800940c:	460b      	mov	r3, r1
 800940e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009412:	f7f6 ff39 	bl	8000288 <__aeabi_dsub>
 8009416:	3630      	adds	r6, #48	; 0x30
 8009418:	f805 6b01 	strb.w	r6, [r5], #1
 800941c:	4642      	mov	r2, r8
 800941e:	464b      	mov	r3, r9
 8009420:	e9cd 0100 	strd	r0, r1, [sp]
 8009424:	f7f7 fb56 	bl	8000ad4 <__aeabi_dcmplt>
 8009428:	2800      	cmp	r0, #0
 800942a:	d165      	bne.n	80094f8 <_dtoa_r+0x5e8>
 800942c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009430:	2000      	movs	r0, #0
 8009432:	4938      	ldr	r1, [pc, #224]	; (8009514 <_dtoa_r+0x604>)
 8009434:	f7f6 ff28 	bl	8000288 <__aeabi_dsub>
 8009438:	4642      	mov	r2, r8
 800943a:	464b      	mov	r3, r9
 800943c:	f7f7 fb4a 	bl	8000ad4 <__aeabi_dcmplt>
 8009440:	2800      	cmp	r0, #0
 8009442:	f040 80ba 	bne.w	80095ba <_dtoa_r+0x6aa>
 8009446:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009448:	429d      	cmp	r5, r3
 800944a:	f43f af7e 	beq.w	800934a <_dtoa_r+0x43a>
 800944e:	2200      	movs	r2, #0
 8009450:	4b31      	ldr	r3, [pc, #196]	; (8009518 <_dtoa_r+0x608>)
 8009452:	4640      	mov	r0, r8
 8009454:	4649      	mov	r1, r9
 8009456:	f7f7 f8cb 	bl	80005f0 <__aeabi_dmul>
 800945a:	2200      	movs	r2, #0
 800945c:	4680      	mov	r8, r0
 800945e:	4689      	mov	r9, r1
 8009460:	4b2d      	ldr	r3, [pc, #180]	; (8009518 <_dtoa_r+0x608>)
 8009462:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009466:	f7f7 f8c3 	bl	80005f0 <__aeabi_dmul>
 800946a:	e9cd 0100 	strd	r0, r1, [sp]
 800946e:	e7c5      	b.n	80093fc <_dtoa_r+0x4ec>
 8009470:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8009474:	4642      	mov	r2, r8
 8009476:	464b      	mov	r3, r9
 8009478:	e9d1 0100 	ldrd	r0, r1, [r1]
 800947c:	f7f7 f8b8 	bl	80005f0 <__aeabi_dmul>
 8009480:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009484:	9d02      	ldr	r5, [sp, #8]
 8009486:	e9dd 0100 	ldrd	r0, r1, [sp]
 800948a:	f7f7 fb61 	bl	8000b50 <__aeabi_d2iz>
 800948e:	4606      	mov	r6, r0
 8009490:	f7f7 f848 	bl	8000524 <__aeabi_i2d>
 8009494:	3630      	adds	r6, #48	; 0x30
 8009496:	4602      	mov	r2, r0
 8009498:	460b      	mov	r3, r1
 800949a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800949e:	f7f6 fef3 	bl	8000288 <__aeabi_dsub>
 80094a2:	f805 6b01 	strb.w	r6, [r5], #1
 80094a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80094a8:	42ab      	cmp	r3, r5
 80094aa:	4680      	mov	r8, r0
 80094ac:	4689      	mov	r9, r1
 80094ae:	f04f 0200 	mov.w	r2, #0
 80094b2:	d125      	bne.n	8009500 <_dtoa_r+0x5f0>
 80094b4:	4b1b      	ldr	r3, [pc, #108]	; (8009524 <_dtoa_r+0x614>)
 80094b6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80094ba:	f7f6 fee7 	bl	800028c <__adddf3>
 80094be:	4602      	mov	r2, r0
 80094c0:	460b      	mov	r3, r1
 80094c2:	4640      	mov	r0, r8
 80094c4:	4649      	mov	r1, r9
 80094c6:	f7f7 fb23 	bl	8000b10 <__aeabi_dcmpgt>
 80094ca:	2800      	cmp	r0, #0
 80094cc:	d175      	bne.n	80095ba <_dtoa_r+0x6aa>
 80094ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80094d2:	2000      	movs	r0, #0
 80094d4:	4913      	ldr	r1, [pc, #76]	; (8009524 <_dtoa_r+0x614>)
 80094d6:	f7f6 fed7 	bl	8000288 <__aeabi_dsub>
 80094da:	4602      	mov	r2, r0
 80094dc:	460b      	mov	r3, r1
 80094de:	4640      	mov	r0, r8
 80094e0:	4649      	mov	r1, r9
 80094e2:	f7f7 faf7 	bl	8000ad4 <__aeabi_dcmplt>
 80094e6:	2800      	cmp	r0, #0
 80094e8:	f43f af2f 	beq.w	800934a <_dtoa_r+0x43a>
 80094ec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80094f0:	2b30      	cmp	r3, #48	; 0x30
 80094f2:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80094f6:	d001      	beq.n	80094fc <_dtoa_r+0x5ec>
 80094f8:	46bb      	mov	fp, r7
 80094fa:	e04d      	b.n	8009598 <_dtoa_r+0x688>
 80094fc:	4615      	mov	r5, r2
 80094fe:	e7f5      	b.n	80094ec <_dtoa_r+0x5dc>
 8009500:	4b05      	ldr	r3, [pc, #20]	; (8009518 <_dtoa_r+0x608>)
 8009502:	f7f7 f875 	bl	80005f0 <__aeabi_dmul>
 8009506:	e9cd 0100 	strd	r0, r1, [sp]
 800950a:	e7bc      	b.n	8009486 <_dtoa_r+0x576>
 800950c:	0800c818 	.word	0x0800c818
 8009510:	0800c7f0 	.word	0x0800c7f0
 8009514:	3ff00000 	.word	0x3ff00000
 8009518:	40240000 	.word	0x40240000
 800951c:	401c0000 	.word	0x401c0000
 8009520:	40140000 	.word	0x40140000
 8009524:	3fe00000 	.word	0x3fe00000
 8009528:	e9dd 6700 	ldrd	r6, r7, [sp]
 800952c:	9d02      	ldr	r5, [sp, #8]
 800952e:	4642      	mov	r2, r8
 8009530:	464b      	mov	r3, r9
 8009532:	4630      	mov	r0, r6
 8009534:	4639      	mov	r1, r7
 8009536:	f7f7 f985 	bl	8000844 <__aeabi_ddiv>
 800953a:	f7f7 fb09 	bl	8000b50 <__aeabi_d2iz>
 800953e:	9000      	str	r0, [sp, #0]
 8009540:	f7f6 fff0 	bl	8000524 <__aeabi_i2d>
 8009544:	4642      	mov	r2, r8
 8009546:	464b      	mov	r3, r9
 8009548:	f7f7 f852 	bl	80005f0 <__aeabi_dmul>
 800954c:	4602      	mov	r2, r0
 800954e:	460b      	mov	r3, r1
 8009550:	4630      	mov	r0, r6
 8009552:	4639      	mov	r1, r7
 8009554:	f7f6 fe98 	bl	8000288 <__aeabi_dsub>
 8009558:	9e00      	ldr	r6, [sp, #0]
 800955a:	9f03      	ldr	r7, [sp, #12]
 800955c:	3630      	adds	r6, #48	; 0x30
 800955e:	f805 6b01 	strb.w	r6, [r5], #1
 8009562:	9e02      	ldr	r6, [sp, #8]
 8009564:	1bae      	subs	r6, r5, r6
 8009566:	42b7      	cmp	r7, r6
 8009568:	4602      	mov	r2, r0
 800956a:	460b      	mov	r3, r1
 800956c:	d138      	bne.n	80095e0 <_dtoa_r+0x6d0>
 800956e:	f7f6 fe8d 	bl	800028c <__adddf3>
 8009572:	4606      	mov	r6, r0
 8009574:	460f      	mov	r7, r1
 8009576:	4602      	mov	r2, r0
 8009578:	460b      	mov	r3, r1
 800957a:	4640      	mov	r0, r8
 800957c:	4649      	mov	r1, r9
 800957e:	f7f7 faa9 	bl	8000ad4 <__aeabi_dcmplt>
 8009582:	b9c8      	cbnz	r0, 80095b8 <_dtoa_r+0x6a8>
 8009584:	4632      	mov	r2, r6
 8009586:	463b      	mov	r3, r7
 8009588:	4640      	mov	r0, r8
 800958a:	4649      	mov	r1, r9
 800958c:	f7f7 fa98 	bl	8000ac0 <__aeabi_dcmpeq>
 8009590:	b110      	cbz	r0, 8009598 <_dtoa_r+0x688>
 8009592:	9b00      	ldr	r3, [sp, #0]
 8009594:	07db      	lsls	r3, r3, #31
 8009596:	d40f      	bmi.n	80095b8 <_dtoa_r+0x6a8>
 8009598:	4651      	mov	r1, sl
 800959a:	4620      	mov	r0, r4
 800959c:	f000 fcea 	bl	8009f74 <_Bfree>
 80095a0:	2300      	movs	r3, #0
 80095a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80095a4:	702b      	strb	r3, [r5, #0]
 80095a6:	f10b 0301 	add.w	r3, fp, #1
 80095aa:	6013      	str	r3, [r2, #0]
 80095ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	f43f acf8 	beq.w	8008fa4 <_dtoa_r+0x94>
 80095b4:	601d      	str	r5, [r3, #0]
 80095b6:	e4f5      	b.n	8008fa4 <_dtoa_r+0x94>
 80095b8:	465f      	mov	r7, fp
 80095ba:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80095be:	2a39      	cmp	r2, #57	; 0x39
 80095c0:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 80095c4:	d106      	bne.n	80095d4 <_dtoa_r+0x6c4>
 80095c6:	9a02      	ldr	r2, [sp, #8]
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d107      	bne.n	80095dc <_dtoa_r+0x6cc>
 80095cc:	2330      	movs	r3, #48	; 0x30
 80095ce:	7013      	strb	r3, [r2, #0]
 80095d0:	3701      	adds	r7, #1
 80095d2:	4613      	mov	r3, r2
 80095d4:	781a      	ldrb	r2, [r3, #0]
 80095d6:	3201      	adds	r2, #1
 80095d8:	701a      	strb	r2, [r3, #0]
 80095da:	e78d      	b.n	80094f8 <_dtoa_r+0x5e8>
 80095dc:	461d      	mov	r5, r3
 80095de:	e7ec      	b.n	80095ba <_dtoa_r+0x6aa>
 80095e0:	2200      	movs	r2, #0
 80095e2:	4ba4      	ldr	r3, [pc, #656]	; (8009874 <_dtoa_r+0x964>)
 80095e4:	f7f7 f804 	bl	80005f0 <__aeabi_dmul>
 80095e8:	2200      	movs	r2, #0
 80095ea:	2300      	movs	r3, #0
 80095ec:	4606      	mov	r6, r0
 80095ee:	460f      	mov	r7, r1
 80095f0:	f7f7 fa66 	bl	8000ac0 <__aeabi_dcmpeq>
 80095f4:	2800      	cmp	r0, #0
 80095f6:	d09a      	beq.n	800952e <_dtoa_r+0x61e>
 80095f8:	e7ce      	b.n	8009598 <_dtoa_r+0x688>
 80095fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095fc:	2a00      	cmp	r2, #0
 80095fe:	f000 80cd 	beq.w	800979c <_dtoa_r+0x88c>
 8009602:	9a07      	ldr	r2, [sp, #28]
 8009604:	2a01      	cmp	r2, #1
 8009606:	f300 80af 	bgt.w	8009768 <_dtoa_r+0x858>
 800960a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800960c:	2a00      	cmp	r2, #0
 800960e:	f000 80a7 	beq.w	8009760 <_dtoa_r+0x850>
 8009612:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009616:	9e08      	ldr	r6, [sp, #32]
 8009618:	9d05      	ldr	r5, [sp, #20]
 800961a:	9a05      	ldr	r2, [sp, #20]
 800961c:	441a      	add	r2, r3
 800961e:	9205      	str	r2, [sp, #20]
 8009620:	9a06      	ldr	r2, [sp, #24]
 8009622:	2101      	movs	r1, #1
 8009624:	441a      	add	r2, r3
 8009626:	4620      	mov	r0, r4
 8009628:	9206      	str	r2, [sp, #24]
 800962a:	f000 fd43 	bl	800a0b4 <__i2b>
 800962e:	4607      	mov	r7, r0
 8009630:	2d00      	cmp	r5, #0
 8009632:	dd0c      	ble.n	800964e <_dtoa_r+0x73e>
 8009634:	9b06      	ldr	r3, [sp, #24]
 8009636:	2b00      	cmp	r3, #0
 8009638:	dd09      	ble.n	800964e <_dtoa_r+0x73e>
 800963a:	42ab      	cmp	r3, r5
 800963c:	9a05      	ldr	r2, [sp, #20]
 800963e:	bfa8      	it	ge
 8009640:	462b      	movge	r3, r5
 8009642:	1ad2      	subs	r2, r2, r3
 8009644:	9205      	str	r2, [sp, #20]
 8009646:	9a06      	ldr	r2, [sp, #24]
 8009648:	1aed      	subs	r5, r5, r3
 800964a:	1ad3      	subs	r3, r2, r3
 800964c:	9306      	str	r3, [sp, #24]
 800964e:	9b08      	ldr	r3, [sp, #32]
 8009650:	b1f3      	cbz	r3, 8009690 <_dtoa_r+0x780>
 8009652:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009654:	2b00      	cmp	r3, #0
 8009656:	f000 80a5 	beq.w	80097a4 <_dtoa_r+0x894>
 800965a:	2e00      	cmp	r6, #0
 800965c:	dd10      	ble.n	8009680 <_dtoa_r+0x770>
 800965e:	4639      	mov	r1, r7
 8009660:	4632      	mov	r2, r6
 8009662:	4620      	mov	r0, r4
 8009664:	f000 fdbc 	bl	800a1e0 <__pow5mult>
 8009668:	4652      	mov	r2, sl
 800966a:	4601      	mov	r1, r0
 800966c:	4607      	mov	r7, r0
 800966e:	4620      	mov	r0, r4
 8009670:	f000 fd29 	bl	800a0c6 <__multiply>
 8009674:	4651      	mov	r1, sl
 8009676:	4680      	mov	r8, r0
 8009678:	4620      	mov	r0, r4
 800967a:	f000 fc7b 	bl	8009f74 <_Bfree>
 800967e:	46c2      	mov	sl, r8
 8009680:	9b08      	ldr	r3, [sp, #32]
 8009682:	1b9a      	subs	r2, r3, r6
 8009684:	d004      	beq.n	8009690 <_dtoa_r+0x780>
 8009686:	4651      	mov	r1, sl
 8009688:	4620      	mov	r0, r4
 800968a:	f000 fda9 	bl	800a1e0 <__pow5mult>
 800968e:	4682      	mov	sl, r0
 8009690:	2101      	movs	r1, #1
 8009692:	4620      	mov	r0, r4
 8009694:	f000 fd0e 	bl	800a0b4 <__i2b>
 8009698:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800969a:	2b00      	cmp	r3, #0
 800969c:	4606      	mov	r6, r0
 800969e:	f340 8083 	ble.w	80097a8 <_dtoa_r+0x898>
 80096a2:	461a      	mov	r2, r3
 80096a4:	4601      	mov	r1, r0
 80096a6:	4620      	mov	r0, r4
 80096a8:	f000 fd9a 	bl	800a1e0 <__pow5mult>
 80096ac:	9b07      	ldr	r3, [sp, #28]
 80096ae:	2b01      	cmp	r3, #1
 80096b0:	4606      	mov	r6, r0
 80096b2:	dd7c      	ble.n	80097ae <_dtoa_r+0x89e>
 80096b4:	f04f 0800 	mov.w	r8, #0
 80096b8:	6933      	ldr	r3, [r6, #16]
 80096ba:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80096be:	6918      	ldr	r0, [r3, #16]
 80096c0:	f000 fcaa 	bl	800a018 <__hi0bits>
 80096c4:	f1c0 0020 	rsb	r0, r0, #32
 80096c8:	9b06      	ldr	r3, [sp, #24]
 80096ca:	4418      	add	r0, r3
 80096cc:	f010 001f 	ands.w	r0, r0, #31
 80096d0:	f000 8096 	beq.w	8009800 <_dtoa_r+0x8f0>
 80096d4:	f1c0 0320 	rsb	r3, r0, #32
 80096d8:	2b04      	cmp	r3, #4
 80096da:	f340 8087 	ble.w	80097ec <_dtoa_r+0x8dc>
 80096de:	9b05      	ldr	r3, [sp, #20]
 80096e0:	f1c0 001c 	rsb	r0, r0, #28
 80096e4:	4403      	add	r3, r0
 80096e6:	9305      	str	r3, [sp, #20]
 80096e8:	9b06      	ldr	r3, [sp, #24]
 80096ea:	4405      	add	r5, r0
 80096ec:	4403      	add	r3, r0
 80096ee:	9306      	str	r3, [sp, #24]
 80096f0:	9b05      	ldr	r3, [sp, #20]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	dd05      	ble.n	8009702 <_dtoa_r+0x7f2>
 80096f6:	4651      	mov	r1, sl
 80096f8:	461a      	mov	r2, r3
 80096fa:	4620      	mov	r0, r4
 80096fc:	f000 fdbe 	bl	800a27c <__lshift>
 8009700:	4682      	mov	sl, r0
 8009702:	9b06      	ldr	r3, [sp, #24]
 8009704:	2b00      	cmp	r3, #0
 8009706:	dd05      	ble.n	8009714 <_dtoa_r+0x804>
 8009708:	4631      	mov	r1, r6
 800970a:	461a      	mov	r2, r3
 800970c:	4620      	mov	r0, r4
 800970e:	f000 fdb5 	bl	800a27c <__lshift>
 8009712:	4606      	mov	r6, r0
 8009714:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009716:	2b00      	cmp	r3, #0
 8009718:	d074      	beq.n	8009804 <_dtoa_r+0x8f4>
 800971a:	4631      	mov	r1, r6
 800971c:	4650      	mov	r0, sl
 800971e:	f000 fdfe 	bl	800a31e <__mcmp>
 8009722:	2800      	cmp	r0, #0
 8009724:	da6e      	bge.n	8009804 <_dtoa_r+0x8f4>
 8009726:	2300      	movs	r3, #0
 8009728:	4651      	mov	r1, sl
 800972a:	220a      	movs	r2, #10
 800972c:	4620      	mov	r0, r4
 800972e:	f000 fc38 	bl	8009fa2 <__multadd>
 8009732:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009734:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009738:	4682      	mov	sl, r0
 800973a:	2b00      	cmp	r3, #0
 800973c:	f000 81a8 	beq.w	8009a90 <_dtoa_r+0xb80>
 8009740:	2300      	movs	r3, #0
 8009742:	4639      	mov	r1, r7
 8009744:	220a      	movs	r2, #10
 8009746:	4620      	mov	r0, r4
 8009748:	f000 fc2b 	bl	8009fa2 <__multadd>
 800974c:	9b04      	ldr	r3, [sp, #16]
 800974e:	2b00      	cmp	r3, #0
 8009750:	4607      	mov	r7, r0
 8009752:	f300 80c8 	bgt.w	80098e6 <_dtoa_r+0x9d6>
 8009756:	9b07      	ldr	r3, [sp, #28]
 8009758:	2b02      	cmp	r3, #2
 800975a:	f340 80c4 	ble.w	80098e6 <_dtoa_r+0x9d6>
 800975e:	e059      	b.n	8009814 <_dtoa_r+0x904>
 8009760:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009762:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009766:	e756      	b.n	8009616 <_dtoa_r+0x706>
 8009768:	9b03      	ldr	r3, [sp, #12]
 800976a:	1e5e      	subs	r6, r3, #1
 800976c:	9b08      	ldr	r3, [sp, #32]
 800976e:	42b3      	cmp	r3, r6
 8009770:	bfbf      	itttt	lt
 8009772:	9b08      	ldrlt	r3, [sp, #32]
 8009774:	9608      	strlt	r6, [sp, #32]
 8009776:	1af2      	sublt	r2, r6, r3
 8009778:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800977a:	bfb6      	itet	lt
 800977c:	189b      	addlt	r3, r3, r2
 800977e:	1b9e      	subge	r6, r3, r6
 8009780:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8009782:	9b03      	ldr	r3, [sp, #12]
 8009784:	bfb8      	it	lt
 8009786:	2600      	movlt	r6, #0
 8009788:	2b00      	cmp	r3, #0
 800978a:	bfb9      	ittee	lt
 800978c:	9b05      	ldrlt	r3, [sp, #20]
 800978e:	9a03      	ldrlt	r2, [sp, #12]
 8009790:	9d05      	ldrge	r5, [sp, #20]
 8009792:	9b03      	ldrge	r3, [sp, #12]
 8009794:	bfbc      	itt	lt
 8009796:	1a9d      	sublt	r5, r3, r2
 8009798:	2300      	movlt	r3, #0
 800979a:	e73e      	b.n	800961a <_dtoa_r+0x70a>
 800979c:	9e08      	ldr	r6, [sp, #32]
 800979e:	9d05      	ldr	r5, [sp, #20]
 80097a0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80097a2:	e745      	b.n	8009630 <_dtoa_r+0x720>
 80097a4:	9a08      	ldr	r2, [sp, #32]
 80097a6:	e76e      	b.n	8009686 <_dtoa_r+0x776>
 80097a8:	9b07      	ldr	r3, [sp, #28]
 80097aa:	2b01      	cmp	r3, #1
 80097ac:	dc19      	bgt.n	80097e2 <_dtoa_r+0x8d2>
 80097ae:	9b00      	ldr	r3, [sp, #0]
 80097b0:	b9bb      	cbnz	r3, 80097e2 <_dtoa_r+0x8d2>
 80097b2:	9b01      	ldr	r3, [sp, #4]
 80097b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80097b8:	b99b      	cbnz	r3, 80097e2 <_dtoa_r+0x8d2>
 80097ba:	9b01      	ldr	r3, [sp, #4]
 80097bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80097c0:	0d1b      	lsrs	r3, r3, #20
 80097c2:	051b      	lsls	r3, r3, #20
 80097c4:	b183      	cbz	r3, 80097e8 <_dtoa_r+0x8d8>
 80097c6:	9b05      	ldr	r3, [sp, #20]
 80097c8:	3301      	adds	r3, #1
 80097ca:	9305      	str	r3, [sp, #20]
 80097cc:	9b06      	ldr	r3, [sp, #24]
 80097ce:	3301      	adds	r3, #1
 80097d0:	9306      	str	r3, [sp, #24]
 80097d2:	f04f 0801 	mov.w	r8, #1
 80097d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097d8:	2b00      	cmp	r3, #0
 80097da:	f47f af6d 	bne.w	80096b8 <_dtoa_r+0x7a8>
 80097de:	2001      	movs	r0, #1
 80097e0:	e772      	b.n	80096c8 <_dtoa_r+0x7b8>
 80097e2:	f04f 0800 	mov.w	r8, #0
 80097e6:	e7f6      	b.n	80097d6 <_dtoa_r+0x8c6>
 80097e8:	4698      	mov	r8, r3
 80097ea:	e7f4      	b.n	80097d6 <_dtoa_r+0x8c6>
 80097ec:	d080      	beq.n	80096f0 <_dtoa_r+0x7e0>
 80097ee:	9a05      	ldr	r2, [sp, #20]
 80097f0:	331c      	adds	r3, #28
 80097f2:	441a      	add	r2, r3
 80097f4:	9205      	str	r2, [sp, #20]
 80097f6:	9a06      	ldr	r2, [sp, #24]
 80097f8:	441a      	add	r2, r3
 80097fa:	441d      	add	r5, r3
 80097fc:	4613      	mov	r3, r2
 80097fe:	e776      	b.n	80096ee <_dtoa_r+0x7de>
 8009800:	4603      	mov	r3, r0
 8009802:	e7f4      	b.n	80097ee <_dtoa_r+0x8de>
 8009804:	9b03      	ldr	r3, [sp, #12]
 8009806:	2b00      	cmp	r3, #0
 8009808:	dc36      	bgt.n	8009878 <_dtoa_r+0x968>
 800980a:	9b07      	ldr	r3, [sp, #28]
 800980c:	2b02      	cmp	r3, #2
 800980e:	dd33      	ble.n	8009878 <_dtoa_r+0x968>
 8009810:	9b03      	ldr	r3, [sp, #12]
 8009812:	9304      	str	r3, [sp, #16]
 8009814:	9b04      	ldr	r3, [sp, #16]
 8009816:	b963      	cbnz	r3, 8009832 <_dtoa_r+0x922>
 8009818:	4631      	mov	r1, r6
 800981a:	2205      	movs	r2, #5
 800981c:	4620      	mov	r0, r4
 800981e:	f000 fbc0 	bl	8009fa2 <__multadd>
 8009822:	4601      	mov	r1, r0
 8009824:	4606      	mov	r6, r0
 8009826:	4650      	mov	r0, sl
 8009828:	f000 fd79 	bl	800a31e <__mcmp>
 800982c:	2800      	cmp	r0, #0
 800982e:	f73f adb6 	bgt.w	800939e <_dtoa_r+0x48e>
 8009832:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009834:	9d02      	ldr	r5, [sp, #8]
 8009836:	ea6f 0b03 	mvn.w	fp, r3
 800983a:	2300      	movs	r3, #0
 800983c:	9303      	str	r3, [sp, #12]
 800983e:	4631      	mov	r1, r6
 8009840:	4620      	mov	r0, r4
 8009842:	f000 fb97 	bl	8009f74 <_Bfree>
 8009846:	2f00      	cmp	r7, #0
 8009848:	f43f aea6 	beq.w	8009598 <_dtoa_r+0x688>
 800984c:	9b03      	ldr	r3, [sp, #12]
 800984e:	b12b      	cbz	r3, 800985c <_dtoa_r+0x94c>
 8009850:	42bb      	cmp	r3, r7
 8009852:	d003      	beq.n	800985c <_dtoa_r+0x94c>
 8009854:	4619      	mov	r1, r3
 8009856:	4620      	mov	r0, r4
 8009858:	f000 fb8c 	bl	8009f74 <_Bfree>
 800985c:	4639      	mov	r1, r7
 800985e:	4620      	mov	r0, r4
 8009860:	f000 fb88 	bl	8009f74 <_Bfree>
 8009864:	e698      	b.n	8009598 <_dtoa_r+0x688>
 8009866:	2600      	movs	r6, #0
 8009868:	4637      	mov	r7, r6
 800986a:	e7e2      	b.n	8009832 <_dtoa_r+0x922>
 800986c:	46bb      	mov	fp, r7
 800986e:	4637      	mov	r7, r6
 8009870:	e595      	b.n	800939e <_dtoa_r+0x48e>
 8009872:	bf00      	nop
 8009874:	40240000 	.word	0x40240000
 8009878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800987a:	bb93      	cbnz	r3, 80098e2 <_dtoa_r+0x9d2>
 800987c:	9b03      	ldr	r3, [sp, #12]
 800987e:	9304      	str	r3, [sp, #16]
 8009880:	9d02      	ldr	r5, [sp, #8]
 8009882:	4631      	mov	r1, r6
 8009884:	4650      	mov	r0, sl
 8009886:	f7ff fab7 	bl	8008df8 <quorem>
 800988a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800988e:	f805 9b01 	strb.w	r9, [r5], #1
 8009892:	9b02      	ldr	r3, [sp, #8]
 8009894:	9a04      	ldr	r2, [sp, #16]
 8009896:	1aeb      	subs	r3, r5, r3
 8009898:	429a      	cmp	r2, r3
 800989a:	f300 80dc 	bgt.w	8009a56 <_dtoa_r+0xb46>
 800989e:	9b02      	ldr	r3, [sp, #8]
 80098a0:	2a01      	cmp	r2, #1
 80098a2:	bfac      	ite	ge
 80098a4:	189b      	addge	r3, r3, r2
 80098a6:	3301      	addlt	r3, #1
 80098a8:	4698      	mov	r8, r3
 80098aa:	2300      	movs	r3, #0
 80098ac:	9303      	str	r3, [sp, #12]
 80098ae:	4651      	mov	r1, sl
 80098b0:	2201      	movs	r2, #1
 80098b2:	4620      	mov	r0, r4
 80098b4:	f000 fce2 	bl	800a27c <__lshift>
 80098b8:	4631      	mov	r1, r6
 80098ba:	4682      	mov	sl, r0
 80098bc:	f000 fd2f 	bl	800a31e <__mcmp>
 80098c0:	2800      	cmp	r0, #0
 80098c2:	f300 808d 	bgt.w	80099e0 <_dtoa_r+0xad0>
 80098c6:	d103      	bne.n	80098d0 <_dtoa_r+0x9c0>
 80098c8:	f019 0f01 	tst.w	r9, #1
 80098cc:	f040 8088 	bne.w	80099e0 <_dtoa_r+0xad0>
 80098d0:	4645      	mov	r5, r8
 80098d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80098d6:	2b30      	cmp	r3, #48	; 0x30
 80098d8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80098dc:	d1af      	bne.n	800983e <_dtoa_r+0x92e>
 80098de:	4615      	mov	r5, r2
 80098e0:	e7f7      	b.n	80098d2 <_dtoa_r+0x9c2>
 80098e2:	9b03      	ldr	r3, [sp, #12]
 80098e4:	9304      	str	r3, [sp, #16]
 80098e6:	2d00      	cmp	r5, #0
 80098e8:	dd05      	ble.n	80098f6 <_dtoa_r+0x9e6>
 80098ea:	4639      	mov	r1, r7
 80098ec:	462a      	mov	r2, r5
 80098ee:	4620      	mov	r0, r4
 80098f0:	f000 fcc4 	bl	800a27c <__lshift>
 80098f4:	4607      	mov	r7, r0
 80098f6:	f1b8 0f00 	cmp.w	r8, #0
 80098fa:	d04c      	beq.n	8009996 <_dtoa_r+0xa86>
 80098fc:	6879      	ldr	r1, [r7, #4]
 80098fe:	4620      	mov	r0, r4
 8009900:	f000 fb04 	bl	8009f0c <_Balloc>
 8009904:	693a      	ldr	r2, [r7, #16]
 8009906:	3202      	adds	r2, #2
 8009908:	4605      	mov	r5, r0
 800990a:	0092      	lsls	r2, r2, #2
 800990c:	f107 010c 	add.w	r1, r7, #12
 8009910:	300c      	adds	r0, #12
 8009912:	f7fe fa63 	bl	8007ddc <memcpy>
 8009916:	2201      	movs	r2, #1
 8009918:	4629      	mov	r1, r5
 800991a:	4620      	mov	r0, r4
 800991c:	f000 fcae 	bl	800a27c <__lshift>
 8009920:	9b00      	ldr	r3, [sp, #0]
 8009922:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009926:	9703      	str	r7, [sp, #12]
 8009928:	f003 0301 	and.w	r3, r3, #1
 800992c:	4607      	mov	r7, r0
 800992e:	9305      	str	r3, [sp, #20]
 8009930:	4631      	mov	r1, r6
 8009932:	4650      	mov	r0, sl
 8009934:	f7ff fa60 	bl	8008df8 <quorem>
 8009938:	9903      	ldr	r1, [sp, #12]
 800993a:	4605      	mov	r5, r0
 800993c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009940:	4650      	mov	r0, sl
 8009942:	f000 fcec 	bl	800a31e <__mcmp>
 8009946:	463a      	mov	r2, r7
 8009948:	9000      	str	r0, [sp, #0]
 800994a:	4631      	mov	r1, r6
 800994c:	4620      	mov	r0, r4
 800994e:	f000 fd00 	bl	800a352 <__mdiff>
 8009952:	68c3      	ldr	r3, [r0, #12]
 8009954:	4602      	mov	r2, r0
 8009956:	bb03      	cbnz	r3, 800999a <_dtoa_r+0xa8a>
 8009958:	4601      	mov	r1, r0
 800995a:	9006      	str	r0, [sp, #24]
 800995c:	4650      	mov	r0, sl
 800995e:	f000 fcde 	bl	800a31e <__mcmp>
 8009962:	9a06      	ldr	r2, [sp, #24]
 8009964:	4603      	mov	r3, r0
 8009966:	4611      	mov	r1, r2
 8009968:	4620      	mov	r0, r4
 800996a:	9306      	str	r3, [sp, #24]
 800996c:	f000 fb02 	bl	8009f74 <_Bfree>
 8009970:	9b06      	ldr	r3, [sp, #24]
 8009972:	b9a3      	cbnz	r3, 800999e <_dtoa_r+0xa8e>
 8009974:	9a07      	ldr	r2, [sp, #28]
 8009976:	b992      	cbnz	r2, 800999e <_dtoa_r+0xa8e>
 8009978:	9a05      	ldr	r2, [sp, #20]
 800997a:	b982      	cbnz	r2, 800999e <_dtoa_r+0xa8e>
 800997c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009980:	d029      	beq.n	80099d6 <_dtoa_r+0xac6>
 8009982:	9b00      	ldr	r3, [sp, #0]
 8009984:	2b00      	cmp	r3, #0
 8009986:	dd01      	ble.n	800998c <_dtoa_r+0xa7c>
 8009988:	f105 0931 	add.w	r9, r5, #49	; 0x31
 800998c:	f108 0501 	add.w	r5, r8, #1
 8009990:	f888 9000 	strb.w	r9, [r8]
 8009994:	e753      	b.n	800983e <_dtoa_r+0x92e>
 8009996:	4638      	mov	r0, r7
 8009998:	e7c2      	b.n	8009920 <_dtoa_r+0xa10>
 800999a:	2301      	movs	r3, #1
 800999c:	e7e3      	b.n	8009966 <_dtoa_r+0xa56>
 800999e:	9a00      	ldr	r2, [sp, #0]
 80099a0:	2a00      	cmp	r2, #0
 80099a2:	db04      	blt.n	80099ae <_dtoa_r+0xa9e>
 80099a4:	d125      	bne.n	80099f2 <_dtoa_r+0xae2>
 80099a6:	9a07      	ldr	r2, [sp, #28]
 80099a8:	bb1a      	cbnz	r2, 80099f2 <_dtoa_r+0xae2>
 80099aa:	9a05      	ldr	r2, [sp, #20]
 80099ac:	bb0a      	cbnz	r2, 80099f2 <_dtoa_r+0xae2>
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	ddec      	ble.n	800998c <_dtoa_r+0xa7c>
 80099b2:	4651      	mov	r1, sl
 80099b4:	2201      	movs	r2, #1
 80099b6:	4620      	mov	r0, r4
 80099b8:	f000 fc60 	bl	800a27c <__lshift>
 80099bc:	4631      	mov	r1, r6
 80099be:	4682      	mov	sl, r0
 80099c0:	f000 fcad 	bl	800a31e <__mcmp>
 80099c4:	2800      	cmp	r0, #0
 80099c6:	dc03      	bgt.n	80099d0 <_dtoa_r+0xac0>
 80099c8:	d1e0      	bne.n	800998c <_dtoa_r+0xa7c>
 80099ca:	f019 0f01 	tst.w	r9, #1
 80099ce:	d0dd      	beq.n	800998c <_dtoa_r+0xa7c>
 80099d0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80099d4:	d1d8      	bne.n	8009988 <_dtoa_r+0xa78>
 80099d6:	2339      	movs	r3, #57	; 0x39
 80099d8:	f888 3000 	strb.w	r3, [r8]
 80099dc:	f108 0801 	add.w	r8, r8, #1
 80099e0:	4645      	mov	r5, r8
 80099e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80099e6:	2b39      	cmp	r3, #57	; 0x39
 80099e8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80099ec:	d03b      	beq.n	8009a66 <_dtoa_r+0xb56>
 80099ee:	3301      	adds	r3, #1
 80099f0:	e040      	b.n	8009a74 <_dtoa_r+0xb64>
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	f108 0501 	add.w	r5, r8, #1
 80099f8:	dd05      	ble.n	8009a06 <_dtoa_r+0xaf6>
 80099fa:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80099fe:	d0ea      	beq.n	80099d6 <_dtoa_r+0xac6>
 8009a00:	f109 0901 	add.w	r9, r9, #1
 8009a04:	e7c4      	b.n	8009990 <_dtoa_r+0xa80>
 8009a06:	9b02      	ldr	r3, [sp, #8]
 8009a08:	9a04      	ldr	r2, [sp, #16]
 8009a0a:	f805 9c01 	strb.w	r9, [r5, #-1]
 8009a0e:	1aeb      	subs	r3, r5, r3
 8009a10:	4293      	cmp	r3, r2
 8009a12:	46a8      	mov	r8, r5
 8009a14:	f43f af4b 	beq.w	80098ae <_dtoa_r+0x99e>
 8009a18:	4651      	mov	r1, sl
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	220a      	movs	r2, #10
 8009a1e:	4620      	mov	r0, r4
 8009a20:	f000 fabf 	bl	8009fa2 <__multadd>
 8009a24:	9b03      	ldr	r3, [sp, #12]
 8009a26:	9903      	ldr	r1, [sp, #12]
 8009a28:	42bb      	cmp	r3, r7
 8009a2a:	4682      	mov	sl, r0
 8009a2c:	f04f 0300 	mov.w	r3, #0
 8009a30:	f04f 020a 	mov.w	r2, #10
 8009a34:	4620      	mov	r0, r4
 8009a36:	d104      	bne.n	8009a42 <_dtoa_r+0xb32>
 8009a38:	f000 fab3 	bl	8009fa2 <__multadd>
 8009a3c:	9003      	str	r0, [sp, #12]
 8009a3e:	4607      	mov	r7, r0
 8009a40:	e776      	b.n	8009930 <_dtoa_r+0xa20>
 8009a42:	f000 faae 	bl	8009fa2 <__multadd>
 8009a46:	2300      	movs	r3, #0
 8009a48:	9003      	str	r0, [sp, #12]
 8009a4a:	220a      	movs	r2, #10
 8009a4c:	4639      	mov	r1, r7
 8009a4e:	4620      	mov	r0, r4
 8009a50:	f000 faa7 	bl	8009fa2 <__multadd>
 8009a54:	e7f3      	b.n	8009a3e <_dtoa_r+0xb2e>
 8009a56:	4651      	mov	r1, sl
 8009a58:	2300      	movs	r3, #0
 8009a5a:	220a      	movs	r2, #10
 8009a5c:	4620      	mov	r0, r4
 8009a5e:	f000 faa0 	bl	8009fa2 <__multadd>
 8009a62:	4682      	mov	sl, r0
 8009a64:	e70d      	b.n	8009882 <_dtoa_r+0x972>
 8009a66:	9b02      	ldr	r3, [sp, #8]
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d105      	bne.n	8009a78 <_dtoa_r+0xb68>
 8009a6c:	9a02      	ldr	r2, [sp, #8]
 8009a6e:	f10b 0b01 	add.w	fp, fp, #1
 8009a72:	2331      	movs	r3, #49	; 0x31
 8009a74:	7013      	strb	r3, [r2, #0]
 8009a76:	e6e2      	b.n	800983e <_dtoa_r+0x92e>
 8009a78:	4615      	mov	r5, r2
 8009a7a:	e7b2      	b.n	80099e2 <_dtoa_r+0xad2>
 8009a7c:	4b09      	ldr	r3, [pc, #36]	; (8009aa4 <_dtoa_r+0xb94>)
 8009a7e:	f7ff baae 	b.w	8008fde <_dtoa_r+0xce>
 8009a82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	f47f aa88 	bne.w	8008f9a <_dtoa_r+0x8a>
 8009a8a:	4b07      	ldr	r3, [pc, #28]	; (8009aa8 <_dtoa_r+0xb98>)
 8009a8c:	f7ff baa7 	b.w	8008fde <_dtoa_r+0xce>
 8009a90:	9b04      	ldr	r3, [sp, #16]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	f73f aef4 	bgt.w	8009880 <_dtoa_r+0x970>
 8009a98:	9b07      	ldr	r3, [sp, #28]
 8009a9a:	2b02      	cmp	r3, #2
 8009a9c:	f77f aef0 	ble.w	8009880 <_dtoa_r+0x970>
 8009aa0:	e6b8      	b.n	8009814 <_dtoa_r+0x904>
 8009aa2:	bf00      	nop
 8009aa4:	0800c7be 	.word	0x0800c7be
 8009aa8:	0800c7e0 	.word	0x0800c7e0

08009aac <_localeconv_r>:
 8009aac:	4b04      	ldr	r3, [pc, #16]	; (8009ac0 <_localeconv_r+0x14>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	6a18      	ldr	r0, [r3, #32]
 8009ab2:	4b04      	ldr	r3, [pc, #16]	; (8009ac4 <_localeconv_r+0x18>)
 8009ab4:	2800      	cmp	r0, #0
 8009ab6:	bf08      	it	eq
 8009ab8:	4618      	moveq	r0, r3
 8009aba:	30f0      	adds	r0, #240	; 0xf0
 8009abc:	4770      	bx	lr
 8009abe:	bf00      	nop
 8009ac0:	20000020 	.word	0x20000020
 8009ac4:	20000524 	.word	0x20000524

08009ac8 <malloc>:
 8009ac8:	4b02      	ldr	r3, [pc, #8]	; (8009ad4 <malloc+0xc>)
 8009aca:	4601      	mov	r1, r0
 8009acc:	6818      	ldr	r0, [r3, #0]
 8009ace:	f000 b803 	b.w	8009ad8 <_malloc_r>
 8009ad2:	bf00      	nop
 8009ad4:	20000020 	.word	0x20000020

08009ad8 <_malloc_r>:
 8009ad8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009adc:	f101 040b 	add.w	r4, r1, #11
 8009ae0:	2c16      	cmp	r4, #22
 8009ae2:	4681      	mov	r9, r0
 8009ae4:	d907      	bls.n	8009af6 <_malloc_r+0x1e>
 8009ae6:	f034 0407 	bics.w	r4, r4, #7
 8009aea:	d505      	bpl.n	8009af8 <_malloc_r+0x20>
 8009aec:	230c      	movs	r3, #12
 8009aee:	f8c9 3000 	str.w	r3, [r9]
 8009af2:	2600      	movs	r6, #0
 8009af4:	e131      	b.n	8009d5a <_malloc_r+0x282>
 8009af6:	2410      	movs	r4, #16
 8009af8:	428c      	cmp	r4, r1
 8009afa:	d3f7      	bcc.n	8009aec <_malloc_r+0x14>
 8009afc:	4648      	mov	r0, r9
 8009afe:	f000 f9f9 	bl	8009ef4 <__malloc_lock>
 8009b02:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8009b06:	4d9c      	ldr	r5, [pc, #624]	; (8009d78 <_malloc_r+0x2a0>)
 8009b08:	d236      	bcs.n	8009b78 <_malloc_r+0xa0>
 8009b0a:	f104 0208 	add.w	r2, r4, #8
 8009b0e:	442a      	add	r2, r5
 8009b10:	f1a2 0108 	sub.w	r1, r2, #8
 8009b14:	6856      	ldr	r6, [r2, #4]
 8009b16:	428e      	cmp	r6, r1
 8009b18:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8009b1c:	d102      	bne.n	8009b24 <_malloc_r+0x4c>
 8009b1e:	68d6      	ldr	r6, [r2, #12]
 8009b20:	42b2      	cmp	r2, r6
 8009b22:	d010      	beq.n	8009b46 <_malloc_r+0x6e>
 8009b24:	6873      	ldr	r3, [r6, #4]
 8009b26:	68f2      	ldr	r2, [r6, #12]
 8009b28:	68b1      	ldr	r1, [r6, #8]
 8009b2a:	f023 0303 	bic.w	r3, r3, #3
 8009b2e:	60ca      	str	r2, [r1, #12]
 8009b30:	4433      	add	r3, r6
 8009b32:	6091      	str	r1, [r2, #8]
 8009b34:	685a      	ldr	r2, [r3, #4]
 8009b36:	f042 0201 	orr.w	r2, r2, #1
 8009b3a:	605a      	str	r2, [r3, #4]
 8009b3c:	4648      	mov	r0, r9
 8009b3e:	f000 f9df 	bl	8009f00 <__malloc_unlock>
 8009b42:	3608      	adds	r6, #8
 8009b44:	e109      	b.n	8009d5a <_malloc_r+0x282>
 8009b46:	3302      	adds	r3, #2
 8009b48:	4a8c      	ldr	r2, [pc, #560]	; (8009d7c <_malloc_r+0x2a4>)
 8009b4a:	692e      	ldr	r6, [r5, #16]
 8009b4c:	4296      	cmp	r6, r2
 8009b4e:	4611      	mov	r1, r2
 8009b50:	d06d      	beq.n	8009c2e <_malloc_r+0x156>
 8009b52:	6870      	ldr	r0, [r6, #4]
 8009b54:	f020 0003 	bic.w	r0, r0, #3
 8009b58:	1b07      	subs	r7, r0, r4
 8009b5a:	2f0f      	cmp	r7, #15
 8009b5c:	dd47      	ble.n	8009bee <_malloc_r+0x116>
 8009b5e:	1933      	adds	r3, r6, r4
 8009b60:	f044 0401 	orr.w	r4, r4, #1
 8009b64:	6074      	str	r4, [r6, #4]
 8009b66:	616b      	str	r3, [r5, #20]
 8009b68:	612b      	str	r3, [r5, #16]
 8009b6a:	60da      	str	r2, [r3, #12]
 8009b6c:	609a      	str	r2, [r3, #8]
 8009b6e:	f047 0201 	orr.w	r2, r7, #1
 8009b72:	605a      	str	r2, [r3, #4]
 8009b74:	5037      	str	r7, [r6, r0]
 8009b76:	e7e1      	b.n	8009b3c <_malloc_r+0x64>
 8009b78:	0a63      	lsrs	r3, r4, #9
 8009b7a:	d02a      	beq.n	8009bd2 <_malloc_r+0xfa>
 8009b7c:	2b04      	cmp	r3, #4
 8009b7e:	d812      	bhi.n	8009ba6 <_malloc_r+0xce>
 8009b80:	09a3      	lsrs	r3, r4, #6
 8009b82:	3338      	adds	r3, #56	; 0x38
 8009b84:	1c5a      	adds	r2, r3, #1
 8009b86:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8009b8a:	f1a2 0008 	sub.w	r0, r2, #8
 8009b8e:	6856      	ldr	r6, [r2, #4]
 8009b90:	4286      	cmp	r6, r0
 8009b92:	d006      	beq.n	8009ba2 <_malloc_r+0xca>
 8009b94:	6872      	ldr	r2, [r6, #4]
 8009b96:	f022 0203 	bic.w	r2, r2, #3
 8009b9a:	1b11      	subs	r1, r2, r4
 8009b9c:	290f      	cmp	r1, #15
 8009b9e:	dd1c      	ble.n	8009bda <_malloc_r+0x102>
 8009ba0:	3b01      	subs	r3, #1
 8009ba2:	3301      	adds	r3, #1
 8009ba4:	e7d0      	b.n	8009b48 <_malloc_r+0x70>
 8009ba6:	2b14      	cmp	r3, #20
 8009ba8:	d801      	bhi.n	8009bae <_malloc_r+0xd6>
 8009baa:	335b      	adds	r3, #91	; 0x5b
 8009bac:	e7ea      	b.n	8009b84 <_malloc_r+0xac>
 8009bae:	2b54      	cmp	r3, #84	; 0x54
 8009bb0:	d802      	bhi.n	8009bb8 <_malloc_r+0xe0>
 8009bb2:	0b23      	lsrs	r3, r4, #12
 8009bb4:	336e      	adds	r3, #110	; 0x6e
 8009bb6:	e7e5      	b.n	8009b84 <_malloc_r+0xac>
 8009bb8:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8009bbc:	d802      	bhi.n	8009bc4 <_malloc_r+0xec>
 8009bbe:	0be3      	lsrs	r3, r4, #15
 8009bc0:	3377      	adds	r3, #119	; 0x77
 8009bc2:	e7df      	b.n	8009b84 <_malloc_r+0xac>
 8009bc4:	f240 5254 	movw	r2, #1364	; 0x554
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d804      	bhi.n	8009bd6 <_malloc_r+0xfe>
 8009bcc:	0ca3      	lsrs	r3, r4, #18
 8009bce:	337c      	adds	r3, #124	; 0x7c
 8009bd0:	e7d8      	b.n	8009b84 <_malloc_r+0xac>
 8009bd2:	233f      	movs	r3, #63	; 0x3f
 8009bd4:	e7d6      	b.n	8009b84 <_malloc_r+0xac>
 8009bd6:	237e      	movs	r3, #126	; 0x7e
 8009bd8:	e7d4      	b.n	8009b84 <_malloc_r+0xac>
 8009bda:	2900      	cmp	r1, #0
 8009bdc:	68f1      	ldr	r1, [r6, #12]
 8009bde:	db04      	blt.n	8009bea <_malloc_r+0x112>
 8009be0:	68b3      	ldr	r3, [r6, #8]
 8009be2:	60d9      	str	r1, [r3, #12]
 8009be4:	608b      	str	r3, [r1, #8]
 8009be6:	18b3      	adds	r3, r6, r2
 8009be8:	e7a4      	b.n	8009b34 <_malloc_r+0x5c>
 8009bea:	460e      	mov	r6, r1
 8009bec:	e7d0      	b.n	8009b90 <_malloc_r+0xb8>
 8009bee:	2f00      	cmp	r7, #0
 8009bf0:	616a      	str	r2, [r5, #20]
 8009bf2:	612a      	str	r2, [r5, #16]
 8009bf4:	db05      	blt.n	8009c02 <_malloc_r+0x12a>
 8009bf6:	4430      	add	r0, r6
 8009bf8:	6843      	ldr	r3, [r0, #4]
 8009bfa:	f043 0301 	orr.w	r3, r3, #1
 8009bfe:	6043      	str	r3, [r0, #4]
 8009c00:	e79c      	b.n	8009b3c <_malloc_r+0x64>
 8009c02:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8009c06:	d244      	bcs.n	8009c92 <_malloc_r+0x1ba>
 8009c08:	08c0      	lsrs	r0, r0, #3
 8009c0a:	1087      	asrs	r7, r0, #2
 8009c0c:	2201      	movs	r2, #1
 8009c0e:	fa02 f707 	lsl.w	r7, r2, r7
 8009c12:	686a      	ldr	r2, [r5, #4]
 8009c14:	3001      	adds	r0, #1
 8009c16:	433a      	orrs	r2, r7
 8009c18:	606a      	str	r2, [r5, #4]
 8009c1a:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8009c1e:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 8009c22:	60b7      	str	r7, [r6, #8]
 8009c24:	3a08      	subs	r2, #8
 8009c26:	60f2      	str	r2, [r6, #12]
 8009c28:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8009c2c:	60fe      	str	r6, [r7, #12]
 8009c2e:	2001      	movs	r0, #1
 8009c30:	109a      	asrs	r2, r3, #2
 8009c32:	fa00 f202 	lsl.w	r2, r0, r2
 8009c36:	6868      	ldr	r0, [r5, #4]
 8009c38:	4282      	cmp	r2, r0
 8009c3a:	f200 80a1 	bhi.w	8009d80 <_malloc_r+0x2a8>
 8009c3e:	4202      	tst	r2, r0
 8009c40:	d106      	bne.n	8009c50 <_malloc_r+0x178>
 8009c42:	f023 0303 	bic.w	r3, r3, #3
 8009c46:	0052      	lsls	r2, r2, #1
 8009c48:	4202      	tst	r2, r0
 8009c4a:	f103 0304 	add.w	r3, r3, #4
 8009c4e:	d0fa      	beq.n	8009c46 <_malloc_r+0x16e>
 8009c50:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8009c54:	46e0      	mov	r8, ip
 8009c56:	469e      	mov	lr, r3
 8009c58:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8009c5c:	4546      	cmp	r6, r8
 8009c5e:	d153      	bne.n	8009d08 <_malloc_r+0x230>
 8009c60:	f10e 0e01 	add.w	lr, lr, #1
 8009c64:	f01e 0f03 	tst.w	lr, #3
 8009c68:	f108 0808 	add.w	r8, r8, #8
 8009c6c:	d1f4      	bne.n	8009c58 <_malloc_r+0x180>
 8009c6e:	0798      	lsls	r0, r3, #30
 8009c70:	d179      	bne.n	8009d66 <_malloc_r+0x28e>
 8009c72:	686b      	ldr	r3, [r5, #4]
 8009c74:	ea23 0302 	bic.w	r3, r3, r2
 8009c78:	606b      	str	r3, [r5, #4]
 8009c7a:	6868      	ldr	r0, [r5, #4]
 8009c7c:	0052      	lsls	r2, r2, #1
 8009c7e:	4282      	cmp	r2, r0
 8009c80:	d87e      	bhi.n	8009d80 <_malloc_r+0x2a8>
 8009c82:	2a00      	cmp	r2, #0
 8009c84:	d07c      	beq.n	8009d80 <_malloc_r+0x2a8>
 8009c86:	4673      	mov	r3, lr
 8009c88:	4202      	tst	r2, r0
 8009c8a:	d1e1      	bne.n	8009c50 <_malloc_r+0x178>
 8009c8c:	3304      	adds	r3, #4
 8009c8e:	0052      	lsls	r2, r2, #1
 8009c90:	e7fa      	b.n	8009c88 <_malloc_r+0x1b0>
 8009c92:	0a42      	lsrs	r2, r0, #9
 8009c94:	2a04      	cmp	r2, #4
 8009c96:	d815      	bhi.n	8009cc4 <_malloc_r+0x1ec>
 8009c98:	0982      	lsrs	r2, r0, #6
 8009c9a:	3238      	adds	r2, #56	; 0x38
 8009c9c:	1c57      	adds	r7, r2, #1
 8009c9e:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8009ca2:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8009ca6:	45be      	cmp	lr, r7
 8009ca8:	d126      	bne.n	8009cf8 <_malloc_r+0x220>
 8009caa:	2001      	movs	r0, #1
 8009cac:	1092      	asrs	r2, r2, #2
 8009cae:	fa00 f202 	lsl.w	r2, r0, r2
 8009cb2:	6868      	ldr	r0, [r5, #4]
 8009cb4:	4310      	orrs	r0, r2
 8009cb6:	6068      	str	r0, [r5, #4]
 8009cb8:	f8c6 e00c 	str.w	lr, [r6, #12]
 8009cbc:	60b7      	str	r7, [r6, #8]
 8009cbe:	f8ce 6008 	str.w	r6, [lr, #8]
 8009cc2:	e7b3      	b.n	8009c2c <_malloc_r+0x154>
 8009cc4:	2a14      	cmp	r2, #20
 8009cc6:	d801      	bhi.n	8009ccc <_malloc_r+0x1f4>
 8009cc8:	325b      	adds	r2, #91	; 0x5b
 8009cca:	e7e7      	b.n	8009c9c <_malloc_r+0x1c4>
 8009ccc:	2a54      	cmp	r2, #84	; 0x54
 8009cce:	d802      	bhi.n	8009cd6 <_malloc_r+0x1fe>
 8009cd0:	0b02      	lsrs	r2, r0, #12
 8009cd2:	326e      	adds	r2, #110	; 0x6e
 8009cd4:	e7e2      	b.n	8009c9c <_malloc_r+0x1c4>
 8009cd6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8009cda:	d802      	bhi.n	8009ce2 <_malloc_r+0x20a>
 8009cdc:	0bc2      	lsrs	r2, r0, #15
 8009cde:	3277      	adds	r2, #119	; 0x77
 8009ce0:	e7dc      	b.n	8009c9c <_malloc_r+0x1c4>
 8009ce2:	f240 5754 	movw	r7, #1364	; 0x554
 8009ce6:	42ba      	cmp	r2, r7
 8009ce8:	bf9a      	itte	ls
 8009cea:	0c82      	lsrls	r2, r0, #18
 8009cec:	327c      	addls	r2, #124	; 0x7c
 8009cee:	227e      	movhi	r2, #126	; 0x7e
 8009cf0:	e7d4      	b.n	8009c9c <_malloc_r+0x1c4>
 8009cf2:	68bf      	ldr	r7, [r7, #8]
 8009cf4:	45be      	cmp	lr, r7
 8009cf6:	d004      	beq.n	8009d02 <_malloc_r+0x22a>
 8009cf8:	687a      	ldr	r2, [r7, #4]
 8009cfa:	f022 0203 	bic.w	r2, r2, #3
 8009cfe:	4290      	cmp	r0, r2
 8009d00:	d3f7      	bcc.n	8009cf2 <_malloc_r+0x21a>
 8009d02:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8009d06:	e7d7      	b.n	8009cb8 <_malloc_r+0x1e0>
 8009d08:	6870      	ldr	r0, [r6, #4]
 8009d0a:	68f7      	ldr	r7, [r6, #12]
 8009d0c:	f020 0003 	bic.w	r0, r0, #3
 8009d10:	eba0 0a04 	sub.w	sl, r0, r4
 8009d14:	f1ba 0f0f 	cmp.w	sl, #15
 8009d18:	dd10      	ble.n	8009d3c <_malloc_r+0x264>
 8009d1a:	68b2      	ldr	r2, [r6, #8]
 8009d1c:	1933      	adds	r3, r6, r4
 8009d1e:	f044 0401 	orr.w	r4, r4, #1
 8009d22:	6074      	str	r4, [r6, #4]
 8009d24:	60d7      	str	r7, [r2, #12]
 8009d26:	60ba      	str	r2, [r7, #8]
 8009d28:	f04a 0201 	orr.w	r2, sl, #1
 8009d2c:	616b      	str	r3, [r5, #20]
 8009d2e:	612b      	str	r3, [r5, #16]
 8009d30:	60d9      	str	r1, [r3, #12]
 8009d32:	6099      	str	r1, [r3, #8]
 8009d34:	605a      	str	r2, [r3, #4]
 8009d36:	f846 a000 	str.w	sl, [r6, r0]
 8009d3a:	e6ff      	b.n	8009b3c <_malloc_r+0x64>
 8009d3c:	f1ba 0f00 	cmp.w	sl, #0
 8009d40:	db0f      	blt.n	8009d62 <_malloc_r+0x28a>
 8009d42:	4430      	add	r0, r6
 8009d44:	6843      	ldr	r3, [r0, #4]
 8009d46:	f043 0301 	orr.w	r3, r3, #1
 8009d4a:	6043      	str	r3, [r0, #4]
 8009d4c:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8009d50:	4648      	mov	r0, r9
 8009d52:	60df      	str	r7, [r3, #12]
 8009d54:	60bb      	str	r3, [r7, #8]
 8009d56:	f000 f8d3 	bl	8009f00 <__malloc_unlock>
 8009d5a:	4630      	mov	r0, r6
 8009d5c:	b003      	add	sp, #12
 8009d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d62:	463e      	mov	r6, r7
 8009d64:	e77a      	b.n	8009c5c <_malloc_r+0x184>
 8009d66:	f85c 0908 	ldr.w	r0, [ip], #-8
 8009d6a:	4584      	cmp	ip, r0
 8009d6c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8009d70:	f43f af7d 	beq.w	8009c6e <_malloc_r+0x196>
 8009d74:	e781      	b.n	8009c7a <_malloc_r+0x1a2>
 8009d76:	bf00      	nop
 8009d78:	20000114 	.word	0x20000114
 8009d7c:	2000011c 	.word	0x2000011c
 8009d80:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8009d84:	f8db 6004 	ldr.w	r6, [fp, #4]
 8009d88:	f026 0603 	bic.w	r6, r6, #3
 8009d8c:	42b4      	cmp	r4, r6
 8009d8e:	d803      	bhi.n	8009d98 <_malloc_r+0x2c0>
 8009d90:	1b33      	subs	r3, r6, r4
 8009d92:	2b0f      	cmp	r3, #15
 8009d94:	f300 8096 	bgt.w	8009ec4 <_malloc_r+0x3ec>
 8009d98:	4a4f      	ldr	r2, [pc, #316]	; (8009ed8 <_malloc_r+0x400>)
 8009d9a:	6817      	ldr	r7, [r2, #0]
 8009d9c:	4a4f      	ldr	r2, [pc, #316]	; (8009edc <_malloc_r+0x404>)
 8009d9e:	6811      	ldr	r1, [r2, #0]
 8009da0:	3710      	adds	r7, #16
 8009da2:	3101      	adds	r1, #1
 8009da4:	eb0b 0306 	add.w	r3, fp, r6
 8009da8:	4427      	add	r7, r4
 8009daa:	d005      	beq.n	8009db8 <_malloc_r+0x2e0>
 8009dac:	494c      	ldr	r1, [pc, #304]	; (8009ee0 <_malloc_r+0x408>)
 8009dae:	3901      	subs	r1, #1
 8009db0:	440f      	add	r7, r1
 8009db2:	3101      	adds	r1, #1
 8009db4:	4249      	negs	r1, r1
 8009db6:	400f      	ands	r7, r1
 8009db8:	4639      	mov	r1, r7
 8009dba:	4648      	mov	r0, r9
 8009dbc:	9201      	str	r2, [sp, #4]
 8009dbe:	9300      	str	r3, [sp, #0]
 8009dc0:	f000 fb74 	bl	800a4ac <_sbrk_r>
 8009dc4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009dc8:	4680      	mov	r8, r0
 8009dca:	d056      	beq.n	8009e7a <_malloc_r+0x3a2>
 8009dcc:	9b00      	ldr	r3, [sp, #0]
 8009dce:	9a01      	ldr	r2, [sp, #4]
 8009dd0:	4283      	cmp	r3, r0
 8009dd2:	d901      	bls.n	8009dd8 <_malloc_r+0x300>
 8009dd4:	45ab      	cmp	fp, r5
 8009dd6:	d150      	bne.n	8009e7a <_malloc_r+0x3a2>
 8009dd8:	4842      	ldr	r0, [pc, #264]	; (8009ee4 <_malloc_r+0x40c>)
 8009dda:	6801      	ldr	r1, [r0, #0]
 8009ddc:	4543      	cmp	r3, r8
 8009dde:	eb07 0e01 	add.w	lr, r7, r1
 8009de2:	f8c0 e000 	str.w	lr, [r0]
 8009de6:	4940      	ldr	r1, [pc, #256]	; (8009ee8 <_malloc_r+0x410>)
 8009de8:	4682      	mov	sl, r0
 8009dea:	d113      	bne.n	8009e14 <_malloc_r+0x33c>
 8009dec:	420b      	tst	r3, r1
 8009dee:	d111      	bne.n	8009e14 <_malloc_r+0x33c>
 8009df0:	68ab      	ldr	r3, [r5, #8]
 8009df2:	443e      	add	r6, r7
 8009df4:	f046 0601 	orr.w	r6, r6, #1
 8009df8:	605e      	str	r6, [r3, #4]
 8009dfa:	4a3c      	ldr	r2, [pc, #240]	; (8009eec <_malloc_r+0x414>)
 8009dfc:	f8da 3000 	ldr.w	r3, [sl]
 8009e00:	6811      	ldr	r1, [r2, #0]
 8009e02:	428b      	cmp	r3, r1
 8009e04:	bf88      	it	hi
 8009e06:	6013      	strhi	r3, [r2, #0]
 8009e08:	4a39      	ldr	r2, [pc, #228]	; (8009ef0 <_malloc_r+0x418>)
 8009e0a:	6811      	ldr	r1, [r2, #0]
 8009e0c:	428b      	cmp	r3, r1
 8009e0e:	bf88      	it	hi
 8009e10:	6013      	strhi	r3, [r2, #0]
 8009e12:	e032      	b.n	8009e7a <_malloc_r+0x3a2>
 8009e14:	6810      	ldr	r0, [r2, #0]
 8009e16:	3001      	adds	r0, #1
 8009e18:	bf1b      	ittet	ne
 8009e1a:	eba8 0303 	subne.w	r3, r8, r3
 8009e1e:	4473      	addne	r3, lr
 8009e20:	f8c2 8000 	streq.w	r8, [r2]
 8009e24:	f8ca 3000 	strne.w	r3, [sl]
 8009e28:	f018 0007 	ands.w	r0, r8, #7
 8009e2c:	bf1c      	itt	ne
 8009e2e:	f1c0 0008 	rsbne	r0, r0, #8
 8009e32:	4480      	addne	r8, r0
 8009e34:	4b2a      	ldr	r3, [pc, #168]	; (8009ee0 <_malloc_r+0x408>)
 8009e36:	4447      	add	r7, r8
 8009e38:	4418      	add	r0, r3
 8009e3a:	400f      	ands	r7, r1
 8009e3c:	1bc7      	subs	r7, r0, r7
 8009e3e:	4639      	mov	r1, r7
 8009e40:	4648      	mov	r0, r9
 8009e42:	f000 fb33 	bl	800a4ac <_sbrk_r>
 8009e46:	1c43      	adds	r3, r0, #1
 8009e48:	bf08      	it	eq
 8009e4a:	4640      	moveq	r0, r8
 8009e4c:	f8da 3000 	ldr.w	r3, [sl]
 8009e50:	f8c5 8008 	str.w	r8, [r5, #8]
 8009e54:	bf08      	it	eq
 8009e56:	2700      	moveq	r7, #0
 8009e58:	eba0 0008 	sub.w	r0, r0, r8
 8009e5c:	443b      	add	r3, r7
 8009e5e:	4407      	add	r7, r0
 8009e60:	f047 0701 	orr.w	r7, r7, #1
 8009e64:	45ab      	cmp	fp, r5
 8009e66:	f8ca 3000 	str.w	r3, [sl]
 8009e6a:	f8c8 7004 	str.w	r7, [r8, #4]
 8009e6e:	d0c4      	beq.n	8009dfa <_malloc_r+0x322>
 8009e70:	2e0f      	cmp	r6, #15
 8009e72:	d810      	bhi.n	8009e96 <_malloc_r+0x3be>
 8009e74:	2301      	movs	r3, #1
 8009e76:	f8c8 3004 	str.w	r3, [r8, #4]
 8009e7a:	68ab      	ldr	r3, [r5, #8]
 8009e7c:	685a      	ldr	r2, [r3, #4]
 8009e7e:	f022 0203 	bic.w	r2, r2, #3
 8009e82:	4294      	cmp	r4, r2
 8009e84:	eba2 0304 	sub.w	r3, r2, r4
 8009e88:	d801      	bhi.n	8009e8e <_malloc_r+0x3b6>
 8009e8a:	2b0f      	cmp	r3, #15
 8009e8c:	dc1a      	bgt.n	8009ec4 <_malloc_r+0x3ec>
 8009e8e:	4648      	mov	r0, r9
 8009e90:	f000 f836 	bl	8009f00 <__malloc_unlock>
 8009e94:	e62d      	b.n	8009af2 <_malloc_r+0x1a>
 8009e96:	f8db 3004 	ldr.w	r3, [fp, #4]
 8009e9a:	3e0c      	subs	r6, #12
 8009e9c:	f026 0607 	bic.w	r6, r6, #7
 8009ea0:	f003 0301 	and.w	r3, r3, #1
 8009ea4:	4333      	orrs	r3, r6
 8009ea6:	f8cb 3004 	str.w	r3, [fp, #4]
 8009eaa:	eb0b 0306 	add.w	r3, fp, r6
 8009eae:	2205      	movs	r2, #5
 8009eb0:	2e0f      	cmp	r6, #15
 8009eb2:	605a      	str	r2, [r3, #4]
 8009eb4:	609a      	str	r2, [r3, #8]
 8009eb6:	d9a0      	bls.n	8009dfa <_malloc_r+0x322>
 8009eb8:	f10b 0108 	add.w	r1, fp, #8
 8009ebc:	4648      	mov	r0, r9
 8009ebe:	f000 fc03 	bl	800a6c8 <_free_r>
 8009ec2:	e79a      	b.n	8009dfa <_malloc_r+0x322>
 8009ec4:	68ae      	ldr	r6, [r5, #8]
 8009ec6:	f044 0201 	orr.w	r2, r4, #1
 8009eca:	4434      	add	r4, r6
 8009ecc:	f043 0301 	orr.w	r3, r3, #1
 8009ed0:	6072      	str	r2, [r6, #4]
 8009ed2:	60ac      	str	r4, [r5, #8]
 8009ed4:	6063      	str	r3, [r4, #4]
 8009ed6:	e631      	b.n	8009b3c <_malloc_r+0x64>
 8009ed8:	2000eff4 	.word	0x2000eff4
 8009edc:	2000051c 	.word	0x2000051c
 8009ee0:	00001000 	.word	0x00001000
 8009ee4:	2000efc4 	.word	0x2000efc4
 8009ee8:	00000fff 	.word	0x00000fff
 8009eec:	2000efec 	.word	0x2000efec
 8009ef0:	2000eff0 	.word	0x2000eff0

08009ef4 <__malloc_lock>:
 8009ef4:	4801      	ldr	r0, [pc, #4]	; (8009efc <__malloc_lock+0x8>)
 8009ef6:	f000 bca3 	b.w	800a840 <__retarget_lock_acquire_recursive>
 8009efa:	bf00      	nop
 8009efc:	2000f1a4 	.word	0x2000f1a4

08009f00 <__malloc_unlock>:
 8009f00:	4801      	ldr	r0, [pc, #4]	; (8009f08 <__malloc_unlock+0x8>)
 8009f02:	f000 bc9e 	b.w	800a842 <__retarget_lock_release_recursive>
 8009f06:	bf00      	nop
 8009f08:	2000f1a4 	.word	0x2000f1a4

08009f0c <_Balloc>:
 8009f0c:	b570      	push	{r4, r5, r6, lr}
 8009f0e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009f10:	4604      	mov	r4, r0
 8009f12:	460e      	mov	r6, r1
 8009f14:	b93d      	cbnz	r5, 8009f26 <_Balloc+0x1a>
 8009f16:	2010      	movs	r0, #16
 8009f18:	f7ff fdd6 	bl	8009ac8 <malloc>
 8009f1c:	6260      	str	r0, [r4, #36]	; 0x24
 8009f1e:	6045      	str	r5, [r0, #4]
 8009f20:	6085      	str	r5, [r0, #8]
 8009f22:	6005      	str	r5, [r0, #0]
 8009f24:	60c5      	str	r5, [r0, #12]
 8009f26:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009f28:	68eb      	ldr	r3, [r5, #12]
 8009f2a:	b183      	cbz	r3, 8009f4e <_Balloc+0x42>
 8009f2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f2e:	68db      	ldr	r3, [r3, #12]
 8009f30:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009f34:	b9b8      	cbnz	r0, 8009f66 <_Balloc+0x5a>
 8009f36:	2101      	movs	r1, #1
 8009f38:	fa01 f506 	lsl.w	r5, r1, r6
 8009f3c:	1d6a      	adds	r2, r5, #5
 8009f3e:	0092      	lsls	r2, r2, #2
 8009f40:	4620      	mov	r0, r4
 8009f42:	f000 fb3d 	bl	800a5c0 <_calloc_r>
 8009f46:	b160      	cbz	r0, 8009f62 <_Balloc+0x56>
 8009f48:	6046      	str	r6, [r0, #4]
 8009f4a:	6085      	str	r5, [r0, #8]
 8009f4c:	e00e      	b.n	8009f6c <_Balloc+0x60>
 8009f4e:	2221      	movs	r2, #33	; 0x21
 8009f50:	2104      	movs	r1, #4
 8009f52:	4620      	mov	r0, r4
 8009f54:	f000 fb34 	bl	800a5c0 <_calloc_r>
 8009f58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f5a:	60e8      	str	r0, [r5, #12]
 8009f5c:	68db      	ldr	r3, [r3, #12]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d1e4      	bne.n	8009f2c <_Balloc+0x20>
 8009f62:	2000      	movs	r0, #0
 8009f64:	bd70      	pop	{r4, r5, r6, pc}
 8009f66:	6802      	ldr	r2, [r0, #0]
 8009f68:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	6103      	str	r3, [r0, #16]
 8009f70:	60c3      	str	r3, [r0, #12]
 8009f72:	bd70      	pop	{r4, r5, r6, pc}

08009f74 <_Bfree>:
 8009f74:	b570      	push	{r4, r5, r6, lr}
 8009f76:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009f78:	4606      	mov	r6, r0
 8009f7a:	460d      	mov	r5, r1
 8009f7c:	b93c      	cbnz	r4, 8009f8e <_Bfree+0x1a>
 8009f7e:	2010      	movs	r0, #16
 8009f80:	f7ff fda2 	bl	8009ac8 <malloc>
 8009f84:	6270      	str	r0, [r6, #36]	; 0x24
 8009f86:	6044      	str	r4, [r0, #4]
 8009f88:	6084      	str	r4, [r0, #8]
 8009f8a:	6004      	str	r4, [r0, #0]
 8009f8c:	60c4      	str	r4, [r0, #12]
 8009f8e:	b13d      	cbz	r5, 8009fa0 <_Bfree+0x2c>
 8009f90:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009f92:	686a      	ldr	r2, [r5, #4]
 8009f94:	68db      	ldr	r3, [r3, #12]
 8009f96:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009f9a:	6029      	str	r1, [r5, #0]
 8009f9c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009fa0:	bd70      	pop	{r4, r5, r6, pc}

08009fa2 <__multadd>:
 8009fa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fa6:	690d      	ldr	r5, [r1, #16]
 8009fa8:	461f      	mov	r7, r3
 8009faa:	4606      	mov	r6, r0
 8009fac:	460c      	mov	r4, r1
 8009fae:	f101 0e14 	add.w	lr, r1, #20
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	f8de 0000 	ldr.w	r0, [lr]
 8009fb8:	b281      	uxth	r1, r0
 8009fba:	fb02 7101 	mla	r1, r2, r1, r7
 8009fbe:	0c0f      	lsrs	r7, r1, #16
 8009fc0:	0c00      	lsrs	r0, r0, #16
 8009fc2:	fb02 7000 	mla	r0, r2, r0, r7
 8009fc6:	b289      	uxth	r1, r1
 8009fc8:	3301      	adds	r3, #1
 8009fca:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009fce:	429d      	cmp	r5, r3
 8009fd0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009fd4:	f84e 1b04 	str.w	r1, [lr], #4
 8009fd8:	dcec      	bgt.n	8009fb4 <__multadd+0x12>
 8009fda:	b1d7      	cbz	r7, 800a012 <__multadd+0x70>
 8009fdc:	68a3      	ldr	r3, [r4, #8]
 8009fde:	429d      	cmp	r5, r3
 8009fe0:	db12      	blt.n	800a008 <__multadd+0x66>
 8009fe2:	6861      	ldr	r1, [r4, #4]
 8009fe4:	4630      	mov	r0, r6
 8009fe6:	3101      	adds	r1, #1
 8009fe8:	f7ff ff90 	bl	8009f0c <_Balloc>
 8009fec:	6922      	ldr	r2, [r4, #16]
 8009fee:	3202      	adds	r2, #2
 8009ff0:	f104 010c 	add.w	r1, r4, #12
 8009ff4:	4680      	mov	r8, r0
 8009ff6:	0092      	lsls	r2, r2, #2
 8009ff8:	300c      	adds	r0, #12
 8009ffa:	f7fd feef 	bl	8007ddc <memcpy>
 8009ffe:	4621      	mov	r1, r4
 800a000:	4630      	mov	r0, r6
 800a002:	f7ff ffb7 	bl	8009f74 <_Bfree>
 800a006:	4644      	mov	r4, r8
 800a008:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a00c:	3501      	adds	r5, #1
 800a00e:	615f      	str	r7, [r3, #20]
 800a010:	6125      	str	r5, [r4, #16]
 800a012:	4620      	mov	r0, r4
 800a014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a018 <__hi0bits>:
 800a018:	0c02      	lsrs	r2, r0, #16
 800a01a:	0412      	lsls	r2, r2, #16
 800a01c:	4603      	mov	r3, r0
 800a01e:	b9b2      	cbnz	r2, 800a04e <__hi0bits+0x36>
 800a020:	0403      	lsls	r3, r0, #16
 800a022:	2010      	movs	r0, #16
 800a024:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a028:	bf04      	itt	eq
 800a02a:	021b      	lsleq	r3, r3, #8
 800a02c:	3008      	addeq	r0, #8
 800a02e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a032:	bf04      	itt	eq
 800a034:	011b      	lsleq	r3, r3, #4
 800a036:	3004      	addeq	r0, #4
 800a038:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a03c:	bf04      	itt	eq
 800a03e:	009b      	lsleq	r3, r3, #2
 800a040:	3002      	addeq	r0, #2
 800a042:	2b00      	cmp	r3, #0
 800a044:	db06      	blt.n	800a054 <__hi0bits+0x3c>
 800a046:	005b      	lsls	r3, r3, #1
 800a048:	d503      	bpl.n	800a052 <__hi0bits+0x3a>
 800a04a:	3001      	adds	r0, #1
 800a04c:	4770      	bx	lr
 800a04e:	2000      	movs	r0, #0
 800a050:	e7e8      	b.n	800a024 <__hi0bits+0xc>
 800a052:	2020      	movs	r0, #32
 800a054:	4770      	bx	lr

0800a056 <__lo0bits>:
 800a056:	6803      	ldr	r3, [r0, #0]
 800a058:	f013 0207 	ands.w	r2, r3, #7
 800a05c:	4601      	mov	r1, r0
 800a05e:	d00b      	beq.n	800a078 <__lo0bits+0x22>
 800a060:	07da      	lsls	r2, r3, #31
 800a062:	d423      	bmi.n	800a0ac <__lo0bits+0x56>
 800a064:	0798      	lsls	r0, r3, #30
 800a066:	bf49      	itett	mi
 800a068:	085b      	lsrmi	r3, r3, #1
 800a06a:	089b      	lsrpl	r3, r3, #2
 800a06c:	2001      	movmi	r0, #1
 800a06e:	600b      	strmi	r3, [r1, #0]
 800a070:	bf5c      	itt	pl
 800a072:	600b      	strpl	r3, [r1, #0]
 800a074:	2002      	movpl	r0, #2
 800a076:	4770      	bx	lr
 800a078:	b298      	uxth	r0, r3
 800a07a:	b9a8      	cbnz	r0, 800a0a8 <__lo0bits+0x52>
 800a07c:	0c1b      	lsrs	r3, r3, #16
 800a07e:	2010      	movs	r0, #16
 800a080:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a084:	bf04      	itt	eq
 800a086:	0a1b      	lsreq	r3, r3, #8
 800a088:	3008      	addeq	r0, #8
 800a08a:	071a      	lsls	r2, r3, #28
 800a08c:	bf04      	itt	eq
 800a08e:	091b      	lsreq	r3, r3, #4
 800a090:	3004      	addeq	r0, #4
 800a092:	079a      	lsls	r2, r3, #30
 800a094:	bf04      	itt	eq
 800a096:	089b      	lsreq	r3, r3, #2
 800a098:	3002      	addeq	r0, #2
 800a09a:	07da      	lsls	r2, r3, #31
 800a09c:	d402      	bmi.n	800a0a4 <__lo0bits+0x4e>
 800a09e:	085b      	lsrs	r3, r3, #1
 800a0a0:	d006      	beq.n	800a0b0 <__lo0bits+0x5a>
 800a0a2:	3001      	adds	r0, #1
 800a0a4:	600b      	str	r3, [r1, #0]
 800a0a6:	4770      	bx	lr
 800a0a8:	4610      	mov	r0, r2
 800a0aa:	e7e9      	b.n	800a080 <__lo0bits+0x2a>
 800a0ac:	2000      	movs	r0, #0
 800a0ae:	4770      	bx	lr
 800a0b0:	2020      	movs	r0, #32
 800a0b2:	4770      	bx	lr

0800a0b4 <__i2b>:
 800a0b4:	b510      	push	{r4, lr}
 800a0b6:	460c      	mov	r4, r1
 800a0b8:	2101      	movs	r1, #1
 800a0ba:	f7ff ff27 	bl	8009f0c <_Balloc>
 800a0be:	2201      	movs	r2, #1
 800a0c0:	6144      	str	r4, [r0, #20]
 800a0c2:	6102      	str	r2, [r0, #16]
 800a0c4:	bd10      	pop	{r4, pc}

0800a0c6 <__multiply>:
 800a0c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0ca:	4614      	mov	r4, r2
 800a0cc:	690a      	ldr	r2, [r1, #16]
 800a0ce:	6923      	ldr	r3, [r4, #16]
 800a0d0:	429a      	cmp	r2, r3
 800a0d2:	bfb8      	it	lt
 800a0d4:	460b      	movlt	r3, r1
 800a0d6:	4689      	mov	r9, r1
 800a0d8:	bfbc      	itt	lt
 800a0da:	46a1      	movlt	r9, r4
 800a0dc:	461c      	movlt	r4, r3
 800a0de:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a0e2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a0e6:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800a0ea:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a0ee:	eb07 060a 	add.w	r6, r7, sl
 800a0f2:	429e      	cmp	r6, r3
 800a0f4:	bfc8      	it	gt
 800a0f6:	3101      	addgt	r1, #1
 800a0f8:	f7ff ff08 	bl	8009f0c <_Balloc>
 800a0fc:	f100 0514 	add.w	r5, r0, #20
 800a100:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a104:	462b      	mov	r3, r5
 800a106:	2200      	movs	r2, #0
 800a108:	4543      	cmp	r3, r8
 800a10a:	d316      	bcc.n	800a13a <__multiply+0x74>
 800a10c:	f104 0214 	add.w	r2, r4, #20
 800a110:	f109 0114 	add.w	r1, r9, #20
 800a114:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 800a118:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a11c:	9301      	str	r3, [sp, #4]
 800a11e:	9c01      	ldr	r4, [sp, #4]
 800a120:	4294      	cmp	r4, r2
 800a122:	4613      	mov	r3, r2
 800a124:	d80c      	bhi.n	800a140 <__multiply+0x7a>
 800a126:	2e00      	cmp	r6, #0
 800a128:	dd03      	ble.n	800a132 <__multiply+0x6c>
 800a12a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d054      	beq.n	800a1dc <__multiply+0x116>
 800a132:	6106      	str	r6, [r0, #16]
 800a134:	b003      	add	sp, #12
 800a136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a13a:	f843 2b04 	str.w	r2, [r3], #4
 800a13e:	e7e3      	b.n	800a108 <__multiply+0x42>
 800a140:	f8b3 a000 	ldrh.w	sl, [r3]
 800a144:	3204      	adds	r2, #4
 800a146:	f1ba 0f00 	cmp.w	sl, #0
 800a14a:	d020      	beq.n	800a18e <__multiply+0xc8>
 800a14c:	46ae      	mov	lr, r5
 800a14e:	4689      	mov	r9, r1
 800a150:	f04f 0c00 	mov.w	ip, #0
 800a154:	f859 4b04 	ldr.w	r4, [r9], #4
 800a158:	f8be b000 	ldrh.w	fp, [lr]
 800a15c:	b2a3      	uxth	r3, r4
 800a15e:	fb0a b303 	mla	r3, sl, r3, fp
 800a162:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 800a166:	f8de 4000 	ldr.w	r4, [lr]
 800a16a:	4463      	add	r3, ip
 800a16c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800a170:	fb0a c40b 	mla	r4, sl, fp, ip
 800a174:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a178:	b29b      	uxth	r3, r3
 800a17a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a17e:	454f      	cmp	r7, r9
 800a180:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800a184:	f84e 3b04 	str.w	r3, [lr], #4
 800a188:	d8e4      	bhi.n	800a154 <__multiply+0x8e>
 800a18a:	f8ce c000 	str.w	ip, [lr]
 800a18e:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 800a192:	f1b9 0f00 	cmp.w	r9, #0
 800a196:	d01f      	beq.n	800a1d8 <__multiply+0x112>
 800a198:	682b      	ldr	r3, [r5, #0]
 800a19a:	46ae      	mov	lr, r5
 800a19c:	468c      	mov	ip, r1
 800a19e:	f04f 0a00 	mov.w	sl, #0
 800a1a2:	f8bc 4000 	ldrh.w	r4, [ip]
 800a1a6:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a1aa:	fb09 b404 	mla	r4, r9, r4, fp
 800a1ae:	44a2      	add	sl, r4
 800a1b0:	b29b      	uxth	r3, r3
 800a1b2:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 800a1b6:	f84e 3b04 	str.w	r3, [lr], #4
 800a1ba:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a1be:	f8be 4000 	ldrh.w	r4, [lr]
 800a1c2:	0c1b      	lsrs	r3, r3, #16
 800a1c4:	fb09 4303 	mla	r3, r9, r3, r4
 800a1c8:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 800a1cc:	4567      	cmp	r7, ip
 800a1ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a1d2:	d8e6      	bhi.n	800a1a2 <__multiply+0xdc>
 800a1d4:	f8ce 3000 	str.w	r3, [lr]
 800a1d8:	3504      	adds	r5, #4
 800a1da:	e7a0      	b.n	800a11e <__multiply+0x58>
 800a1dc:	3e01      	subs	r6, #1
 800a1de:	e7a2      	b.n	800a126 <__multiply+0x60>

0800a1e0 <__pow5mult>:
 800a1e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1e4:	4615      	mov	r5, r2
 800a1e6:	f012 0203 	ands.w	r2, r2, #3
 800a1ea:	4606      	mov	r6, r0
 800a1ec:	460f      	mov	r7, r1
 800a1ee:	d007      	beq.n	800a200 <__pow5mult+0x20>
 800a1f0:	3a01      	subs	r2, #1
 800a1f2:	4c21      	ldr	r4, [pc, #132]	; (800a278 <__pow5mult+0x98>)
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a1fa:	f7ff fed2 	bl	8009fa2 <__multadd>
 800a1fe:	4607      	mov	r7, r0
 800a200:	10ad      	asrs	r5, r5, #2
 800a202:	d035      	beq.n	800a270 <__pow5mult+0x90>
 800a204:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a206:	b93c      	cbnz	r4, 800a218 <__pow5mult+0x38>
 800a208:	2010      	movs	r0, #16
 800a20a:	f7ff fc5d 	bl	8009ac8 <malloc>
 800a20e:	6270      	str	r0, [r6, #36]	; 0x24
 800a210:	6044      	str	r4, [r0, #4]
 800a212:	6084      	str	r4, [r0, #8]
 800a214:	6004      	str	r4, [r0, #0]
 800a216:	60c4      	str	r4, [r0, #12]
 800a218:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a21c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a220:	b94c      	cbnz	r4, 800a236 <__pow5mult+0x56>
 800a222:	f240 2171 	movw	r1, #625	; 0x271
 800a226:	4630      	mov	r0, r6
 800a228:	f7ff ff44 	bl	800a0b4 <__i2b>
 800a22c:	2300      	movs	r3, #0
 800a22e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a232:	4604      	mov	r4, r0
 800a234:	6003      	str	r3, [r0, #0]
 800a236:	f04f 0800 	mov.w	r8, #0
 800a23a:	07eb      	lsls	r3, r5, #31
 800a23c:	d50a      	bpl.n	800a254 <__pow5mult+0x74>
 800a23e:	4639      	mov	r1, r7
 800a240:	4622      	mov	r2, r4
 800a242:	4630      	mov	r0, r6
 800a244:	f7ff ff3f 	bl	800a0c6 <__multiply>
 800a248:	4639      	mov	r1, r7
 800a24a:	4681      	mov	r9, r0
 800a24c:	4630      	mov	r0, r6
 800a24e:	f7ff fe91 	bl	8009f74 <_Bfree>
 800a252:	464f      	mov	r7, r9
 800a254:	106d      	asrs	r5, r5, #1
 800a256:	d00b      	beq.n	800a270 <__pow5mult+0x90>
 800a258:	6820      	ldr	r0, [r4, #0]
 800a25a:	b938      	cbnz	r0, 800a26c <__pow5mult+0x8c>
 800a25c:	4622      	mov	r2, r4
 800a25e:	4621      	mov	r1, r4
 800a260:	4630      	mov	r0, r6
 800a262:	f7ff ff30 	bl	800a0c6 <__multiply>
 800a266:	6020      	str	r0, [r4, #0]
 800a268:	f8c0 8000 	str.w	r8, [r0]
 800a26c:	4604      	mov	r4, r0
 800a26e:	e7e4      	b.n	800a23a <__pow5mult+0x5a>
 800a270:	4638      	mov	r0, r7
 800a272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a276:	bf00      	nop
 800a278:	0800c8e0 	.word	0x0800c8e0

0800a27c <__lshift>:
 800a27c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a280:	460c      	mov	r4, r1
 800a282:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a286:	6923      	ldr	r3, [r4, #16]
 800a288:	6849      	ldr	r1, [r1, #4]
 800a28a:	eb0a 0903 	add.w	r9, sl, r3
 800a28e:	68a3      	ldr	r3, [r4, #8]
 800a290:	4607      	mov	r7, r0
 800a292:	4616      	mov	r6, r2
 800a294:	f109 0501 	add.w	r5, r9, #1
 800a298:	42ab      	cmp	r3, r5
 800a29a:	db31      	blt.n	800a300 <__lshift+0x84>
 800a29c:	4638      	mov	r0, r7
 800a29e:	f7ff fe35 	bl	8009f0c <_Balloc>
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	4680      	mov	r8, r0
 800a2a6:	f100 0314 	add.w	r3, r0, #20
 800a2aa:	4611      	mov	r1, r2
 800a2ac:	4552      	cmp	r2, sl
 800a2ae:	db2a      	blt.n	800a306 <__lshift+0x8a>
 800a2b0:	6920      	ldr	r0, [r4, #16]
 800a2b2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a2b6:	f104 0114 	add.w	r1, r4, #20
 800a2ba:	f016 021f 	ands.w	r2, r6, #31
 800a2be:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800a2c2:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 800a2c6:	d022      	beq.n	800a30e <__lshift+0x92>
 800a2c8:	f1c2 0c20 	rsb	ip, r2, #32
 800a2cc:	2000      	movs	r0, #0
 800a2ce:	680e      	ldr	r6, [r1, #0]
 800a2d0:	4096      	lsls	r6, r2
 800a2d2:	4330      	orrs	r0, r6
 800a2d4:	f843 0b04 	str.w	r0, [r3], #4
 800a2d8:	f851 0b04 	ldr.w	r0, [r1], #4
 800a2dc:	458e      	cmp	lr, r1
 800a2de:	fa20 f00c 	lsr.w	r0, r0, ip
 800a2e2:	d8f4      	bhi.n	800a2ce <__lshift+0x52>
 800a2e4:	6018      	str	r0, [r3, #0]
 800a2e6:	b108      	cbz	r0, 800a2ec <__lshift+0x70>
 800a2e8:	f109 0502 	add.w	r5, r9, #2
 800a2ec:	3d01      	subs	r5, #1
 800a2ee:	4638      	mov	r0, r7
 800a2f0:	f8c8 5010 	str.w	r5, [r8, #16]
 800a2f4:	4621      	mov	r1, r4
 800a2f6:	f7ff fe3d 	bl	8009f74 <_Bfree>
 800a2fa:	4640      	mov	r0, r8
 800a2fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a300:	3101      	adds	r1, #1
 800a302:	005b      	lsls	r3, r3, #1
 800a304:	e7c8      	b.n	800a298 <__lshift+0x1c>
 800a306:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a30a:	3201      	adds	r2, #1
 800a30c:	e7ce      	b.n	800a2ac <__lshift+0x30>
 800a30e:	3b04      	subs	r3, #4
 800a310:	f851 2b04 	ldr.w	r2, [r1], #4
 800a314:	f843 2f04 	str.w	r2, [r3, #4]!
 800a318:	458e      	cmp	lr, r1
 800a31a:	d8f9      	bhi.n	800a310 <__lshift+0x94>
 800a31c:	e7e6      	b.n	800a2ec <__lshift+0x70>

0800a31e <__mcmp>:
 800a31e:	6903      	ldr	r3, [r0, #16]
 800a320:	690a      	ldr	r2, [r1, #16]
 800a322:	1a9b      	subs	r3, r3, r2
 800a324:	b530      	push	{r4, r5, lr}
 800a326:	d10c      	bne.n	800a342 <__mcmp+0x24>
 800a328:	0092      	lsls	r2, r2, #2
 800a32a:	3014      	adds	r0, #20
 800a32c:	3114      	adds	r1, #20
 800a32e:	1884      	adds	r4, r0, r2
 800a330:	4411      	add	r1, r2
 800a332:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a336:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a33a:	4295      	cmp	r5, r2
 800a33c:	d003      	beq.n	800a346 <__mcmp+0x28>
 800a33e:	d305      	bcc.n	800a34c <__mcmp+0x2e>
 800a340:	2301      	movs	r3, #1
 800a342:	4618      	mov	r0, r3
 800a344:	bd30      	pop	{r4, r5, pc}
 800a346:	42a0      	cmp	r0, r4
 800a348:	d3f3      	bcc.n	800a332 <__mcmp+0x14>
 800a34a:	e7fa      	b.n	800a342 <__mcmp+0x24>
 800a34c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a350:	e7f7      	b.n	800a342 <__mcmp+0x24>

0800a352 <__mdiff>:
 800a352:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a356:	460d      	mov	r5, r1
 800a358:	4607      	mov	r7, r0
 800a35a:	4611      	mov	r1, r2
 800a35c:	4628      	mov	r0, r5
 800a35e:	4614      	mov	r4, r2
 800a360:	f7ff ffdd 	bl	800a31e <__mcmp>
 800a364:	1e06      	subs	r6, r0, #0
 800a366:	d108      	bne.n	800a37a <__mdiff+0x28>
 800a368:	4631      	mov	r1, r6
 800a36a:	4638      	mov	r0, r7
 800a36c:	f7ff fdce 	bl	8009f0c <_Balloc>
 800a370:	2301      	movs	r3, #1
 800a372:	6103      	str	r3, [r0, #16]
 800a374:	6146      	str	r6, [r0, #20]
 800a376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a37a:	bfa4      	itt	ge
 800a37c:	4623      	movge	r3, r4
 800a37e:	462c      	movge	r4, r5
 800a380:	4638      	mov	r0, r7
 800a382:	6861      	ldr	r1, [r4, #4]
 800a384:	bfa6      	itte	ge
 800a386:	461d      	movge	r5, r3
 800a388:	2600      	movge	r6, #0
 800a38a:	2601      	movlt	r6, #1
 800a38c:	f7ff fdbe 	bl	8009f0c <_Balloc>
 800a390:	692b      	ldr	r3, [r5, #16]
 800a392:	60c6      	str	r6, [r0, #12]
 800a394:	6926      	ldr	r6, [r4, #16]
 800a396:	f105 0914 	add.w	r9, r5, #20
 800a39a:	f104 0214 	add.w	r2, r4, #20
 800a39e:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a3a2:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a3a6:	f100 0514 	add.w	r5, r0, #20
 800a3aa:	f04f 0c00 	mov.w	ip, #0
 800a3ae:	f852 ab04 	ldr.w	sl, [r2], #4
 800a3b2:	f859 4b04 	ldr.w	r4, [r9], #4
 800a3b6:	fa1c f18a 	uxtah	r1, ip, sl
 800a3ba:	b2a3      	uxth	r3, r4
 800a3bc:	1ac9      	subs	r1, r1, r3
 800a3be:	0c23      	lsrs	r3, r4, #16
 800a3c0:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800a3c4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a3c8:	b289      	uxth	r1, r1
 800a3ca:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800a3ce:	45c8      	cmp	r8, r9
 800a3d0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a3d4:	4696      	mov	lr, r2
 800a3d6:	f845 3b04 	str.w	r3, [r5], #4
 800a3da:	d8e8      	bhi.n	800a3ae <__mdiff+0x5c>
 800a3dc:	45be      	cmp	lr, r7
 800a3de:	d305      	bcc.n	800a3ec <__mdiff+0x9a>
 800a3e0:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800a3e4:	b18b      	cbz	r3, 800a40a <__mdiff+0xb8>
 800a3e6:	6106      	str	r6, [r0, #16]
 800a3e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3ec:	f85e 1b04 	ldr.w	r1, [lr], #4
 800a3f0:	fa1c f381 	uxtah	r3, ip, r1
 800a3f4:	141a      	asrs	r2, r3, #16
 800a3f6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a3fa:	b29b      	uxth	r3, r3
 800a3fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a400:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a404:	f845 3b04 	str.w	r3, [r5], #4
 800a408:	e7e8      	b.n	800a3dc <__mdiff+0x8a>
 800a40a:	3e01      	subs	r6, #1
 800a40c:	e7e8      	b.n	800a3e0 <__mdiff+0x8e>

0800a40e <__d2b>:
 800a40e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a412:	460e      	mov	r6, r1
 800a414:	2101      	movs	r1, #1
 800a416:	ec59 8b10 	vmov	r8, r9, d0
 800a41a:	4615      	mov	r5, r2
 800a41c:	f7ff fd76 	bl	8009f0c <_Balloc>
 800a420:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a424:	4607      	mov	r7, r0
 800a426:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a42a:	bb34      	cbnz	r4, 800a47a <__d2b+0x6c>
 800a42c:	9301      	str	r3, [sp, #4]
 800a42e:	f1b8 0f00 	cmp.w	r8, #0
 800a432:	d027      	beq.n	800a484 <__d2b+0x76>
 800a434:	a802      	add	r0, sp, #8
 800a436:	f840 8d08 	str.w	r8, [r0, #-8]!
 800a43a:	f7ff fe0c 	bl	800a056 <__lo0bits>
 800a43e:	9900      	ldr	r1, [sp, #0]
 800a440:	b1f0      	cbz	r0, 800a480 <__d2b+0x72>
 800a442:	9a01      	ldr	r2, [sp, #4]
 800a444:	f1c0 0320 	rsb	r3, r0, #32
 800a448:	fa02 f303 	lsl.w	r3, r2, r3
 800a44c:	430b      	orrs	r3, r1
 800a44e:	40c2      	lsrs	r2, r0
 800a450:	617b      	str	r3, [r7, #20]
 800a452:	9201      	str	r2, [sp, #4]
 800a454:	9b01      	ldr	r3, [sp, #4]
 800a456:	61bb      	str	r3, [r7, #24]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	bf14      	ite	ne
 800a45c:	2102      	movne	r1, #2
 800a45e:	2101      	moveq	r1, #1
 800a460:	6139      	str	r1, [r7, #16]
 800a462:	b1c4      	cbz	r4, 800a496 <__d2b+0x88>
 800a464:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a468:	4404      	add	r4, r0
 800a46a:	6034      	str	r4, [r6, #0]
 800a46c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a470:	6028      	str	r0, [r5, #0]
 800a472:	4638      	mov	r0, r7
 800a474:	b003      	add	sp, #12
 800a476:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a47a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a47e:	e7d5      	b.n	800a42c <__d2b+0x1e>
 800a480:	6179      	str	r1, [r7, #20]
 800a482:	e7e7      	b.n	800a454 <__d2b+0x46>
 800a484:	a801      	add	r0, sp, #4
 800a486:	f7ff fde6 	bl	800a056 <__lo0bits>
 800a48a:	9b01      	ldr	r3, [sp, #4]
 800a48c:	617b      	str	r3, [r7, #20]
 800a48e:	2101      	movs	r1, #1
 800a490:	6139      	str	r1, [r7, #16]
 800a492:	3020      	adds	r0, #32
 800a494:	e7e5      	b.n	800a462 <__d2b+0x54>
 800a496:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a49a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a49e:	6030      	str	r0, [r6, #0]
 800a4a0:	6918      	ldr	r0, [r3, #16]
 800a4a2:	f7ff fdb9 	bl	800a018 <__hi0bits>
 800a4a6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a4aa:	e7e1      	b.n	800a470 <__d2b+0x62>

0800a4ac <_sbrk_r>:
 800a4ac:	b538      	push	{r3, r4, r5, lr}
 800a4ae:	4c06      	ldr	r4, [pc, #24]	; (800a4c8 <_sbrk_r+0x1c>)
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	4605      	mov	r5, r0
 800a4b4:	4608      	mov	r0, r1
 800a4b6:	6023      	str	r3, [r4, #0]
 800a4b8:	f7fd fbfa 	bl	8007cb0 <_sbrk>
 800a4bc:	1c43      	adds	r3, r0, #1
 800a4be:	d102      	bne.n	800a4c6 <_sbrk_r+0x1a>
 800a4c0:	6823      	ldr	r3, [r4, #0]
 800a4c2:	b103      	cbz	r3, 800a4c6 <_sbrk_r+0x1a>
 800a4c4:	602b      	str	r3, [r5, #0]
 800a4c6:	bd38      	pop	{r3, r4, r5, pc}
 800a4c8:	2000f1ac 	.word	0x2000f1ac

0800a4cc <__ssprint_r>:
 800a4cc:	6893      	ldr	r3, [r2, #8]
 800a4ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4d2:	4681      	mov	r9, r0
 800a4d4:	460c      	mov	r4, r1
 800a4d6:	4617      	mov	r7, r2
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d060      	beq.n	800a59e <__ssprint_r+0xd2>
 800a4dc:	f04f 0b00 	mov.w	fp, #0
 800a4e0:	f8d2 a000 	ldr.w	sl, [r2]
 800a4e4:	465e      	mov	r6, fp
 800a4e6:	b356      	cbz	r6, 800a53e <__ssprint_r+0x72>
 800a4e8:	68a3      	ldr	r3, [r4, #8]
 800a4ea:	429e      	cmp	r6, r3
 800a4ec:	d344      	bcc.n	800a578 <__ssprint_r+0xac>
 800a4ee:	89a2      	ldrh	r2, [r4, #12]
 800a4f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a4f4:	d03e      	beq.n	800a574 <__ssprint_r+0xa8>
 800a4f6:	6825      	ldr	r5, [r4, #0]
 800a4f8:	6921      	ldr	r1, [r4, #16]
 800a4fa:	eba5 0801 	sub.w	r8, r5, r1
 800a4fe:	6965      	ldr	r5, [r4, #20]
 800a500:	2302      	movs	r3, #2
 800a502:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a506:	fb95 f5f3 	sdiv	r5, r5, r3
 800a50a:	f108 0301 	add.w	r3, r8, #1
 800a50e:	4433      	add	r3, r6
 800a510:	429d      	cmp	r5, r3
 800a512:	bf38      	it	cc
 800a514:	461d      	movcc	r5, r3
 800a516:	0553      	lsls	r3, r2, #21
 800a518:	d546      	bpl.n	800a5a8 <__ssprint_r+0xdc>
 800a51a:	4629      	mov	r1, r5
 800a51c:	4648      	mov	r0, r9
 800a51e:	f7ff fadb 	bl	8009ad8 <_malloc_r>
 800a522:	b998      	cbnz	r0, 800a54c <__ssprint_r+0x80>
 800a524:	230c      	movs	r3, #12
 800a526:	f8c9 3000 	str.w	r3, [r9]
 800a52a:	89a3      	ldrh	r3, [r4, #12]
 800a52c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a530:	81a3      	strh	r3, [r4, #12]
 800a532:	2300      	movs	r3, #0
 800a534:	60bb      	str	r3, [r7, #8]
 800a536:	607b      	str	r3, [r7, #4]
 800a538:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a53c:	e031      	b.n	800a5a2 <__ssprint_r+0xd6>
 800a53e:	f8da b000 	ldr.w	fp, [sl]
 800a542:	f8da 6004 	ldr.w	r6, [sl, #4]
 800a546:	f10a 0a08 	add.w	sl, sl, #8
 800a54a:	e7cc      	b.n	800a4e6 <__ssprint_r+0x1a>
 800a54c:	4642      	mov	r2, r8
 800a54e:	6921      	ldr	r1, [r4, #16]
 800a550:	9001      	str	r0, [sp, #4]
 800a552:	f7fd fc43 	bl	8007ddc <memcpy>
 800a556:	89a2      	ldrh	r2, [r4, #12]
 800a558:	9b01      	ldr	r3, [sp, #4]
 800a55a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800a55e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a562:	81a2      	strh	r2, [r4, #12]
 800a564:	6123      	str	r3, [r4, #16]
 800a566:	6165      	str	r5, [r4, #20]
 800a568:	4443      	add	r3, r8
 800a56a:	eba5 0508 	sub.w	r5, r5, r8
 800a56e:	6023      	str	r3, [r4, #0]
 800a570:	60a5      	str	r5, [r4, #8]
 800a572:	4633      	mov	r3, r6
 800a574:	429e      	cmp	r6, r3
 800a576:	d200      	bcs.n	800a57a <__ssprint_r+0xae>
 800a578:	4633      	mov	r3, r6
 800a57a:	461a      	mov	r2, r3
 800a57c:	4659      	mov	r1, fp
 800a57e:	6820      	ldr	r0, [r4, #0]
 800a580:	9301      	str	r3, [sp, #4]
 800a582:	f000 f971 	bl	800a868 <memmove>
 800a586:	68a2      	ldr	r2, [r4, #8]
 800a588:	9b01      	ldr	r3, [sp, #4]
 800a58a:	1ad2      	subs	r2, r2, r3
 800a58c:	60a2      	str	r2, [r4, #8]
 800a58e:	6822      	ldr	r2, [r4, #0]
 800a590:	4413      	add	r3, r2
 800a592:	6023      	str	r3, [r4, #0]
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	1b9e      	subs	r6, r3, r6
 800a598:	60be      	str	r6, [r7, #8]
 800a59a:	2e00      	cmp	r6, #0
 800a59c:	d1cf      	bne.n	800a53e <__ssprint_r+0x72>
 800a59e:	2000      	movs	r0, #0
 800a5a0:	6078      	str	r0, [r7, #4]
 800a5a2:	b003      	add	sp, #12
 800a5a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5a8:	462a      	mov	r2, r5
 800a5aa:	4648      	mov	r0, r9
 800a5ac:	f000 f976 	bl	800a89c <_realloc_r>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	2800      	cmp	r0, #0
 800a5b4:	d1d6      	bne.n	800a564 <__ssprint_r+0x98>
 800a5b6:	6921      	ldr	r1, [r4, #16]
 800a5b8:	4648      	mov	r0, r9
 800a5ba:	f000 f885 	bl	800a6c8 <_free_r>
 800a5be:	e7b1      	b.n	800a524 <__ssprint_r+0x58>

0800a5c0 <_calloc_r>:
 800a5c0:	b510      	push	{r4, lr}
 800a5c2:	4351      	muls	r1, r2
 800a5c4:	f7ff fa88 	bl	8009ad8 <_malloc_r>
 800a5c8:	4604      	mov	r4, r0
 800a5ca:	b198      	cbz	r0, 800a5f4 <_calloc_r+0x34>
 800a5cc:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800a5d0:	f022 0203 	bic.w	r2, r2, #3
 800a5d4:	3a04      	subs	r2, #4
 800a5d6:	2a24      	cmp	r2, #36	; 0x24
 800a5d8:	d81b      	bhi.n	800a612 <_calloc_r+0x52>
 800a5da:	2a13      	cmp	r2, #19
 800a5dc:	d917      	bls.n	800a60e <_calloc_r+0x4e>
 800a5de:	2100      	movs	r1, #0
 800a5e0:	2a1b      	cmp	r2, #27
 800a5e2:	6001      	str	r1, [r0, #0]
 800a5e4:	6041      	str	r1, [r0, #4]
 800a5e6:	d807      	bhi.n	800a5f8 <_calloc_r+0x38>
 800a5e8:	f100 0308 	add.w	r3, r0, #8
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	601a      	str	r2, [r3, #0]
 800a5f0:	605a      	str	r2, [r3, #4]
 800a5f2:	609a      	str	r2, [r3, #8]
 800a5f4:	4620      	mov	r0, r4
 800a5f6:	bd10      	pop	{r4, pc}
 800a5f8:	2a24      	cmp	r2, #36	; 0x24
 800a5fa:	6081      	str	r1, [r0, #8]
 800a5fc:	60c1      	str	r1, [r0, #12]
 800a5fe:	bf11      	iteee	ne
 800a600:	f100 0310 	addne.w	r3, r0, #16
 800a604:	6101      	streq	r1, [r0, #16]
 800a606:	f100 0318 	addeq.w	r3, r0, #24
 800a60a:	6141      	streq	r1, [r0, #20]
 800a60c:	e7ee      	b.n	800a5ec <_calloc_r+0x2c>
 800a60e:	4603      	mov	r3, r0
 800a610:	e7ec      	b.n	800a5ec <_calloc_r+0x2c>
 800a612:	2100      	movs	r1, #0
 800a614:	f7fd fbed 	bl	8007df2 <memset>
 800a618:	e7ec      	b.n	800a5f4 <_calloc_r+0x34>
	...

0800a61c <_malloc_trim_r>:
 800a61c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a620:	4f25      	ldr	r7, [pc, #148]	; (800a6b8 <_malloc_trim_r+0x9c>)
 800a622:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 800a6c4 <_malloc_trim_r+0xa8>
 800a626:	4689      	mov	r9, r1
 800a628:	4606      	mov	r6, r0
 800a62a:	f7ff fc63 	bl	8009ef4 <__malloc_lock>
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	685d      	ldr	r5, [r3, #4]
 800a632:	f1a8 0411 	sub.w	r4, r8, #17
 800a636:	f025 0503 	bic.w	r5, r5, #3
 800a63a:	eba4 0409 	sub.w	r4, r4, r9
 800a63e:	442c      	add	r4, r5
 800a640:	fbb4 f4f8 	udiv	r4, r4, r8
 800a644:	3c01      	subs	r4, #1
 800a646:	fb08 f404 	mul.w	r4, r8, r4
 800a64a:	4544      	cmp	r4, r8
 800a64c:	da05      	bge.n	800a65a <_malloc_trim_r+0x3e>
 800a64e:	4630      	mov	r0, r6
 800a650:	f7ff fc56 	bl	8009f00 <__malloc_unlock>
 800a654:	2000      	movs	r0, #0
 800a656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a65a:	2100      	movs	r1, #0
 800a65c:	4630      	mov	r0, r6
 800a65e:	f7ff ff25 	bl	800a4ac <_sbrk_r>
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	442b      	add	r3, r5
 800a666:	4298      	cmp	r0, r3
 800a668:	d1f1      	bne.n	800a64e <_malloc_trim_r+0x32>
 800a66a:	4261      	negs	r1, r4
 800a66c:	4630      	mov	r0, r6
 800a66e:	f7ff ff1d 	bl	800a4ac <_sbrk_r>
 800a672:	3001      	adds	r0, #1
 800a674:	d110      	bne.n	800a698 <_malloc_trim_r+0x7c>
 800a676:	2100      	movs	r1, #0
 800a678:	4630      	mov	r0, r6
 800a67a:	f7ff ff17 	bl	800a4ac <_sbrk_r>
 800a67e:	68ba      	ldr	r2, [r7, #8]
 800a680:	1a83      	subs	r3, r0, r2
 800a682:	2b0f      	cmp	r3, #15
 800a684:	dde3      	ble.n	800a64e <_malloc_trim_r+0x32>
 800a686:	490d      	ldr	r1, [pc, #52]	; (800a6bc <_malloc_trim_r+0xa0>)
 800a688:	6809      	ldr	r1, [r1, #0]
 800a68a:	1a40      	subs	r0, r0, r1
 800a68c:	490c      	ldr	r1, [pc, #48]	; (800a6c0 <_malloc_trim_r+0xa4>)
 800a68e:	f043 0301 	orr.w	r3, r3, #1
 800a692:	6008      	str	r0, [r1, #0]
 800a694:	6053      	str	r3, [r2, #4]
 800a696:	e7da      	b.n	800a64e <_malloc_trim_r+0x32>
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	4a09      	ldr	r2, [pc, #36]	; (800a6c0 <_malloc_trim_r+0xa4>)
 800a69c:	1b2d      	subs	r5, r5, r4
 800a69e:	f045 0501 	orr.w	r5, r5, #1
 800a6a2:	605d      	str	r5, [r3, #4]
 800a6a4:	6813      	ldr	r3, [r2, #0]
 800a6a6:	4630      	mov	r0, r6
 800a6a8:	1b1c      	subs	r4, r3, r4
 800a6aa:	6014      	str	r4, [r2, #0]
 800a6ac:	f7ff fc28 	bl	8009f00 <__malloc_unlock>
 800a6b0:	2001      	movs	r0, #1
 800a6b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6b6:	bf00      	nop
 800a6b8:	20000114 	.word	0x20000114
 800a6bc:	2000051c 	.word	0x2000051c
 800a6c0:	2000efc4 	.word	0x2000efc4
 800a6c4:	00001000 	.word	0x00001000

0800a6c8 <_free_r>:
 800a6c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6cc:	4604      	mov	r4, r0
 800a6ce:	4688      	mov	r8, r1
 800a6d0:	2900      	cmp	r1, #0
 800a6d2:	f000 80ab 	beq.w	800a82c <_free_r+0x164>
 800a6d6:	f7ff fc0d 	bl	8009ef4 <__malloc_lock>
 800a6da:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800a6de:	4d54      	ldr	r5, [pc, #336]	; (800a830 <_free_r+0x168>)
 800a6e0:	f022 0001 	bic.w	r0, r2, #1
 800a6e4:	f1a8 0308 	sub.w	r3, r8, #8
 800a6e8:	181f      	adds	r7, r3, r0
 800a6ea:	68a9      	ldr	r1, [r5, #8]
 800a6ec:	687e      	ldr	r6, [r7, #4]
 800a6ee:	428f      	cmp	r7, r1
 800a6f0:	f026 0603 	bic.w	r6, r6, #3
 800a6f4:	f002 0201 	and.w	r2, r2, #1
 800a6f8:	d11b      	bne.n	800a732 <_free_r+0x6a>
 800a6fa:	4430      	add	r0, r6
 800a6fc:	b93a      	cbnz	r2, 800a70e <_free_r+0x46>
 800a6fe:	f858 2c08 	ldr.w	r2, [r8, #-8]
 800a702:	1a9b      	subs	r3, r3, r2
 800a704:	4410      	add	r0, r2
 800a706:	6899      	ldr	r1, [r3, #8]
 800a708:	68da      	ldr	r2, [r3, #12]
 800a70a:	60ca      	str	r2, [r1, #12]
 800a70c:	6091      	str	r1, [r2, #8]
 800a70e:	f040 0201 	orr.w	r2, r0, #1
 800a712:	605a      	str	r2, [r3, #4]
 800a714:	60ab      	str	r3, [r5, #8]
 800a716:	4b47      	ldr	r3, [pc, #284]	; (800a834 <_free_r+0x16c>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	4298      	cmp	r0, r3
 800a71c:	d304      	bcc.n	800a728 <_free_r+0x60>
 800a71e:	4b46      	ldr	r3, [pc, #280]	; (800a838 <_free_r+0x170>)
 800a720:	4620      	mov	r0, r4
 800a722:	6819      	ldr	r1, [r3, #0]
 800a724:	f7ff ff7a 	bl	800a61c <_malloc_trim_r>
 800a728:	4620      	mov	r0, r4
 800a72a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a72e:	f7ff bbe7 	b.w	8009f00 <__malloc_unlock>
 800a732:	607e      	str	r6, [r7, #4]
 800a734:	2a00      	cmp	r2, #0
 800a736:	d139      	bne.n	800a7ac <_free_r+0xe4>
 800a738:	f858 1c08 	ldr.w	r1, [r8, #-8]
 800a73c:	1a5b      	subs	r3, r3, r1
 800a73e:	4408      	add	r0, r1
 800a740:	6899      	ldr	r1, [r3, #8]
 800a742:	f105 0e08 	add.w	lr, r5, #8
 800a746:	4571      	cmp	r1, lr
 800a748:	d032      	beq.n	800a7b0 <_free_r+0xe8>
 800a74a:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800a74e:	f8c1 e00c 	str.w	lr, [r1, #12]
 800a752:	f8ce 1008 	str.w	r1, [lr, #8]
 800a756:	19b9      	adds	r1, r7, r6
 800a758:	6849      	ldr	r1, [r1, #4]
 800a75a:	07c9      	lsls	r1, r1, #31
 800a75c:	d40a      	bmi.n	800a774 <_free_r+0xac>
 800a75e:	4430      	add	r0, r6
 800a760:	68b9      	ldr	r1, [r7, #8]
 800a762:	bb3a      	cbnz	r2, 800a7b4 <_free_r+0xec>
 800a764:	4e35      	ldr	r6, [pc, #212]	; (800a83c <_free_r+0x174>)
 800a766:	42b1      	cmp	r1, r6
 800a768:	d124      	bne.n	800a7b4 <_free_r+0xec>
 800a76a:	616b      	str	r3, [r5, #20]
 800a76c:	612b      	str	r3, [r5, #16]
 800a76e:	2201      	movs	r2, #1
 800a770:	60d9      	str	r1, [r3, #12]
 800a772:	6099      	str	r1, [r3, #8]
 800a774:	f040 0101 	orr.w	r1, r0, #1
 800a778:	6059      	str	r1, [r3, #4]
 800a77a:	5018      	str	r0, [r3, r0]
 800a77c:	2a00      	cmp	r2, #0
 800a77e:	d1d3      	bne.n	800a728 <_free_r+0x60>
 800a780:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800a784:	d21a      	bcs.n	800a7bc <_free_r+0xf4>
 800a786:	08c0      	lsrs	r0, r0, #3
 800a788:	1081      	asrs	r1, r0, #2
 800a78a:	2201      	movs	r2, #1
 800a78c:	408a      	lsls	r2, r1
 800a78e:	6869      	ldr	r1, [r5, #4]
 800a790:	3001      	adds	r0, #1
 800a792:	430a      	orrs	r2, r1
 800a794:	606a      	str	r2, [r5, #4]
 800a796:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800a79a:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800a79e:	6099      	str	r1, [r3, #8]
 800a7a0:	3a08      	subs	r2, #8
 800a7a2:	60da      	str	r2, [r3, #12]
 800a7a4:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 800a7a8:	60cb      	str	r3, [r1, #12]
 800a7aa:	e7bd      	b.n	800a728 <_free_r+0x60>
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	e7d2      	b.n	800a756 <_free_r+0x8e>
 800a7b0:	2201      	movs	r2, #1
 800a7b2:	e7d0      	b.n	800a756 <_free_r+0x8e>
 800a7b4:	68fe      	ldr	r6, [r7, #12]
 800a7b6:	60ce      	str	r6, [r1, #12]
 800a7b8:	60b1      	str	r1, [r6, #8]
 800a7ba:	e7db      	b.n	800a774 <_free_r+0xac>
 800a7bc:	0a42      	lsrs	r2, r0, #9
 800a7be:	2a04      	cmp	r2, #4
 800a7c0:	d813      	bhi.n	800a7ea <_free_r+0x122>
 800a7c2:	0982      	lsrs	r2, r0, #6
 800a7c4:	3238      	adds	r2, #56	; 0x38
 800a7c6:	1c51      	adds	r1, r2, #1
 800a7c8:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800a7cc:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800a7d0:	428e      	cmp	r6, r1
 800a7d2:	d124      	bne.n	800a81e <_free_r+0x156>
 800a7d4:	2001      	movs	r0, #1
 800a7d6:	1092      	asrs	r2, r2, #2
 800a7d8:	fa00 f202 	lsl.w	r2, r0, r2
 800a7dc:	6868      	ldr	r0, [r5, #4]
 800a7de:	4302      	orrs	r2, r0
 800a7e0:	606a      	str	r2, [r5, #4]
 800a7e2:	60de      	str	r6, [r3, #12]
 800a7e4:	6099      	str	r1, [r3, #8]
 800a7e6:	60b3      	str	r3, [r6, #8]
 800a7e8:	e7de      	b.n	800a7a8 <_free_r+0xe0>
 800a7ea:	2a14      	cmp	r2, #20
 800a7ec:	d801      	bhi.n	800a7f2 <_free_r+0x12a>
 800a7ee:	325b      	adds	r2, #91	; 0x5b
 800a7f0:	e7e9      	b.n	800a7c6 <_free_r+0xfe>
 800a7f2:	2a54      	cmp	r2, #84	; 0x54
 800a7f4:	d802      	bhi.n	800a7fc <_free_r+0x134>
 800a7f6:	0b02      	lsrs	r2, r0, #12
 800a7f8:	326e      	adds	r2, #110	; 0x6e
 800a7fa:	e7e4      	b.n	800a7c6 <_free_r+0xfe>
 800a7fc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800a800:	d802      	bhi.n	800a808 <_free_r+0x140>
 800a802:	0bc2      	lsrs	r2, r0, #15
 800a804:	3277      	adds	r2, #119	; 0x77
 800a806:	e7de      	b.n	800a7c6 <_free_r+0xfe>
 800a808:	f240 5154 	movw	r1, #1364	; 0x554
 800a80c:	428a      	cmp	r2, r1
 800a80e:	bf9a      	itte	ls
 800a810:	0c82      	lsrls	r2, r0, #18
 800a812:	327c      	addls	r2, #124	; 0x7c
 800a814:	227e      	movhi	r2, #126	; 0x7e
 800a816:	e7d6      	b.n	800a7c6 <_free_r+0xfe>
 800a818:	6889      	ldr	r1, [r1, #8]
 800a81a:	428e      	cmp	r6, r1
 800a81c:	d004      	beq.n	800a828 <_free_r+0x160>
 800a81e:	684a      	ldr	r2, [r1, #4]
 800a820:	f022 0203 	bic.w	r2, r2, #3
 800a824:	4290      	cmp	r0, r2
 800a826:	d3f7      	bcc.n	800a818 <_free_r+0x150>
 800a828:	68ce      	ldr	r6, [r1, #12]
 800a82a:	e7da      	b.n	800a7e2 <_free_r+0x11a>
 800a82c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a830:	20000114 	.word	0x20000114
 800a834:	20000520 	.word	0x20000520
 800a838:	2000eff4 	.word	0x2000eff4
 800a83c:	2000011c 	.word	0x2000011c

0800a840 <__retarget_lock_acquire_recursive>:
 800a840:	4770      	bx	lr

0800a842 <__retarget_lock_release_recursive>:
 800a842:	4770      	bx	lr

0800a844 <__ascii_mbtowc>:
 800a844:	b082      	sub	sp, #8
 800a846:	b901      	cbnz	r1, 800a84a <__ascii_mbtowc+0x6>
 800a848:	a901      	add	r1, sp, #4
 800a84a:	b142      	cbz	r2, 800a85e <__ascii_mbtowc+0x1a>
 800a84c:	b14b      	cbz	r3, 800a862 <__ascii_mbtowc+0x1e>
 800a84e:	7813      	ldrb	r3, [r2, #0]
 800a850:	600b      	str	r3, [r1, #0]
 800a852:	7812      	ldrb	r2, [r2, #0]
 800a854:	1c10      	adds	r0, r2, #0
 800a856:	bf18      	it	ne
 800a858:	2001      	movne	r0, #1
 800a85a:	b002      	add	sp, #8
 800a85c:	4770      	bx	lr
 800a85e:	4610      	mov	r0, r2
 800a860:	e7fb      	b.n	800a85a <__ascii_mbtowc+0x16>
 800a862:	f06f 0001 	mvn.w	r0, #1
 800a866:	e7f8      	b.n	800a85a <__ascii_mbtowc+0x16>

0800a868 <memmove>:
 800a868:	4288      	cmp	r0, r1
 800a86a:	b510      	push	{r4, lr}
 800a86c:	eb01 0302 	add.w	r3, r1, r2
 800a870:	d803      	bhi.n	800a87a <memmove+0x12>
 800a872:	1e42      	subs	r2, r0, #1
 800a874:	4299      	cmp	r1, r3
 800a876:	d10c      	bne.n	800a892 <memmove+0x2a>
 800a878:	bd10      	pop	{r4, pc}
 800a87a:	4298      	cmp	r0, r3
 800a87c:	d2f9      	bcs.n	800a872 <memmove+0xa>
 800a87e:	1881      	adds	r1, r0, r2
 800a880:	1ad2      	subs	r2, r2, r3
 800a882:	42d3      	cmn	r3, r2
 800a884:	d100      	bne.n	800a888 <memmove+0x20>
 800a886:	bd10      	pop	{r4, pc}
 800a888:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a88c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a890:	e7f7      	b.n	800a882 <memmove+0x1a>
 800a892:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a896:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a89a:	e7eb      	b.n	800a874 <memmove+0xc>

0800a89c <_realloc_r>:
 800a89c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8a0:	4682      	mov	sl, r0
 800a8a2:	460c      	mov	r4, r1
 800a8a4:	b929      	cbnz	r1, 800a8b2 <_realloc_r+0x16>
 800a8a6:	4611      	mov	r1, r2
 800a8a8:	b003      	add	sp, #12
 800a8aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8ae:	f7ff b913 	b.w	8009ad8 <_malloc_r>
 800a8b2:	9201      	str	r2, [sp, #4]
 800a8b4:	f7ff fb1e 	bl	8009ef4 <__malloc_lock>
 800a8b8:	9a01      	ldr	r2, [sp, #4]
 800a8ba:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800a8be:	f102 080b 	add.w	r8, r2, #11
 800a8c2:	f1b8 0f16 	cmp.w	r8, #22
 800a8c6:	f1a4 0908 	sub.w	r9, r4, #8
 800a8ca:	f025 0603 	bic.w	r6, r5, #3
 800a8ce:	d90a      	bls.n	800a8e6 <_realloc_r+0x4a>
 800a8d0:	f038 0807 	bics.w	r8, r8, #7
 800a8d4:	d509      	bpl.n	800a8ea <_realloc_r+0x4e>
 800a8d6:	230c      	movs	r3, #12
 800a8d8:	f8ca 3000 	str.w	r3, [sl]
 800a8dc:	2700      	movs	r7, #0
 800a8de:	4638      	mov	r0, r7
 800a8e0:	b003      	add	sp, #12
 800a8e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8e6:	f04f 0810 	mov.w	r8, #16
 800a8ea:	4590      	cmp	r8, r2
 800a8ec:	d3f3      	bcc.n	800a8d6 <_realloc_r+0x3a>
 800a8ee:	45b0      	cmp	r8, r6
 800a8f0:	f340 8145 	ble.w	800ab7e <_realloc_r+0x2e2>
 800a8f4:	4ba8      	ldr	r3, [pc, #672]	; (800ab98 <_realloc_r+0x2fc>)
 800a8f6:	f8d3 e008 	ldr.w	lr, [r3, #8]
 800a8fa:	eb09 0106 	add.w	r1, r9, r6
 800a8fe:	4571      	cmp	r1, lr
 800a900:	469b      	mov	fp, r3
 800a902:	684b      	ldr	r3, [r1, #4]
 800a904:	d005      	beq.n	800a912 <_realloc_r+0x76>
 800a906:	f023 0001 	bic.w	r0, r3, #1
 800a90a:	4408      	add	r0, r1
 800a90c:	6840      	ldr	r0, [r0, #4]
 800a90e:	07c7      	lsls	r7, r0, #31
 800a910:	d447      	bmi.n	800a9a2 <_realloc_r+0x106>
 800a912:	f023 0303 	bic.w	r3, r3, #3
 800a916:	4571      	cmp	r1, lr
 800a918:	eb06 0703 	add.w	r7, r6, r3
 800a91c:	d119      	bne.n	800a952 <_realloc_r+0xb6>
 800a91e:	f108 0010 	add.w	r0, r8, #16
 800a922:	4287      	cmp	r7, r0
 800a924:	db3f      	blt.n	800a9a6 <_realloc_r+0x10a>
 800a926:	eb09 0308 	add.w	r3, r9, r8
 800a92a:	eba7 0708 	sub.w	r7, r7, r8
 800a92e:	f047 0701 	orr.w	r7, r7, #1
 800a932:	f8cb 3008 	str.w	r3, [fp, #8]
 800a936:	605f      	str	r7, [r3, #4]
 800a938:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a93c:	f003 0301 	and.w	r3, r3, #1
 800a940:	ea43 0308 	orr.w	r3, r3, r8
 800a944:	f844 3c04 	str.w	r3, [r4, #-4]
 800a948:	4650      	mov	r0, sl
 800a94a:	f7ff fad9 	bl	8009f00 <__malloc_unlock>
 800a94e:	4627      	mov	r7, r4
 800a950:	e7c5      	b.n	800a8de <_realloc_r+0x42>
 800a952:	45b8      	cmp	r8, r7
 800a954:	dc27      	bgt.n	800a9a6 <_realloc_r+0x10a>
 800a956:	68cb      	ldr	r3, [r1, #12]
 800a958:	688a      	ldr	r2, [r1, #8]
 800a95a:	60d3      	str	r3, [r2, #12]
 800a95c:	609a      	str	r2, [r3, #8]
 800a95e:	eba7 0008 	sub.w	r0, r7, r8
 800a962:	280f      	cmp	r0, #15
 800a964:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800a968:	eb09 0207 	add.w	r2, r9, r7
 800a96c:	f240 8109 	bls.w	800ab82 <_realloc_r+0x2e6>
 800a970:	eb09 0108 	add.w	r1, r9, r8
 800a974:	f003 0301 	and.w	r3, r3, #1
 800a978:	ea43 0308 	orr.w	r3, r3, r8
 800a97c:	f040 0001 	orr.w	r0, r0, #1
 800a980:	f8c9 3004 	str.w	r3, [r9, #4]
 800a984:	6048      	str	r0, [r1, #4]
 800a986:	6853      	ldr	r3, [r2, #4]
 800a988:	f043 0301 	orr.w	r3, r3, #1
 800a98c:	6053      	str	r3, [r2, #4]
 800a98e:	3108      	adds	r1, #8
 800a990:	4650      	mov	r0, sl
 800a992:	f7ff fe99 	bl	800a6c8 <_free_r>
 800a996:	4650      	mov	r0, sl
 800a998:	f7ff fab2 	bl	8009f00 <__malloc_unlock>
 800a99c:	f109 0708 	add.w	r7, r9, #8
 800a9a0:	e79d      	b.n	800a8de <_realloc_r+0x42>
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	4619      	mov	r1, r3
 800a9a6:	07e8      	lsls	r0, r5, #31
 800a9a8:	f100 8084 	bmi.w	800aab4 <_realloc_r+0x218>
 800a9ac:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800a9b0:	eba9 0505 	sub.w	r5, r9, r5
 800a9b4:	6868      	ldr	r0, [r5, #4]
 800a9b6:	f020 0003 	bic.w	r0, r0, #3
 800a9ba:	4430      	add	r0, r6
 800a9bc:	2900      	cmp	r1, #0
 800a9be:	d076      	beq.n	800aaae <_realloc_r+0x212>
 800a9c0:	4571      	cmp	r1, lr
 800a9c2:	d150      	bne.n	800aa66 <_realloc_r+0x1ca>
 800a9c4:	4403      	add	r3, r0
 800a9c6:	f108 0110 	add.w	r1, r8, #16
 800a9ca:	428b      	cmp	r3, r1
 800a9cc:	db6f      	blt.n	800aaae <_realloc_r+0x212>
 800a9ce:	462f      	mov	r7, r5
 800a9d0:	68ea      	ldr	r2, [r5, #12]
 800a9d2:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800a9d6:	60ca      	str	r2, [r1, #12]
 800a9d8:	6091      	str	r1, [r2, #8]
 800a9da:	1f32      	subs	r2, r6, #4
 800a9dc:	2a24      	cmp	r2, #36	; 0x24
 800a9de:	d83b      	bhi.n	800aa58 <_realloc_r+0x1bc>
 800a9e0:	2a13      	cmp	r2, #19
 800a9e2:	d936      	bls.n	800aa52 <_realloc_r+0x1b6>
 800a9e4:	6821      	ldr	r1, [r4, #0]
 800a9e6:	60a9      	str	r1, [r5, #8]
 800a9e8:	6861      	ldr	r1, [r4, #4]
 800a9ea:	60e9      	str	r1, [r5, #12]
 800a9ec:	2a1b      	cmp	r2, #27
 800a9ee:	d81c      	bhi.n	800aa2a <_realloc_r+0x18e>
 800a9f0:	f105 0210 	add.w	r2, r5, #16
 800a9f4:	f104 0108 	add.w	r1, r4, #8
 800a9f8:	6808      	ldr	r0, [r1, #0]
 800a9fa:	6010      	str	r0, [r2, #0]
 800a9fc:	6848      	ldr	r0, [r1, #4]
 800a9fe:	6050      	str	r0, [r2, #4]
 800aa00:	6889      	ldr	r1, [r1, #8]
 800aa02:	6091      	str	r1, [r2, #8]
 800aa04:	eb05 0208 	add.w	r2, r5, r8
 800aa08:	eba3 0308 	sub.w	r3, r3, r8
 800aa0c:	f043 0301 	orr.w	r3, r3, #1
 800aa10:	f8cb 2008 	str.w	r2, [fp, #8]
 800aa14:	6053      	str	r3, [r2, #4]
 800aa16:	686b      	ldr	r3, [r5, #4]
 800aa18:	f003 0301 	and.w	r3, r3, #1
 800aa1c:	ea43 0308 	orr.w	r3, r3, r8
 800aa20:	606b      	str	r3, [r5, #4]
 800aa22:	4650      	mov	r0, sl
 800aa24:	f7ff fa6c 	bl	8009f00 <__malloc_unlock>
 800aa28:	e759      	b.n	800a8de <_realloc_r+0x42>
 800aa2a:	68a1      	ldr	r1, [r4, #8]
 800aa2c:	6129      	str	r1, [r5, #16]
 800aa2e:	68e1      	ldr	r1, [r4, #12]
 800aa30:	6169      	str	r1, [r5, #20]
 800aa32:	2a24      	cmp	r2, #36	; 0x24
 800aa34:	bf01      	itttt	eq
 800aa36:	6922      	ldreq	r2, [r4, #16]
 800aa38:	61aa      	streq	r2, [r5, #24]
 800aa3a:	6960      	ldreq	r0, [r4, #20]
 800aa3c:	61e8      	streq	r0, [r5, #28]
 800aa3e:	bf19      	ittee	ne
 800aa40:	f105 0218 	addne.w	r2, r5, #24
 800aa44:	f104 0110 	addne.w	r1, r4, #16
 800aa48:	f105 0220 	addeq.w	r2, r5, #32
 800aa4c:	f104 0118 	addeq.w	r1, r4, #24
 800aa50:	e7d2      	b.n	800a9f8 <_realloc_r+0x15c>
 800aa52:	463a      	mov	r2, r7
 800aa54:	4621      	mov	r1, r4
 800aa56:	e7cf      	b.n	800a9f8 <_realloc_r+0x15c>
 800aa58:	4621      	mov	r1, r4
 800aa5a:	4638      	mov	r0, r7
 800aa5c:	9301      	str	r3, [sp, #4]
 800aa5e:	f7ff ff03 	bl	800a868 <memmove>
 800aa62:	9b01      	ldr	r3, [sp, #4]
 800aa64:	e7ce      	b.n	800aa04 <_realloc_r+0x168>
 800aa66:	18c7      	adds	r7, r0, r3
 800aa68:	45b8      	cmp	r8, r7
 800aa6a:	dc20      	bgt.n	800aaae <_realloc_r+0x212>
 800aa6c:	68cb      	ldr	r3, [r1, #12]
 800aa6e:	688a      	ldr	r2, [r1, #8]
 800aa70:	60d3      	str	r3, [r2, #12]
 800aa72:	609a      	str	r2, [r3, #8]
 800aa74:	4628      	mov	r0, r5
 800aa76:	68eb      	ldr	r3, [r5, #12]
 800aa78:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800aa7c:	60d3      	str	r3, [r2, #12]
 800aa7e:	609a      	str	r2, [r3, #8]
 800aa80:	1f32      	subs	r2, r6, #4
 800aa82:	2a24      	cmp	r2, #36	; 0x24
 800aa84:	d842      	bhi.n	800ab0c <_realloc_r+0x270>
 800aa86:	2a13      	cmp	r2, #19
 800aa88:	d93e      	bls.n	800ab08 <_realloc_r+0x26c>
 800aa8a:	6823      	ldr	r3, [r4, #0]
 800aa8c:	60ab      	str	r3, [r5, #8]
 800aa8e:	6863      	ldr	r3, [r4, #4]
 800aa90:	60eb      	str	r3, [r5, #12]
 800aa92:	2a1b      	cmp	r2, #27
 800aa94:	d824      	bhi.n	800aae0 <_realloc_r+0x244>
 800aa96:	f105 0010 	add.w	r0, r5, #16
 800aa9a:	f104 0308 	add.w	r3, r4, #8
 800aa9e:	681a      	ldr	r2, [r3, #0]
 800aaa0:	6002      	str	r2, [r0, #0]
 800aaa2:	685a      	ldr	r2, [r3, #4]
 800aaa4:	6042      	str	r2, [r0, #4]
 800aaa6:	689b      	ldr	r3, [r3, #8]
 800aaa8:	6083      	str	r3, [r0, #8]
 800aaaa:	46a9      	mov	r9, r5
 800aaac:	e757      	b.n	800a95e <_realloc_r+0xc2>
 800aaae:	4580      	cmp	r8, r0
 800aab0:	4607      	mov	r7, r0
 800aab2:	dddf      	ble.n	800aa74 <_realloc_r+0x1d8>
 800aab4:	4611      	mov	r1, r2
 800aab6:	4650      	mov	r0, sl
 800aab8:	f7ff f80e 	bl	8009ad8 <_malloc_r>
 800aabc:	4607      	mov	r7, r0
 800aabe:	2800      	cmp	r0, #0
 800aac0:	d0af      	beq.n	800aa22 <_realloc_r+0x186>
 800aac2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800aac6:	f023 0301 	bic.w	r3, r3, #1
 800aaca:	f1a0 0208 	sub.w	r2, r0, #8
 800aace:	444b      	add	r3, r9
 800aad0:	429a      	cmp	r2, r3
 800aad2:	d11f      	bne.n	800ab14 <_realloc_r+0x278>
 800aad4:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800aad8:	f027 0703 	bic.w	r7, r7, #3
 800aadc:	4437      	add	r7, r6
 800aade:	e73e      	b.n	800a95e <_realloc_r+0xc2>
 800aae0:	68a3      	ldr	r3, [r4, #8]
 800aae2:	612b      	str	r3, [r5, #16]
 800aae4:	68e3      	ldr	r3, [r4, #12]
 800aae6:	616b      	str	r3, [r5, #20]
 800aae8:	2a24      	cmp	r2, #36	; 0x24
 800aaea:	bf01      	itttt	eq
 800aaec:	6923      	ldreq	r3, [r4, #16]
 800aaee:	61ab      	streq	r3, [r5, #24]
 800aaf0:	6962      	ldreq	r2, [r4, #20]
 800aaf2:	61ea      	streq	r2, [r5, #28]
 800aaf4:	bf19      	ittee	ne
 800aaf6:	f105 0018 	addne.w	r0, r5, #24
 800aafa:	f104 0310 	addne.w	r3, r4, #16
 800aafe:	f105 0020 	addeq.w	r0, r5, #32
 800ab02:	f104 0318 	addeq.w	r3, r4, #24
 800ab06:	e7ca      	b.n	800aa9e <_realloc_r+0x202>
 800ab08:	4623      	mov	r3, r4
 800ab0a:	e7c8      	b.n	800aa9e <_realloc_r+0x202>
 800ab0c:	4621      	mov	r1, r4
 800ab0e:	f7ff feab 	bl	800a868 <memmove>
 800ab12:	e7ca      	b.n	800aaaa <_realloc_r+0x20e>
 800ab14:	1f32      	subs	r2, r6, #4
 800ab16:	2a24      	cmp	r2, #36	; 0x24
 800ab18:	d82d      	bhi.n	800ab76 <_realloc_r+0x2da>
 800ab1a:	2a13      	cmp	r2, #19
 800ab1c:	d928      	bls.n	800ab70 <_realloc_r+0x2d4>
 800ab1e:	6823      	ldr	r3, [r4, #0]
 800ab20:	6003      	str	r3, [r0, #0]
 800ab22:	6863      	ldr	r3, [r4, #4]
 800ab24:	6043      	str	r3, [r0, #4]
 800ab26:	2a1b      	cmp	r2, #27
 800ab28:	d80e      	bhi.n	800ab48 <_realloc_r+0x2ac>
 800ab2a:	f100 0308 	add.w	r3, r0, #8
 800ab2e:	f104 0208 	add.w	r2, r4, #8
 800ab32:	6811      	ldr	r1, [r2, #0]
 800ab34:	6019      	str	r1, [r3, #0]
 800ab36:	6851      	ldr	r1, [r2, #4]
 800ab38:	6059      	str	r1, [r3, #4]
 800ab3a:	6892      	ldr	r2, [r2, #8]
 800ab3c:	609a      	str	r2, [r3, #8]
 800ab3e:	4621      	mov	r1, r4
 800ab40:	4650      	mov	r0, sl
 800ab42:	f7ff fdc1 	bl	800a6c8 <_free_r>
 800ab46:	e76c      	b.n	800aa22 <_realloc_r+0x186>
 800ab48:	68a3      	ldr	r3, [r4, #8]
 800ab4a:	6083      	str	r3, [r0, #8]
 800ab4c:	68e3      	ldr	r3, [r4, #12]
 800ab4e:	60c3      	str	r3, [r0, #12]
 800ab50:	2a24      	cmp	r2, #36	; 0x24
 800ab52:	bf01      	itttt	eq
 800ab54:	6923      	ldreq	r3, [r4, #16]
 800ab56:	6103      	streq	r3, [r0, #16]
 800ab58:	6961      	ldreq	r1, [r4, #20]
 800ab5a:	6141      	streq	r1, [r0, #20]
 800ab5c:	bf19      	ittee	ne
 800ab5e:	f100 0310 	addne.w	r3, r0, #16
 800ab62:	f104 0210 	addne.w	r2, r4, #16
 800ab66:	f100 0318 	addeq.w	r3, r0, #24
 800ab6a:	f104 0218 	addeq.w	r2, r4, #24
 800ab6e:	e7e0      	b.n	800ab32 <_realloc_r+0x296>
 800ab70:	4603      	mov	r3, r0
 800ab72:	4622      	mov	r2, r4
 800ab74:	e7dd      	b.n	800ab32 <_realloc_r+0x296>
 800ab76:	4621      	mov	r1, r4
 800ab78:	f7ff fe76 	bl	800a868 <memmove>
 800ab7c:	e7df      	b.n	800ab3e <_realloc_r+0x2a2>
 800ab7e:	4637      	mov	r7, r6
 800ab80:	e6ed      	b.n	800a95e <_realloc_r+0xc2>
 800ab82:	f003 0301 	and.w	r3, r3, #1
 800ab86:	431f      	orrs	r7, r3
 800ab88:	f8c9 7004 	str.w	r7, [r9, #4]
 800ab8c:	6853      	ldr	r3, [r2, #4]
 800ab8e:	f043 0301 	orr.w	r3, r3, #1
 800ab92:	6053      	str	r3, [r2, #4]
 800ab94:	e6ff      	b.n	800a996 <_realloc_r+0xfa>
 800ab96:	bf00      	nop
 800ab98:	20000114 	.word	0x20000114

0800ab9c <__ascii_wctomb>:
 800ab9c:	b149      	cbz	r1, 800abb2 <__ascii_wctomb+0x16>
 800ab9e:	2aff      	cmp	r2, #255	; 0xff
 800aba0:	bf85      	ittet	hi
 800aba2:	238a      	movhi	r3, #138	; 0x8a
 800aba4:	6003      	strhi	r3, [r0, #0]
 800aba6:	700a      	strbls	r2, [r1, #0]
 800aba8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800abac:	bf98      	it	ls
 800abae:	2001      	movls	r0, #1
 800abb0:	4770      	bx	lr
 800abb2:	4608      	mov	r0, r1
 800abb4:	4770      	bx	lr
	...

0800abb8 <_init>:
 800abb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abba:	bf00      	nop
 800abbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abbe:	bc08      	pop	{r3}
 800abc0:	469e      	mov	lr, r3
 800abc2:	4770      	bx	lr

0800abc4 <_fini>:
 800abc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abc6:	bf00      	nop
 800abc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abca:	bc08      	pop	{r3}
 800abcc:	469e      	mov	lr, r3
 800abce:	4770      	bx	lr
