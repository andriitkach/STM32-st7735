
STM32SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f74  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002908  080020fc  080020fc  000120fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004a04  08004a04  00014a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004a0c  08004a0c  00014a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004a10  08004a10  00014a10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000024  20000000  08004a14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020024  2**0
                  CONTENTS
  8 .bss          000001bc  20000024  20000024  00020024  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200001e0  200001e0  00020024  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 11 .debug_info   00010cee  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000268e  00000000  00000000  00030d42  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00008423  00000000  00000000  000333d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b50  00000000  00000000  0003b7f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e98  00000000  00000000  0003c348  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00005a03  00000000  00000000  0003d1e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00004102  00000000  00000000  00042be3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00046ce5  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002230  00000000  00000000  00046d64  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000024 	.word	0x20000024
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080020e4 	.word	0x080020e4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000028 	.word	0x20000028
 80001c4:	080020e4 	.word	0x080020e4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d8:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004da:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <HAL_Init+0x30>)
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80004e2:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004e4:	681a      	ldr	r2, [r3, #0]
 80004e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80004ea:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004ec:	681a      	ldr	r2, [r3, #0]
 80004ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80004f2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004f4:	2003      	movs	r0, #3
 80004f6:	f000 f82f 	bl	8000558 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004fa:	2000      	movs	r0, #0
 80004fc:	f001 fd30 	bl	8001f60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000500:	f001 fc60 	bl	8001dc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000504:	2000      	movs	r0, #0
 8000506:	bd08      	pop	{r3, pc}
 8000508:	40023c00 	.word	0x40023c00

0800050c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800050c:	4a03      	ldr	r2, [pc, #12]	; (800051c <HAL_IncTick+0x10>)
 800050e:	4b04      	ldr	r3, [pc, #16]	; (8000520 <HAL_IncTick+0x14>)
 8000510:	6811      	ldr	r1, [r2, #0]
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	440b      	add	r3, r1
 8000516:	6013      	str	r3, [r2, #0]
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	20000040 	.word	0x20000040
 8000520:	20000000 	.word	0x20000000

08000524 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000524:	4b01      	ldr	r3, [pc, #4]	; (800052c <HAL_GetTick+0x8>)
 8000526:	6818      	ldr	r0, [r3, #0]
}
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	20000040 	.word	0x20000040

08000530 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000530:	b538      	push	{r3, r4, r5, lr}
 8000532:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000534:	f7ff fff6 	bl	8000524 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000538:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800053a:	bf1c      	itt	ne
 800053c:	4b05      	ldrne	r3, [pc, #20]	; (8000554 <HAL_Delay+0x24>)
 800053e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000540:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000542:	bf18      	it	ne
 8000544:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000546:	f7ff ffed 	bl	8000524 <HAL_GetTick>
 800054a:	1b40      	subs	r0, r0, r5
 800054c:	4284      	cmp	r4, r0
 800054e:	d8fa      	bhi.n	8000546 <HAL_Delay+0x16>
  {
  }
}
 8000550:	bd38      	pop	{r3, r4, r5, pc}
 8000552:	bf00      	nop
 8000554:	20000000 	.word	0x20000000

08000558 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000558:	4a07      	ldr	r2, [pc, #28]	; (8000578 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800055a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800055c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000560:	041b      	lsls	r3, r3, #16
 8000562:	0c1b      	lsrs	r3, r3, #16
 8000564:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000568:	0200      	lsls	r0, r0, #8
 800056a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800056e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000572:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000574:	60d3      	str	r3, [r2, #12]
 8000576:	4770      	bx	lr
 8000578:	e000ed00 	.word	0xe000ed00

0800057c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800057c:	4b17      	ldr	r3, [pc, #92]	; (80005dc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	68dc      	ldr	r4, [r3, #12]
 8000582:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000586:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800058a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800058c:	2b04      	cmp	r3, #4
 800058e:	bf28      	it	cs
 8000590:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000592:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000594:	f04f 0501 	mov.w	r5, #1
 8000598:	fa05 f303 	lsl.w	r3, r5, r3
 800059c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005a0:	bf8c      	ite	hi
 80005a2:	3c03      	subhi	r4, #3
 80005a4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005a6:	4019      	ands	r1, r3
 80005a8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005aa:	fa05 f404 	lsl.w	r4, r5, r4
 80005ae:	3c01      	subs	r4, #1
 80005b0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80005b2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005b4:	ea42 0201 	orr.w	r2, r2, r1
 80005b8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005bc:	bfad      	iteet	ge
 80005be:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c2:	f000 000f 	andlt.w	r0, r0, #15
 80005c6:	4b06      	ldrlt	r3, [pc, #24]	; (80005e0 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005cc:	bfb5      	itete	lt
 80005ce:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	bf00      	nop
 80005dc:	e000ed00 	.word	0xe000ed00
 80005e0:	e000ed14 	.word	0xe000ed14

080005e4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80005e4:	2800      	cmp	r0, #0
 80005e6:	db08      	blt.n	80005fa <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005e8:	0942      	lsrs	r2, r0, #5
 80005ea:	2301      	movs	r3, #1
 80005ec:	f000 001f 	and.w	r0, r0, #31
 80005f0:	fa03 f000 	lsl.w	r0, r3, r0
 80005f4:	4b01      	ldr	r3, [pc, #4]	; (80005fc <HAL_NVIC_EnableIRQ+0x18>)
 80005f6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80005fa:	4770      	bx	lr
 80005fc:	e000e100 	.word	0xe000e100

08000600 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000600:	6803      	ldr	r3, [r0, #0]
 8000602:	b2da      	uxtb	r2, r3
 8000604:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000608:	f023 0303 	bic.w	r3, r3, #3
 800060c:	2118      	movs	r1, #24
 800060e:	3a10      	subs	r2, #16
 8000610:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000614:	4904      	ldr	r1, [pc, #16]	; (8000628 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8000616:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000618:	bf88      	it	hi
 800061a:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800061c:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800061e:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000620:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 8000622:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	080020fc 	.word	0x080020fc

0800062c <HAL_DMA_Init>:
{
 800062c:	b570      	push	{r4, r5, r6, lr}
 800062e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000630:	f7ff ff78 	bl	8000524 <HAL_GetTick>
 8000634:	4605      	mov	r5, r0
  if(hdma == NULL)
 8000636:	2c00      	cmp	r4, #0
 8000638:	d071      	beq.n	800071e <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 800063a:	2300      	movs	r3, #0
 800063c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8000640:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8000642:	2302      	movs	r3, #2
 8000644:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8000648:	6813      	ldr	r3, [r2, #0]
 800064a:	f023 0301 	bic.w	r3, r3, #1
 800064e:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000650:	6821      	ldr	r1, [r4, #0]
 8000652:	680b      	ldr	r3, [r1, #0]
 8000654:	07d8      	lsls	r0, r3, #31
 8000656:	d43c      	bmi.n	80006d2 <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8000658:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800065a:	4d32      	ldr	r5, [pc, #200]	; (8000724 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800065c:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800065e:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000660:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000662:	68a3      	ldr	r3, [r4, #8]
 8000664:	4313      	orrs	r3, r2
 8000666:	68e2      	ldr	r2, [r4, #12]
 8000668:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800066a:	6922      	ldr	r2, [r4, #16]
 800066c:	4313      	orrs	r3, r2
 800066e:	6962      	ldr	r2, [r4, #20]
 8000670:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000672:	69e2      	ldr	r2, [r4, #28]
 8000674:	4303      	orrs	r3, r0
 8000676:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8000678:	6a22      	ldr	r2, [r4, #32]
 800067a:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800067c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800067e:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000680:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000684:	bf01      	itttt	eq
 8000686:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 8000688:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 800068a:	4335      	orreq	r5, r6
 800068c:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 800068e:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8000690:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000692:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000694:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8000698:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800069c:	d10b      	bne.n	80006b6 <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 800069e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80006a0:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 80006a2:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80006a4:	b13d      	cbz	r5, 80006b6 <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80006a6:	b9f8      	cbnz	r0, 80006e8 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 80006a8:	2a01      	cmp	r2, #1
 80006aa:	d02d      	beq.n	8000708 <HAL_DMA_Init+0xdc>
 80006ac:	d301      	bcc.n	80006b2 <HAL_DMA_Init+0x86>
 80006ae:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80006b0:	d101      	bne.n	80006b6 <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80006b2:	01ea      	lsls	r2, r5, #7
 80006b4:	d42b      	bmi.n	800070e <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 80006b6:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80006b8:	4620      	mov	r0, r4
 80006ba:	f7ff ffa1 	bl	8000600 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80006be:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80006c0:	233f      	movs	r3, #63	; 0x3f
 80006c2:	4093      	lsls	r3, r2
 80006c4:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80006c6:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80006c8:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80006ca:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80006cc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80006d0:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80006d2:	f7ff ff27 	bl	8000524 <HAL_GetTick>
 80006d6:	1b40      	subs	r0, r0, r5
 80006d8:	2805      	cmp	r0, #5
 80006da:	d9b9      	bls.n	8000650 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80006dc:	2320      	movs	r3, #32
 80006de:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80006e0:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 80006e2:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80006e6:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80006e8:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80006ec:	d113      	bne.n	8000716 <HAL_DMA_Init+0xea>
    switch (tmp)
 80006ee:	2a03      	cmp	r2, #3
 80006f0:	d8e1      	bhi.n	80006b6 <HAL_DMA_Init+0x8a>
 80006f2:	a001      	add	r0, pc, #4	; (adr r0, 80006f8 <HAL_DMA_Init+0xcc>)
 80006f4:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 80006f8:	0800070f 	.word	0x0800070f
 80006fc:	080006b3 	.word	0x080006b3
 8000700:	0800070f 	.word	0x0800070f
 8000704:	08000709 	.word	0x08000709
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000708:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 800070c:	d1d3      	bne.n	80006b6 <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800070e:	2340      	movs	r3, #64	; 0x40
 8000710:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000712:	2001      	movs	r0, #1
 8000714:	e7e5      	b.n	80006e2 <HAL_DMA_Init+0xb6>
    switch (tmp)
 8000716:	2a02      	cmp	r2, #2
 8000718:	d9f9      	bls.n	800070e <HAL_DMA_Init+0xe2>
 800071a:	2a03      	cmp	r2, #3
 800071c:	e7c8      	b.n	80006b0 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 800071e:	2001      	movs	r0, #1
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	bf00      	nop
 8000724:	f010803f 	.word	0xf010803f

08000728 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000728:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800072c:	2b02      	cmp	r3, #2
 800072e:	d003      	beq.n	8000738 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000730:	2380      	movs	r3, #128	; 0x80
 8000732:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000734:	2001      	movs	r0, #1
 8000736:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8000738:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 800073a:	2305      	movs	r3, #5
 800073c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8000740:	6813      	ldr	r3, [r2, #0]
 8000742:	f023 0301 	bic.w	r3, r3, #1
 8000746:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8000748:	2000      	movs	r0, #0
}
 800074a:	4770      	bx	lr

0800074c <HAL_DMA_IRQHandler>:
{
 800074c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 800074e:	2300      	movs	r3, #0
 8000750:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000752:	4b5a      	ldr	r3, [pc, #360]	; (80008bc <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000754:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8000756:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000758:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 800075a:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800075c:	2208      	movs	r2, #8
 800075e:	409a      	lsls	r2, r3
 8000760:	4216      	tst	r6, r2
{
 8000762:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000764:	d00c      	beq.n	8000780 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000766:	6801      	ldr	r1, [r0, #0]
 8000768:	6808      	ldr	r0, [r1, #0]
 800076a:	0740      	lsls	r0, r0, #29
 800076c:	d508      	bpl.n	8000780 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800076e:	6808      	ldr	r0, [r1, #0]
 8000770:	f020 0004 	bic.w	r0, r0, #4
 8000774:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000776:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000778:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800077a:	f042 0201 	orr.w	r2, r2, #1
 800077e:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000780:	2201      	movs	r2, #1
 8000782:	409a      	lsls	r2, r3
 8000784:	4216      	tst	r6, r2
 8000786:	d008      	beq.n	800079a <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000788:	6821      	ldr	r1, [r4, #0]
 800078a:	6949      	ldr	r1, [r1, #20]
 800078c:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800078e:	bf41      	itttt	mi
 8000790:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000792:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8000794:	f042 0202 	orrmi.w	r2, r2, #2
 8000798:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800079a:	2204      	movs	r2, #4
 800079c:	409a      	lsls	r2, r3
 800079e:	4216      	tst	r6, r2
 80007a0:	d008      	beq.n	80007b4 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80007a2:	6821      	ldr	r1, [r4, #0]
 80007a4:	6809      	ldr	r1, [r1, #0]
 80007a6:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80007a8:	bf41      	itttt	mi
 80007aa:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80007ac:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80007ae:	f042 0204 	orrmi.w	r2, r2, #4
 80007b2:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80007b4:	2210      	movs	r2, #16
 80007b6:	409a      	lsls	r2, r3
 80007b8:	4216      	tst	r6, r2
 80007ba:	d010      	beq.n	80007de <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80007bc:	6823      	ldr	r3, [r4, #0]
 80007be:	6819      	ldr	r1, [r3, #0]
 80007c0:	0709      	lsls	r1, r1, #28
 80007c2:	d50c      	bpl.n	80007de <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80007c4:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80007c6:	681a      	ldr	r2, [r3, #0]
 80007c8:	0350      	lsls	r0, r2, #13
 80007ca:	d535      	bpl.n	8000838 <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	0319      	lsls	r1, r3, #12
 80007d0:	d401      	bmi.n	80007d6 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 80007d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80007d4:	e000      	b.n	80007d8 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80007d6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 80007d8:	b10b      	cbz	r3, 80007de <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 80007da:	4620      	mov	r0, r4
 80007dc:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80007de:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80007e0:	2220      	movs	r2, #32
 80007e2:	408a      	lsls	r2, r1
 80007e4:	4216      	tst	r6, r2
 80007e6:	d038      	beq.n	800085a <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80007e8:	6823      	ldr	r3, [r4, #0]
 80007ea:	6818      	ldr	r0, [r3, #0]
 80007ec:	06c6      	lsls	r6, r0, #27
 80007ee:	d534      	bpl.n	800085a <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80007f0:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80007f2:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80007f6:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80007f8:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80007fa:	d125      	bne.n	8000848 <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80007fc:	f022 0216 	bic.w	r2, r2, #22
 8000800:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000802:	695a      	ldr	r2, [r3, #20]
 8000804:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000808:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800080a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800080c:	b90a      	cbnz	r2, 8000812 <HAL_DMA_IRQHandler+0xc6>
 800080e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000810:	b11a      	cbz	r2, 800081a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	f022 0208 	bic.w	r2, r2, #8
 8000818:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800081a:	233f      	movs	r3, #63	; 0x3f
 800081c:	408b      	lsls	r3, r1
 800081e:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8000820:	2300      	movs	r3, #0
 8000822:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8000826:	2301      	movs	r3, #1
 8000828:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 800082c:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 800082e:	b10b      	cbz	r3, 8000834 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 8000830:	4620      	mov	r0, r4
 8000832:	4798      	blx	r3
}
 8000834:	b003      	add	sp, #12
 8000836:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800083c:	bf5e      	ittt	pl
 800083e:	681a      	ldrpl	r2, [r3, #0]
 8000840:	f022 0208 	bicpl.w	r2, r2, #8
 8000844:	601a      	strpl	r2, [r3, #0]
 8000846:	e7c4      	b.n	80007d2 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000848:	0350      	lsls	r0, r2, #13
 800084a:	d528      	bpl.n	800089e <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	0319      	lsls	r1, r3, #12
 8000850:	d432      	bmi.n	80008b8 <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 8000852:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8000854:	b10b      	cbz	r3, 800085a <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 8000856:	4620      	mov	r0, r4
 8000858:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800085a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800085c:	2b00      	cmp	r3, #0
 800085e:	d0e9      	beq.n	8000834 <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000860:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000862:	07da      	lsls	r2, r3, #31
 8000864:	d519      	bpl.n	800089a <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 8000866:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8000868:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 800086a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800086e:	6813      	ldr	r3, [r2, #0]
 8000870:	f023 0301 	bic.w	r3, r3, #1
 8000874:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000876:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800087a:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 800087e:	9b01      	ldr	r3, [sp, #4]
 8000880:	3301      	adds	r3, #1
 8000882:	429f      	cmp	r7, r3
 8000884:	9301      	str	r3, [sp, #4]
 8000886:	d302      	bcc.n	800088e <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000888:	6813      	ldr	r3, [r2, #0]
 800088a:	07db      	lsls	r3, r3, #31
 800088c:	d4f7      	bmi.n	800087e <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 800088e:	2300      	movs	r3, #0
 8000890:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8000894:	2301      	movs	r3, #1
 8000896:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 800089a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800089c:	e7c7      	b.n	800082e <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800089e:	681a      	ldr	r2, [r3, #0]
 80008a0:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 80008a4:	d108      	bne.n	80008b8 <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80008a6:	6819      	ldr	r1, [r3, #0]
 80008a8:	f021 0110 	bic.w	r1, r1, #16
 80008ac:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80008ae:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 80008b0:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80008b4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 80008b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80008ba:	e7cb      	b.n	8000854 <HAL_DMA_IRQHandler+0x108>
 80008bc:	20000020 	.word	0x20000020

080008c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008c4:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008c6:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000a78 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80008cc:	4a68      	ldr	r2, [pc, #416]	; (8000a70 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008ce:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8000a7c <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008d2:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008d4:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80008d6:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008d8:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 80008da:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008dc:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 80008de:	42ac      	cmp	r4, r5
 80008e0:	f040 80b0 	bne.w	8000a44 <HAL_GPIO_Init+0x184>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008e4:	684c      	ldr	r4, [r1, #4]
 80008e6:	f024 0c10 	bic.w	ip, r4, #16
 80008ea:	f10c 36ff 	add.w	r6, ip, #4294967295	; 0xffffffff
 80008ee:	2e01      	cmp	r6, #1
 80008f0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80008f4:	d812      	bhi.n	800091c <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 80008f6:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80008f8:	2603      	movs	r6, #3
 80008fa:	fa06 f60e 	lsl.w	r6, r6, lr
 80008fe:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000902:	68ce      	ldr	r6, [r1, #12]
 8000904:	fa06 f60e 	lsl.w	r6, r6, lr
 8000908:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 800090a:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800090c:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800090e:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000912:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000916:	409e      	lsls	r6, r3
 8000918:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 800091a:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800091c:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 800091e:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000920:	fa06 f60e 	lsl.w	r6, r6, lr
 8000924:	43f6      	mvns	r6, r6
 8000926:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800092a:	688f      	ldr	r7, [r1, #8]
 800092c:	fa07 f70e 	lsl.w	r7, r7, lr
 8000930:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000934:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 8000938:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800093a:	d116      	bne.n	800096a <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 800093c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000940:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000944:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000948:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800094c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000950:	f04f 0c0f 	mov.w	ip, #15
 8000954:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000958:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800095c:	690f      	ldr	r7, [r1, #16]
 800095e:	fa07 f70b 	lsl.w	r7, r7, fp
 8000962:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000966:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 800096a:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800096c:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800096e:	f004 0703 	and.w	r7, r4, #3
 8000972:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000976:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 800097a:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800097c:	00e6      	lsls	r6, r4, #3
 800097e:	d561      	bpl.n	8000a44 <HAL_GPIO_Init+0x184>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000980:	f04f 0b00 	mov.w	fp, #0
 8000984:	f8cd b00c 	str.w	fp, [sp, #12]
 8000988:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800098c:	4e39      	ldr	r6, [pc, #228]	; (8000a74 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098e:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000992:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000996:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 800099a:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800099e:	9703      	str	r7, [sp, #12]
 80009a0:	9f03      	ldr	r7, [sp, #12]
 80009a2:	f023 0703 	bic.w	r7, r3, #3
 80009a6:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80009aa:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009ae:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80009b2:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009b6:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80009ba:	f04f 0e0f 	mov.w	lr, #15
 80009be:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009c2:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009c4:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009c8:	d043      	beq.n	8000a52 <HAL_GPIO_Init+0x192>
 80009ca:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80009ce:	42b0      	cmp	r0, r6
 80009d0:	d041      	beq.n	8000a56 <HAL_GPIO_Init+0x196>
 80009d2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80009d6:	42b0      	cmp	r0, r6
 80009d8:	d03f      	beq.n	8000a5a <HAL_GPIO_Init+0x19a>
 80009da:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80009de:	42b0      	cmp	r0, r6
 80009e0:	d03d      	beq.n	8000a5e <HAL_GPIO_Init+0x19e>
 80009e2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80009e6:	42b0      	cmp	r0, r6
 80009e8:	d03b      	beq.n	8000a62 <HAL_GPIO_Init+0x1a2>
 80009ea:	4548      	cmp	r0, r9
 80009ec:	d03b      	beq.n	8000a66 <HAL_GPIO_Init+0x1a6>
 80009ee:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80009f2:	42b0      	cmp	r0, r6
 80009f4:	d039      	beq.n	8000a6a <HAL_GPIO_Init+0x1aa>
 80009f6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80009fa:	42b0      	cmp	r0, r6
 80009fc:	bf14      	ite	ne
 80009fe:	2608      	movne	r6, #8
 8000a00:	2607      	moveq	r6, #7
 8000a02:	fa06 f60c 	lsl.w	r6, r6, ip
 8000a06:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a0a:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000a0c:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000a0e:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a10:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000a14:	bf0c      	ite	eq
 8000a16:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000a18:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 8000a1a:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8000a1c:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a1e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000a22:	bf0c      	ite	eq
 8000a24:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000a26:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8000a28:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a2a:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a2c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000a30:	bf0c      	ite	eq
 8000a32:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000a34:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 8000a36:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8000a38:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a3a:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000a3c:	bf54      	ite	pl
 8000a3e:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8000a40:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8000a42:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a44:	3301      	adds	r3, #1
 8000a46:	2b10      	cmp	r3, #16
 8000a48:	f47f af45 	bne.w	80008d6 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000a4c:	b005      	add	sp, #20
 8000a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a52:	465e      	mov	r6, fp
 8000a54:	e7d5      	b.n	8000a02 <HAL_GPIO_Init+0x142>
 8000a56:	2601      	movs	r6, #1
 8000a58:	e7d3      	b.n	8000a02 <HAL_GPIO_Init+0x142>
 8000a5a:	2602      	movs	r6, #2
 8000a5c:	e7d1      	b.n	8000a02 <HAL_GPIO_Init+0x142>
 8000a5e:	2603      	movs	r6, #3
 8000a60:	e7cf      	b.n	8000a02 <HAL_GPIO_Init+0x142>
 8000a62:	2604      	movs	r6, #4
 8000a64:	e7cd      	b.n	8000a02 <HAL_GPIO_Init+0x142>
 8000a66:	2605      	movs	r6, #5
 8000a68:	e7cb      	b.n	8000a02 <HAL_GPIO_Init+0x142>
 8000a6a:	2606      	movs	r6, #6
 8000a6c:	e7c9      	b.n	8000a02 <HAL_GPIO_Init+0x142>
 8000a6e:	bf00      	nop
 8000a70:	40013c00 	.word	0x40013c00
 8000a74:	40020000 	.word	0x40020000
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	40021400 	.word	0x40021400

08000a80 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000a80:	b10a      	cbz	r2, 8000a86 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000a82:	6181      	str	r1, [r0, #24]
 8000a84:	4770      	bx	lr
 8000a86:	0409      	lsls	r1, r1, #16
 8000a88:	e7fb      	b.n	8000a82 <HAL_GPIO_WritePin+0x2>
	...

08000a8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a8c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000a90:	4604      	mov	r4, r0
 8000a92:	b908      	cbnz	r0, 8000a98 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8000a94:	2001      	movs	r0, #1
 8000a96:	e03f      	b.n	8000b18 <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a98:	6803      	ldr	r3, [r0, #0]
 8000a9a:	07dd      	lsls	r5, r3, #31
 8000a9c:	d410      	bmi.n	8000ac0 <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a9e:	6823      	ldr	r3, [r4, #0]
 8000aa0:	0798      	lsls	r0, r3, #30
 8000aa2:	d45a      	bmi.n	8000b5a <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000aa4:	6823      	ldr	r3, [r4, #0]
 8000aa6:	071a      	lsls	r2, r3, #28
 8000aa8:	f100 809c 	bmi.w	8000be4 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000aac:	6823      	ldr	r3, [r4, #0]
 8000aae:	075b      	lsls	r3, r3, #29
 8000ab0:	f100 80ba 	bmi.w	8000c28 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ab4:	69a0      	ldr	r0, [r4, #24]
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	f040 811b 	bne.w	8000cf2 <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8000abc:	2000      	movs	r0, #0
 8000abe:	e02b      	b.n	8000b18 <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ac0:	4ba4      	ldr	r3, [pc, #656]	; (8000d54 <HAL_RCC_OscConfig+0x2c8>)
 8000ac2:	689a      	ldr	r2, [r3, #8]
 8000ac4:	f002 020c 	and.w	r2, r2, #12
 8000ac8:	2a04      	cmp	r2, #4
 8000aca:	d007      	beq.n	8000adc <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000acc:	689a      	ldr	r2, [r3, #8]
 8000ace:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ad2:	2a08      	cmp	r2, #8
 8000ad4:	d10a      	bne.n	8000aec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	0259      	lsls	r1, r3, #9
 8000ada:	d507      	bpl.n	8000aec <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000adc:	4b9d      	ldr	r3, [pc, #628]	; (8000d54 <HAL_RCC_OscConfig+0x2c8>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	039a      	lsls	r2, r3, #14
 8000ae2:	d5dc      	bpl.n	8000a9e <HAL_RCC_OscConfig+0x12>
 8000ae4:	6863      	ldr	r3, [r4, #4]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d1d9      	bne.n	8000a9e <HAL_RCC_OscConfig+0x12>
 8000aea:	e7d3      	b.n	8000a94 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000aec:	6863      	ldr	r3, [r4, #4]
 8000aee:	4d99      	ldr	r5, [pc, #612]	; (8000d54 <HAL_RCC_OscConfig+0x2c8>)
 8000af0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000af4:	d113      	bne.n	8000b1e <HAL_RCC_OscConfig+0x92>
 8000af6:	682b      	ldr	r3, [r5, #0]
 8000af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000afc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000afe:	f7ff fd11 	bl	8000524 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b02:	4d94      	ldr	r5, [pc, #592]	; (8000d54 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000b04:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b06:	682b      	ldr	r3, [r5, #0]
 8000b08:	039b      	lsls	r3, r3, #14
 8000b0a:	d4c8      	bmi.n	8000a9e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b0c:	f7ff fd0a 	bl	8000524 <HAL_GetTick>
 8000b10:	1b80      	subs	r0, r0, r6
 8000b12:	2864      	cmp	r0, #100	; 0x64
 8000b14:	d9f7      	bls.n	8000b06 <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8000b16:	2003      	movs	r0, #3
}
 8000b18:	b002      	add	sp, #8
 8000b1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b22:	d104      	bne.n	8000b2e <HAL_RCC_OscConfig+0xa2>
 8000b24:	682b      	ldr	r3, [r5, #0]
 8000b26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b2a:	602b      	str	r3, [r5, #0]
 8000b2c:	e7e3      	b.n	8000af6 <HAL_RCC_OscConfig+0x6a>
 8000b2e:	682a      	ldr	r2, [r5, #0]
 8000b30:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000b34:	602a      	str	r2, [r5, #0]
 8000b36:	682a      	ldr	r2, [r5, #0]
 8000b38:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000b3c:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d1dd      	bne.n	8000afe <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 8000b42:	f7ff fcef 	bl	8000524 <HAL_GetTick>
 8000b46:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b48:	682b      	ldr	r3, [r5, #0]
 8000b4a:	039f      	lsls	r7, r3, #14
 8000b4c:	d5a7      	bpl.n	8000a9e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b4e:	f7ff fce9 	bl	8000524 <HAL_GetTick>
 8000b52:	1b80      	subs	r0, r0, r6
 8000b54:	2864      	cmp	r0, #100	; 0x64
 8000b56:	d9f7      	bls.n	8000b48 <HAL_RCC_OscConfig+0xbc>
 8000b58:	e7dd      	b.n	8000b16 <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000b5a:	4b7e      	ldr	r3, [pc, #504]	; (8000d54 <HAL_RCC_OscConfig+0x2c8>)
 8000b5c:	689a      	ldr	r2, [r3, #8]
 8000b5e:	f012 0f0c 	tst.w	r2, #12
 8000b62:	d007      	beq.n	8000b74 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000b64:	689a      	ldr	r2, [r3, #8]
 8000b66:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000b6a:	2a08      	cmp	r2, #8
 8000b6c:	d111      	bne.n	8000b92 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	025e      	lsls	r6, r3, #9
 8000b72:	d40e      	bmi.n	8000b92 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b74:	4b77      	ldr	r3, [pc, #476]	; (8000d54 <HAL_RCC_OscConfig+0x2c8>)
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	0795      	lsls	r5, r2, #30
 8000b7a:	d502      	bpl.n	8000b82 <HAL_RCC_OscConfig+0xf6>
 8000b7c:	68e2      	ldr	r2, [r4, #12]
 8000b7e:	2a01      	cmp	r2, #1
 8000b80:	d188      	bne.n	8000a94 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	6921      	ldr	r1, [r4, #16]
 8000b86:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000b8a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000b8e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b90:	e788      	b.n	8000aa4 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000b92:	68e2      	ldr	r2, [r4, #12]
 8000b94:	4b70      	ldr	r3, [pc, #448]	; (8000d58 <HAL_RCC_OscConfig+0x2cc>)
 8000b96:	b1b2      	cbz	r2, 8000bc6 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8000b98:	2201      	movs	r2, #1
 8000b9a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b9c:	f7ff fcc2 	bl	8000524 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ba0:	4d6c      	ldr	r5, [pc, #432]	; (8000d54 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000ba2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ba4:	682b      	ldr	r3, [r5, #0]
 8000ba6:	0798      	lsls	r0, r3, #30
 8000ba8:	d507      	bpl.n	8000bba <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000baa:	682b      	ldr	r3, [r5, #0]
 8000bac:	6922      	ldr	r2, [r4, #16]
 8000bae:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000bb2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000bb6:	602b      	str	r3, [r5, #0]
 8000bb8:	e774      	b.n	8000aa4 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000bba:	f7ff fcb3 	bl	8000524 <HAL_GetTick>
 8000bbe:	1b80      	subs	r0, r0, r6
 8000bc0:	2802      	cmp	r0, #2
 8000bc2:	d9ef      	bls.n	8000ba4 <HAL_RCC_OscConfig+0x118>
 8000bc4:	e7a7      	b.n	8000b16 <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8000bc6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000bc8:	f7ff fcac 	bl	8000524 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bcc:	4d61      	ldr	r5, [pc, #388]	; (8000d54 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000bce:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bd0:	682b      	ldr	r3, [r5, #0]
 8000bd2:	0799      	lsls	r1, r3, #30
 8000bd4:	f57f af66 	bpl.w	8000aa4 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000bd8:	f7ff fca4 	bl	8000524 <HAL_GetTick>
 8000bdc:	1b80      	subs	r0, r0, r6
 8000bde:	2802      	cmp	r0, #2
 8000be0:	d9f6      	bls.n	8000bd0 <HAL_RCC_OscConfig+0x144>
 8000be2:	e798      	b.n	8000b16 <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000be4:	6962      	ldr	r2, [r4, #20]
 8000be6:	4b5d      	ldr	r3, [pc, #372]	; (8000d5c <HAL_RCC_OscConfig+0x2d0>)
 8000be8:	b17a      	cbz	r2, 8000c0a <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000bea:	2201      	movs	r2, #1
 8000bec:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000bee:	f7ff fc99 	bl	8000524 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000bf2:	4d58      	ldr	r5, [pc, #352]	; (8000d54 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000bf4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000bf6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000bf8:	079f      	lsls	r7, r3, #30
 8000bfa:	f53f af57 	bmi.w	8000aac <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000bfe:	f7ff fc91 	bl	8000524 <HAL_GetTick>
 8000c02:	1b80      	subs	r0, r0, r6
 8000c04:	2802      	cmp	r0, #2
 8000c06:	d9f6      	bls.n	8000bf6 <HAL_RCC_OscConfig+0x16a>
 8000c08:	e785      	b.n	8000b16 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8000c0a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000c0c:	f7ff fc8a 	bl	8000524 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c10:	4d50      	ldr	r5, [pc, #320]	; (8000d54 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000c12:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c14:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000c16:	0798      	lsls	r0, r3, #30
 8000c18:	f57f af48 	bpl.w	8000aac <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c1c:	f7ff fc82 	bl	8000524 <HAL_GetTick>
 8000c20:	1b80      	subs	r0, r0, r6
 8000c22:	2802      	cmp	r0, #2
 8000c24:	d9f6      	bls.n	8000c14 <HAL_RCC_OscConfig+0x188>
 8000c26:	e776      	b.n	8000b16 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c28:	4b4a      	ldr	r3, [pc, #296]	; (8000d54 <HAL_RCC_OscConfig+0x2c8>)
 8000c2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c2c:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000c30:	d128      	bne.n	8000c84 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c32:	9201      	str	r2, [sp, #4]
 8000c34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c36:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c3a:	641a      	str	r2, [r3, #64]	; 0x40
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c42:	9301      	str	r3, [sp, #4]
 8000c44:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000c46:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c48:	4d45      	ldr	r5, [pc, #276]	; (8000d60 <HAL_RCC_OscConfig+0x2d4>)
 8000c4a:	682b      	ldr	r3, [r5, #0]
 8000c4c:	05d9      	lsls	r1, r3, #23
 8000c4e:	d51b      	bpl.n	8000c88 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c50:	68a3      	ldr	r3, [r4, #8]
 8000c52:	4d40      	ldr	r5, [pc, #256]	; (8000d54 <HAL_RCC_OscConfig+0x2c8>)
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d127      	bne.n	8000ca8 <HAL_RCC_OscConfig+0x21c>
 8000c58:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000c5a:	f043 0301 	orr.w	r3, r3, #1
 8000c5e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000c60:	f7ff fc60 	bl	8000524 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c64:	4d3b      	ldr	r5, [pc, #236]	; (8000d54 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000c66:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c68:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c6c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000c6e:	079b      	lsls	r3, r3, #30
 8000c70:	d539      	bpl.n	8000ce6 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	f43f af1e 	beq.w	8000ab4 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c78:	4a36      	ldr	r2, [pc, #216]	; (8000d54 <HAL_RCC_OscConfig+0x2c8>)
 8000c7a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000c7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c80:	6413      	str	r3, [r2, #64]	; 0x40
 8000c82:	e717      	b.n	8000ab4 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000c84:	2600      	movs	r6, #0
 8000c86:	e7df      	b.n	8000c48 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c88:	682b      	ldr	r3, [r5, #0]
 8000c8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c8e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000c90:	f7ff fc48 	bl	8000524 <HAL_GetTick>
 8000c94:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c96:	682b      	ldr	r3, [r5, #0]
 8000c98:	05da      	lsls	r2, r3, #23
 8000c9a:	d4d9      	bmi.n	8000c50 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c9c:	f7ff fc42 	bl	8000524 <HAL_GetTick>
 8000ca0:	1bc0      	subs	r0, r0, r7
 8000ca2:	2802      	cmp	r0, #2
 8000ca4:	d9f7      	bls.n	8000c96 <HAL_RCC_OscConfig+0x20a>
 8000ca6:	e736      	b.n	8000b16 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ca8:	2b05      	cmp	r3, #5
 8000caa:	d104      	bne.n	8000cb6 <HAL_RCC_OscConfig+0x22a>
 8000cac:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000cae:	f043 0304 	orr.w	r3, r3, #4
 8000cb2:	672b      	str	r3, [r5, #112]	; 0x70
 8000cb4:	e7d0      	b.n	8000c58 <HAL_RCC_OscConfig+0x1cc>
 8000cb6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000cb8:	f022 0201 	bic.w	r2, r2, #1
 8000cbc:	672a      	str	r2, [r5, #112]	; 0x70
 8000cbe:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000cc0:	f022 0204 	bic.w	r2, r2, #4
 8000cc4:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d1ca      	bne.n	8000c60 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000cca:	f7ff fc2b 	bl	8000524 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000cce:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000cd2:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000cd4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000cd6:	0798      	lsls	r0, r3, #30
 8000cd8:	d5cb      	bpl.n	8000c72 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000cda:	f7ff fc23 	bl	8000524 <HAL_GetTick>
 8000cde:	1bc0      	subs	r0, r0, r7
 8000ce0:	4540      	cmp	r0, r8
 8000ce2:	d9f7      	bls.n	8000cd4 <HAL_RCC_OscConfig+0x248>
 8000ce4:	e717      	b.n	8000b16 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ce6:	f7ff fc1d 	bl	8000524 <HAL_GetTick>
 8000cea:	1bc0      	subs	r0, r0, r7
 8000cec:	4540      	cmp	r0, r8
 8000cee:	d9bd      	bls.n	8000c6c <HAL_RCC_OscConfig+0x1e0>
 8000cf0:	e711      	b.n	8000b16 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000cf2:	4d18      	ldr	r5, [pc, #96]	; (8000d54 <HAL_RCC_OscConfig+0x2c8>)
 8000cf4:	68ab      	ldr	r3, [r5, #8]
 8000cf6:	f003 030c 	and.w	r3, r3, #12
 8000cfa:	2b08      	cmp	r3, #8
 8000cfc:	d047      	beq.n	8000d8e <HAL_RCC_OscConfig+0x302>
 8000cfe:	4e19      	ldr	r6, [pc, #100]	; (8000d64 <HAL_RCC_OscConfig+0x2d8>)
 8000d00:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d02:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000d04:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d06:	d135      	bne.n	8000d74 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000d08:	f7ff fc0c 	bl	8000524 <HAL_GetTick>
 8000d0c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000d0e:	682b      	ldr	r3, [r5, #0]
 8000d10:	0199      	lsls	r1, r3, #6
 8000d12:	d429      	bmi.n	8000d68 <HAL_RCC_OscConfig+0x2dc>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000d14:	6a22      	ldr	r2, [r4, #32]
 8000d16:	69e3      	ldr	r3, [r4, #28]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000d1c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000d20:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000d22:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000d26:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d28:	4c0a      	ldr	r4, [pc, #40]	; (8000d54 <HAL_RCC_OscConfig+0x2c8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000d2a:	0852      	lsrs	r2, r2, #1
 8000d2c:	3a01      	subs	r2, #1
 8000d2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d32:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000d34:	2301      	movs	r3, #1
 8000d36:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000d38:	f7ff fbf4 	bl	8000524 <HAL_GetTick>
 8000d3c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d3e:	6823      	ldr	r3, [r4, #0]
 8000d40:	019a      	lsls	r2, r3, #6
 8000d42:	f53f aebb 	bmi.w	8000abc <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d46:	f7ff fbed 	bl	8000524 <HAL_GetTick>
 8000d4a:	1b40      	subs	r0, r0, r5
 8000d4c:	2802      	cmp	r0, #2
 8000d4e:	d9f6      	bls.n	8000d3e <HAL_RCC_OscConfig+0x2b2>
 8000d50:	e6e1      	b.n	8000b16 <HAL_RCC_OscConfig+0x8a>
 8000d52:	bf00      	nop
 8000d54:	40023800 	.word	0x40023800
 8000d58:	42470000 	.word	0x42470000
 8000d5c:	42470e80 	.word	0x42470e80
 8000d60:	40007000 	.word	0x40007000
 8000d64:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d68:	f7ff fbdc 	bl	8000524 <HAL_GetTick>
 8000d6c:	1bc0      	subs	r0, r0, r7
 8000d6e:	2802      	cmp	r0, #2
 8000d70:	d9cd      	bls.n	8000d0e <HAL_RCC_OscConfig+0x282>
 8000d72:	e6d0      	b.n	8000b16 <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8000d74:	f7ff fbd6 	bl	8000524 <HAL_GetTick>
 8000d78:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000d7a:	682b      	ldr	r3, [r5, #0]
 8000d7c:	019b      	lsls	r3, r3, #6
 8000d7e:	f57f ae9d 	bpl.w	8000abc <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d82:	f7ff fbcf 	bl	8000524 <HAL_GetTick>
 8000d86:	1b00      	subs	r0, r0, r4
 8000d88:	2802      	cmp	r0, #2
 8000d8a:	d9f6      	bls.n	8000d7a <HAL_RCC_OscConfig+0x2ee>
 8000d8c:	e6c3      	b.n	8000b16 <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000d8e:	2801      	cmp	r0, #1
 8000d90:	f43f aec2 	beq.w	8000b18 <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->PLLCFGR;
 8000d94:	6868      	ldr	r0, [r5, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d96:	69e3      	ldr	r3, [r4, #28]
 8000d98:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	f47f ae79 	bne.w	8000a94 <HAL_RCC_OscConfig+0x8>
 8000da2:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000da4:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000da8:	4293      	cmp	r3, r2
 8000daa:	f47f ae73 	bne.w	8000a94 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000dae:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000db0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000db4:	4003      	ands	r3, r0
 8000db6:	4293      	cmp	r3, r2
 8000db8:	f47f ae6c 	bne.w	8000a94 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000dbc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000dbe:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	f47f ae66 	bne.w	8000a94 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000dc8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8000dca:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 8000dce:	1ac0      	subs	r0, r0, r3
 8000dd0:	bf18      	it	ne
 8000dd2:	2001      	movne	r0, #1
 8000dd4:	e6a0      	b.n	8000b18 <HAL_RCC_OscConfig+0x8c>
 8000dd6:	bf00      	nop

08000dd8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000dd8:	4913      	ldr	r1, [pc, #76]	; (8000e28 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000dda:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ddc:	688b      	ldr	r3, [r1, #8]
 8000dde:	f003 030c 	and.w	r3, r3, #12
 8000de2:	2b04      	cmp	r3, #4
 8000de4:	d003      	beq.n	8000dee <HAL_RCC_GetSysClockFreq+0x16>
 8000de6:	2b08      	cmp	r3, #8
 8000de8:	d003      	beq.n	8000df2 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000dea:	4810      	ldr	r0, [pc, #64]	; (8000e2c <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000dec:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000dee:	4810      	ldr	r0, [pc, #64]	; (8000e30 <HAL_RCC_GetSysClockFreq+0x58>)
 8000df0:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000df2:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000df4:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000df6:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000df8:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000dfc:	bf14      	ite	ne
 8000dfe:	480c      	ldrne	r0, [pc, #48]	; (8000e30 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e00:	480a      	ldreq	r0, [pc, #40]	; (8000e2c <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e02:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000e06:	bf18      	it	ne
 8000e08:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000e0a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e0e:	fba1 0100 	umull	r0, r1, r1, r0
 8000e12:	f7ff f9d9 	bl	80001c8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000e16:	4b04      	ldr	r3, [pc, #16]	; (8000e28 <HAL_RCC_GetSysClockFreq+0x50>)
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000e1e:	3301      	adds	r3, #1
 8000e20:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000e22:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e26:	bd08      	pop	{r3, pc}
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	00f42400 	.word	0x00f42400
 8000e30:	017d7840 	.word	0x017d7840

08000e34 <HAL_RCC_ClockConfig>:
{
 8000e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e38:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000e3a:	4604      	mov	r4, r0
 8000e3c:	b910      	cbnz	r0, 8000e44 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000e3e:	2001      	movs	r0, #1
 8000e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000e44:	4b44      	ldr	r3, [pc, #272]	; (8000f58 <HAL_RCC_ClockConfig+0x124>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	f002 020f 	and.w	r2, r2, #15
 8000e4c:	428a      	cmp	r2, r1
 8000e4e:	d329      	bcc.n	8000ea4 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e50:	6821      	ldr	r1, [r4, #0]
 8000e52:	078f      	lsls	r7, r1, #30
 8000e54:	d42e      	bmi.n	8000eb4 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e56:	07c8      	lsls	r0, r1, #31
 8000e58:	d441      	bmi.n	8000ede <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000e5a:	4b3f      	ldr	r3, [pc, #252]	; (8000f58 <HAL_RCC_ClockConfig+0x124>)
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	f002 020f 	and.w	r2, r2, #15
 8000e62:	4295      	cmp	r5, r2
 8000e64:	d367      	bcc.n	8000f36 <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e66:	6822      	ldr	r2, [r4, #0]
 8000e68:	0751      	lsls	r1, r2, #29
 8000e6a:	d46d      	bmi.n	8000f48 <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e6c:	0713      	lsls	r3, r2, #28
 8000e6e:	d507      	bpl.n	8000e80 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000e70:	4a3a      	ldr	r2, [pc, #232]	; (8000f5c <HAL_RCC_ClockConfig+0x128>)
 8000e72:	6921      	ldr	r1, [r4, #16]
 8000e74:	6893      	ldr	r3, [r2, #8]
 8000e76:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000e7a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000e7e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000e80:	f7ff ffaa 	bl	8000dd8 <HAL_RCC_GetSysClockFreq>
 8000e84:	4b35      	ldr	r3, [pc, #212]	; (8000f5c <HAL_RCC_ClockConfig+0x128>)
 8000e86:	4a36      	ldr	r2, [pc, #216]	; (8000f60 <HAL_RCC_ClockConfig+0x12c>)
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000e8e:	5cd3      	ldrb	r3, [r2, r3]
 8000e90:	40d8      	lsrs	r0, r3
 8000e92:	4b34      	ldr	r3, [pc, #208]	; (8000f64 <HAL_RCC_ClockConfig+0x130>)
 8000e94:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8000e96:	4b34      	ldr	r3, [pc, #208]	; (8000f68 <HAL_RCC_ClockConfig+0x134>)
 8000e98:	6818      	ldr	r0, [r3, #0]
 8000e9a:	f001 f861 	bl	8001f60 <HAL_InitTick>
  return HAL_OK;
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ea4:	b2ca      	uxtb	r2, r1
 8000ea6:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f003 030f 	and.w	r3, r3, #15
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d1c5      	bne.n	8000e3e <HAL_RCC_ClockConfig+0xa>
 8000eb2:	e7cd      	b.n	8000e50 <HAL_RCC_ClockConfig+0x1c>
 8000eb4:	4b29      	ldr	r3, [pc, #164]	; (8000f5c <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000eb6:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000eba:	bf1e      	ittt	ne
 8000ebc:	689a      	ldrne	r2, [r3, #8]
 8000ebe:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000ec2:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ec4:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000ec6:	bf42      	ittt	mi
 8000ec8:	689a      	ldrmi	r2, [r3, #8]
 8000eca:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000ece:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ed0:	689a      	ldr	r2, [r3, #8]
 8000ed2:	68a0      	ldr	r0, [r4, #8]
 8000ed4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000ed8:	4302      	orrs	r2, r0
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	e7bb      	b.n	8000e56 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ede:	6862      	ldr	r2, [r4, #4]
 8000ee0:	4b1e      	ldr	r3, [pc, #120]	; (8000f5c <HAL_RCC_ClockConfig+0x128>)
 8000ee2:	2a01      	cmp	r2, #1
 8000ee4:	d11d      	bne.n	8000f22 <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eec:	d0a7      	beq.n	8000e3e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000eee:	4e1b      	ldr	r6, [pc, #108]	; (8000f5c <HAL_RCC_ClockConfig+0x128>)
 8000ef0:	68b3      	ldr	r3, [r6, #8]
 8000ef2:	f023 0303 	bic.w	r3, r3, #3
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000efa:	f7ff fb13 	bl	8000524 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000efe:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000f02:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f04:	68b3      	ldr	r3, [r6, #8]
 8000f06:	6862      	ldr	r2, [r4, #4]
 8000f08:	f003 030c 	and.w	r3, r3, #12
 8000f0c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000f10:	d0a3      	beq.n	8000e5a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f12:	f7ff fb07 	bl	8000524 <HAL_GetTick>
 8000f16:	1bc0      	subs	r0, r0, r7
 8000f18:	4540      	cmp	r0, r8
 8000f1a:	d9f3      	bls.n	8000f04 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8000f1c:	2003      	movs	r0, #3
}
 8000f1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000f22:	1e91      	subs	r1, r2, #2
 8000f24:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f26:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000f28:	d802      	bhi.n	8000f30 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f2a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000f2e:	e7dd      	b.n	8000eec <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f30:	f013 0f02 	tst.w	r3, #2
 8000f34:	e7da      	b.n	8000eec <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f36:	b2ea      	uxtb	r2, r5
 8000f38:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f003 030f 	and.w	r3, r3, #15
 8000f40:	429d      	cmp	r5, r3
 8000f42:	f47f af7c 	bne.w	8000e3e <HAL_RCC_ClockConfig+0xa>
 8000f46:	e78e      	b.n	8000e66 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000f48:	4904      	ldr	r1, [pc, #16]	; (8000f5c <HAL_RCC_ClockConfig+0x128>)
 8000f4a:	68e0      	ldr	r0, [r4, #12]
 8000f4c:	688b      	ldr	r3, [r1, #8]
 8000f4e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000f52:	4303      	orrs	r3, r0
 8000f54:	608b      	str	r3, [r1, #8]
 8000f56:	e789      	b.n	8000e6c <HAL_RCC_ClockConfig+0x38>
 8000f58:	40023c00 	.word	0x40023c00
 8000f5c:	40023800 	.word	0x40023800
 8000f60:	080049e9 	.word	0x080049e9
 8000f64:	20000020 	.word	0x20000020
 8000f68:	20000004 	.word	0x20000004

08000f6c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000f6c:	4b04      	ldr	r3, [pc, #16]	; (8000f80 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000f6e:	4a05      	ldr	r2, [pc, #20]	; (8000f84 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000f76:	5cd3      	ldrb	r3, [r2, r3]
 8000f78:	4a03      	ldr	r2, [pc, #12]	; (8000f88 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000f7a:	6810      	ldr	r0, [r2, #0]
}
 8000f7c:	40d8      	lsrs	r0, r3
 8000f7e:	4770      	bx	lr
 8000f80:	40023800 	.word	0x40023800
 8000f84:	080049f9 	.word	0x080049f9
 8000f88:	20000020 	.word	0x20000020

08000f8c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000f8c:	4b04      	ldr	r3, [pc, #16]	; (8000fa0 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000f8e:	4a05      	ldr	r2, [pc, #20]	; (8000fa4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000f96:	5cd3      	ldrb	r3, [r2, r3]
 8000f98:	4a03      	ldr	r2, [pc, #12]	; (8000fa8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000f9a:	6810      	ldr	r0, [r2, #0]
}
 8000f9c:	40d8      	lsrs	r0, r3
 8000f9e:	4770      	bx	lr
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	080049f9 	.word	0x080049f9
 8000fa8:	20000020 	.word	0x20000020

08000fac <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000fac:	230f      	movs	r3, #15
 8000fae:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000fb0:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <HAL_RCC_GetClockConfig+0x34>)
 8000fb2:	689a      	ldr	r2, [r3, #8]
 8000fb4:	f002 0203 	and.w	r2, r2, #3
 8000fb8:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8000fba:	689a      	ldr	r2, [r3, #8]
 8000fbc:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8000fc0:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8000fc2:	689a      	ldr	r2, [r3, #8]
 8000fc4:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8000fc8:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	08db      	lsrs	r3, r3, #3
 8000fce:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000fd2:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8000fd4:	4b03      	ldr	r3, [pc, #12]	; (8000fe4 <HAL_RCC_GetClockConfig+0x38>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f003 030f 	and.w	r3, r3, #15
 8000fdc:	600b      	str	r3, [r1, #0]
 8000fde:	4770      	bx	lr
 8000fe0:	40023800 	.word	0x40023800
 8000fe4:	40023c00 	.word	0x40023c00

08000fe8 <SPI_WaitFlagStateUntilTimeout.constprop.9>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8000fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fea:	4604      	mov	r4, r0
 8000fec:	460e      	mov	r6, r1
 8000fee:	4615      	mov	r5, r2
 8000ff0:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8000ff2:	6821      	ldr	r1, [r4, #0]
 8000ff4:	688a      	ldr	r2, [r1, #8]
 8000ff6:	ea36 0302 	bics.w	r3, r6, r2
 8000ffa:	d001      	beq.n	8001000 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8000ffc:	2000      	movs	r0, #0
}
 8000ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001000:	1c6b      	adds	r3, r5, #1
 8001002:	d0f7      	beq.n	8000ff4 <SPI_WaitFlagStateUntilTimeout.constprop.9+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001004:	f7ff fa8e 	bl	8000524 <HAL_GetTick>
 8001008:	1bc0      	subs	r0, r0, r7
 800100a:	4285      	cmp	r5, r0
 800100c:	d8f1      	bhi.n	8000ff2 <SPI_WaitFlagStateUntilTimeout.constprop.9+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800100e:	6823      	ldr	r3, [r4, #0]
 8001010:	685a      	ldr	r2, [r3, #4]
 8001012:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001016:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001018:	6862      	ldr	r2, [r4, #4]
 800101a:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800101e:	d10a      	bne.n	8001036 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
 8001020:	68a2      	ldr	r2, [r4, #8]
 8001022:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001026:	d002      	beq.n	800102e <SPI_WaitFlagStateUntilTimeout.constprop.9+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001028:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800102c:	d103      	bne.n	8001036 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
          __HAL_SPI_DISABLE(hspi);
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001034:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001036:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001038:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800103c:	d107      	bne.n	800104e <SPI_WaitFlagStateUntilTimeout.constprop.9+0x66>
          SPI_RESET_CRC(hspi);
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800104c:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800104e:	2301      	movs	r3, #1
 8001050:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8001054:	2300      	movs	r3, #0
 8001056:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 800105a:	2003      	movs	r0, #3
 800105c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001060 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001060:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001062:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001064:	4a13      	ldr	r2, [pc, #76]	; (80010b4 <SPI_EndRxTxTransaction+0x54>)
 8001066:	4e14      	ldr	r6, [pc, #80]	; (80010b8 <SPI_EndRxTxTransaction+0x58>)
 8001068:	6815      	ldr	r5, [r2, #0]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800106a:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800106c:	fbb5 f6f6 	udiv	r6, r5, r6
 8001070:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8001074:	4375      	muls	r5, r6
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001076:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 800107a:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800107c:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800107e:	d10d      	bne.n	800109c <SPI_EndRxTxTransaction+0x3c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001080:	460a      	mov	r2, r1
 8001082:	2180      	movs	r1, #128	; 0x80
 8001084:	f7ff ffb0 	bl	8000fe8 <SPI_WaitFlagStateUntilTimeout.constprop.9>
 8001088:	b910      	cbnz	r0, 8001090 <SPI_EndRxTxTransaction+0x30>
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
 800108a:	2000      	movs	r0, #0
}
 800108c:	b002      	add	sp, #8
 800108e:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001090:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001092:	f043 0320 	orr.w	r3, r3, #32
 8001096:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8001098:	2003      	movs	r0, #3
 800109a:	e7f7      	b.n	800108c <SPI_EndRxTxTransaction+0x2c>
      if (count == 0U)
 800109c:	9b01      	ldr	r3, [sp, #4]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d0f3      	beq.n	800108a <SPI_EndRxTxTransaction+0x2a>
      count--;
 80010a2:	9b01      	ldr	r3, [sp, #4]
 80010a4:	3b01      	subs	r3, #1
 80010a6:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80010a8:	6823      	ldr	r3, [r4, #0]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	061b      	lsls	r3, r3, #24
 80010ae:	d4f5      	bmi.n	800109c <SPI_EndRxTxTransaction+0x3c>
 80010b0:	e7eb      	b.n	800108a <SPI_EndRxTxTransaction+0x2a>
 80010b2:	bf00      	nop
 80010b4:	20000020 	.word	0x20000020
 80010b8:	016e3600 	.word	0x016e3600

080010bc <HAL_SPI_Init>:
{
 80010bc:	b510      	push	{r4, lr}
  if (hspi == NULL)
 80010be:	4604      	mov	r4, r0
 80010c0:	2800      	cmp	r0, #0
 80010c2:	d036      	beq.n	8001132 <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010c4:	2300      	movs	r3, #0
 80010c6:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80010c8:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80010cc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80010d0:	b91b      	cbnz	r3, 80010da <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 80010d2:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80010d6:	f000 fe91 	bl	8001dfc <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 80010da:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80010dc:	68a0      	ldr	r0, [r4, #8]
 80010de:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 80010e0:	2302      	movs	r3, #2
 80010e2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80010e6:	680b      	ldr	r3, [r1, #0]
 80010e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80010ec:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80010ee:	6863      	ldr	r3, [r4, #4]
 80010f0:	4303      	orrs	r3, r0
 80010f2:	68e0      	ldr	r0, [r4, #12]
 80010f4:	4303      	orrs	r3, r0
 80010f6:	6920      	ldr	r0, [r4, #16]
 80010f8:	4303      	orrs	r3, r0
 80010fa:	6960      	ldr	r0, [r4, #20]
 80010fc:	4303      	orrs	r3, r0
 80010fe:	69e0      	ldr	r0, [r4, #28]
 8001100:	4303      	orrs	r3, r0
 8001102:	6a20      	ldr	r0, [r4, #32]
 8001104:	4303      	orrs	r3, r0
 8001106:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001108:	4303      	orrs	r3, r0
 800110a:	f402 7000 	and.w	r0, r2, #512	; 0x200
 800110e:	4303      	orrs	r3, r0
 8001110:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001112:	0c12      	lsrs	r2, r2, #16
 8001114:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001116:	f002 0204 	and.w	r2, r2, #4
 800111a:	431a      	orrs	r2, r3
 800111c:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800111e:	69cb      	ldr	r3, [r1, #28]
 8001120:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001124:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001126:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8001128:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800112a:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800112c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 8001130:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001132:	2001      	movs	r0, #1
}
 8001134:	bd10      	pop	{r4, pc}

08001136 <HAL_SPI_Transmit>:
{
 8001136:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800113a:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 800113c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8001140:	2b01      	cmp	r3, #1
{
 8001142:	4604      	mov	r4, r0
 8001144:	460d      	mov	r5, r1
 8001146:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8001148:	f000 809b 	beq.w	8001282 <HAL_SPI_Transmit+0x14c>
 800114c:	2301      	movs	r3, #1
 800114e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001152:	f7ff f9e7 	bl	8000524 <HAL_GetTick>
 8001156:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8001158:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 800115c:	b2c0      	uxtb	r0, r0
 800115e:	2801      	cmp	r0, #1
 8001160:	f040 808d 	bne.w	800127e <HAL_SPI_Transmit+0x148>
  if ((pData == NULL) || (Size == 0U))
 8001164:	2d00      	cmp	r5, #0
 8001166:	d05d      	beq.n	8001224 <HAL_SPI_Transmit+0xee>
 8001168:	f1b8 0f00 	cmp.w	r8, #0
 800116c:	d05a      	beq.n	8001224 <HAL_SPI_Transmit+0xee>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800116e:	2303      	movs	r3, #3
 8001170:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001174:	2000      	movs	r0, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001176:	68a3      	ldr	r3, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001178:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800117a:	63a0      	str	r0, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 800117c:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8001180:	87a0      	strh	r0, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001182:	87e0      	strh	r0, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001184:	6460      	str	r0, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001186:	6420      	str	r0, [r4, #64]	; 0x40
 8001188:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800118a:	6325      	str	r5, [r4, #48]	; 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800118c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 8001190:	bf08      	it	eq
 8001192:	6803      	ldreq	r3, [r0, #0]
  hspi->TxXferSize  = Size;
 8001194:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 8001198:	bf04      	itt	eq
 800119a:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 800119e:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80011a0:	6803      	ldr	r3, [r0, #0]
 80011a2:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 80011a4:	bf5e      	ittt	pl
 80011a6:	6803      	ldrpl	r3, [r0, #0]
 80011a8:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 80011ac:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80011ae:	68e3      	ldr	r3, [r4, #12]
 80011b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80011b4:	6863      	ldr	r3, [r4, #4]
 80011b6:	d13e      	bne.n	8001236 <HAL_SPI_Transmit+0x100>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80011b8:	b113      	cbz	r3, 80011c0 <HAL_SPI_Transmit+0x8a>
 80011ba:	f1b8 0f01 	cmp.w	r8, #1
 80011be:	d107      	bne.n	80011d0 <HAL_SPI_Transmit+0x9a>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80011c0:	f835 3b02 	ldrh.w	r3, [r5], #2
 80011c4:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80011c6:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80011c8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80011ca:	3b01      	subs	r3, #1
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80011d0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	b9a3      	cbnz	r3, 8001200 <HAL_SPI_Transmit+0xca>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80011d6:	463a      	mov	r2, r7
 80011d8:	4631      	mov	r1, r6
 80011da:	4620      	mov	r0, r4
 80011dc:	f7ff ff40 	bl	8001060 <SPI_EndRxTxTransaction>
 80011e0:	2800      	cmp	r0, #0
 80011e2:	d149      	bne.n	8001278 <HAL_SPI_Transmit+0x142>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80011e4:	68a3      	ldr	r3, [r4, #8]
 80011e6:	b933      	cbnz	r3, 80011f6 <HAL_SPI_Transmit+0xc0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80011e8:	9301      	str	r3, [sp, #4]
 80011ea:	6823      	ldr	r3, [r4, #0]
 80011ec:	68da      	ldr	r2, [r3, #12]
 80011ee:	9201      	str	r2, [sp, #4]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	9301      	str	r3, [sp, #4]
 80011f4:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80011f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 80011f8:	3000      	adds	r0, #0
 80011fa:	bf18      	it	ne
 80011fc:	2001      	movne	r0, #1
 80011fe:	e011      	b.n	8001224 <HAL_SPI_Transmit+0xee>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001200:	6822      	ldr	r2, [r4, #0]
 8001202:	6893      	ldr	r3, [r2, #8]
 8001204:	0798      	lsls	r0, r3, #30
 8001206:	d505      	bpl.n	8001214 <HAL_SPI_Transmit+0xde>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001208:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800120a:	f833 1b02 	ldrh.w	r1, [r3], #2
 800120e:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001210:	6323      	str	r3, [r4, #48]	; 0x30
 8001212:	e7d9      	b.n	80011c8 <HAL_SPI_Transmit+0x92>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001214:	f7ff f986 	bl	8000524 <HAL_GetTick>
 8001218:	1bc0      	subs	r0, r0, r7
 800121a:	42b0      	cmp	r0, r6
 800121c:	d3d8      	bcc.n	80011d0 <HAL_SPI_Transmit+0x9a>
 800121e:	1c71      	adds	r1, r6, #1
 8001220:	d0d6      	beq.n	80011d0 <HAL_SPI_Transmit+0x9a>
          errorcode = HAL_TIMEOUT;
 8001222:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001224:	2301      	movs	r3, #1
 8001226:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800122a:	2300      	movs	r3, #0
 800122c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001230:	b002      	add	sp, #8
 8001232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001236:	b113      	cbz	r3, 800123e <HAL_SPI_Transmit+0x108>
 8001238:	f1b8 0f01 	cmp.w	r8, #1
 800123c:	d108      	bne.n	8001250 <HAL_SPI_Transmit+0x11a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800123e:	782b      	ldrb	r3, [r5, #0]
 8001240:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001242:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001244:	3301      	adds	r3, #1
 8001246:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001248:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800124a:	3b01      	subs	r3, #1
 800124c:	b29b      	uxth	r3, r3
 800124e:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001250:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001252:	b29b      	uxth	r3, r3
 8001254:	2b00      	cmp	r3, #0
 8001256:	d0be      	beq.n	80011d6 <HAL_SPI_Transmit+0xa0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001258:	6823      	ldr	r3, [r4, #0]
 800125a:	689a      	ldr	r2, [r3, #8]
 800125c:	0792      	lsls	r2, r2, #30
 800125e:	d503      	bpl.n	8001268 <HAL_SPI_Transmit+0x132>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001260:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001262:	7812      	ldrb	r2, [r2, #0]
 8001264:	731a      	strb	r2, [r3, #12]
 8001266:	e7ec      	b.n	8001242 <HAL_SPI_Transmit+0x10c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001268:	f7ff f95c 	bl	8000524 <HAL_GetTick>
 800126c:	1bc0      	subs	r0, r0, r7
 800126e:	4286      	cmp	r6, r0
 8001270:	d8ee      	bhi.n	8001250 <HAL_SPI_Transmit+0x11a>
 8001272:	1c73      	adds	r3, r6, #1
 8001274:	d0ec      	beq.n	8001250 <HAL_SPI_Transmit+0x11a>
 8001276:	e7d4      	b.n	8001222 <HAL_SPI_Transmit+0xec>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001278:	2320      	movs	r3, #32
 800127a:	6563      	str	r3, [r4, #84]	; 0x54
 800127c:	e7b2      	b.n	80011e4 <HAL_SPI_Transmit+0xae>
    errorcode = HAL_BUSY;
 800127e:	2002      	movs	r0, #2
 8001280:	e7d0      	b.n	8001224 <HAL_SPI_Transmit+0xee>
  __HAL_LOCK(hspi);
 8001282:	2002      	movs	r0, #2
 8001284:	e7d4      	b.n	8001230 <HAL_SPI_Transmit+0xfa>

08001286 <HAL_TIM_Base_MspInit>:
 8001286:	4770      	bx	lr

08001288 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001288:	6803      	ldr	r3, [r0, #0]
 800128a:	68da      	ldr	r2, [r3, #12]
 800128c:	f042 0201 	orr.w	r2, r2, #1
 8001290:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001292:	689a      	ldr	r2, [r3, #8]
 8001294:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001298:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 800129a:	bf1e      	ittt	ne
 800129c:	681a      	ldrne	r2, [r3, #0]
 800129e:	f042 0201 	orrne.w	r2, r2, #1
 80012a2:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 80012a4:	2000      	movs	r0, #0
 80012a6:	4770      	bx	lr

080012a8 <HAL_TIM_OC_DelayElapsedCallback>:
 80012a8:	4770      	bx	lr

080012aa <HAL_TIM_IC_CaptureCallback>:
 80012aa:	4770      	bx	lr

080012ac <HAL_TIM_PWM_PulseFinishedCallback>:
 80012ac:	4770      	bx	lr

080012ae <HAL_TIM_TriggerCallback>:
 80012ae:	4770      	bx	lr

080012b0 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80012b0:	6803      	ldr	r3, [r0, #0]
 80012b2:	691a      	ldr	r2, [r3, #16]
 80012b4:	0791      	lsls	r1, r2, #30
{
 80012b6:	b510      	push	{r4, lr}
 80012b8:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80012ba:	d50e      	bpl.n	80012da <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80012bc:	68da      	ldr	r2, [r3, #12]
 80012be:	0792      	lsls	r2, r2, #30
 80012c0:	d50b      	bpl.n	80012da <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80012c2:	f06f 0202 	mvn.w	r2, #2
 80012c6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80012c8:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80012ca:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80012cc:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80012ce:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80012d0:	d077      	beq.n	80013c2 <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80012d2:	f7ff ffea 	bl	80012aa <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80012d6:	2300      	movs	r3, #0
 80012d8:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80012da:	6823      	ldr	r3, [r4, #0]
 80012dc:	691a      	ldr	r2, [r3, #16]
 80012de:	0750      	lsls	r0, r2, #29
 80012e0:	d510      	bpl.n	8001304 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80012e2:	68da      	ldr	r2, [r3, #12]
 80012e4:	0751      	lsls	r1, r2, #29
 80012e6:	d50d      	bpl.n	8001304 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80012e8:	f06f 0204 	mvn.w	r2, #4
 80012ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80012ee:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80012f0:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80012f2:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80012f6:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80012f8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80012fa:	d068      	beq.n	80013ce <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80012fc:	f7ff ffd5 	bl	80012aa <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001300:	2300      	movs	r3, #0
 8001302:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001304:	6823      	ldr	r3, [r4, #0]
 8001306:	691a      	ldr	r2, [r3, #16]
 8001308:	0712      	lsls	r2, r2, #28
 800130a:	d50f      	bpl.n	800132c <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800130c:	68da      	ldr	r2, [r3, #12]
 800130e:	0710      	lsls	r0, r2, #28
 8001310:	d50c      	bpl.n	800132c <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001312:	f06f 0208 	mvn.w	r2, #8
 8001316:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001318:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800131a:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800131c:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800131e:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001320:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001322:	d05a      	beq.n	80013da <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001324:	f7ff ffc1 	bl	80012aa <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001328:	2300      	movs	r3, #0
 800132a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800132c:	6823      	ldr	r3, [r4, #0]
 800132e:	691a      	ldr	r2, [r3, #16]
 8001330:	06d2      	lsls	r2, r2, #27
 8001332:	d510      	bpl.n	8001356 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001334:	68da      	ldr	r2, [r3, #12]
 8001336:	06d0      	lsls	r0, r2, #27
 8001338:	d50d      	bpl.n	8001356 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800133a:	f06f 0210 	mvn.w	r2, #16
 800133e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001340:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001342:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001344:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001348:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800134a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800134c:	d04b      	beq.n	80013e6 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 800134e:	f7ff ffac 	bl	80012aa <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001352:	2300      	movs	r3, #0
 8001354:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001356:	6823      	ldr	r3, [r4, #0]
 8001358:	691a      	ldr	r2, [r3, #16]
 800135a:	07d1      	lsls	r1, r2, #31
 800135c:	d508      	bpl.n	8001370 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800135e:	68da      	ldr	r2, [r3, #12]
 8001360:	07d2      	lsls	r2, r2, #31
 8001362:	d505      	bpl.n	8001370 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001364:	f06f 0201 	mvn.w	r2, #1
 8001368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800136a:	4620      	mov	r0, r4
 800136c:	f000 fd1e 	bl	8001dac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001370:	6823      	ldr	r3, [r4, #0]
 8001372:	691a      	ldr	r2, [r3, #16]
 8001374:	0610      	lsls	r0, r2, #24
 8001376:	d508      	bpl.n	800138a <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001378:	68da      	ldr	r2, [r3, #12]
 800137a:	0611      	lsls	r1, r2, #24
 800137c:	d505      	bpl.n	800138a <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800137e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001382:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001384:	4620      	mov	r0, r4
 8001386:	f000 f8b6 	bl	80014f6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800138a:	6823      	ldr	r3, [r4, #0]
 800138c:	691a      	ldr	r2, [r3, #16]
 800138e:	0652      	lsls	r2, r2, #25
 8001390:	d508      	bpl.n	80013a4 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001392:	68da      	ldr	r2, [r3, #12]
 8001394:	0650      	lsls	r0, r2, #25
 8001396:	d505      	bpl.n	80013a4 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001398:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800139c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800139e:	4620      	mov	r0, r4
 80013a0:	f7ff ff85 	bl	80012ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80013a4:	6823      	ldr	r3, [r4, #0]
 80013a6:	691a      	ldr	r2, [r3, #16]
 80013a8:	0691      	lsls	r1, r2, #26
 80013aa:	d522      	bpl.n	80013f2 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80013ac:	68da      	ldr	r2, [r3, #12]
 80013ae:	0692      	lsls	r2, r2, #26
 80013b0:	d51f      	bpl.n	80013f2 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80013b2:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80013b6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80013b8:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80013ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80013be:	f000 b899 	b.w	80014f4 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80013c2:	f7ff ff71 	bl	80012a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80013c6:	4620      	mov	r0, r4
 80013c8:	f7ff ff70 	bl	80012ac <HAL_TIM_PWM_PulseFinishedCallback>
 80013cc:	e783      	b.n	80012d6 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80013ce:	f7ff ff6b 	bl	80012a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80013d2:	4620      	mov	r0, r4
 80013d4:	f7ff ff6a 	bl	80012ac <HAL_TIM_PWM_PulseFinishedCallback>
 80013d8:	e792      	b.n	8001300 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80013da:	f7ff ff65 	bl	80012a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80013de:	4620      	mov	r0, r4
 80013e0:	f7ff ff64 	bl	80012ac <HAL_TIM_PWM_PulseFinishedCallback>
 80013e4:	e7a0      	b.n	8001328 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80013e6:	f7ff ff5f 	bl	80012a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80013ea:	4620      	mov	r0, r4
 80013ec:	f7ff ff5e 	bl	80012ac <HAL_TIM_PWM_PulseFinishedCallback>
 80013f0:	e7af      	b.n	8001352 <HAL_TIM_IRQHandler+0xa2>
 80013f2:	bd10      	pop	{r4, pc}

080013f4 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80013f4:	4a30      	ldr	r2, [pc, #192]	; (80014b8 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 80013f6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80013f8:	4290      	cmp	r0, r2
 80013fa:	d012      	beq.n	8001422 <TIM_Base_SetConfig+0x2e>
 80013fc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001400:	d00f      	beq.n	8001422 <TIM_Base_SetConfig+0x2e>
 8001402:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001406:	4290      	cmp	r0, r2
 8001408:	d00b      	beq.n	8001422 <TIM_Base_SetConfig+0x2e>
 800140a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800140e:	4290      	cmp	r0, r2
 8001410:	d007      	beq.n	8001422 <TIM_Base_SetConfig+0x2e>
 8001412:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001416:	4290      	cmp	r0, r2
 8001418:	d003      	beq.n	8001422 <TIM_Base_SetConfig+0x2e>
 800141a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800141e:	4290      	cmp	r0, r2
 8001420:	d119      	bne.n	8001456 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001422:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001424:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001428:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800142a:	4a23      	ldr	r2, [pc, #140]	; (80014b8 <TIM_Base_SetConfig+0xc4>)
 800142c:	4290      	cmp	r0, r2
 800142e:	d029      	beq.n	8001484 <TIM_Base_SetConfig+0x90>
 8001430:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001434:	d026      	beq.n	8001484 <TIM_Base_SetConfig+0x90>
 8001436:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800143a:	4290      	cmp	r0, r2
 800143c:	d022      	beq.n	8001484 <TIM_Base_SetConfig+0x90>
 800143e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001442:	4290      	cmp	r0, r2
 8001444:	d01e      	beq.n	8001484 <TIM_Base_SetConfig+0x90>
 8001446:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800144a:	4290      	cmp	r0, r2
 800144c:	d01a      	beq.n	8001484 <TIM_Base_SetConfig+0x90>
 800144e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001452:	4290      	cmp	r0, r2
 8001454:	d016      	beq.n	8001484 <TIM_Base_SetConfig+0x90>
 8001456:	4a19      	ldr	r2, [pc, #100]	; (80014bc <TIM_Base_SetConfig+0xc8>)
 8001458:	4290      	cmp	r0, r2
 800145a:	d013      	beq.n	8001484 <TIM_Base_SetConfig+0x90>
 800145c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001460:	4290      	cmp	r0, r2
 8001462:	d00f      	beq.n	8001484 <TIM_Base_SetConfig+0x90>
 8001464:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001468:	4290      	cmp	r0, r2
 800146a:	d00b      	beq.n	8001484 <TIM_Base_SetConfig+0x90>
 800146c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001470:	4290      	cmp	r0, r2
 8001472:	d007      	beq.n	8001484 <TIM_Base_SetConfig+0x90>
 8001474:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001478:	4290      	cmp	r0, r2
 800147a:	d003      	beq.n	8001484 <TIM_Base_SetConfig+0x90>
 800147c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001480:	4290      	cmp	r0, r2
 8001482:	d103      	bne.n	800148c <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001484:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001486:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800148a:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800148c:	694a      	ldr	r2, [r1, #20]
 800148e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001492:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001494:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001496:	688b      	ldr	r3, [r1, #8]
 8001498:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800149a:	680b      	ldr	r3, [r1, #0]
 800149c:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800149e:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <TIM_Base_SetConfig+0xc4>)
 80014a0:	4298      	cmp	r0, r3
 80014a2:	d003      	beq.n	80014ac <TIM_Base_SetConfig+0xb8>
 80014a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80014a8:	4298      	cmp	r0, r3
 80014aa:	d101      	bne.n	80014b0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80014ac:	690b      	ldr	r3, [r1, #16]
 80014ae:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80014b0:	2301      	movs	r3, #1
 80014b2:	6143      	str	r3, [r0, #20]
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	40010000 	.word	0x40010000
 80014bc:	40014000 	.word	0x40014000

080014c0 <HAL_TIM_Base_Init>:
{
 80014c0:	b510      	push	{r4, lr}
  if (htim == NULL)
 80014c2:	4604      	mov	r4, r0
 80014c4:	b1a0      	cbz	r0, 80014f0 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80014c6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80014ca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80014ce:	b91b      	cbnz	r3, 80014d8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80014d0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80014d4:	f7ff fed7 	bl	8001286 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80014d8:	2302      	movs	r3, #2
 80014da:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80014de:	6820      	ldr	r0, [r4, #0]
 80014e0:	1d21      	adds	r1, r4, #4
 80014e2:	f7ff ff87 	bl	80013f4 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80014e6:	2301      	movs	r3, #1
 80014e8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80014ec:	2000      	movs	r0, #0
 80014ee:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80014f0:	2001      	movs	r0, #1
}
 80014f2:	bd10      	pop	{r4, pc}

080014f4 <HAL_TIMEx_CommutCallback>:
 80014f4:	4770      	bx	lr

080014f6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80014f6:	4770      	bx	lr

080014f8 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80014f8:	6803      	ldr	r3, [r0, #0]
 80014fa:	68da      	ldr	r2, [r3, #12]
 80014fc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001500:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001502:	695a      	ldr	r2, [r3, #20]
 8001504:	f022 0201 	bic.w	r2, r2, #1
 8001508:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800150a:	2320      	movs	r3, #32
 800150c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8001510:	4770      	bx	lr
	...

08001514 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001514:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001516:	6803      	ldr	r3, [r0, #0]
 8001518:	68c1      	ldr	r1, [r0, #12]
 800151a:	691a      	ldr	r2, [r3, #16]
{
 800151c:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800151e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001522:	430a      	orrs	r2, r1
 8001524:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001526:	6925      	ldr	r5, [r4, #16]
 8001528:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 800152a:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800152c:	69c0      	ldr	r0, [r0, #28]
 800152e:	432a      	orrs	r2, r5
 8001530:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8001532:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001536:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8001538:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800153c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800153e:	430a      	orrs	r2, r1
 8001540:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001542:	695a      	ldr	r2, [r3, #20]
 8001544:	69a1      	ldr	r1, [r4, #24]
 8001546:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800154a:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800154c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001550:	615a      	str	r2, [r3, #20]
 8001552:	4a25      	ldr	r2, [pc, #148]	; (80015e8 <UART_SetConfig+0xd4>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001554:	d129      	bne.n	80015aa <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001556:	4293      	cmp	r3, r2
 8001558:	d003      	beq.n	8001562 <UART_SetConfig+0x4e>
 800155a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800155e:	4293      	cmp	r3, r2
 8001560:	d120      	bne.n	80015a4 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001562:	f7ff fd13 	bl	8000f8c <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001566:	6862      	ldr	r2, [r4, #4]
 8001568:	6825      	ldr	r5, [r4, #0]
 800156a:	1892      	adds	r2, r2, r2
 800156c:	f04f 0300 	mov.w	r3, #0
 8001570:	f04f 0119 	mov.w	r1, #25
 8001574:	415b      	adcs	r3, r3
 8001576:	fba0 0101 	umull	r0, r1, r0, r1
 800157a:	f7fe fe25 	bl	80001c8 <__aeabi_uldivmod>
 800157e:	2164      	movs	r1, #100	; 0x64
 8001580:	fbb0 f4f1 	udiv	r4, r0, r1
 8001584:	fb01 0314 	mls	r3, r1, r4, r0
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	3332      	adds	r3, #50	; 0x32
 800158c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001590:	f003 0207 	and.w	r2, r3, #7
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 800159a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800159e:	4413      	add	r3, r2
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80015a0:	60ab      	str	r3, [r5, #8]
 80015a2:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 80015a4:	f7ff fce2 	bl	8000f6c <HAL_RCC_GetPCLK1Freq>
 80015a8:	e7dd      	b.n	8001566 <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d002      	beq.n	80015b4 <UART_SetConfig+0xa0>
 80015ae:	4a0f      	ldr	r2, [pc, #60]	; (80015ec <UART_SetConfig+0xd8>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d116      	bne.n	80015e2 <UART_SetConfig+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
 80015b4:	f7ff fcea 	bl	8000f8c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80015b8:	6863      	ldr	r3, [r4, #4]
 80015ba:	6825      	ldr	r5, [r4, #0]
 80015bc:	2119      	movs	r1, #25
 80015be:	009a      	lsls	r2, r3, #2
 80015c0:	fba0 0101 	umull	r0, r1, r0, r1
 80015c4:	0f9b      	lsrs	r3, r3, #30
 80015c6:	f7fe fdff 	bl	80001c8 <__aeabi_uldivmod>
 80015ca:	2264      	movs	r2, #100	; 0x64
 80015cc:	fbb0 f1f2 	udiv	r1, r0, r2
 80015d0:	fb02 0311 	mls	r3, r2, r1, r0
 80015d4:	011b      	lsls	r3, r3, #4
 80015d6:	3332      	adds	r3, #50	; 0x32
 80015d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80015dc:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80015e0:	e7de      	b.n	80015a0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK1Freq();
 80015e2:	f7ff fcc3 	bl	8000f6c <HAL_RCC_GetPCLK1Freq>
 80015e6:	e7e7      	b.n	80015b8 <UART_SetConfig+0xa4>
 80015e8:	40011000 	.word	0x40011000
 80015ec:	40011400 	.word	0x40011400

080015f0 <HAL_UART_Init>:
{
 80015f0:	b510      	push	{r4, lr}
  if (huart == NULL)
 80015f2:	4604      	mov	r4, r0
 80015f4:	b340      	cbz	r0, 8001648 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80015f6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80015fa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80015fe:	b91b      	cbnz	r3, 8001608 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001600:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001604:	f000 fc30 	bl	8001e68 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001608:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800160a:	2324      	movs	r3, #36	; 0x24
 800160c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001610:	68d3      	ldr	r3, [r2, #12]
 8001612:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001616:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001618:	4620      	mov	r0, r4
 800161a:	f7ff ff7b 	bl	8001514 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800161e:	6823      	ldr	r3, [r4, #0]
 8001620:	691a      	ldr	r2, [r3, #16]
 8001622:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001626:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001628:	695a      	ldr	r2, [r3, #20]
 800162a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800162e:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001630:	68da      	ldr	r2, [r3, #12]
 8001632:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001636:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001638:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800163a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800163c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800163e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001642:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001646:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001648:	2001      	movs	r0, #1
}
 800164a:	bd10      	pop	{r4, pc}

0800164c <HAL_UART_TxCpltCallback>:
 800164c:	4770      	bx	lr

0800164e <HAL_UART_RxCpltCallback>:
 800164e:	4770      	bx	lr

08001650 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001650:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001654:	2b22      	cmp	r3, #34	; 0x22
{
 8001656:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001658:	d136      	bne.n	80016c8 <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800165a:	6883      	ldr	r3, [r0, #8]
 800165c:	6901      	ldr	r1, [r0, #16]
 800165e:	6802      	ldr	r2, [r0, #0]
 8001660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001664:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001666:	d123      	bne.n	80016b0 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001668:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800166a:	b9e9      	cbnz	r1, 80016a8 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800166c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001670:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8001674:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8001676:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8001678:	3c01      	subs	r4, #1
 800167a:	b2a4      	uxth	r4, r4
 800167c:	85c4      	strh	r4, [r0, #46]	; 0x2e
 800167e:	b98c      	cbnz	r4, 80016a4 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001680:	6803      	ldr	r3, [r0, #0]
 8001682:	68da      	ldr	r2, [r3, #12]
 8001684:	f022 0220 	bic.w	r2, r2, #32
 8001688:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800168a:	68da      	ldr	r2, [r3, #12]
 800168c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001690:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001692:	695a      	ldr	r2, [r3, #20]
 8001694:	f022 0201 	bic.w	r2, r2, #1
 8001698:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800169a:	2320      	movs	r3, #32
 800169c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 80016a0:	f7ff ffd5 	bl	800164e <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 80016a4:	2000      	movs	r0, #0
}
 80016a6:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80016a8:	b2d2      	uxtb	r2, r2
 80016aa:	f823 2b01 	strh.w	r2, [r3], #1
 80016ae:	e7e1      	b.n	8001674 <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 80016b0:	b921      	cbnz	r1, 80016bc <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80016b2:	1c59      	adds	r1, r3, #1
 80016b4:	6852      	ldr	r2, [r2, #4]
 80016b6:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80016b8:	701a      	strb	r2, [r3, #0]
 80016ba:	e7dc      	b.n	8001676 <UART_Receive_IT+0x26>
 80016bc:	6852      	ldr	r2, [r2, #4]
 80016be:	1c59      	adds	r1, r3, #1
 80016c0:	6281      	str	r1, [r0, #40]	; 0x28
 80016c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80016c6:	e7f7      	b.n	80016b8 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 80016c8:	2002      	movs	r0, #2
 80016ca:	bd10      	pop	{r4, pc}

080016cc <HAL_UART_ErrorCallback>:
 80016cc:	4770      	bx	lr
	...

080016d0 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80016d0:	6803      	ldr	r3, [r0, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80016d4:	68d9      	ldr	r1, [r3, #12]
{
 80016d6:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 80016d8:	0716      	lsls	r6, r2, #28
{
 80016da:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80016dc:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 80016de:	d107      	bne.n	80016f0 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80016e0:	0696      	lsls	r6, r2, #26
 80016e2:	d55c      	bpl.n	800179e <HAL_UART_IRQHandler+0xce>
 80016e4:	068d      	lsls	r5, r1, #26
 80016e6:	d55a      	bpl.n	800179e <HAL_UART_IRQHandler+0xce>
}
 80016e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80016ec:	f7ff bfb0 	b.w	8001650 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80016f0:	f015 0501 	ands.w	r5, r5, #1
 80016f4:	d102      	bne.n	80016fc <HAL_UART_IRQHandler+0x2c>
 80016f6:	f411 7f90 	tst.w	r1, #288	; 0x120
 80016fa:	d050      	beq.n	800179e <HAL_UART_IRQHandler+0xce>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80016fc:	07d0      	lsls	r0, r2, #31
 80016fe:	d505      	bpl.n	800170c <HAL_UART_IRQHandler+0x3c>
 8001700:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001702:	bf42      	ittt	mi
 8001704:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8001706:	f043 0301 	orrmi.w	r3, r3, #1
 800170a:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800170c:	0756      	lsls	r6, r2, #29
 800170e:	d504      	bpl.n	800171a <HAL_UART_IRQHandler+0x4a>
 8001710:	b11d      	cbz	r5, 800171a <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001712:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001714:	f043 0302 	orr.w	r3, r3, #2
 8001718:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800171a:	0790      	lsls	r0, r2, #30
 800171c:	d504      	bpl.n	8001728 <HAL_UART_IRQHandler+0x58>
 800171e:	b11d      	cbz	r5, 8001728 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001720:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001722:	f043 0304 	orr.w	r3, r3, #4
 8001726:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001728:	0713      	lsls	r3, r2, #28
 800172a:	d506      	bpl.n	800173a <HAL_UART_IRQHandler+0x6a>
 800172c:	068e      	lsls	r6, r1, #26
 800172e:	d400      	bmi.n	8001732 <HAL_UART_IRQHandler+0x62>
 8001730:	b11d      	cbz	r5, 800173a <HAL_UART_IRQHandler+0x6a>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001732:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001734:	f043 0308 	orr.w	r3, r3, #8
 8001738:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800173a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800173c:	2b00      	cmp	r3, #0
 800173e:	d066      	beq.n	800180e <HAL_UART_IRQHandler+0x13e>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001740:	0695      	lsls	r5, r2, #26
 8001742:	d504      	bpl.n	800174e <HAL_UART_IRQHandler+0x7e>
 8001744:	0688      	lsls	r0, r1, #26
 8001746:	d502      	bpl.n	800174e <HAL_UART_IRQHandler+0x7e>
        UART_Receive_IT(huart);
 8001748:	4620      	mov	r0, r4
 800174a:	f7ff ff81 	bl	8001650 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800174e:	6823      	ldr	r3, [r4, #0]
 8001750:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001752:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001754:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 8001756:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001758:	d402      	bmi.n	8001760 <HAL_UART_IRQHandler+0x90>
 800175a:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800175e:	d01a      	beq.n	8001796 <HAL_UART_IRQHandler+0xc6>
        UART_EndRxTransfer(huart);
 8001760:	f7ff feca 	bl	80014f8 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001764:	6823      	ldr	r3, [r4, #0]
 8001766:	695a      	ldr	r2, [r3, #20]
 8001768:	0652      	lsls	r2, r2, #25
 800176a:	d510      	bpl.n	800178e <HAL_UART_IRQHandler+0xbe>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800176c:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800176e:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001770:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001774:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8001776:	b150      	cbz	r0, 800178e <HAL_UART_IRQHandler+0xbe>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001778:	4b25      	ldr	r3, [pc, #148]	; (8001810 <HAL_UART_IRQHandler+0x140>)
 800177a:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800177c:	f7fe ffd4 	bl	8000728 <HAL_DMA_Abort_IT>
 8001780:	2800      	cmp	r0, #0
 8001782:	d044      	beq.n	800180e <HAL_UART_IRQHandler+0x13e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001784:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8001786:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800178a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800178c:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800178e:	4620      	mov	r0, r4
 8001790:	f7ff ff9c 	bl	80016cc <HAL_UART_ErrorCallback>
 8001794:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8001796:	f7ff ff99 	bl	80016cc <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800179a:	63e5      	str	r5, [r4, #60]	; 0x3c
 800179c:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800179e:	0616      	lsls	r6, r2, #24
 80017a0:	d527      	bpl.n	80017f2 <HAL_UART_IRQHandler+0x122>
 80017a2:	060d      	lsls	r5, r1, #24
 80017a4:	d525      	bpl.n	80017f2 <HAL_UART_IRQHandler+0x122>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80017a6:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80017aa:	2a21      	cmp	r2, #33	; 0x21
 80017ac:	d12f      	bne.n	800180e <HAL_UART_IRQHandler+0x13e>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80017ae:	68a2      	ldr	r2, [r4, #8]
 80017b0:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80017b4:	6a22      	ldr	r2, [r4, #32]
 80017b6:	d117      	bne.n	80017e8 <HAL_UART_IRQHandler+0x118>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80017b8:	8811      	ldrh	r1, [r2, #0]
 80017ba:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80017be:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80017c0:	6921      	ldr	r1, [r4, #16]
 80017c2:	b979      	cbnz	r1, 80017e4 <HAL_UART_IRQHandler+0x114>
        huart->pTxBuffPtr += 2U;
 80017c4:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 80017c6:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 80017c8:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80017ca:	3a01      	subs	r2, #1
 80017cc:	b292      	uxth	r2, r2
 80017ce:	84e2      	strh	r2, [r4, #38]	; 0x26
 80017d0:	b9ea      	cbnz	r2, 800180e <HAL_UART_IRQHandler+0x13e>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80017d2:	68da      	ldr	r2, [r3, #12]
 80017d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017d8:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80017da:	68da      	ldr	r2, [r3, #12]
 80017dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017e0:	60da      	str	r2, [r3, #12]
 80017e2:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 80017e4:	3201      	adds	r2, #1
 80017e6:	e7ee      	b.n	80017c6 <HAL_UART_IRQHandler+0xf6>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80017e8:	1c51      	adds	r1, r2, #1
 80017ea:	6221      	str	r1, [r4, #32]
 80017ec:	7812      	ldrb	r2, [r2, #0]
 80017ee:	605a      	str	r2, [r3, #4]
 80017f0:	e7ea      	b.n	80017c8 <HAL_UART_IRQHandler+0xf8>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80017f2:	0650      	lsls	r0, r2, #25
 80017f4:	d50b      	bpl.n	800180e <HAL_UART_IRQHandler+0x13e>
 80017f6:	064a      	lsls	r2, r1, #25
 80017f8:	d509      	bpl.n	800180e <HAL_UART_IRQHandler+0x13e>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80017fa:	68da      	ldr	r2, [r3, #12]
 80017fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001800:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001802:	2320      	movs	r3, #32
 8001804:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8001808:	4620      	mov	r0, r4
 800180a:	f7ff ff1f 	bl	800164c <HAL_UART_TxCpltCallback>
 800180e:	bd70      	pop	{r4, r5, r6, pc}
 8001810:	08001815 	.word	0x08001815

08001814 <UART_DMAAbortOnError>:
{
 8001814:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001816:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8001818:	2300      	movs	r3, #0
 800181a:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800181c:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800181e:	f7ff ff55 	bl	80016cc <HAL_UART_ErrorCallback>
 8001822:	bd08      	pop	{r3, pc}

08001824 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8001824:	2200      	movs	r2, #0
 8001826:	2110      	movs	r1, #16
 8001828:	4801      	ldr	r0, [pc, #4]	; (8001830 <ST7735_Select+0xc>)
 800182a:	f7ff b929 	b.w	8000a80 <HAL_GPIO_WritePin>
 800182e:	bf00      	nop
 8001830:	40020000 	.word	0x40020000

08001834 <ST7735_WriteCommand>:
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
    HAL_Delay(5);
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
}

static void ST7735_WriteCommand(uint8_t cmd) {
 8001834:	b513      	push	{r0, r1, r4, lr}
 8001836:	ac02      	add	r4, sp, #8
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8001838:	2200      	movs	r2, #0
static void ST7735_WriteCommand(uint8_t cmd) {
 800183a:	f804 0d01 	strb.w	r0, [r4, #-1]!
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 800183e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001842:	4806      	ldr	r0, [pc, #24]	; (800185c <ST7735_WriteCommand+0x28>)
 8001844:	f7ff f91c 	bl	8000a80 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001848:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800184c:	2201      	movs	r2, #1
 800184e:	4621      	mov	r1, r4
 8001850:	4803      	ldr	r0, [pc, #12]	; (8001860 <ST7735_WriteCommand+0x2c>)
 8001852:	f7ff fc70 	bl	8001136 <HAL_SPI_Transmit>
}
 8001856:	b002      	add	sp, #8
 8001858:	bd10      	pop	{r4, pc}
 800185a:	bf00      	nop
 800185c:	40020800 	.word	0x40020800
 8001860:	200000a4 	.word	0x200000a4

08001864 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8001864:	b570      	push	{r4, r5, r6, lr}
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8001866:	2201      	movs	r2, #1
static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8001868:	4604      	mov	r4, r0
 800186a:	460d      	mov	r5, r1
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800186c:	4806      	ldr	r0, [pc, #24]	; (8001888 <ST7735_WriteData+0x24>)
 800186e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001872:	f7ff f905 	bl	8000a80 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8001876:	b2aa      	uxth	r2, r5
 8001878:	4621      	mov	r1, r4
 800187a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800187e:	4803      	ldr	r0, [pc, #12]	; (800188c <ST7735_WriteData+0x28>)
}
 8001880:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8001884:	f7ff bc57 	b.w	8001136 <HAL_SPI_Transmit>
 8001888:	40020800 	.word	0x40020800
 800188c:	200000a4 	.word	0x200000a4

08001890 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8001890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8001892:	7805      	ldrb	r5, [r0, #0]
 8001894:	1c46      	adds	r6, r0, #1
    while(numCommands--) {
 8001896:	b905      	cbnz	r5, 800189a <ST7735_ExecuteCommandList+0xa>
            ms = *addr++;
            if(ms == 255) ms = 500;
            HAL_Delay(ms);
        }
    }
}
 8001898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ST7735_WriteCommand(cmd);
 800189a:	4634      	mov	r4, r6
 800189c:	f814 0b02 	ldrb.w	r0, [r4], #2
 80018a0:	f7ff ffc8 	bl	8001834 <ST7735_WriteCommand>
        numArgs = *addr++;
 80018a4:	7876      	ldrb	r6, [r6, #1]
        if(numArgs) {
 80018a6:	f016 077f 	ands.w	r7, r6, #127	; 0x7f
 80018aa:	d004      	beq.n	80018b6 <ST7735_ExecuteCommandList+0x26>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 80018ac:	4620      	mov	r0, r4
 80018ae:	4639      	mov	r1, r7
 80018b0:	f7ff ffd8 	bl	8001864 <ST7735_WriteData>
            addr += numArgs;
 80018b4:	443c      	add	r4, r7
        if(ms) {
 80018b6:	0633      	lsls	r3, r6, #24
 80018b8:	d508      	bpl.n	80018cc <ST7735_ExecuteCommandList+0x3c>
            ms = *addr++;
 80018ba:	7820      	ldrb	r0, [r4, #0]
            if(ms == 255) ms = 500;
 80018bc:	28ff      	cmp	r0, #255	; 0xff
            HAL_Delay(ms);
 80018be:	bf08      	it	eq
 80018c0:	f44f 70fa 	moveq.w	r0, #500	; 0x1f4
 80018c4:	f7fe fe34 	bl	8000530 <HAL_Delay>
            ms = *addr++;
 80018c8:	1c66      	adds	r6, r4, #1
 80018ca:	4634      	mov	r4, r6
 80018cc:	3d01      	subs	r5, #1
 80018ce:	b2ed      	uxtb	r5, r5
 80018d0:	4626      	mov	r6, r4
 80018d2:	e7e0      	b.n	8001896 <ST7735_ExecuteCommandList+0x6>

080018d4 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 80018d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80018d6:	4607      	mov	r7, r0
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80018d8:	202a      	movs	r0, #42	; 0x2a
static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 80018da:	4616      	mov	r6, r2
 80018dc:	461c      	mov	r4, r3
 80018de:	460d      	mov	r5, r1
    ST7735_WriteCommand(ST7735_CASET);
 80018e0:	f7ff ffa8 	bl	8001834 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 80018e4:	2100      	movs	r1, #0
 80018e6:	f88d 1004 	strb.w	r1, [sp, #4]
 80018ea:	f88d 1006 	strb.w	r1, [sp, #6]
    ST7735_WriteData(data, sizeof(data));
 80018ee:	2104      	movs	r1, #4
 80018f0:	eb0d 0001 	add.w	r0, sp, r1
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 80018f4:	f88d 7005 	strb.w	r7, [sp, #5]
 80018f8:	f88d 6007 	strb.w	r6, [sp, #7]
    ST7735_WriteData(data, sizeof(data));
 80018fc:	f7ff ffb2 	bl	8001864 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8001900:	202b      	movs	r0, #43	; 0x2b
 8001902:	f7ff ff97 	bl	8001834 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
    data[3] = y1 + ST7735_YSTART;
    ST7735_WriteData(data, sizeof(data));
 8001906:	2104      	movs	r1, #4
 8001908:	eb0d 0001 	add.w	r0, sp, r1
    data[1] = y0 + ST7735_YSTART;
 800190c:	f88d 5005 	strb.w	r5, [sp, #5]
    data[3] = y1 + ST7735_YSTART;
 8001910:	f88d 4007 	strb.w	r4, [sp, #7]
    ST7735_WriteData(data, sizeof(data));
 8001914:	f7ff ffa6 	bl	8001864 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8001918:	202c      	movs	r0, #44	; 0x2c
 800191a:	f7ff ff8b 	bl	8001834 <ST7735_WriteCommand>
}
 800191e:	b003      	add	sp, #12
 8001920:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001924 <ST7735_Unselect>:
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8001924:	2201      	movs	r2, #1
 8001926:	2110      	movs	r1, #16
 8001928:	4801      	ldr	r0, [pc, #4]	; (8001930 <ST7735_Unselect+0xc>)
 800192a:	f7ff b8a9 	b.w	8000a80 <HAL_GPIO_WritePin>
 800192e:	bf00      	nop
 8001930:	40020000 	.word	0x40020000

08001934 <ST7735_FillRectangle.part.1>:
    }

    ST7735_Unselect();
}

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8001934:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001938:	461c      	mov	r4, r3
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 800193a:	1883      	adds	r3, r0, r2
 800193c:	2b80      	cmp	r3, #128	; 0x80
void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 800193e:	4615      	mov	r5, r2
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8001940:	eb01 0304 	add.w	r3, r1, r4
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8001944:	bfc4      	itt	gt
 8001946:	f1c0 0580 	rsbgt	r5, r0, #128	; 0x80
 800194a:	b2ad      	uxthgt	r5, r5
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 800194c:	2ba0      	cmp	r3, #160	; 0xa0
 800194e:	bfc8      	it	gt
 8001950:	f1c1 04a0 	rsbgt	r4, r1, #160	; 0xa0
void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8001954:	460f      	mov	r7, r1
 8001956:	4606      	mov	r6, r0
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8001958:	bfc8      	it	gt
 800195a:	b2a4      	uxthgt	r4, r4
void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 800195c:	f8bd 8020 	ldrh.w	r8, [sp, #32]

    ST7735_Select();
 8001960:	f7ff ff60 	bl	8001824 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8001964:	b2f9      	uxtb	r1, r7
 8001966:	b2f0      	uxtb	r0, r6
 8001968:	1e4b      	subs	r3, r1, #1
 800196a:	1e42      	subs	r2, r0, #1
 800196c:	4423      	add	r3, r4
 800196e:	442a      	add	r2, r5
 8001970:	b2db      	uxtb	r3, r3
 8001972:	b2d2      	uxtb	r2, r2
 8001974:	f7ff ffae 	bl	80018d4 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8001978:	ea4f 2318 	mov.w	r3, r8, lsr #8
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800197c:	2201      	movs	r2, #1
 800197e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001982:	480f      	ldr	r0, [pc, #60]	; (80019c0 <ST7735_FillRectangle.part.1+0x8c>)
    uint8_t data[] = { color >> 8, color & 0xFF };
 8001984:	f88d 3004 	strb.w	r3, [sp, #4]
 8001988:	f88d 8005 	strb.w	r8, [sp, #5]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800198c:	f7ff f878 	bl	8000a80 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
        for(x = w; x > 0; x--) {
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8001990:	4f0c      	ldr	r7, [pc, #48]	; (80019c4 <ST7735_FillRectangle.part.1+0x90>)
    for(y = h; y > 0; y--) {
 8001992:	b17c      	cbz	r4, 80019b4 <ST7735_FillRectangle.part.1+0x80>
 8001994:	462e      	mov	r6, r5
 8001996:	e008      	b.n	80019aa <ST7735_FillRectangle.part.1+0x76>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8001998:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800199c:	2202      	movs	r2, #2
 800199e:	a901      	add	r1, sp, #4
 80019a0:	4638      	mov	r0, r7
 80019a2:	f7ff fbc8 	bl	8001136 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80019a6:	3e01      	subs	r6, #1
 80019a8:	b2b6      	uxth	r6, r6
 80019aa:	2e00      	cmp	r6, #0
 80019ac:	d1f4      	bne.n	8001998 <ST7735_FillRectangle.part.1+0x64>
    for(y = h; y > 0; y--) {
 80019ae:	3c01      	subs	r4, #1
 80019b0:	b2a4      	uxth	r4, r4
 80019b2:	e7ee      	b.n	8001992 <ST7735_FillRectangle.part.1+0x5e>
        }
    }

    ST7735_Unselect();
 80019b4:	f7ff ffb6 	bl	8001924 <ST7735_Unselect>
}
 80019b8:	b002      	add	sp, #8
 80019ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80019be:	bf00      	nop
 80019c0:	40020800 	.word	0x40020800
 80019c4:	200000a4 	.word	0x200000a4

080019c8 <ST7735_Init>:
void ST7735_Init() {
 80019c8:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 80019ca:	4c0e      	ldr	r4, [pc, #56]	; (8001a04 <ST7735_Init+0x3c>)
    ST7735_Select();
 80019cc:	f7ff ff2a 	bl	8001824 <ST7735_Select>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 80019d0:	2200      	movs	r2, #0
 80019d2:	2102      	movs	r1, #2
 80019d4:	4620      	mov	r0, r4
 80019d6:	f7ff f853 	bl	8000a80 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80019da:	2005      	movs	r0, #5
 80019dc:	f7fe fda8 	bl	8000530 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 80019e0:	2201      	movs	r2, #1
 80019e2:	2102      	movs	r1, #2
 80019e4:	4620      	mov	r0, r4
 80019e6:	f7ff f84b 	bl	8000a80 <HAL_GPIO_WritePin>
    ST7735_ExecuteCommandList(init_cmds1);
 80019ea:	4807      	ldr	r0, [pc, #28]	; (8001a08 <ST7735_Init+0x40>)
 80019ec:	f7ff ff50 	bl	8001890 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 80019f0:	4806      	ldr	r0, [pc, #24]	; (8001a0c <ST7735_Init+0x44>)
 80019f2:	f7ff ff4d 	bl	8001890 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 80019f6:	4806      	ldr	r0, [pc, #24]	; (8001a10 <ST7735_Init+0x48>)
 80019f8:	f7ff ff4a 	bl	8001890 <ST7735_ExecuteCommandList>
}
 80019fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ST7735_Unselect();
 8001a00:	f7ff bf90 	b.w	8001924 <ST7735_Unselect>
 8001a04:	40020c00 	.word	0x40020c00
 8001a08:	08004918 	.word	0x08004918
 8001a0c:	08004953 	.word	0x08004953
 8001a10:	08004960 	.word	0x08004960

08001a14 <ST7735_WriteString>:
void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001a14:	b082      	sub	sp, #8
 8001a16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a1a:	b089      	sub	sp, #36	; 0x24
 8001a1c:	4614      	mov	r4, r2
 8001a1e:	f8bd a058 	ldrh.w	sl, [sp, #88]	; 0x58
 8001a22:	f8bd 9054 	ldrh.w	r9, [sp, #84]	; 0x54
 8001a26:	9313      	str	r3, [sp, #76]	; 0x4c
 8001a28:	fa5f f883 	uxtb.w	r8, r3
 8001a2c:	f3c3 2707 	ubfx	r7, r3, #8, #8
 8001a30:	4605      	mov	r5, r0
 8001a32:	460e      	mov	r6, r1
    ST7735_Select();
 8001a34:	f7ff fef6 	bl	8001824 <ST7735_Select>
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8001a38:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8001a3c:	9305      	str	r3, [sp, #20]
                uint8_t data[] = { color >> 8, color & 0xFF };
 8001a3e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8001a42:	9304      	str	r3, [sp, #16]
 8001a44:	9401      	str	r4, [sp, #4]
    while(*str) {
 8001a46:	9b01      	ldr	r3, [sp, #4]
 8001a48:	f813 4b01 	ldrb.w	r4, [r3], #1
 8001a4c:	9301      	str	r3, [sp, #4]
 8001a4e:	b934      	cbnz	r4, 8001a5e <ST7735_WriteString+0x4a>
    ST7735_Unselect();
 8001a50:	f7ff ff68 	bl	8001924 <ST7735_Unselect>
}
 8001a54:	b009      	add	sp, #36	; 0x24
 8001a56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a5a:	b002      	add	sp, #8
 8001a5c:	4770      	bx	lr
        if(x + font.width >= ST7735_WIDTH) {
 8001a5e:	eb05 0308 	add.w	r3, r5, r8
 8001a62:	2b7f      	cmp	r3, #127	; 0x7f
 8001a64:	dd08      	ble.n	8001a78 <ST7735_WriteString+0x64>
            y += font.height;
 8001a66:	443e      	add	r6, r7
 8001a68:	b2b6      	uxth	r6, r6
            if(y + font.height >= ST7735_HEIGHT) {
 8001a6a:	19f3      	adds	r3, r6, r7
 8001a6c:	2b9f      	cmp	r3, #159	; 0x9f
 8001a6e:	dcef      	bgt.n	8001a50 <ST7735_WriteString+0x3c>
            if(*str == ' ') {
 8001a70:	2c20      	cmp	r4, #32
            x = 0;
 8001a72:	f04f 0500 	mov.w	r5, #0
            if(*str == ' ') {
 8001a76:	d0e6      	beq.n	8001a46 <ST7735_WriteString+0x32>
    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8001a78:	b2e8      	uxtb	r0, r5
 8001a7a:	b2f1      	uxtb	r1, r6
 8001a7c:	1e7b      	subs	r3, r7, #1
 8001a7e:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8001a82:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
 8001a86:	440b      	add	r3, r1
 8001a88:	4402      	add	r2, r0
        b = font.data[(ch - 32) * font.height + i];
 8001a8a:	3c20      	subs	r4, #32
    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	b2d2      	uxtb	r2, r2
        b = font.data[(ch - 32) * font.height + i];
 8001a90:	437c      	muls	r4, r7
    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8001a92:	f7ff ff1f 	bl	80018d4 <ST7735_SetAddressWindow>
 8001a96:	eb0b 0344 	add.w	r3, fp, r4, lsl #1
 8001a9a:	9302      	str	r3, [sp, #8]
    for(i = 0; i < font.height; i++) {
 8001a9c:	f04f 0b00 	mov.w	fp, #0
 8001aa0:	45bb      	cmp	fp, r7
 8001aa2:	d302      	bcc.n	8001aaa <ST7735_WriteString+0x96>
        x += font.width;
 8001aa4:	4445      	add	r5, r8
 8001aa6:	b2ad      	uxth	r5, r5
 8001aa8:	e7cd      	b.n	8001a46 <ST7735_WriteString+0x32>
        b = font.data[(ch - 32) * font.height + i];
 8001aaa:	9b02      	ldr	r3, [sp, #8]
 8001aac:	f833 301b 	ldrh.w	r3, [r3, fp, lsl #1]
 8001ab0:	9303      	str	r3, [sp, #12]
        for(j = 0; j < font.width; j++) {
 8001ab2:	2400      	movs	r4, #0
 8001ab4:	4544      	cmp	r4, r8
 8001ab6:	d302      	bcc.n	8001abe <ST7735_WriteString+0xaa>
    for(i = 0; i < font.height; i++) {
 8001ab8:	f10b 0b01 	add.w	fp, fp, #1
 8001abc:	e7f0      	b.n	8001aa0 <ST7735_WriteString+0x8c>
            if((b << j) & 0x8000)  {
 8001abe:	9b03      	ldr	r3, [sp, #12]
 8001ac0:	fa03 f104 	lsl.w	r1, r3, r4
 8001ac4:	040b      	lsls	r3, r1, #16
                uint8_t data[] = { color >> 8, color & 0xFF };
 8001ac6:	bf4a      	itet	mi
 8001ac8:	f89d 3010 	ldrbmi.w	r3, [sp, #16]
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8001acc:	f89d 3014 	ldrbpl.w	r3, [sp, #20]
                uint8_t data[] = { color >> 8, color & 0xFF };
 8001ad0:	f88d 301c 	strbmi.w	r3, [sp, #28]
                ST7735_WriteData(data, sizeof(data));
 8001ad4:	f04f 0102 	mov.w	r1, #2
 8001ad8:	a807      	add	r0, sp, #28
                uint8_t data[] = { color >> 8, color & 0xFF };
 8001ada:	bf4e      	itee	mi
 8001adc:	f88d 901d 	strbmi.w	r9, [sp, #29]
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8001ae0:	f88d 301c 	strbpl.w	r3, [sp, #28]
 8001ae4:	f88d a01d 	strbpl.w	sl, [sp, #29]
        for(j = 0; j < font.width; j++) {
 8001ae8:	3401      	adds	r4, #1
                ST7735_WriteData(data, sizeof(data));
 8001aea:	f7ff febb 	bl	8001864 <ST7735_WriteData>
 8001aee:	e7e1      	b.n	8001ab4 <ST7735_WriteString+0xa0>

08001af0 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color) {
 8001af0:	b507      	push	{r0, r1, r2, lr}
 8001af2:	2100      	movs	r1, #0
 8001af4:	9000      	str	r0, [sp, #0]
 8001af6:	23a0      	movs	r3, #160	; 0xa0
 8001af8:	2280      	movs	r2, #128	; 0x80
 8001afa:	4608      	mov	r0, r1
 8001afc:	f7ff ff1a 	bl	8001934 <ST7735_FillRectangle.part.1>
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
}
 8001b00:	b003      	add	sp, #12
 8001b02:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001b08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b08:	b530      	push	{r4, r5, lr}
 8001b0a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b0c:	2230      	movs	r2, #48	; 0x30
 8001b0e:	2100      	movs	r1, #0
 8001b10:	a808      	add	r0, sp, #32
 8001b12:	f000 fadf 	bl	80020d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b16:	2100      	movs	r1, #0
 8001b18:	2214      	movs	r2, #20
 8001b1a:	a803      	add	r0, sp, #12
 8001b1c:	f000 fada 	bl	80020d4 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b20:	2400      	movs	r4, #0
 8001b22:	4b1c      	ldr	r3, [pc, #112]	; (8001b94 <SystemClock_Config+0x8c>)
 8001b24:	9401      	str	r4, [sp, #4]
 8001b26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b28:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b2c:	641a      	str	r2, [r3, #64]	; 0x40
 8001b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b34:	9301      	str	r3, [sp, #4]
 8001b36:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b38:	4b17      	ldr	r3, [pc, #92]	; (8001b98 <SystemClock_Config+0x90>)
 8001b3a:	9402      	str	r4, [sp, #8]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b46:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b4c:	9302      	str	r3, [sp, #8]
 8001b4e:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b50:	2301      	movs	r3, #1
 8001b52:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b54:	2310      	movs	r3, #16
 8001b56:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b58:	2308      	movs	r3, #8
 8001b5a:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001b5c:	2364      	movs	r3, #100	; 0x64
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b5e:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001b60:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b62:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001b64:	2304      	movs	r3, #4
 8001b66:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b68:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b6a:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b6c:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b6e:	f7fe ff8d 	bl	8000a8c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b72:	230f      	movs	r3, #15
 8001b74:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b76:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b7a:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001b7c:	2103      	movs	r1, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001b82:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b84:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b86:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b88:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001b8a:	f7ff f953 	bl	8000e34 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001b8e:	b015      	add	sp, #84	; 0x54
 8001b90:	bd30      	pop	{r4, r5, pc}
 8001b92:	bf00      	nop
 8001b94:	40023800 	.word	0x40023800
 8001b98:	40007000 	.word	0x40007000

08001b9c <main>:
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b08c      	sub	sp, #48	; 0x30
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba0:	2400      	movs	r4, #0
 8001ba2:	4d74      	ldr	r5, [pc, #464]	; (8001d74 <main+0x1d8>)
  HAL_Init();
 8001ba4:	f7fe fc98 	bl	80004d8 <HAL_Init>
  SystemClock_Config();
 8001ba8:	f7ff ffae 	bl	8001b08 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bac:	2214      	movs	r2, #20
 8001bae:	2100      	movs	r1, #0
 8001bb0:	a807      	add	r0, sp, #28
 8001bb2:	f000 fa8f 	bl	80020d4 <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb6:	9404      	str	r4, [sp, #16]
 8001bb8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001bba:	486f      	ldr	r0, [pc, #444]	; (8001d78 <main+0x1dc>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	632b      	str	r3, [r5, #48]	; 0x30
 8001bc2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001bc4:	f003 0301 	and.w	r3, r3, #1
 8001bc8:	9304      	str	r3, [sp, #16]
 8001bca:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bcc:	9405      	str	r4, [sp, #20]
 8001bce:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001bd0:	f043 0308 	orr.w	r3, r3, #8
 8001bd4:	632b      	str	r3, [r5, #48]	; 0x30
 8001bd6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001bd8:	f003 0308 	and.w	r3, r3, #8
 8001bdc:	9305      	str	r3, [sp, #20]
 8001bde:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001be0:	9406      	str	r4, [sp, #24]
 8001be2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001be4:	f043 0304 	orr.w	r3, r3, #4
 8001be8:	632b      	str	r3, [r5, #48]	; 0x30
 8001bea:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001bec:	f003 0304 	and.w	r3, r3, #4
 8001bf0:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	2110      	movs	r1, #16
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bf6:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001bf8:	f7fe ff42 	bl	8000a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 8001bfc:	4622      	mov	r2, r4
 8001bfe:	f24f 0102 	movw	r1, #61442	; 0xf002
 8001c02:	485e      	ldr	r0, [pc, #376]	; (8001d7c <main+0x1e0>)
 8001c04:	f7fe ff3c 	bl	8000a80 <HAL_GPIO_WritePin>
                          |GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8001c08:	4622      	mov	r2, r4
 8001c0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c0e:	485c      	ldr	r0, [pc, #368]	; (8001d80 <main+0x1e4>)
 8001c10:	f7fe ff36 	bl	8000a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c14:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c16:	2710      	movs	r7, #16
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c18:	f04f 0803 	mov.w	r8, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1c:	a907      	add	r1, sp, #28
 8001c1e:	4856      	ldr	r0, [pc, #344]	; (8001d78 <main+0x1dc>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c20:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c22:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c24:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c26:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c2a:	f7fe fe49 	bl	80008c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001c2e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c32:	a907      	add	r1, sp, #28
 8001c34:	4851      	ldr	r0, [pc, #324]	; (8001d7c <main+0x1e0>)
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001c36:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c38:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3c:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c3e:	f7fe fe3f 	bl	80008c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c42:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c46:	a907      	add	r1, sp, #28
 8001c48:	484d      	ldr	r0, [pc, #308]	; (8001d80 <main+0x1e4>)
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c4a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c4c:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c50:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c54:	f7fe fe34 	bl	80008c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001c58:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c5a:	a907      	add	r1, sp, #28
 8001c5c:	4847      	ldr	r0, [pc, #284]	; (8001d7c <main+0x1e0>)
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001c5e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c60:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c62:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c64:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c66:	f7fe fe2b 	bl	80008c0 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c6a:	9407      	str	r4, [sp, #28]
 8001c6c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001c6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c72:	632b      	str	r3, [r5, #48]	; 0x30
 8001c74:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001c76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001c7a:	4622      	mov	r2, r4
 8001c7c:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c7e:	9307      	str	r3, [sp, #28]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001c80:	4638      	mov	r0, r7
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c82:	9b07      	ldr	r3, [sp, #28]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001c84:	f7fe fc7a 	bl	800057c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001c88:	4638      	mov	r0, r7
 8001c8a:	f7fe fcab 	bl	80005e4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001c8e:	4621      	mov	r1, r4
 8001c90:	4622      	mov	r2, r4
 8001c92:	2011      	movs	r0, #17
 8001c94:	f7fe fc72 	bl	800057c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001c98:	2011      	movs	r0, #17
 8001c9a:	f7fe fca3 	bl	80005e4 <HAL_NVIC_EnableIRQ>
  huart2.Instance = USART2;
 8001c9e:	4839      	ldr	r0, [pc, #228]	; (8001d84 <main+0x1e8>)
  huart2.Init.BaudRate = 115200;
 8001ca0:	4a39      	ldr	r2, [pc, #228]	; (8001d88 <main+0x1ec>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ca2:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 8001ca4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001ca8:	e880 000c 	stmia.w	r0, {r2, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cac:	230c      	movs	r3, #12
 8001cae:	6143      	str	r3, [r0, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cb0:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cb2:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cb4:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cb6:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cb8:	f7ff fc9a 	bl	80015f0 <HAL_UART_Init>
  hspi3.Instance = SPI3;
 8001cbc:	4833      	ldr	r0, [pc, #204]	; (8001d8c <main+0x1f0>)
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8001cbe:	4934      	ldr	r1, [pc, #208]	; (8001d90 <main+0x1f4>)
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cc0:	60c4      	str	r4, [r0, #12]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8001cc2:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001cc6:	f44f 4500 	mov.w	r5, #32768	; 0x8000
 8001cca:	e880 002a 	stmia.w	r0, {r1, r3, r5}
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001cce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cd2:	6183      	str	r3, [r0, #24]
  hspi3.Init.CRCPolynomial = 10;
 8001cd4:	230a      	movs	r3, #10
 8001cd6:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cd8:	6104      	str	r4, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cda:	6144      	str	r4, [r0, #20]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cdc:	61c4      	str	r4, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cde:	6204      	str	r4, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ce0:	6244      	str	r4, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ce2:	6284      	str	r4, [r0, #40]	; 0x28
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001ce4:	f7ff f9ea 	bl	80010bc <HAL_SPI_Init>
  ST7735_Init();
 8001ce8:	f7ff fe6e 	bl	80019c8 <ST7735_Init>
	ST7735_FillScreen(ST7735_RED);
 8001cec:	f44f 4678 	mov.w	r6, #63488	; 0xf800
	ST7735_FillScreen(ST7735_BLUE);
 8001cf0:	251f      	movs	r5, #31
	ST7735_FillScreen(ST7735_RED);
 8001cf2:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001cf6:	f7ff fefb 	bl	8001af0 <ST7735_FillScreen>
	HAL_Delay(200);
 8001cfa:	20c8      	movs	r0, #200	; 0xc8
 8001cfc:	f7fe fc18 	bl	8000530 <HAL_Delay>
	ST7735_FillScreen(ST7735_BLUE);
 8001d00:	201f      	movs	r0, #31
 8001d02:	f7ff fef5 	bl	8001af0 <ST7735_FillScreen>
	HAL_Delay(200);
 8001d06:	20c8      	movs	r0, #200	; 0xc8
 8001d08:	f7fe fc12 	bl	8000530 <HAL_Delay>
	ST7735_FillScreen(ST7735_GREEN);
 8001d0c:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8001d10:	f7ff feee 	bl	8001af0 <ST7735_FillScreen>
	HAL_Delay(200);
 8001d14:	20c8      	movs	r0, #200	; 0xc8
 8001d16:	f7fe fc0b 	bl	8000530 <HAL_Delay>
	ST7735_FillScreen(ST7735_BLACK);
 8001d1a:	2000      	movs	r0, #0
 8001d1c:	f7ff fee8 	bl	8001af0 <ST7735_FillScreen>
	    ST7735_WriteString(0, 0, "Font_7x10, red on black, lorem ipsum dolor sit amet", Font_7x10, ST7735_RED, ST7735_BLACK);
 8001d20:	2400      	movs	r4, #0
 8001d22:	4b1c      	ldr	r3, [pc, #112]	; (8001d94 <main+0x1f8>)
 8001d24:	9402      	str	r4, [sp, #8]
 8001d26:	9601      	str	r6, [sp, #4]
 8001d28:	685a      	ldr	r2, [r3, #4]
 8001d2a:	9200      	str	r2, [sp, #0]
 8001d2c:	4621      	mov	r1, r4
 8001d2e:	4620      	mov	r0, r4
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a19      	ldr	r2, [pc, #100]	; (8001d98 <main+0x1fc>)
 8001d34:	f7ff fe6e 	bl	8001a14 <ST7735_WriteString>
	    ST7735_WriteString(0, 3*10, "Font_11x18, green, lorem ipsum", Font_11x18, ST7735_GREEN, ST7735_BLACK);
 8001d38:	4b18      	ldr	r3, [pc, #96]	; (8001d9c <main+0x200>)
 8001d3a:	9402      	str	r4, [sp, #8]
 8001d3c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001d40:	9201      	str	r2, [sp, #4]
 8001d42:	685a      	ldr	r2, [r3, #4]
 8001d44:	9200      	str	r2, [sp, #0]
 8001d46:	4620      	mov	r0, r4
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a15      	ldr	r2, [pc, #84]	; (8001da0 <main+0x204>)
 8001d4c:	211e      	movs	r1, #30
 8001d4e:	f7ff fe61 	bl	8001a14 <ST7735_WriteString>
	    ST7735_WriteString(0, 3*10+3*18, "Font_16x26", Font_16x26, ST7735_BLUE, ST7735_BLACK);
 8001d52:	4b14      	ldr	r3, [pc, #80]	; (8001da4 <main+0x208>)
 8001d54:	9402      	str	r4, [sp, #8]
 8001d56:	9501      	str	r5, [sp, #4]
 8001d58:	685a      	ldr	r2, [r3, #4]
 8001d5a:	9200      	str	r2, [sp, #0]
 8001d5c:	4620      	mov	r0, r4
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a11      	ldr	r2, [pc, #68]	; (8001da8 <main+0x20c>)
 8001d62:	2154      	movs	r1, #84	; 0x54
 8001d64:	f7ff fe56 	bl	8001a14 <ST7735_WriteString>
	HAL_Delay(10000);
 8001d68:	f242 7010 	movw	r0, #10000	; 0x2710
 8001d6c:	f7fe fbe0 	bl	8000530 <HAL_Delay>
 8001d70:	e7bf      	b.n	8001cf2 <main+0x156>
 8001d72:	bf00      	nop
 8001d74:	40023800 	.word	0x40023800
 8001d78:	40020000 	.word	0x40020000
 8001d7c:	40020c00 	.word	0x40020c00
 8001d80:	40020800 	.word	0x40020800
 8001d84:	2000015c 	.word	0x2000015c
 8001d88:	40004400 	.word	0x40004400
 8001d8c:	200000a4 	.word	0x200000a4
 8001d90:	40003c00 	.word	0x40003c00
 8001d94:	20000018 	.word	0x20000018
 8001d98:	0800498b 	.word	0x0800498b
 8001d9c:	20000008 	.word	0x20000008
 8001da0:	080049bf 	.word	0x080049bf
 8001da4:	20000010 	.word	0x20000010
 8001da8:	080049de 	.word	0x080049de

08001dac <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001dac:	6802      	ldr	r2, [r0, #0]
 8001dae:	4b03      	ldr	r3, [pc, #12]	; (8001dbc <HAL_TIM_PeriodElapsedCallback+0x10>)
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d101      	bne.n	8001db8 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8001db4:	f7fe bbaa 	b.w	800050c <HAL_IncTick>
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	40001000 	.word	0x40001000

08001dc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dc0:	4770      	bx	lr
	...

08001dc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dc4:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dc6:	4b0c      	ldr	r3, [pc, #48]	; (8001df8 <HAL_MspInit+0x34>)
 8001dc8:	2100      	movs	r1, #0
 8001dca:	9100      	str	r1, [sp, #0]
 8001dcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001dce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001dd2:	645a      	str	r2, [r3, #68]	; 0x44
 8001dd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001dd6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001dda:	9200      	str	r2, [sp, #0]
 8001ddc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dde:	9101      	str	r1, [sp, #4]
 8001de0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001de2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001de6:	641a      	str	r2, [r3, #64]	; 0x40
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dee:	9301      	str	r3, [sp, #4]
 8001df0:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001df2:	b002      	add	sp, #8
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	40023800 	.word	0x40023800

08001dfc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001dfc:	b510      	push	{r4, lr}
 8001dfe:	4604      	mov	r4, r0
 8001e00:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e02:	2214      	movs	r2, #20
 8001e04:	2100      	movs	r1, #0
 8001e06:	a803      	add	r0, sp, #12
 8001e08:	f000 f964 	bl	80020d4 <memset>
  if(hspi->Instance==SPI3)
 8001e0c:	6822      	ldr	r2, [r4, #0]
 8001e0e:	4b14      	ldr	r3, [pc, #80]	; (8001e60 <HAL_SPI_MspInit+0x64>)
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d123      	bne.n	8001e5c <HAL_SPI_MspInit+0x60>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001e14:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 8001e18:	2100      	movs	r1, #0
 8001e1a:	9101      	str	r1, [sp, #4]
 8001e1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e1e:	4811      	ldr	r0, [pc, #68]	; (8001e64 <HAL_SPI_MspInit+0x68>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001e20:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e24:	641a      	str	r2, [r3, #64]	; 0x40
 8001e26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e28:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8001e2c:	9201      	str	r2, [sp, #4]
 8001e2e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e30:	9102      	str	r1, [sp, #8]
 8001e32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e34:	f042 0204 	orr.w	r2, r2, #4
 8001e38:	631a      	str	r2, [r3, #48]	; 0x30
 8001e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3c:	f003 0304 	and.w	r3, r3, #4
 8001e40:	9302      	str	r3, [sp, #8]
 8001e42:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001e44:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001e48:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e52:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e54:	2306      	movs	r3, #6
 8001e56:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e58:	f7fe fd32 	bl	80008c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001e5c:	b008      	add	sp, #32
 8001e5e:	bd10      	pop	{r4, pc}
 8001e60:	40003c00 	.word	0x40003c00
 8001e64:	40020800 	.word	0x40020800

08001e68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e68:	b570      	push	{r4, r5, r6, lr}
 8001e6a:	4606      	mov	r6, r0
 8001e6c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e6e:	2214      	movs	r2, #20
 8001e70:	2100      	movs	r1, #0
 8001e72:	a803      	add	r0, sp, #12
 8001e74:	f000 f92e 	bl	80020d4 <memset>
  if(huart->Instance==USART2)
 8001e78:	6832      	ldr	r2, [r6, #0]
 8001e7a:	4b33      	ldr	r3, [pc, #204]	; (8001f48 <HAL_UART_MspInit+0xe0>)
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d160      	bne.n	8001f42 <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e80:	2500      	movs	r5, #0
 8001e82:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8001e86:	9501      	str	r5, [sp, #4]
 8001e88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e8a:	4830      	ldr	r0, [pc, #192]	; (8001f4c <HAL_UART_MspInit+0xe4>)

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001e8c:	4c30      	ldr	r4, [pc, #192]	; (8001f50 <HAL_UART_MspInit+0xe8>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e8e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001e92:	641a      	str	r2, [r3, #64]	; 0x40
 8001e94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e96:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001e9a:	9201      	str	r2, [sp, #4]
 8001e9c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e9e:	9502      	str	r5, [sp, #8]
 8001ea0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ea2:	f042 0201 	orr.w	r2, r2, #1
 8001ea6:	631a      	str	r2, [r3, #48]	; 0x30
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	9302      	str	r3, [sp, #8]
 8001eb0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001eb2:	230c      	movs	r3, #12
 8001eb4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ebe:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ec0:	2307      	movs	r3, #7
 8001ec2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec4:	f7fe fcfc 	bl	80008c0 <HAL_GPIO_Init>
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ec8:	4b22      	ldr	r3, [pc, #136]	; (8001f54 <HAL_UART_MspInit+0xec>)
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001eca:	60e5      	str	r5, [r4, #12]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ecc:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
 8001ed0:	f04f 0e40 	mov.w	lr, #64	; 0x40
 8001ed4:	e884 5008 	stmia.w	r4, {r3, ip, lr}
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ed8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001edc:	6123      	str	r3, [r4, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001ede:	4620      	mov	r0, r4
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001ee0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ee4:	6165      	str	r5, [r4, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ee6:	61a5      	str	r5, [r4, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001ee8:	61e5      	str	r5, [r4, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001eea:	6223      	str	r3, [r4, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001eec:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001eee:	f7fe fb9d 	bl	800062c <HAL_DMA_Init>
 8001ef2:	b108      	cbz	r0, 8001ef8 <HAL_UART_MspInit+0x90>
    {
      Error_Handler();
 8001ef4:	f7ff ff64 	bl	8001dc0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001ef8:	6334      	str	r4, [r6, #48]	; 0x30

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001efa:	4817      	ldr	r0, [pc, #92]	; (8001f58 <HAL_UART_MspInit+0xf0>)
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001efc:	63a6      	str	r6, [r4, #56]	; 0x38
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001efe:	4c17      	ldr	r4, [pc, #92]	; (8001f5c <HAL_UART_MspInit+0xf4>)
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001f00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f04:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001f08:	e884 0009 	stmia.w	r4, {r0, r3}
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f0c:	6122      	str	r2, [r4, #16]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f0e:	2300      	movs	r3, #0
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001f10:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001f14:	4620      	mov	r0, r4
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f16:	60a3      	str	r3, [r4, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f18:	60e3      	str	r3, [r4, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f1a:	6163      	str	r3, [r4, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f1c:	61a3      	str	r3, [r4, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001f1e:	61e3      	str	r3, [r4, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001f20:	6222      	str	r2, [r4, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f22:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001f24:	f7fe fb82 	bl	800062c <HAL_DMA_Init>
 8001f28:	b108      	cbz	r0, 8001f2e <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8001f2a:	f7ff ff49 	bl	8001dc0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f2e:	2200      	movs	r2, #0
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001f30:	6374      	str	r4, [r6, #52]	; 0x34
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f32:	2026      	movs	r0, #38	; 0x26
 8001f34:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001f36:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f38:	f7fe fb20 	bl	800057c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f3c:	2026      	movs	r0, #38	; 0x26
 8001f3e:	f7fe fb51 	bl	80005e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f42:	b008      	add	sp, #32
 8001f44:	bd70      	pop	{r4, r5, r6, pc}
 8001f46:	bf00      	nop
 8001f48:	40004400 	.word	0x40004400
 8001f4c:	40020000 	.word	0x40020000
 8001f50:	200000fc 	.word	0x200000fc
 8001f54:	400260a0 	.word	0x400260a0
 8001f58:	40026088 	.word	0x40026088
 8001f5c:	20000044 	.word	0x20000044

08001f60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f60:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8001f62:	4601      	mov	r1, r0
{
 8001f64:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8001f66:	2200      	movs	r2, #0
 8001f68:	2036      	movs	r0, #54	; 0x36
 8001f6a:	f7fe fb07 	bl	800057c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8001f6e:	2036      	movs	r0, #54	; 0x36
 8001f70:	f7fe fb38 	bl	80005e4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001f74:	2500      	movs	r5, #0
 8001f76:	4b15      	ldr	r3, [pc, #84]	; (8001fcc <HAL_InitTick+0x6c>)
 8001f78:	9502      	str	r5, [sp, #8]
 8001f7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001f7c:	4c14      	ldr	r4, [pc, #80]	; (8001fd0 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001f7e:	f042 0210 	orr.w	r2, r2, #16
 8001f82:	641a      	str	r2, [r3, #64]	; 0x40
 8001f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f86:	f003 0310 	and.w	r3, r3, #16
 8001f8a:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f8c:	a901      	add	r1, sp, #4
 8001f8e:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001f90:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f92:	f7ff f80b 	bl	8000fac <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001f96:	f7fe ffe9 	bl	8000f6c <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 8001f9a:	4b0e      	ldr	r3, [pc, #56]	; (8001fd4 <HAL_InitTick+0x74>)
 8001f9c:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001f9e:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001fa2:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001fa4:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001fa6:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <HAL_InitTick+0x78>)
 8001fa8:	fbb0 f0f3 	udiv	r0, r0, r3
 8001fac:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 8001fae:	6060      	str	r0, [r4, #4]
  htim6.Init.ClockDivision = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001fb0:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8001fb2:	6125      	str	r5, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fb4:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001fb6:	f7ff fa83 	bl	80014c0 <HAL_TIM_Base_Init>
 8001fba:	b920      	cbnz	r0, 8001fc6 <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001fbc:	4620      	mov	r0, r4
 8001fbe:	f7ff f963 	bl	8001288 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8001fc2:	b009      	add	sp, #36	; 0x24
 8001fc4:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 8001fc6:	2001      	movs	r0, #1
 8001fc8:	e7fb      	b.n	8001fc2 <HAL_InitTick+0x62>
 8001fca:	bf00      	nop
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	200001a0 	.word	0x200001a0
 8001fd4:	40001000 	.word	0x40001000
 8001fd8:	000f4240 	.word	0x000f4240

08001fdc <NMI_Handler>:
 8001fdc:	4770      	bx	lr

08001fde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fde:	e7fe      	b.n	8001fde <HardFault_Handler>

08001fe0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fe0:	e7fe      	b.n	8001fe0 <MemManage_Handler>

08001fe2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fe2:	e7fe      	b.n	8001fe2 <BusFault_Handler>

08001fe4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fe4:	e7fe      	b.n	8001fe4 <UsageFault_Handler>

08001fe6 <SVC_Handler>:
 8001fe6:	4770      	bx	lr

08001fe8 <DebugMon_Handler>:
 8001fe8:	4770      	bx	lr

08001fea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fea:	4770      	bx	lr

08001fec <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001fec:	4801      	ldr	r0, [pc, #4]	; (8001ff4 <DMA1_Stream5_IRQHandler+0x8>)
 8001fee:	f7fe bbad 	b.w	800074c <HAL_DMA_IRQHandler>
 8001ff2:	bf00      	nop
 8001ff4:	20000044 	.word	0x20000044

08001ff8 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001ff8:	4801      	ldr	r0, [pc, #4]	; (8002000 <DMA1_Stream6_IRQHandler+0x8>)
 8001ffa:	f7fe bba7 	b.w	800074c <HAL_DMA_IRQHandler>
 8001ffe:	bf00      	nop
 8002000:	200000fc 	.word	0x200000fc

08002004 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002004:	4801      	ldr	r0, [pc, #4]	; (800200c <USART2_IRQHandler+0x8>)
 8002006:	f7ff bb63 	b.w	80016d0 <HAL_UART_IRQHandler>
 800200a:	bf00      	nop
 800200c:	2000015c 	.word	0x2000015c

08002010 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002010:	4801      	ldr	r0, [pc, #4]	; (8002018 <TIM6_DAC_IRQHandler+0x8>)
 8002012:	f7ff b94d 	b.w	80012b0 <HAL_TIM_IRQHandler>
 8002016:	bf00      	nop
 8002018:	200001a0 	.word	0x200001a0

0800201c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800201c:	4b05      	ldr	r3, [pc, #20]	; (8002034 <SystemInit+0x18>)
 800201e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002022:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002026:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800202a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	e000ed00 	.word	0xe000ed00

08002038 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002038:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002070 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800203c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800203e:	e003      	b.n	8002048 <LoopCopyDataInit>

08002040 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002040:	4b0c      	ldr	r3, [pc, #48]	; (8002074 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002042:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002044:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002046:	3104      	adds	r1, #4

08002048 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002048:	480b      	ldr	r0, [pc, #44]	; (8002078 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800204a:	4b0c      	ldr	r3, [pc, #48]	; (800207c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800204c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800204e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002050:	d3f6      	bcc.n	8002040 <CopyDataInit>
  ldr  r2, =_sbss
 8002052:	4a0b      	ldr	r2, [pc, #44]	; (8002080 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002054:	e002      	b.n	800205c <LoopFillZerobss>

08002056 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002056:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002058:	f842 3b04 	str.w	r3, [r2], #4

0800205c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800205c:	4b09      	ldr	r3, [pc, #36]	; (8002084 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800205e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002060:	d3f9      	bcc.n	8002056 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002062:	f7ff ffdb 	bl	800201c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002066:	f000 f811 	bl	800208c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800206a:	f7ff fd97 	bl	8001b9c <main>
  bx  lr    
 800206e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002070:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002074:	08004a14 	.word	0x08004a14
  ldr  r0, =_sdata
 8002078:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800207c:	20000024 	.word	0x20000024
  ldr  r2, =_sbss
 8002080:	20000024 	.word	0x20000024
  ldr  r3, = _ebss
 8002084:	200001e0 	.word	0x200001e0

08002088 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002088:	e7fe      	b.n	8002088 <ADC_IRQHandler>
	...

0800208c <__libc_init_array>:
 800208c:	b570      	push	{r4, r5, r6, lr}
 800208e:	4e0d      	ldr	r6, [pc, #52]	; (80020c4 <__libc_init_array+0x38>)
 8002090:	4c0d      	ldr	r4, [pc, #52]	; (80020c8 <__libc_init_array+0x3c>)
 8002092:	1ba4      	subs	r4, r4, r6
 8002094:	10a4      	asrs	r4, r4, #2
 8002096:	2500      	movs	r5, #0
 8002098:	42a5      	cmp	r5, r4
 800209a:	d109      	bne.n	80020b0 <__libc_init_array+0x24>
 800209c:	4e0b      	ldr	r6, [pc, #44]	; (80020cc <__libc_init_array+0x40>)
 800209e:	4c0c      	ldr	r4, [pc, #48]	; (80020d0 <__libc_init_array+0x44>)
 80020a0:	f000 f820 	bl	80020e4 <_init>
 80020a4:	1ba4      	subs	r4, r4, r6
 80020a6:	10a4      	asrs	r4, r4, #2
 80020a8:	2500      	movs	r5, #0
 80020aa:	42a5      	cmp	r5, r4
 80020ac:	d105      	bne.n	80020ba <__libc_init_array+0x2e>
 80020ae:	bd70      	pop	{r4, r5, r6, pc}
 80020b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80020b4:	4798      	blx	r3
 80020b6:	3501      	adds	r5, #1
 80020b8:	e7ee      	b.n	8002098 <__libc_init_array+0xc>
 80020ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80020be:	4798      	blx	r3
 80020c0:	3501      	adds	r5, #1
 80020c2:	e7f2      	b.n	80020aa <__libc_init_array+0x1e>
 80020c4:	08004a0c 	.word	0x08004a0c
 80020c8:	08004a0c 	.word	0x08004a0c
 80020cc:	08004a0c 	.word	0x08004a0c
 80020d0:	08004a10 	.word	0x08004a10

080020d4 <memset>:
 80020d4:	4402      	add	r2, r0
 80020d6:	4603      	mov	r3, r0
 80020d8:	4293      	cmp	r3, r2
 80020da:	d100      	bne.n	80020de <memset+0xa>
 80020dc:	4770      	bx	lr
 80020de:	f803 1b01 	strb.w	r1, [r3], #1
 80020e2:	e7f9      	b.n	80020d8 <memset+0x4>

080020e4 <_init>:
 80020e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020e6:	bf00      	nop
 80020e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020ea:	bc08      	pop	{r3}
 80020ec:	469e      	mov	lr, r3
 80020ee:	4770      	bx	lr

080020f0 <_fini>:
 80020f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020f2:	bf00      	nop
 80020f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020f6:	bc08      	pop	{r3}
 80020f8:	469e      	mov	lr, r3
 80020fa:	4770      	bx	lr
